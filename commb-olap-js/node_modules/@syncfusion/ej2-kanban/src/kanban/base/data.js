/* eslint-disable @typescript-eslint/no-explicit-any */
import { extend } from '@syncfusion/ej2-base';
import { DataManager, Query } from '@syncfusion/ej2-data';
import * as events from './constant';
/**
 * Kanban data module
 */
var Data = /** @class */ (function () {
    /**
     * Constructor for data module
     *
     * @param {Kanban} parent Accepts the instance of the Kanban
     */
    function Data(parent) {
        this.parent = parent;
        this.keyField = this.parent.cardSettings.headerField;
        this.initDataManager(parent.dataSource, parent.query);
        this.refreshDataManager();
    }
    /**
     * The function used to initialize dataManager and query
     *
     * @param {Object[] | DataManager} dataSource Accepts the dataSource as collection of objects or Datamanager instance.
     * @param {Query} query Accepts the query to process the data from collections.
     * @returns {void}
     * @private
     */
    Data.prototype.initDataManager = function (dataSource, query) {
        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);
        this.query = query instanceof Query ? query : new Query();
        this.kanbanData = new DataManager(this.parent.kanbanData);
    };
    /**
     * The function used to generate updated Query from schedule model
     *
     * @returns {void}
     * @private
     */
    Data.prototype.getQuery = function () {
        return this.query.clone();
    };
    /**
     * The function used to get dataSource by executing given Query
     *
     * @param  {Query} query - A Query that specifies to generate dataSource
     * @returns {void}
     * @private
     */
    Data.prototype.getData = function (query) {
        return this.dataManager.executeQuery(query);
    };
    /**
     * The function used to get the table name from the given Query
     *
     * @returns {string} Returns the table name.
     * @private
     */
    Data.prototype.getTable = function () {
        if (this.parent.query) {
            var query = this.getQuery();
            return query.fromTable;
        }
        else {
            return null;
        }
    };
    /**
     * The function is used to send the request and get response from datamanager
     *
     * @returns {void}
     * @private
     */
    Data.prototype.refreshDataManager = function () {
        var _this = this;
        var dataManager = this.getData(this.getQuery());
        dataManager.then(function (e) { return _this.dataManagerSuccess(e); }).catch(function (e) { return _this.dataManagerFailure(e); });
    };
    /**
     * The function is used to handle the success response from dataManager
     *
     * @param {ReturnType} e Accepts the dataManager success result
     * @returns {void}
     * @private
     */
    Data.prototype.dataManagerSuccess = function (e, type) {
        var _this = this;
        if (this.parent.isDestroyed) {
            return;
        }
        if (type) {
            var resultData = extend([], e.result, null, true);
            this.parent.kanbanData = resultData;
        }
        else {
            this.parent.trigger(events.dataBinding, e, function (args) {
                var resultData = extend([], args.result, null, true);
                _this.parent.kanbanData = resultData;
                _this.parent.notify(events.dataReady, { processedData: resultData });
                _this.parent.trigger(events.dataBound, null, function () { return _this.parent.hideSpinner(); });
            });
        }
    };
    /**
     * The function is used to handle the failure response from dataManager
     *
     * @param {ReturnType} e Accepts the dataManager failure result
     * @returns {void}
     * @private
     */
    Data.prototype.dataManagerFailure = function (e) {
        var _this = this;
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.trigger(events.actionFailure, { error: e }, function () { return _this.parent.hideSpinner(); });
    };
    /**
     * The function is used to perform the insert, update, delete and batch actions in datamanager
     *
     * @param {string} updateType Accepts the update type action
     * @param {SaveChanges} params Accepts the savechanges params
     * @param {string} type Accepts the requestType as string
     * @param {Object} data Accepts the data to perform crud action
     * @param {number} index Accepts the index to refresh the data into UI
     * @returns {void}
     * @private
     */
    Data.prototype.updateDataManager = function (updateType, params, type, data, index) {
        var _this = this;
        this.parent.showSpinner();
        var promise;
        var actionArgs = {
            requestType: type, cancel: false, addedRecords: params.addedRecords,
            changedRecords: params.changedRecords, deletedRecords: params.deletedRecords
        };
        this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {
            if (!offlineArgs.cancel) {
                switch (updateType) {
                    case 'insert':
                        promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery());
                        break;
                    case 'update':
                        promise = _this.dataManager.update(_this.keyField, data, _this.getTable(), _this.getQuery());
                        break;
                    case 'delete':
                        promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());
                        break;
                    case 'batch':
                        promise = _this.dataManager.saveChanges(params, _this.keyField, _this.getTable(), _this.getQuery());
                        break;
                }
                if (_this.dataManager.dataSource.offline) {
                    _this.kanbanData = _this.dataManager;
                    _this.parent.kanbanData = _this.dataManager.dataSource.json;
                    _this.refreshUI(offlineArgs, index);
                }
                else {
                    promise.then(function (e) {
                        if (_this.parent.isDestroyed) {
                            return;
                        }
                        var dataManager = _this.getData(_this.getQuery());
                        dataManager.then(function (e) { return _this.dataManagerSuccess(e, 'DataSourceChange'); }).catch(function (e) { return _this.dataManagerFailure(e); });
                        if (offlineArgs.requestType === "cardCreated") {
                            if (!Array.isArray(e)) {
                                offlineArgs.addedRecords[0] = extend(offlineArgs.addedRecords[0], e);
                            }
                            else {
                                _this.modifyArrayData(offlineArgs.addedRecords, e);
                            }
                        }
                        else if (offlineArgs.requestType === "cardChanged") {
                            if (!Array.isArray(e)) {
                                offlineArgs.changedRecords[0] = extend(offlineArgs.changedRecords[0], e);
                            }
                            else {
                                _this.modifyArrayData(offlineArgs.changedRecords, e);
                            }
                        }
                        else if (offlineArgs.requestType === "cardRemoved") {
                            if (!Array.isArray(e)) {
                                offlineArgs.deletedRecords[0] = extend(offlineArgs.deletedRecords[0], e);
                            }
                            else {
                                _this.modifyArrayData(offlineArgs.deletedRecords, e);
                            }
                        }
                        _this.refreshUI(offlineArgs, index);
                    }).catch(function (e) {
                        _this.dataManagerFailure(e);
                    });
                }
            }
        });
    };
    Data.prototype.modifyArrayData = function (onLineData, e) {
        if (onLineData.length === e.length) {
            for (var i = 0; i < e.length; i++) {
                onLineData[i] = extend(onLineData[i], e[i]);
            }
        }
        return onLineData;
    };
    /**
     * The function is used to refresh the UI once the datamanager action is completed
     *
     * @param {ActionEventArgs} args Accepts the ActionEventArgs to refresh UI.
     * @param {number} position Accepts the index to refresh UI.
     * @returns {void}
     * @private
     */
    Data.prototype.refreshUI = function (args, position) {
        var _this = this;
        this.parent.layoutModule.columnData = this.parent.layoutModule.getColumnCards();
        if (this.parent.swimlaneSettings.keyField) {
            this.parent.layoutModule.kanbanRows = this.parent.layoutModule.getRows();
            this.parent.layoutModule.swimlaneData = this.parent.layoutModule.getSwimlaneCards();
        }
        args.addedRecords.forEach(function (data, index) {
            if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {
                data[_this.parent.swimlaneSettings.keyField] = '';
            }
            _this.parent.layoutModule.renderCardBasedOnIndex(data, position + index);
        });
        args.changedRecords.forEach(function (data) {
            if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {
                data[_this.parent.swimlaneSettings.keyField] = '';
            }
            _this.parent.layoutModule.removeCard(data);
            _this.parent.layoutModule.renderCardBasedOnIndex(data, position);
            if (_this.parent.layoutModule.isSelectedCard) {
                _this.parent.actionModule.SingleCardSelection(data);
            }
            if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === 'Index'
                && _this.parent.sortSettings.direction === 'Descending' && position > 0) {
                --position;
            }
        });
        args.deletedRecords.forEach(function (data) {
            _this.parent.layoutModule.removeCard(data);
        });
        this.parent.layoutModule.refresh();
        this.parent.renderTemplates();
        this.parent.notify(events.contentReady, {});
        this.parent.trigger(events.dataBound, args, function () { return _this.parent.hideSpinner(); });
    };
    return Data;
}());
export { Data };
