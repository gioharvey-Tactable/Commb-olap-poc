{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Property, Event, Component, Internationalization, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { L10n, remove, addClass, Browser, Complex, getInstance } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, removeClass, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { PivotEngine } from '../../base/engine';\nimport * as events from '../../common/base/constant';\nimport * as cls from '../../common/base/css-constant';\nimport { PivotCommon } from '../../common/base/pivot-common';\nimport { Render } from '../renderer/renderer';\nimport { PivotView } from '../../pivotview/base/pivotview';\nimport { DataSourceSettings } from '../../pivotview/model/datasourcesettings';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { PivotUtil } from '../../base/util';\nimport { OlapEngine } from '../../base/olap/engine';\n/**\n * Represents the PivotFieldList component.\n * ```html\n * <div id=\"pivotfieldlist\"></div>\n * <script>\n *  var pivotfieldlistObj = new PivotFieldList({ });\n *  pivotfieldlistObj.appendTo(\"#pivotfieldlist\");\n * </script>\n * ```\n */\n\nvar PivotFieldList = function (_super) {\n  __extends(PivotFieldList, _super);\n  /**\n   * Constructor for creating the widget\n   * @param  {PivotFieldListModel} options - options\n   * @param  {string|HTMLElement} element - element\n   */\n\n\n  function PivotFieldList(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /** @hidden */\n\n\n    _this.pivotChange = false;\n    _this.isRequiredUpdate = true;\n    /** @hidden */\n\n    _this.lastSortInfo = {};\n    /** @hidden */\n\n    _this.lastFilterInfo = {};\n    /** @hidden */\n\n    _this.lastAggregationInfo = {};\n    /** @hidden */\n\n    _this.lastCalcFieldInfo = {};\n    /** @hidden */\n\n    _this.isPopupView = false;\n    /** @hidden */\n\n    _this.enableValueSorting = false;\n    _this.request = new XMLHttpRequest();\n    _this.remoteData = [];\n    return _this;\n  }\n  /**\n   * To provide the array of modules needed for control rendering\n   * @returns {ModuleDeclaration[]} - ModuleDeclaration[]\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.allowCalculatedField) {\n      modules.push({\n        args: [this],\n        member: 'calculatedField'\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * @returns {AggregateTypes[]}- AggregateTypes[]\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.getAllSummaryType = function () {\n    return ['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index', 'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal', 'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'];\n  };\n  /* eslint-disable-next-line */\n\n  /**\n   * For internal use only - Initialize the event handler;\n   * @private\n   */\n\n\n  PivotFieldList.prototype.preRender = function () {\n    if (this.dataSourceSettings && this.dataSourceSettings.providerType === 'SSAS') {\n      this.olapEngineModule = new OlapEngine();\n      this.dataType = 'olap';\n    } else {\n      this.engineModule = new PivotEngine();\n      this.dataType = 'pivot';\n    }\n\n    this.isAdaptive = Browser.isDevice;\n    this.globalize = new Internationalization(this.locale);\n    this.renderModule = new Render(this);\n    /* eslint-disable */\n\n    this.defaultLocale = {\n      staticFieldList: 'Pivot Field List',\n      fieldList: 'Field List',\n      dropFilterPrompt: 'Drop filter here',\n      dropColPrompt: 'Drop column here',\n      dropRowPrompt: 'Drop row here',\n      dropValPrompt: 'Drop value here',\n      addPrompt: 'Add field here',\n      adaptiveFieldHeader: 'Choose field',\n      centerHeader: 'Drag fields between axes below:',\n      add: 'add',\n      drag: 'Drag',\n      filter: 'Filter',\n      filtered: 'Filtered',\n      sort: 'Sort',\n      remove: 'Remove',\n      filters: 'Filters',\n      rows: 'Rows',\n      columns: 'Columns',\n      values: 'Values',\n      CalculatedField: 'Calculated Field',\n      createCalculatedField: 'Create Calculated Field',\n      fieldName: 'Enter the field name',\n      error: 'Error',\n      invalidFormula: 'Invalid formula.',\n      dropText: 'Example: (\"Sum(Order_Count)\" + \"Sum(In_Stock)\") * 250',\n      dropTextMobile: 'Add fields and edit formula here.',\n      dropAction: 'Calculated field cannot be place in any other region except value axis.',\n      search: 'Search',\n      close: 'Close',\n      cancel: 'Cancel',\n      delete: 'Delete',\n      alert: 'Alert',\n      warning: 'Warning',\n      ok: 'OK',\n      allFields: 'All Fields',\n      formula: 'Formula',\n      fieldExist: 'A field already exists in this name. Please enter a different name.',\n      confirmText: 'A calculation field already exists in this name. Do you want to replace it?',\n      noMatches: 'No matches',\n      format: 'Summaries values by',\n      edit: 'Edit',\n      clear: 'Clear',\n      clearCalculatedField: 'Clear edited field info',\n      editCalculatedField: 'Edit calculated field',\n      sortAscending: 'Sort ascending order',\n      sortDescending: 'Sort descending order',\n      sortNone: 'Sort data order',\n      formulaField: 'Drag and drop fields to formula',\n      dragField: 'Drag field to formula',\n      clearFilter: 'Clear',\n      by: 'by',\n      enterValue: 'Enter value',\n      chooseDate: 'Enter date',\n      all: 'All',\n      multipleItems: 'Multiple items',\n      Equals: 'Equals',\n      DoesNotEquals: 'Does Not Equal',\n      BeginWith: 'Begins With',\n      DoesNotBeginWith: 'Does Not Begin With',\n      EndsWith: 'Ends With',\n      DoesNotEndsWith: 'Does Not End With',\n      Contains: 'Contains',\n      DoesNotContains: 'Does Not Contain',\n      GreaterThan: 'Greater Than',\n      GreaterThanOrEqualTo: 'Greater Than Or Equal To',\n      LessThan: 'Less Than',\n      LessThanOrEqualTo: 'Less Than Or Equal To',\n      Between: 'Between',\n      NotBetween: 'Not Between',\n      Before: 'Before',\n      BeforeOrEqualTo: 'Before Or Equal To',\n      After: 'After',\n      AfterOrEqualTo: 'After Or Equal To',\n      member: 'Member',\n      label: 'Label',\n      date: 'Date',\n      value: 'Value',\n      labelTextContent: 'Show the items for which the label',\n      dateTextContent: 'Show the items for which the date',\n      valueTextContent: 'Show the items for which',\n      And: 'and',\n      Sum: 'Sum',\n      Count: 'Count',\n      DistinctCount: 'Distinct Count',\n      Product: 'Product',\n      Avg: 'Avg',\n      Median: 'Median',\n      Min: 'Min',\n      Max: 'Max',\n      Index: 'Index',\n      SampleStDev: 'Sample StDev',\n      PopulationStDev: 'Population StDev',\n      SampleVar: 'Sample Var',\n      PopulationVar: 'Population Var',\n      RunningTotals: 'Running Totals',\n      DifferenceFrom: 'Difference From',\n      PercentageOfDifferenceFrom: '% of Difference From',\n      PercentageOfGrandTotal: '% of Grand Total',\n      PercentageOfColumnTotal: '% of Column Total',\n      PercentageOfRowTotal: '% of Row Total',\n      PercentageOfParentTotal: '% of Parent Total',\n      PercentageOfParentColumnTotal: '% of Parent Column Total',\n      PercentageOfParentRowTotal: '% of Parent Row Total',\n      MoreOption: 'More...',\n      Years: 'Years',\n      Quarters: 'Quarters',\n      Months: 'Months',\n      Days: 'Days',\n      Hours: 'Hours',\n      Minutes: 'Minutes',\n      Seconds: 'Seconds',\n      apply: 'Apply',\n      valueFieldSettings: 'Value field settings',\n      sourceName: 'Field name :',\n      sourceCaption: 'Field caption',\n      summarizeValuesBy: 'Summarize values by',\n      baseField: 'Base field',\n      baseItem: 'Base item',\n      example: 'e.g:',\n      editorDataLimitMsg: ' more items. Search to refine further.',\n      deferLayoutUpdate: 'Defer Layout Update',\n      null: 'null',\n      undefined: 'undefined',\n      groupOutOfRange: 'Out of Range',\n      fieldDropErrorAction: 'The field you are moving cannot be placed in that area of the report',\n      memberType: 'Field Type',\n      selectedHierarchy: 'Parent Hierarchy',\n      formatString: 'Format',\n      expressionField: 'Expression',\n      olapDropText: 'Example: [Measures].[Order Quantity] + ([Measures].[Order Quantity] * 0.10)',\n      customFormat: 'Enter custom format string',\n      numberFormatString: 'Example: C, P, 0000 %, ###0.##0#, etc.',\n      Measure: 'Measure',\n      Dimension: 'Dimension',\n      Standard: 'Standard',\n      Currency: 'Currency',\n      Percent: 'Percent',\n      Custom: 'Custom',\n      blank: '(Blank)',\n      fieldTooltip: 'Drag and drop fields to create an expression. ' + 'And, if you want to edit the existing calculated fields! ' + 'You can achieve it by simply selecting the field under \"Calculated Members\".',\n      fieldTitle: 'Field Name',\n      QuarterYear: 'Quarter Year',\n      caption: 'Field Caption',\n      copy: 'Copy',\n      of: 'of',\n      group: 'Group',\n      removeCalculatedField: 'Are you sure you want to delete this calculated field?',\n      yes: 'Yes',\n      no: 'No'\n    };\n    /* eslint-enable */\n\n    this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n    this.isDragging = false;\n    this.captionData = [];\n    this.wireEvent();\n  };\n\n  PivotFieldList.prototype.frameCustomProperties = function (fieldListData, fieldList) {\n    if (this.pivotGridModule) {\n      this.pivotGridModule.updatePageSettings(false);\n    }\n\n    var pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : this.pageSettings;\n    var localeObj = this.pivotGridModule ? this.pivotGridModule.localeObj : this.staticPivotGridModule ? this.staticPivotGridModule.localeObj : this.localeObj;\n    var isDrillThrough = this.pivotGridModule ? this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing : true;\n    var enableValueSorting = this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined;\n    var customProperties;\n\n    if (this.dataType === 'olap') {\n      customProperties = {\n        mode: '',\n        savedFieldList: fieldList ? fieldList : undefined,\n        savedFieldListData: fieldListData ? fieldListData : undefined,\n        pageSettings: pageSettings,\n        enableValueSorting: enableValueSorting,\n        isDrillThrough: isDrillThrough,\n        localeObj: localeObj\n      };\n    } else {\n      customProperties = {\n        mode: '',\n        savedFieldList: undefined,\n        pageSettings: pageSettings,\n        enableValueSorting: enableValueSorting,\n        isDrillThrough: isDrillThrough,\n        localeObj: localeObj,\n        clonedReport: this.clonedReport\n      };\n    }\n\n    return customProperties;\n  };\n  /* eslint-disable */\n\n  /**\n   * Initialize the control rendering\n   * @returns {void}\n   * @private\n   */\n\n\n  PivotFieldList.prototype.render = function () {\n    if (this.dataType === 'pivot' && this.dataSourceSettings.url && this.dataSourceSettings.url !== '') {\n      if (this.dataSourceSettings.mode === 'Server') {\n        this.guid = PivotUtil.generateUUID();\n        this.getEngine('initialRender', null, null, null, null, null, null);\n      } else {\n        this.request.open(\"GET\", this.dataSourceSettings.url, true);\n        this.request.withCredentials = false;\n        this.request.onreadystatechange = this.onReadyStateChange.bind(this);\n        this.request.setRequestHeader(\"Content-type\", \"text/plain\");\n        this.request.send(null);\n      }\n    } else {\n      this.initialLoad();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.getEngine = function (action, drillItem, sortItem, aggField, cField, filterItem, memberName, rawDataArgs, editArgs) {\n    var _this = this;\n\n    this.currentAction = action;\n\n    if (this.pivotGridModule) {\n      this.pivotGridModule.updatePageSettings(false);\n    }\n\n    var customProperties = {\n      pageSettings: this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined,\n      enableValueSorting: this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined,\n      enableDrillThrough: this.pivotGridModule ? this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing : true,\n      locale: JSON.stringify(PivotUtil.getLocalizedObject(this))\n    };\n    this.request.open(\"POST\", this.dataSourceSettings.url, true);\n    var params = {\n      request: this.request,\n      dataSourceSettings: JSON.parse(this.getPersistData()).dataSourceSettings,\n      action: action,\n      customProperties: {},\n      internalProperties: customProperties,\n      drillItem: drillItem,\n      sortItem: sortItem,\n      aggregatedItem: aggField,\n      calculatedItem: cField,\n      filterItem: filterItem,\n      memberName: memberName,\n      fetchRawDataArgs: rawDataArgs,\n      editArgs: editArgs,\n      hash: this.guid\n    };\n    this.trigger(events.beforeServiceInvoke, params, function (observedArgs) {\n      _this.request = observedArgs.request;\n      params.internalProperties = observedArgs.internalProperties;\n      params.customProperties = observedArgs.customProperties;\n      params.dataSourceSettings = observedArgs.dataSourceSettings;\n      params.calculatedItem = observedArgs.calculatedItem;\n      params.drillItem = observedArgs.drillItem;\n      params.editArgs = observedArgs.editArgs;\n      params.fetchRawDataArgs = observedArgs.fetchRawDataArgs;\n      params.filterItem = observedArgs.filterItem;\n      params.hash = observedArgs.hash;\n      params.memberName = observedArgs.memberName;\n      params.sortItem = observedArgs.sortItem;\n    });\n    this.request.withCredentials = false;\n    this.request.onreadystatechange = this.onSuccess.bind(this);\n    this.request.setRequestHeader(\"Content-type\", \"application/json\");\n    this.request.send(JSON.stringify(params));\n  };\n\n  PivotFieldList.prototype.onSuccess = function () {\n    if (this.request.readyState === XMLHttpRequest.DONE) {\n      try {\n        var engine = JSON.parse(this.request.responseText);\n\n        if (this.currentAction === 'fetchFieldMembers') {\n          var currentMembers = JSON.parse(engine.members);\n          var dateMembers = [];\n          var formattedMembers = {};\n          var members = {};\n\n          for (var i = 0; i < currentMembers.length; i++) {\n            dateMembers.push({\n              formattedText: currentMembers[i].FormattedText,\n              actualText: currentMembers[i].ActualText\n            });\n            formattedMembers[currentMembers[i].FormattedText] = {};\n            members[currentMembers[i].ActualText] = {};\n          }\n\n          this.engineModule.fieldList[engine.memberName].dateMember = dateMembers;\n          this.engineModule.fieldList[engine.memberName].formattedMembers = formattedMembers;\n          this.engineModule.fieldList[engine.memberName].members = members;\n          this.pivotButtonModule.updateFilterEvents();\n        } else {\n          var fList = PivotUtil.formatFieldList(JSON.parse(engine.fieldList));\n\n          if (this.engineModule.fieldList) {\n            var keys = Object.keys(this.engineModule.fieldList);\n\n            for (var i = 0; i < keys.length; i++) {\n              if (this.engineModule.fieldList[keys[i]] && fList[keys[i]]) {\n                fList[keys[i]].dateMember = this.engineModule.fieldList[keys[i]].dateMember;\n                fList[keys[i]].formattedMembers = this.engineModule.fieldList[keys[i]].formattedMembers;\n                fList[keys[i]].members = this.engineModule.fieldList[keys[i]].members;\n              }\n            }\n          }\n\n          this.engineModule.fieldList = fList;\n          this.engineModule.fields = JSON.parse(engine.fields);\n          this.engineModule.rowCount = JSON.parse(engine.pivotCount).RowCount;\n          this.engineModule.columnCount = JSON.parse(engine.pivotCount).ColumnCount;\n          this.engineModule.rowStartPos = JSON.parse(engine.pivotCount).RowStartPosition;\n          this.engineModule.colStartPos = JSON.parse(engine.pivotCount).ColumnStartPosition;\n          this.engineModule.rowFirstLvl = JSON.parse(engine.pivotCount).RowFirstLevel;\n          this.engineModule.colFirstLvl = JSON.parse(engine.pivotCount).ColumnFirstLevel;\n          var rowPos = void 0;\n          var pivotValues = PivotUtil.formatPivotValues(JSON.parse(engine.pivotValue));\n\n          for (var rCnt = 0; rCnt < pivotValues.length; rCnt++) {\n            if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === 'row') {\n              rowPos = rCnt;\n              break;\n            }\n          }\n\n          this.engineModule.headerContent = PivotUtil.frameContent(pivotValues, 'header', rowPos, this);\n          this.engineModule.pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined;\n          var valueSort = JSON.parse(engine.dataSourceSettings).ValueSortSettings;\n          this.engineModule.valueSortSettings = {\n            headerText: valueSort.HeaderText,\n            headerDelimiter: valueSort.HeaderDelimiter,\n            sortOrder: valueSort.SortOrder,\n            columnIndex: valueSort.ColumnIndex\n          };\n          this.engineModule.pivotValues = pivotValues;\n        }\n      } catch (error) {\n        this.engineModule.pivotValues = [];\n      }\n\n      if (this.currentAction !== 'fetchFieldMembers') {\n        this.initEngine();\n\n        if (this.calculatedFieldModule && this.calculatedFieldModule.isRequireUpdate) {\n          this.calculatedFieldModule.endDialog();\n          this.calculatedFieldModule.isRequireUpdate = false;\n        }\n\n        if (this.pivotGridModule && this.pivotGridModule.calculatedFieldModule && this.pivotGridModule.calculatedFieldModule.isRequireUpdate) {\n          this.pivotGridModule.calculatedFieldModule.endDialog();\n          this.pivotGridModule.calculatedFieldModule.isRequireUpdate = false;\n        }\n      }\n    }\n  };\n\n  PivotFieldList.prototype.onReadyStateChange = function () {\n    if (this.request.readyState === XMLHttpRequest.DONE) {\n      var dataSource = [];\n\n      if (this.dataSourceSettings.type === 'CSV') {\n        var jsonObject = this.request.responseText.split(/\\r?\\n|\\r/);\n\n        for (var i = 0; i < jsonObject.length; i++) {\n          if (!isNullOrUndefined(jsonObject[i]) && jsonObject[i] !== '') {\n            dataSource.push(jsonObject[i].split(','));\n          }\n        }\n      } else {\n        try {\n          dataSource = JSON.parse(this.request.responseText);\n        } catch (error) {\n          dataSource = [];\n        }\n      }\n\n      if (isBlazor() && dataSource && dataSource.length > 0) {\n        this.remoteData = dataSource;\n      } else if (dataSource && dataSource.length > 0) {\n        this.setProperties({\n          dataSourceSettings: {\n            dataSource: dataSource\n          }\n        }, true);\n      }\n\n      this.initialLoad();\n    }\n  };\n\n  PivotFieldList.prototype.initialLoad = function () {\n    var _this = this;\n\n    this.trigger(events.load, {\n      dataSourceSettings: isBlazor() ? PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings) : this.dataSourceSettings\n    }, function (observedArgs) {\n      if (isBlazor()) {\n        observedArgs.dataSourceSettings.dataSource = _this.dataSourceSettings.dataSource;\n      }\n\n      _this.dataSourceSettings = observedArgs.dataSourceSettings;\n      addClass([_this.element], cls.ROOT);\n\n      if (_this.enableRtl) {\n        addClass([_this.element], cls.RTL);\n      } else {\n        removeClass([_this.element], cls.RTL);\n      }\n\n      if (_this.isAdaptive) {\n        addClass([_this.element], cls.DEVICE);\n      } else {\n        removeClass([_this.element], cls.DEVICE);\n      }\n\n      if (_this.cssClass) {\n        addClass([_this.element], _this.cssClass);\n      }\n\n      _this.notify(events.initialLoad, {});\n    });\n\n    if (isBlazor()) {\n      this.renderComplete();\n    }\n  };\n  /**\n   * Binding events to the Pivot Field List element.\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.wireEvent = function () {\n    this.on(events.initialLoad, this.generateData, this);\n    this.on(events.dataReady, this.fieldListRender, this);\n  };\n  /**\n   * Unbinding events from the element on widget destroy.\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.unWireEvent = function () {\n    if (this.pivotGridModule && this.pivotGridModule.isDestroyed) {\n      return;\n    }\n\n    this.off(events.initialLoad, this.generateData);\n    this.off(events.dataReady, this.fieldListRender);\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns {string}\n   */\n\n\n  PivotFieldList.prototype.getPersistData = function () {\n    var keyEntity = ['dataSourceSettings'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n\n  PivotFieldList.prototype.getModuleName = function () {\n    return 'pivotfieldlist';\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var requireRefresh = false;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'locale':\n          if (isBlazor()) {\n            break;\n          } else {\n            _super.prototype.refresh.call(this);\n          }\n\n          break;\n\n        case 'dataSourceSettings':\n          if (!isNullOrUndefined(newProp.dataSourceSettings.dataSource)) {\n            if (!isNullOrUndefined(this.savedDataSourceSettings)) {\n              PivotUtil.updateDataSourceSettings(this.staticPivotGridModule, this.savedDataSourceSettings);\n              this.savedDataSourceSettings = undefined;\n            }\n\n            if (newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.dataSource.length === 0 && !isNullOrUndefined(this.staticPivotGridModule)) {\n              this.savedDataSourceSettings = PivotUtil.getClonedDataSourceSettings(this.staticPivotGridModule.dataSourceSettings);\n              this.staticPivotGridModule.setProperties({\n                dataSourceSettings: {\n                  rows: []\n                }\n              }, true);\n              this.staticPivotGridModule.setProperties({\n                dataSourceSettings: {\n                  columns: []\n                }\n              }, true);\n              this.staticPivotGridModule.setProperties({\n                dataSourceSettings: {\n                  values: []\n                }\n              }, true);\n              this.staticPivotGridModule.setProperties({\n                dataSourceSettings: {\n                  filters: []\n                }\n              }, true);\n            }\n\n            this.engineModule.fieldList = null;\n\n            if (!isNullOrUndefined(this.staticPivotGridModule)) {\n              this.staticPivotGridModule.pivotValues = [];\n            }\n\n            this.initEngine();\n          }\n\n          if (PivotUtil.isButtonIconRefesh(prop, oldProp, newProp)) {\n            if (this.isPopupView && this.pivotGridModule && this.pivotGridModule.showGroupingBar && this.pivotGridModule.groupingBarModule) {\n              var filters = PivotUtil.cloneFieldSettings(this.dataSourceSettings.filters);\n              var values = PivotUtil.cloneFieldSettings(this.dataSourceSettings.values);\n              var rows = PivotUtil.cloneFieldSettings(this.dataSourceSettings.rows);\n              var columns = PivotUtil.cloneFieldSettings(this.dataSourceSettings.columns);\n              this.pivotGridModule.setProperties({\n                dataSourceSettings: {\n                  rows: rows,\n                  columns: columns,\n                  values: values,\n                  filters: filters\n                }\n              }, true);\n              this.pivotGridModule.axisFieldModule.render();\n            } else if (!this.isPopupView && this.staticPivotGridModule && !this.staticPivotGridModule.isDestroyed) {\n              var pivot = this.staticPivotGridModule;\n\n              if (pivot.showGroupingBar && pivot.groupingBarModule) {\n                pivot.axisFieldModule.render();\n              }\n\n              if (pivot.showFieldList && pivot.pivotFieldListModule) {\n                var rows = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.rows);\n                var columns = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.columns);\n                var values = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.values);\n                var filters = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.filters);\n                pivot.pivotFieldListModule.setProperties({\n                  dataSourceSettings: {\n                    rows: rows,\n                    columns: columns,\n                    values: values,\n                    filters: filters\n                  }\n                }, true);\n                pivot.pivotFieldListModule.axisFieldModule.render();\n\n                if (pivot.pivotFieldListModule.treeViewModule.fieldTable && !pivot.isAdaptive) {\n                  pivot.pivotFieldListModule.notify(events.treeViewUpdate, {});\n                }\n              }\n            }\n\n            this.axisFieldModule.render();\n\n            if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n              this.notify(events.treeViewUpdate, {});\n            }\n          }\n\n          break;\n\n        case 'aggregateTypes':\n          if (this.axisFieldModule) {\n            this.axisFieldModule.render();\n          }\n\n          if (this.pivotGridModule && this.pivotGridModule.axisFieldModule) {\n            this.pivotGridModule.setProperties({\n              aggregateTypes: newProp.aggregateTypes\n            }, true);\n            this.pivotGridModule.axisFieldModule.render();\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (this.enableRtl) {\n            addClass([this.element], cls.RTL);\n          } else {\n            removeClass([this.element], cls.RTL);\n          }\n\n          requireRefresh = true;\n          break;\n      }\n\n      if (requireRefresh) {\n        this.fieldListRender();\n      }\n    }\n  };\n  /* eslint-disable */\n\n\n  PivotFieldList.prototype.initEngine = function () {\n    var _this = this;\n\n    if (this.dataType === 'pivot') {\n      var data = !isNullOrUndefined(this.dataSourceSettings.dataSource) ? this.dataSourceSettings.dataSource[0] : !isNullOrUndefined(this.engineModule.data) ? this.engineModule.data[0] : undefined;\n\n      if (data && this.pivotCommon) {\n        var isArray = Object.prototype.toString.call(data) == '[object Array]';\n\n        if (isArray && this.dataSourceSettings.type === 'JSON') {\n          this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidJSON'));\n          return;\n        } else if (!isArray && this.dataSourceSettings.type === 'CSV') {\n          this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidCSV'));\n          return;\n        }\n      }\n    }\n\n    var args = {\n      dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)\n    };\n    var control = this.isPopupView ? this.pivotGridModule : this;\n    control.trigger(events.enginePopulating, args, function (observedArgs) {\n      PivotUtil.updateDataSourceSettings(_this, observedArgs.dataSourceSettings);\n\n      if (_this.dataType === 'pivot') {\n        if (_this.dataSourceSettings.groupSettings && _this.dataSourceSettings.groupSettings.length > 0) {\n          var pivotDataSet = void 0;\n\n          if (isBlazor()) {\n            pivotDataSet = _this.engineModule.data;\n          } else {\n            pivotDataSet = _this.dataSourceSettings.dataSource;\n          }\n\n          _this.clonedDataSet = _this.clonedDataSet ? _this.clonedDataSet : PivotUtil.getClonedData(pivotDataSet);\n\n          if (isBlazor()) {\n            _this.clonedReport = _this.clonedReport ? _this.clonedReport : extend({}, _this.dataSourceSettings, null, true);\n          } else {\n            var dataSourceSettings = JSON.parse(_this.getPersistData()).dataSourceSettings;\n            dataSourceSettings.dataSource = [];\n            _this.clonedReport = _this.clonedReport ? _this.clonedReport : dataSourceSettings;\n          }\n        }\n\n        var customProperties = _this.frameCustomProperties();\n\n        customProperties.enableValueSorting = _this.staticPivotGridModule ? _this.staticPivotGridModule.enableValueSorting : _this.enableValueSorting;\n\n        if (_this.dataSourceSettings.mode !== 'Server') {\n          _this.engineModule.renderEngine(_this.dataSourceSettings, customProperties, _this.getValueCellInfo.bind(_this));\n        }\n\n        _this.pivotFieldList = _this.engineModule.fieldList;\n        var eventArgs = {\n          pivotFieldList: _this.pivotFieldList,\n          pivotValues: _this.engineModule.pivotValues\n        };\n        var this$_1 = _this;\n        control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n          this$_1.pivotFieldList = observedArgs.pivotFieldList;\n          this$_1.engineModule.pivotValues = isBlazor() ? _this.engineModule.pivotValues : observedArgs.pivotValues;\n          this$_1.notify(events.dataReady, {});\n          this$_1.trigger(events.dataBound);\n        });\n      } else if (_this.dataType === 'olap') {\n        _this.olapEngineModule.renderEngine(_this.dataSourceSettings, _this.frameCustomProperties(_this.olapEngineModule.fieldListData, _this.olapEngineModule.fieldList));\n\n        _this.pivotFieldList = _this.olapEngineModule.fieldList;\n        var eventArgs = {\n          pivotFieldList: _this.pivotFieldList,\n          pivotValues: _this.olapEngineModule.pivotValues\n        };\n        var this$_2 = _this;\n        control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n          this$_2.pivotFieldList = observedArgs.pivotFieldList;\n          this$_2.olapEngineModule.pivotValues = isBlazor() ? _this.olapEngineModule.pivotValues : observedArgs.pivotValues;\n          this$_2.notify(events.dataReady, {});\n          this$_2.trigger(events.dataBound);\n        });\n      }\n    });\n  };\n  /* eslint-enable */\n\n\n  PivotFieldList.prototype.generateData = function () {\n    this.pivotFieldList = {};\n\n    if (this.dataSourceSettings && (this.dataSourceSettings.dataSource || this.dataSourceSettings.url)) {\n      if (this.dataSourceSettings.url !== '' && this.dataType === 'olap' || this.dataSourceSettings.dataSource.length > 0) {\n        if (this.dataType === 'pivot') {\n          this.engineModule.data = this.dataSourceSettings.dataSource;\n        }\n\n        this.initEngine();\n      } else if (this.dataSourceSettings.dataSource instanceof DataManager) {\n        if (this.dataType === 'pivot' && this.remoteData.length > 0) {\n          this.engineModule.data = this.remoteData;\n          this.initEngine();\n        } else {\n          setTimeout(this.getData.bind(this), 100);\n        }\n      }\n    } else if (isBlazor() && this.dataType === 'pivot' && this.engineModule.data && this.engineModule.data.length > 0) {\n      this.initEngine();\n    } else {\n      this.notify(events.dataReady, {});\n      this.trigger(events.dataBound);\n    }\n  };\n\n  PivotFieldList.prototype.getValueCellInfo = function (aggregateObj) {\n    var args = aggregateObj;\n    this.trigger(events.aggregateCellInfo, args);\n    return args;\n  };\n\n  PivotFieldList.prototype.getData = function () {\n    this.dataSourceSettings.dataSource.executeQuery(new Query()).then(this.executeQuery.bind(this));\n  };\n\n  PivotFieldList.prototype.executeQuery = function (e) {\n    this.engineModule.data = e.result;\n    this.initEngine();\n  };\n\n  PivotFieldList.prototype.fieldListRender = function () {\n    this.element.innerHTML = '';\n    var showDialog;\n\n    if (this.renderMode === 'Popup' && this.dialogRenderer.fieldListDialog && !this.dialogRenderer.fieldListDialog.isDestroyed) {\n      showDialog = this.dialogRenderer.fieldListDialog.visible;\n      this.dialogRenderer.fieldListDialog.destroy();\n      remove(document.getElementById(this.element.id + '_Wrapper'));\n    }\n\n    this.renderModule.render();\n\n    if (this.renderMode === 'Popup') {\n      this.fieldListSpinnerElement = this.dialogRenderer.fieldListDialog.element;\n\n      if (showDialog) {\n        this.dialogRenderer.fieldListDialog.show();\n      }\n    } else {\n      this.fieldListSpinnerElement = this.element.querySelector('.e-pivotfieldlist-wrapper');\n    }\n\n    if (this.spinnerTemplate) {\n      createSpinner({\n        target: this.fieldListSpinnerElement,\n        template: this.spinnerTemplate\n      }, this.createElement);\n    } else {\n      createSpinner({\n        target: this.fieldListSpinnerElement\n      }, this.createElement);\n    }\n\n    var args;\n    args = {\n      pivotEngine: this.dataType === 'olap' ? this.olapEngineModule : this.engineModule,\n      dataSourceSettings: this.dataSourceSettings,\n      id: this.element.id,\n      element: document.getElementById(this.element.id + '_Wrapper'),\n      moduleName: this.getModuleName(),\n      enableRtl: this.enableRtl,\n      isAdaptive: this.isAdaptive,\n      renderMode: this.renderMode,\n      localeObj: this.localeObj,\n      dataType: this.dataType\n    };\n    this.pivotCommon = new PivotCommon(args);\n    this.pivotCommon.control = this;\n\n    if (this.allowDeferLayoutUpdate) {\n      this.clonedDataSource = extend({}, this.dataSourceSettings, null, true);\n      this.clonedFieldList = extend({}, this.pivotFieldList, null, true);\n    }\n  };\n\n  PivotFieldList.prototype.getFieldCaption = function (dataSourceSettings) {\n    this.getFields(dataSourceSettings);\n\n    if (this.captionData.length > 0) {\n      var lnt = this.captionData.length;\n      var engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n\n      while (lnt--) {\n        if (this.captionData[lnt]) {\n          for (var _i = 0, _a = this.captionData[lnt]; _i < _a.length; _i++) {\n            var obj = _a[_i];\n\n            if (obj) {\n              if (engineModule.fieldList[obj.name]) {\n                if (obj.caption) {\n                  engineModule.fieldList[obj.name].caption = obj.caption;\n                } else {\n                  engineModule.fieldList[obj.name].caption = obj.name;\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      return;\n    }\n  };\n\n  PivotFieldList.prototype.getFields = function (dataSourceSettings) {\n    this.captionData = [dataSourceSettings.rows, dataSourceSettings.columns, dataSourceSettings.values, dataSourceSettings.filters];\n    /* eslint-disable-line */\n  };\n  /* eslint-disable */\n\n  /**\n   * Updates the PivotEngine using dataSource from Pivot Field List component.\n   * @function updateDataSource\n   * @returns {void}\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.updateDataSource = function (isTreeViewRefresh, isEngineRefresh) {\n    var _this = this;\n\n    if (this.pivotGridModule) {\n      this.pivotGridModule.showWaitingPopup();\n    }\n\n    showSpinner(this.fieldListSpinnerElement);\n    var pivot = this;\n    var control = pivot.isPopupView ? pivot.pivotGridModule : pivot; //setTimeout(() => {\n\n    var isOlapDataRefreshed = false;\n    var pageSettings = pivot.pivotGridModule && pivot.pivotGridModule.enableVirtualization ? pivot.pivotGridModule.pageSettings : undefined;\n    var isCalcChange = Object.keys(pivot.lastCalcFieldInfo).length > 0 ? true : false;\n    var isSorted = Object.keys(pivot.lastSortInfo).length > 0 ? true : false;\n    var isAggChange = Object.keys(pivot.lastAggregationInfo).length > 0 ? true : false;\n    var isFiltered = Object.keys(pivot.lastFilterInfo).length > 0 ? true : false;\n    var args = {\n      dataSourceSettings: PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings)\n    };\n    control.trigger(events.enginePopulating, args, function (observedArgs) {\n      if (!(pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange))) {\n        PivotUtil.updateDataSourceSettings(pivot, observedArgs.dataSourceSettings);\n        PivotUtil.updateDataSourceSettings(pivot.pivotGridModule, observedArgs.dataSourceSettings);\n      }\n\n      if (isNullOrUndefined(isEngineRefresh)) {\n        if (pivot.dataType === 'pivot') {\n          var customProperties = pivot.frameCustomProperties();\n\n          if (!isSorted) {\n            customProperties.enableValueSorting = pivot.staticPivotGridModule ? pivot.staticPivotGridModule.enableValueSorting : pivot.enableValueSorting;\n          } else {\n            pivot.setProperties({\n              dataSourceSettings: {\n                valueSortSettings: {\n                  headerText: ''\n                }\n              }\n            }, true);\n            customProperties.enableValueSorting = false;\n          }\n\n          customProperties.savedFieldList = pivot.pivotFieldList;\n\n          if (pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange)) {\n            var interopArguments = {};\n\n            if (isSorted) {\n              pivot.pivotGridModule.setProperties({\n                dataSourceSettings: {\n                  valueSortSettings: {\n                    headerText: ''\n                  }\n                }\n              }, true);\n\n              if (isBlazor()) {\n                interopArguments = {\n                  'key': 'onSort',\n                  'arg': pivot.lastSortInfo\n                };\n              } else if (control.dataSourceSettings.mode === 'Server') {\n                control.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n              } else {\n                pivot.engineModule.onSort(pivot.lastSortInfo);\n              }\n\n              pivot.lastSortInfo = {};\n            }\n\n            if (isFiltered) {\n              if (isBlazor()) {\n                var dataArgs = window['sfBlazor'].copyWithoutCircularReferences([pivot.dataSourceSettings.filterSettings], pivot.dataSourceSettings.filterSettings);\n                interopArguments = {\n                  'key': 'onFilter',\n                  'arg': {\n                    'lastFilterInfo': pivot.lastFilterInfo,\n                    'filterSettings': dataArgs\n                  }\n                };\n              } else if (control.dataSourceSettings.mode === 'Server') {\n                control.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n              } else {\n                pivot.engineModule.onFilter(pivot.lastFilterInfo, pivot.dataSourceSettings);\n              }\n\n              pivot.lastFilterInfo = {};\n            }\n\n            if (isAggChange) {\n              if (isBlazor()) {\n                interopArguments = {\n                  'key': 'onAggregation',\n                  'arg': pivot.lastAggregationInfo\n                };\n              } else if (control.dataSourceSettings.mode === 'Server') {\n                control.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n              } else {\n                pivot.engineModule.onAggregation(pivot.lastAggregationInfo);\n              }\n\n              pivot.lastAggregationInfo = {};\n            }\n\n            if (isCalcChange) {\n              if (isBlazor()) {\n                interopArguments = {\n                  'key': 'onCalcOperation',\n                  'arg': {\n                    lastCalcFieldInfo: pivot.lastCalcFieldInfo,\n                    values: pivot.dataSourceSettings.values,\n                    calculatedFieldSettings: pivot.dataSourceSettings.calculatedFieldSettings\n                  }\n                };\n              } else if (control.dataSourceSettings.mode === 'Server') {\n                control.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n              } else {\n                pivot.engineModule.onCalcOperation(pivot.lastCalcFieldInfo);\n              }\n\n              pivot.lastCalcFieldInfo = {};\n            }\n\n            if (isBlazor()) {\n              var args_1 = window['sfBlazor'].copyWithoutCircularReferences([interopArguments['arg']], interopArguments['arg']);\n              pivot.pivotGridModule.interopAdaptor.invokeMethodAsync(\"PivotInteropMethod\", interopArguments['key'], args_1).then(function (data) {\n                if (data === 0) {\n                  _this.pivotCommon.errorDialog.createErrorDialog(_this.localeObj.getConstant('error'), pivot.dataSourceSettings.type === 'CSV' ? _this.localeObj.getConstant('invalidCSV') : _this.localeObj.getConstant('invalidJSON'));\n\n                  return;\n                } else {\n                  pivot.pivotGridModule.updateBlazorData(data, pivot.pivotGridModule);\n                  pivot.getFieldCaption(pivot.dataSourceSettings);\n                  pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n\n                  if (pivot.calculatedFieldModule && pivot.calculatedFieldModule.isRequireUpdate) {\n                    pivot.calculatedFieldModule.endDialog();\n                    pivot.calculatedFieldModule.isRequireUpdate = false;\n                  }\n                }\n              });\n            }\n          } else {\n            if (isBlazor() && pageSettings) {\n              var dataArgs = window['sfBlazor'].copyWithoutCircularReferences([pivot.dataSourceSettings.properties], pivot.dataSourceSettings.properties);\n              pivot.pivotGridModule.interopAdaptor.invokeMethodAsync(\"PivotInteropMethod\", 'renderEngine', {\n                'dataSourceSettings': dataArgs,\n                'customProperties': customProperties\n              }).then(function (data) {\n                if (data === 0) {\n                  _this.pivotCommon.errorDialog.createErrorDialog(_this.localeObj.getConstant('error'), pivot.dataSourceSettings.type === 'CSV' ? _this.localeObj.getConstant('invalidCSV') : _this.localeObj.getConstant('invalidJSON'));\n\n                  return;\n                } else {\n                  pivot.pivotGridModule.updateBlazorData(data, pivot.pivotGridModule);\n                  pivot.getFieldCaption(pivot.dataSourceSettings);\n                  pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n                }\n              });\n            } else if (pivot.dataSourceSettings.mode === 'Server') {\n              if (isSorted) control.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);else if (isAggChange) control.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);else if (isCalcChange) control.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);else if (isFiltered) control.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);else control.getEngine('onDrop', null, null, null, null, null, null);\n              pivot.lastSortInfo = {};\n              pivot.lastAggregationInfo = {};\n              pivot.lastCalcFieldInfo = {};\n              pivot.lastFilterInfo = {};\n            } else {\n              pivot.engineModule.renderEngine(pivot.dataSourceSettings, customProperties, pivot.getValueCellInfo.bind(pivot));\n            }\n          }\n        } else {\n          isOlapDataRefreshed = pivot.updateOlapDataSource(pivot, isSorted, isCalcChange, isOlapDataRefreshed);\n        }\n\n        if (!(isBlazor() && pageSettings)) {\n          pivot.getFieldCaption(pivot.dataSourceSettings);\n        }\n      } else {\n        pivot.axisFieldModule.render();\n        pivot.isRequiredUpdate = false;\n      }\n\n      if (!(isBlazor() && pageSettings)) {\n        pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n      }\n    }); //});\n  };\n  /* eslint-enable */\n\n\n  PivotFieldList.prototype.enginePopulatedEventMethod = function (pivot, isTreeViewRefresh, isOlapDataRefreshed) {\n    var _this = this;\n\n    var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;\n    var eventArgs = {\n      dataSourceSettings: pivot.dataSourceSettings,\n      pivotFieldList: pivot.dataType === 'pivot' ? pivot.engineModule.fieldList : pivot.olapEngineModule.fieldList,\n      pivotValues: pivot.dataType === 'pivot' ? pivot.engineModule.pivotValues : pivot.olapEngineModule.pivotValues\n    };\n    control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n      var dataSource = pivot.dataSourceSettings.dataSource;\n\n      if (isBlazor() && observedArgs.dataSourceSettings.dataSource instanceof Object) {\n        observedArgs.dataSourceSettings.dataSource = dataSource;\n      }\n\n      pivot.dataSourceSettings = observedArgs.dataSourceSettings;\n      pivot.pivotCommon.dataSourceSettings = pivot.dataSourceSettings;\n      pivot.pivotFieldList = observedArgs.pivotFieldList;\n\n      if (pivot.dataType === 'olap') {\n        pivot.olapEngineModule.pivotValues = isBlazor() ? pivot.olapEngineModule.pivotValues : observedArgs.pivotValues;\n        pivot.pivotCommon.engineModule = pivot.olapEngineModule;\n      } else {\n        pivot.engineModule.pivotValues = isBlazor() ? pivot.engineModule.pivotValues : observedArgs.pivotValues;\n        pivot.pivotCommon.engineModule = pivot.engineModule;\n      }\n\n      if (!isTreeViewRefresh && pivot.treeViewModule.fieldTable && !pivot.isAdaptive) {\n        pivot.notify(events.treeViewUpdate, {});\n      }\n\n      if (pivot.isRequiredUpdate) {\n        if (pivot.allowDeferLayoutUpdate) {\n          pivot.clonedDataSource = extend({}, pivot.dataSourceSettings, null, true);\n          pivot.clonedFieldList = extend({}, pivot.pivotFieldList, null, true);\n        }\n\n        pivot.updateView(pivot.pivotGridModule);\n      } else if (_this.isPopupView && pivot.allowDeferLayoutUpdate) {\n        pivot.pivotGridModule.engineModule = pivot.engineModule;\n        pivot.pivotGridModule.setProperties({\n          dataSourceSettings: pivot.dataSourceSettings.properties\n          /* eslint-disable-line */\n\n        }, true);\n        pivot.pivotGridModule.notify(events.uiUpdate, pivot);\n        hideSpinner(pivot.fieldListSpinnerElement);\n      }\n\n      if (_this.isPopupView && pivot.pivotGridModule && pivot.pivotGridModule.allowDeferLayoutUpdate && !pivot.isRequiredUpdate) {\n        hideSpinner(pivot.fieldListSpinnerElement);\n        pivot.pivotGridModule.hideWaitingPopup();\n      }\n\n      pivot.isRequiredUpdate = true;\n\n      if (!pivot.pivotGridModule || isOlapDataRefreshed) {\n        hideSpinner(pivot.fieldListSpinnerElement);\n      } else {\n        pivot.pivotGridModule.fieldListSpinnerElement = pivot.fieldListSpinnerElement;\n      }\n    });\n  };\n\n  PivotFieldList.prototype.updateOlapDataSource = function (pivot, isSorted, isCalcChange, isOlapDataRefreshed) {\n    var customProperties = pivot.frameCustomProperties(pivot.olapEngineModule.fieldListData, pivot.olapEngineModule.fieldList);\n    customProperties.savedFieldList = pivot.pivotFieldList;\n\n    if (isCalcChange || isSorted) {\n      pivot.olapEngineModule.savedFieldList = pivot.pivotFieldList;\n      pivot.olapEngineModule.savedFieldListData = pivot.olapEngineModule.fieldListData;\n\n      if (isCalcChange) {\n        pivot.olapEngineModule.updateCalcFields(pivot.dataSourceSettings, pivot.lastCalcFieldInfo);\n        pivot.lastCalcFieldInfo = {};\n        isOlapDataRefreshed = pivot.olapEngineModule.dataFields[pivot.lastCalcFieldInfo.name] ? false : true;\n\n        if (pivot.pivotGridModule) {\n          pivot.pivotGridModule.hideWaitingPopup();\n        }\n      } else {\n        pivot.olapEngineModule.onSort(pivot.dataSourceSettings);\n      }\n    } else {\n      pivot.olapEngineModule.renderEngine(pivot.dataSourceSettings, customProperties);\n    }\n\n    return isOlapDataRefreshed;\n  };\n  /**\n   * Updates the Pivot Field List component using dataSource from PivotView component.\n   * @function update\n   * @param {PivotView} control - Pass the instance of pivot table component.\n   * @returns {void}\n   */\n\n\n  PivotFieldList.prototype.update = function (control) {\n    if (isBlazor() && control !== undefined) {\n      /* eslint-disable */\n      var pivotId = control.ID;\n      var pivotInstance = getInstance('#' + pivotId, PivotView);\n      control = pivotInstance;\n      /* eslint-enable */\n    }\n\n    if (control) {\n      this.clonedDataSet = control.clonedDataSet;\n\n      if (isBlazor() && !this.isPopupView) {\n        PivotUtil.updateDataSourceSettings(this, PivotUtil.getClonedDataSourceSettings(control.dataSourceSettings));\n      } else {\n        this.setProperties({\n          dataSourceSettings: control.dataSourceSettings\n        }, true);\n      }\n\n      this.engineModule = control.engineModule;\n      this.olapEngineModule = control.olapEngineModule;\n      this.dataType = control.dataType;\n      this.pivotFieldList = this.dataType === 'olap' ? control.olapEngineModule.fieldList : control.engineModule.fieldList;\n\n      if (this.isPopupView) {\n        this.pivotGridModule = control;\n      } else {\n        this.staticPivotGridModule = control;\n      }\n\n      this.getFieldCaption(control.dataSourceSettings);\n      this.pivotCommon.engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n      this.pivotCommon.dataSourceSettings = this.dataSourceSettings;\n      this.pivotCommon.control = this;\n\n      if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n        this.notify(events.treeViewUpdate, {});\n      }\n\n      this.axisFieldModule.render();\n\n      if (!this.isPopupView && this.allowDeferLayoutUpdate) {\n        this.clonedDataSource = extend({}, this.dataSourceSettings, null, true);\n        this.clonedFieldList = extend({}, this.pivotFieldList, null, true);\n      }\n    }\n  };\n  /**\n   * Updates the PivotView component using dataSource from Pivot Field List component.\n   * @function updateView\n   * @param {PivotView} control - Pass the instance of pivot table component.\n   * @returns {void}\n   */\n\n\n  PivotFieldList.prototype.updateView = function (control) {\n    if (isBlazor() && control !== undefined) {\n      /* eslint-disable */\n      var pivotId = control.ID;\n      var pivotInstance = getInstance('#' + pivotId, PivotView);\n      control = pivotInstance;\n      /* eslint-enable */\n    }\n\n    if (control) {\n      control.clonedDataSet = this.clonedDataSet;\n\n      if (isBlazor()) {\n        PivotUtil.updateDataSourceSettings(control, PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings));\n      } else {\n        control.setProperties({\n          dataSourceSettings: this.dataSourceSettings\n        }, true);\n      }\n\n      control.engineModule = this.engineModule;\n      control.olapEngineModule = this.olapEngineModule;\n      control.dataType = this.dataType;\n\n      if (!this.pivotChange) {\n        control.pivotValues = this.dataType === 'olap' ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues;\n      }\n\n      var eventArgs = {\n        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(control.dataSourceSettings),\n        pivotValues: control.pivotValues\n      };\n      control.trigger(events.fieldListRefreshed, eventArgs);\n\n      if (!this.isPopupView) {\n        this.staticPivotGridModule = control;\n        control.isStaticRefresh = true;\n      }\n\n      if (control.enableVirtualization && isBlazor()) {\n        control.renderPivotGrid();\n      } else {\n        control.dataBind();\n      }\n    }\n  };\n  /* eslint-disable-next-line */\n\n  /**\n   * Called internally to trigger populate event.\n   * @hidden\n   */\n\n\n  PivotFieldList.prototype.triggerPopulateEvent = function () {\n    var _this = this;\n\n    var control = this.isPopupView ? this.pivotGridModule : this;\n    var eventArgs = {\n      dataSourceSettings: this.dataSourceSettings,\n      pivotFieldList: this.dataType === 'olap' ? this.olapEngineModule.fieldList : this.engineModule.fieldList,\n      pivotValues: this.dataType === 'olap' ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues\n    };\n    control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n      _this.dataSourceSettings = observedArgs.dataSourceSettings;\n      _this.pivotFieldList = observedArgs.pivotFieldList;\n\n      if (_this.dataType === 'olap') {\n        _this.olapEngineModule.pivotValues = isBlazor() ? _this.olapEngineModule.pivotValues : observedArgs.pivotValues;\n      } else {\n        _this.engineModule.pivotValues = isBlazor() ? _this.engineModule.pivotValues : observedArgs.pivotValues;\n      }\n    });\n  };\n  /**\n   * Destroys the Field Table component.\n   * @function destroy\n   * @returns {void}\n   */\n\n\n  PivotFieldList.prototype.destroy = function () {\n    this.unWireEvent();\n\n    if (this.engineModule) {\n      this.engineModule.fieldList = {};\n      this.engineModule.rMembers = null;\n      this.engineModule.cMembers = null;\n      this.engineModule.valueMatrix = null;\n      this.engineModule.indexMatrix = null;\n      this.engineModule = {};\n    }\n\n    if (this.olapEngineModule) {\n      this.olapEngineModule.fieldList = {};\n      this.olapEngineModule = {};\n    }\n\n    if (this.pivotFieldList) {\n      this.pivotFieldList = {};\n    }\n\n    if (this.captionData) {\n      this.captionData = null;\n    }\n\n    if (this.contextMenuModule) {\n      this.contextMenuModule.destroy();\n    }\n\n    if (this.treeViewModule) {\n      this.treeViewModule.destroy();\n    }\n\n    if (this.pivotButtonModule) {\n      this.pivotButtonModule.destroy();\n    }\n\n    if (this.pivotCommon) {\n      this.pivotCommon.destroy();\n    }\n\n    if (this.dialogRenderer) {\n      this.dialogRenderer.destroy();\n    }\n\n    if (this.calculatedFieldModule) {\n      this.calculatedFieldModule.destroy();\n    }\n\n    _super.prototype.destroy.call(this);\n\n    if (this.contextMenuModule) {\n      this.contextMenuModule = null;\n    }\n\n    if (this.treeViewModule) {\n      this.treeViewModule = null;\n    }\n\n    if (this.pivotButtonModule) {\n      this.pivotButtonModule = null;\n    }\n\n    if (this.pivotCommon) {\n      this.pivotCommon = null;\n    }\n\n    if (this.dialogRenderer) {\n      this.dialogRenderer = null;\n    }\n\n    if (this.calculatedFieldModule) {\n      this.calculatedFieldModule = null;\n    }\n\n    if (this.axisFieldModule) {\n      this.axisFieldModule = null;\n    }\n\n    if (this.axisTableModule) {\n      this.axisTableModule = null;\n    }\n\n    if (this.renderModule) {\n      this.renderModule = null;\n    }\n\n    if (this.clonedDataSet) {\n      this.clonedDataSet = null;\n    }\n\n    if (this.clonedFieldList) {\n      this.clonedFieldList = null;\n    }\n\n    if (this.localeObj) {\n      this.localeObj = null;\n    }\n\n    if (this.defaultLocale) {\n      this.defaultLocale = null;\n    }\n\n    this.element.innerHTML = '';\n    removeClass([this.element], cls.ROOT);\n    removeClass([this.element], cls.RTL);\n    removeClass([this.element], cls.DEVICE);\n  };\n\n  __decorate([Complex({}, DataSourceSettings)], PivotFieldList.prototype, \"dataSourceSettings\", void 0);\n\n  __decorate([Property('Popup')], PivotFieldList.prototype, \"renderMode\", void 0);\n\n  __decorate([Property()], PivotFieldList.prototype, \"target\", void 0);\n\n  __decorate([Property('')], PivotFieldList.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], PivotFieldList.prototype, \"allowCalculatedField\", void 0);\n\n  __decorate([Property(false)], PivotFieldList.prototype, \"showValuesButton\", void 0);\n\n  __decorate([Property(false)], PivotFieldList.prototype, \"allowDeferLayoutUpdate\", void 0);\n\n  __decorate([Property(1000)], PivotFieldList.prototype, \"maxNodeLimitInMemberEditor\", void 0);\n\n  __decorate([Property(true)], PivotFieldList.prototype, \"loadOnDemandInMemberEditor\", void 0);\n\n  __decorate([Property()], PivotFieldList.prototype, \"spinnerTemplate\", void 0);\n\n  __decorate([Property(['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index', 'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal', 'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'])], PivotFieldList.prototype, \"aggregateTypes\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"load\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"enginePopulating\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"memberFiltering\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"enginePopulated\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"onFieldDropped\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"fieldDrop\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"fieldDragStart\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"aggregateCellInfo\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"memberEditorOpen\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"calculatedFieldCreate\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"aggregateMenuOpen\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"fieldRemove\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"created\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], PivotFieldList.prototype, \"beforeServiceInvoke\", void 0);\n\n  PivotFieldList = __decorate([NotifyPropertyChanges], PivotFieldList);\n  return PivotFieldList;\n}(Component);\n\nexport { PivotFieldList };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/base/field-list.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","Event","Component","Internationalization","extend","isBlazor","L10n","remove","addClass","Browser","Complex","getInstance","NotifyPropertyChanges","removeClass","isNullOrUndefined","DataManager","Query","PivotEngine","events","cls","PivotCommon","Render","PivotView","DataSourceSettings","createSpinner","showSpinner","hideSpinner","PivotUtil","OlapEngine","PivotFieldList","_super","options","element","_this","call","pivotChange","isRequiredUpdate","lastSortInfo","lastFilterInfo","lastAggregationInfo","lastCalcFieldInfo","isPopupView","enableValueSorting","request","XMLHttpRequest","remoteData","requiredModules","modules","allowCalculatedField","push","args","member","getAllSummaryType","preRender","dataSourceSettings","providerType","olapEngineModule","dataType","engineModule","isAdaptive","isDevice","globalize","locale","renderModule","defaultLocale","staticFieldList","fieldList","dropFilterPrompt","dropColPrompt","dropRowPrompt","dropValPrompt","addPrompt","adaptiveFieldHeader","centerHeader","add","drag","filter","filtered","sort","filters","rows","columns","values","CalculatedField","createCalculatedField","fieldName","error","invalidFormula","dropText","dropTextMobile","dropAction","search","close","cancel","delete","alert","warning","ok","allFields","formula","fieldExist","confirmText","noMatches","format","edit","clear","clearCalculatedField","editCalculatedField","sortAscending","sortDescending","sortNone","formulaField","dragField","clearFilter","by","enterValue","chooseDate","all","multipleItems","Equals","DoesNotEquals","BeginWith","DoesNotBeginWith","EndsWith","DoesNotEndsWith","Contains","DoesNotContains","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","Between","NotBetween","Before","BeforeOrEqualTo","After","AfterOrEqualTo","label","date","value","labelTextContent","dateTextContent","valueTextContent","And","Sum","Count","DistinctCount","Product","Avg","Median","Min","Max","Index","SampleStDev","PopulationStDev","SampleVar","PopulationVar","RunningTotals","DifferenceFrom","PercentageOfDifferenceFrom","PercentageOfGrandTotal","PercentageOfColumnTotal","PercentageOfRowTotal","PercentageOfParentTotal","PercentageOfParentColumnTotal","PercentageOfParentRowTotal","MoreOption","Years","Quarters","Months","Days","Hours","Minutes","Seconds","apply","valueFieldSettings","sourceName","sourceCaption","summarizeValuesBy","baseField","baseItem","example","editorDataLimitMsg","deferLayoutUpdate","null","undefined","groupOutOfRange","fieldDropErrorAction","memberType","selectedHierarchy","formatString","expressionField","olapDropText","customFormat","numberFormatString","Measure","Dimension","Standard","Currency","Percent","Custom","blank","fieldTooltip","fieldTitle","QuarterYear","caption","copy","of","group","removeCalculatedField","yes","no","localeObj","getModuleName","isDragging","captionData","wireEvent","frameCustomProperties","fieldListData","pivotGridModule","updatePageSettings","pageSettings","staticPivotGridModule","isDrillThrough","allowDrillThrough","editSettings","allowEditing","customProperties","mode","savedFieldList","savedFieldListData","clonedReport","render","url","guid","generateUUID","getEngine","open","withCredentials","onreadystatechange","onReadyStateChange","bind","setRequestHeader","send","initialLoad","action","drillItem","sortItem","aggField","cField","filterItem","memberName","rawDataArgs","editArgs","currentAction","enableDrillThrough","JSON","stringify","getLocalizedObject","params","parse","getPersistData","internalProperties","aggregatedItem","calculatedItem","fetchRawDataArgs","hash","trigger","beforeServiceInvoke","observedArgs","onSuccess","readyState","DONE","engine","responseText","currentMembers","members","dateMembers","formattedMembers","formattedText","FormattedText","actualText","ActualText","dateMember","pivotButtonModule","updateFilterEvents","fList","formatFieldList","keys","fields","rowCount","pivotCount","RowCount","columnCount","ColumnCount","rowStartPos","RowStartPosition","colStartPos","ColumnStartPosition","rowFirstLvl","RowFirstLevel","colFirstLvl","ColumnFirstLevel","rowPos","pivotValues","formatPivotValues","pivotValue","rCnt","axis","headerContent","frameContent","valueSort","ValueSortSettings","valueSortSettings","headerText","HeaderText","headerDelimiter","HeaderDelimiter","sortOrder","SortOrder","columnIndex","ColumnIndex","initEngine","calculatedFieldModule","isRequireUpdate","endDialog","dataSource","type","jsonObject","split","setProperties","load","getClonedDataSourceSettings","ROOT","enableRtl","RTL","DEVICE","cssClass","notify","renderComplete","on","generateData","dataReady","fieldListRender","unWireEvent","isDestroyed","off","keyEntity","addOnPersist","onPropertyChanged","newProp","oldProp","requireRefresh","_i","_a","prop","refresh","savedDataSourceSettings","updateDataSourceSettings","isButtonIconRefesh","showGroupingBar","groupingBarModule","cloneFieldSettings","axisFieldModule","pivot","showFieldList","pivotFieldListModule","treeViewModule","fieldTable","treeViewUpdate","aggregateTypes","data","pivotCommon","isArray","toString","errorDialog","createErrorDialog","getConstant","control","enginePopulating","groupSettings","pivotDataSet","clonedDataSet","getClonedData","renderEngine","getValueCellInfo","pivotFieldList","eventArgs","this$_1","enginePopulated","dataBound","this$_2","setTimeout","getData","aggregateObj","aggregateCellInfo","executeQuery","then","e","result","innerHTML","showDialog","renderMode","dialogRenderer","fieldListDialog","visible","destroy","document","getElementById","id","fieldListSpinnerElement","show","querySelector","spinnerTemplate","template","createElement","pivotEngine","moduleName","allowDeferLayoutUpdate","clonedDataSource","clonedFieldList","getFieldCaption","getFields","lnt","obj","name","updateDataSource","isTreeViewRefresh","isEngineRefresh","showWaitingPopup","isOlapDataRefreshed","enableVirtualization","isCalcChange","isSorted","isAggChange","isFiltered","interopArguments","onSort","dataArgs","window","copyWithoutCircularReferences","filterSettings","onFilter","onAggregation","calculatedFieldSettings","onCalcOperation","args_1","interopAdaptor","invokeMethodAsync","updateBlazorData","enginePopulatedEventMethod","properties","updateOlapDataSource","updateView","uiUpdate","hideWaitingPopup","updateCalcFields","dataFields","update","pivotId","ID","pivotInstance","fieldListRefreshed","isStaticRefresh","renderPivotGrid","dataBind","triggerPopulateEvent","rMembers","cMembers","valueMatrix","indexMatrix","contextMenuModule","axisTableModule"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, Event, Component, Internationalization, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { L10n, remove, addClass, Browser, Complex, getInstance } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, removeClass, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { PivotEngine } from '../../base/engine';\nimport * as events from '../../common/base/constant';\nimport * as cls from '../../common/base/css-constant';\nimport { PivotCommon } from '../../common/base/pivot-common';\nimport { Render } from '../renderer/renderer';\nimport { PivotView } from '../../pivotview/base/pivotview';\nimport { DataSourceSettings } from '../../pivotview/model/datasourcesettings';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { PivotUtil } from '../../base/util';\nimport { OlapEngine } from '../../base/olap/engine';\n/**\n * Represents the PivotFieldList component.\n * ```html\n * <div id=\"pivotfieldlist\"></div>\n * <script>\n *  var pivotfieldlistObj = new PivotFieldList({ });\n *  pivotfieldlistObj.appendTo(\"#pivotfieldlist\");\n * </script>\n * ```\n */\nvar PivotFieldList = /** @class */ (function (_super) {\n    __extends(PivotFieldList, _super);\n    /**\n     * Constructor for creating the widget\n     * @param  {PivotFieldListModel} options - options\n     * @param  {string|HTMLElement} element - element\n     */\n    function PivotFieldList(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /** @hidden */\n        _this.pivotChange = false;\n        _this.isRequiredUpdate = true;\n        /** @hidden */\n        _this.lastSortInfo = {};\n        /** @hidden */\n        _this.lastFilterInfo = {};\n        /** @hidden */\n        _this.lastAggregationInfo = {};\n        /** @hidden */\n        _this.lastCalcFieldInfo = {};\n        /** @hidden */\n        _this.isPopupView = false;\n        /** @hidden */\n        _this.enableValueSorting = false;\n        _this.request = new XMLHttpRequest();\n        _this.remoteData = [];\n        return _this;\n    }\n    /**\n     * To provide the array of modules needed for control rendering\n     * @returns {ModuleDeclaration[]} - ModuleDeclaration[]\n     * @hidden\n     */\n    PivotFieldList.prototype.requiredModules = function () {\n        var modules = [];\n        if (this.allowCalculatedField) {\n            modules.push({ args: [this], member: 'calculatedField' });\n        }\n        return modules;\n    };\n    /**\n     * @returns {AggregateTypes[]}- AggregateTypes[]\n     * @hidden\n     */\n    PivotFieldList.prototype.getAllSummaryType = function () {\n        return ['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index',\n            'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal',\n            'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal',\n            'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'];\n    };\n    /* eslint-disable-next-line */\n    /**\n     * For internal use only - Initialize the event handler;\n     * @private\n     */\n    PivotFieldList.prototype.preRender = function () {\n        if (this.dataSourceSettings && this.dataSourceSettings.providerType === 'SSAS') {\n            this.olapEngineModule = new OlapEngine();\n            this.dataType = 'olap';\n        }\n        else {\n            this.engineModule = new PivotEngine();\n            this.dataType = 'pivot';\n        }\n        this.isAdaptive = Browser.isDevice;\n        this.globalize = new Internationalization(this.locale);\n        this.renderModule = new Render(this);\n        /* eslint-disable */\n        this.defaultLocale = {\n            staticFieldList: 'Pivot Field List',\n            fieldList: 'Field List',\n            dropFilterPrompt: 'Drop filter here',\n            dropColPrompt: 'Drop column here',\n            dropRowPrompt: 'Drop row here',\n            dropValPrompt: 'Drop value here',\n            addPrompt: 'Add field here',\n            adaptiveFieldHeader: 'Choose field',\n            centerHeader: 'Drag fields between axes below:',\n            add: 'add',\n            drag: 'Drag',\n            filter: 'Filter',\n            filtered: 'Filtered',\n            sort: 'Sort',\n            remove: 'Remove',\n            filters: 'Filters',\n            rows: 'Rows',\n            columns: 'Columns',\n            values: 'Values',\n            CalculatedField: 'Calculated Field',\n            createCalculatedField: 'Create Calculated Field',\n            fieldName: 'Enter the field name',\n            error: 'Error',\n            invalidFormula: 'Invalid formula.',\n            dropText: 'Example: (\"Sum(Order_Count)\" + \"Sum(In_Stock)\") * 250',\n            dropTextMobile: 'Add fields and edit formula here.',\n            dropAction: 'Calculated field cannot be place in any other region except value axis.',\n            search: 'Search',\n            close: 'Close',\n            cancel: 'Cancel',\n            delete: 'Delete',\n            alert: 'Alert',\n            warning: 'Warning',\n            ok: 'OK',\n            allFields: 'All Fields',\n            formula: 'Formula',\n            fieldExist: 'A field already exists in this name. Please enter a different name.',\n            confirmText: 'A calculation field already exists in this name. Do you want to replace it?',\n            noMatches: 'No matches',\n            format: 'Summaries values by',\n            edit: 'Edit',\n            clear: 'Clear',\n            clearCalculatedField: 'Clear edited field info',\n            editCalculatedField: 'Edit calculated field',\n            sortAscending: 'Sort ascending order',\n            sortDescending: 'Sort descending order',\n            sortNone: 'Sort data order',\n            formulaField: 'Drag and drop fields to formula',\n            dragField: 'Drag field to formula',\n            clearFilter: 'Clear',\n            by: 'by',\n            enterValue: 'Enter value',\n            chooseDate: 'Enter date',\n            all: 'All',\n            multipleItems: 'Multiple items',\n            Equals: 'Equals',\n            DoesNotEquals: 'Does Not Equal',\n            BeginWith: 'Begins With',\n            DoesNotBeginWith: 'Does Not Begin With',\n            EndsWith: 'Ends With',\n            DoesNotEndsWith: 'Does Not End With',\n            Contains: 'Contains',\n            DoesNotContains: 'Does Not Contain',\n            GreaterThan: 'Greater Than',\n            GreaterThanOrEqualTo: 'Greater Than Or Equal To',\n            LessThan: 'Less Than',\n            LessThanOrEqualTo: 'Less Than Or Equal To',\n            Between: 'Between',\n            NotBetween: 'Not Between',\n            Before: 'Before',\n            BeforeOrEqualTo: 'Before Or Equal To',\n            After: 'After',\n            AfterOrEqualTo: 'After Or Equal To',\n            member: 'Member',\n            label: 'Label',\n            date: 'Date',\n            value: 'Value',\n            labelTextContent: 'Show the items for which the label',\n            dateTextContent: 'Show the items for which the date',\n            valueTextContent: 'Show the items for which',\n            And: 'and',\n            Sum: 'Sum',\n            Count: 'Count',\n            DistinctCount: 'Distinct Count',\n            Product: 'Product',\n            Avg: 'Avg',\n            Median: 'Median',\n            Min: 'Min',\n            Max: 'Max',\n            Index: 'Index',\n            SampleStDev: 'Sample StDev',\n            PopulationStDev: 'Population StDev',\n            SampleVar: 'Sample Var',\n            PopulationVar: 'Population Var',\n            RunningTotals: 'Running Totals',\n            DifferenceFrom: 'Difference From',\n            PercentageOfDifferenceFrom: '% of Difference From',\n            PercentageOfGrandTotal: '% of Grand Total',\n            PercentageOfColumnTotal: '% of Column Total',\n            PercentageOfRowTotal: '% of Row Total',\n            PercentageOfParentTotal: '% of Parent Total',\n            PercentageOfParentColumnTotal: '% of Parent Column Total',\n            PercentageOfParentRowTotal: '% of Parent Row Total',\n            MoreOption: 'More...',\n            Years: 'Years',\n            Quarters: 'Quarters',\n            Months: 'Months',\n            Days: 'Days',\n            Hours: 'Hours',\n            Minutes: 'Minutes',\n            Seconds: 'Seconds',\n            apply: 'Apply',\n            valueFieldSettings: 'Value field settings',\n            sourceName: 'Field name :',\n            sourceCaption: 'Field caption',\n            summarizeValuesBy: 'Summarize values by',\n            baseField: 'Base field',\n            baseItem: 'Base item',\n            example: 'e.g:',\n            editorDataLimitMsg: ' more items. Search to refine further.',\n            deferLayoutUpdate: 'Defer Layout Update',\n            null: 'null',\n            undefined: 'undefined',\n            groupOutOfRange: 'Out of Range',\n            fieldDropErrorAction: 'The field you are moving cannot be placed in that area of the report',\n            memberType: 'Field Type',\n            selectedHierarchy: 'Parent Hierarchy',\n            formatString: 'Format',\n            expressionField: 'Expression',\n            olapDropText: 'Example: [Measures].[Order Quantity] + ([Measures].[Order Quantity] * 0.10)',\n            customFormat: 'Enter custom format string',\n            numberFormatString: 'Example: C, P, 0000 %, ###0.##0#, etc.',\n            Measure: 'Measure',\n            Dimension: 'Dimension',\n            Standard: 'Standard',\n            Currency: 'Currency',\n            Percent: 'Percent',\n            Custom: 'Custom',\n            blank: '(Blank)',\n            fieldTooltip: 'Drag and drop fields to create an expression. ' +\n                'And, if you want to edit the existing calculated fields! ' +\n                'You can achieve it by simply selecting the field under \"Calculated Members\".',\n            fieldTitle: 'Field Name',\n            QuarterYear: 'Quarter Year',\n            caption: 'Field Caption',\n            copy: 'Copy',\n            of: 'of',\n            group: 'Group',\n            removeCalculatedField: 'Are you sure you want to delete this calculated field?',\n            yes: 'Yes',\n            no: 'No'\n        };\n        /* eslint-enable */\n        this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n        this.isDragging = false;\n        this.captionData = [];\n        this.wireEvent();\n    };\n    PivotFieldList.prototype.frameCustomProperties = function (fieldListData, fieldList) {\n        if (this.pivotGridModule) {\n            this.pivotGridModule.updatePageSettings(false);\n        }\n        var pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : this.pageSettings;\n        var localeObj = this.pivotGridModule ? this.pivotGridModule.localeObj :\n            (this.staticPivotGridModule ? this.staticPivotGridModule.localeObj : this.localeObj);\n        var isDrillThrough = this.pivotGridModule ?\n            (this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing) : true;\n        var enableValueSorting = this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined;\n        var customProperties;\n        if (this.dataType === 'olap') {\n            customProperties = {\n                mode: '',\n                savedFieldList: fieldList ? fieldList : undefined,\n                savedFieldListData: fieldListData ? fieldListData : undefined,\n                pageSettings: pageSettings,\n                enableValueSorting: enableValueSorting,\n                isDrillThrough: isDrillThrough,\n                localeObj: localeObj\n            };\n        }\n        else {\n            customProperties = {\n                mode: '',\n                savedFieldList: undefined,\n                pageSettings: pageSettings,\n                enableValueSorting: enableValueSorting,\n                isDrillThrough: isDrillThrough,\n                localeObj: localeObj,\n                clonedReport: this.clonedReport\n            };\n        }\n        return customProperties;\n    };\n    /* eslint-disable */\n    /**\n     * Initialize the control rendering\n     * @returns {void}\n     * @private\n     */\n    PivotFieldList.prototype.render = function () {\n        if (this.dataType === 'pivot' && this.dataSourceSettings.url && this.dataSourceSettings.url !== '') {\n            if (this.dataSourceSettings.mode === 'Server') {\n                this.guid = PivotUtil.generateUUID();\n                this.getEngine('initialRender', null, null, null, null, null, null);\n            }\n            else {\n                this.request.open(\"GET\", this.dataSourceSettings.url, true);\n                this.request.withCredentials = false;\n                this.request.onreadystatechange = this.onReadyStateChange.bind(this);\n                this.request.setRequestHeader(\"Content-type\", \"text/plain\");\n                this.request.send(null);\n            }\n        }\n        else {\n            this.initialLoad();\n        }\n    };\n    /**\n     * @hidden\n     */\n    PivotFieldList.prototype.getEngine = function (action, drillItem, sortItem, aggField, cField, filterItem, memberName, rawDataArgs, editArgs) {\n        var _this = this;\n        this.currentAction = action;\n        if (this.pivotGridModule) {\n            this.pivotGridModule.updatePageSettings(false);\n        }\n        var customProperties = {\n            pageSettings: this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined,\n            enableValueSorting: this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined,\n            enableDrillThrough: this.pivotGridModule ?\n                (this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing) : true,\n            locale: JSON.stringify(PivotUtil.getLocalizedObject(this))\n        };\n        this.request.open(\"POST\", this.dataSourceSettings.url, true);\n        var params = {\n            request: this.request,\n            dataSourceSettings: JSON.parse(this.getPersistData()).dataSourceSettings,\n            action: action,\n            customProperties: {},\n            internalProperties: customProperties,\n            drillItem: drillItem,\n            sortItem: sortItem,\n            aggregatedItem: aggField,\n            calculatedItem: cField,\n            filterItem: filterItem,\n            memberName: memberName,\n            fetchRawDataArgs: rawDataArgs,\n            editArgs: editArgs,\n            hash: this.guid\n        };\n        this.trigger(events.beforeServiceInvoke, params, function (observedArgs) {\n            _this.request = observedArgs.request;\n            params.internalProperties = observedArgs.internalProperties;\n            params.customProperties = observedArgs.customProperties;\n            params.dataSourceSettings = observedArgs.dataSourceSettings;\n            params.calculatedItem = observedArgs.calculatedItem;\n            params.drillItem = observedArgs.drillItem;\n            params.editArgs = observedArgs.editArgs;\n            params.fetchRawDataArgs = observedArgs.fetchRawDataArgs;\n            params.filterItem = observedArgs.filterItem;\n            params.hash = observedArgs.hash;\n            params.memberName = observedArgs.memberName;\n            params.sortItem = observedArgs.sortItem;\n        });\n        this.request.withCredentials = false;\n        this.request.onreadystatechange = this.onSuccess.bind(this);\n        this.request.setRequestHeader(\"Content-type\", \"application/json\");\n        this.request.send(JSON.stringify(params));\n    };\n    PivotFieldList.prototype.onSuccess = function () {\n        if (this.request.readyState === XMLHttpRequest.DONE) {\n            try {\n                var engine = JSON.parse(this.request.responseText);\n                if (this.currentAction === 'fetchFieldMembers') {\n                    var currentMembers = JSON.parse(engine.members);\n                    var dateMembers = [];\n                    var formattedMembers = {};\n                    var members = {};\n                    for (var i = 0; i < currentMembers.length; i++) {\n                        dateMembers.push({ formattedText: currentMembers[i].FormattedText, actualText: currentMembers[i].ActualText });\n                        formattedMembers[currentMembers[i].FormattedText] = {};\n                        members[currentMembers[i].ActualText] = {};\n                    }\n                    this.engineModule.fieldList[engine.memberName].dateMember = dateMembers;\n                    this.engineModule.fieldList[engine.memberName].formattedMembers = formattedMembers;\n                    this.engineModule.fieldList[engine.memberName].members = members;\n                    this.pivotButtonModule.updateFilterEvents();\n                }\n                else {\n                    var fList = PivotUtil.formatFieldList(JSON.parse(engine.fieldList));\n                    if (this.engineModule.fieldList) {\n                        var keys = Object.keys(this.engineModule.fieldList);\n                        for (var i = 0; i < keys.length; i++) {\n                            if (this.engineModule.fieldList[keys[i]] && fList[keys[i]]) {\n                                fList[keys[i]].dateMember = this.engineModule.fieldList[keys[i]].dateMember;\n                                fList[keys[i]].formattedMembers = this.engineModule.fieldList[keys[i]].formattedMembers;\n                                fList[keys[i]].members = this.engineModule.fieldList[keys[i]].members;\n                            }\n                        }\n                    }\n                    this.engineModule.fieldList = fList;\n                    this.engineModule.fields = JSON.parse(engine.fields);\n                    this.engineModule.rowCount = JSON.parse(engine.pivotCount).RowCount;\n                    this.engineModule.columnCount = JSON.parse(engine.pivotCount).ColumnCount;\n                    this.engineModule.rowStartPos = JSON.parse(engine.pivotCount).RowStartPosition;\n                    this.engineModule.colStartPos = JSON.parse(engine.pivotCount).ColumnStartPosition;\n                    this.engineModule.rowFirstLvl = JSON.parse(engine.pivotCount).RowFirstLevel;\n                    this.engineModule.colFirstLvl = JSON.parse(engine.pivotCount).ColumnFirstLevel;\n                    var rowPos = void 0;\n                    var pivotValues = PivotUtil.formatPivotValues(JSON.parse(engine.pivotValue));\n                    for (var rCnt = 0; rCnt < pivotValues.length; rCnt++) {\n                        if (pivotValues[rCnt] && pivotValues[rCnt][0] && pivotValues[rCnt][0].axis === 'row') {\n                            rowPos = rCnt;\n                            break;\n                        }\n                    }\n                    this.engineModule.headerContent = PivotUtil.frameContent(pivotValues, 'header', rowPos, this);\n                    this.engineModule.pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined;\n                    var valueSort = JSON.parse(engine.dataSourceSettings).ValueSortSettings;\n                    this.engineModule.valueSortSettings = {\n                        headerText: valueSort.HeaderText,\n                        headerDelimiter: valueSort.HeaderDelimiter,\n                        sortOrder: valueSort.SortOrder,\n                        columnIndex: valueSort.ColumnIndex\n                    };\n                    this.engineModule.pivotValues = pivotValues;\n                }\n            }\n            catch (error) {\n                this.engineModule.pivotValues = [];\n            }\n            if (this.currentAction !== 'fetchFieldMembers') {\n                this.initEngine();\n                if (this.calculatedFieldModule && this.calculatedFieldModule.isRequireUpdate) {\n                    this.calculatedFieldModule.endDialog();\n                    this.calculatedFieldModule.isRequireUpdate = false;\n                }\n                if (this.pivotGridModule && this.pivotGridModule.calculatedFieldModule && this.pivotGridModule.calculatedFieldModule.isRequireUpdate) {\n                    this.pivotGridModule.calculatedFieldModule.endDialog();\n                    this.pivotGridModule.calculatedFieldModule.isRequireUpdate = false;\n                }\n            }\n        }\n    };\n    PivotFieldList.prototype.onReadyStateChange = function () {\n        if (this.request.readyState === XMLHttpRequest.DONE) {\n            var dataSource = [];\n            if (this.dataSourceSettings.type === 'CSV') {\n                var jsonObject = this.request.responseText.split(/\\r?\\n|\\r/);\n                for (var i = 0; i < jsonObject.length; i++) {\n                    if (!isNullOrUndefined(jsonObject[i]) && jsonObject[i] !== '') {\n                        dataSource.push(jsonObject[i].split(','));\n                    }\n                }\n            }\n            else {\n                try {\n                    dataSource = JSON.parse(this.request.responseText);\n                }\n                catch (error) {\n                    dataSource = [];\n                }\n            }\n            if (isBlazor() && dataSource && dataSource.length > 0) {\n                this.remoteData = dataSource;\n            }\n            else if (dataSource && dataSource.length > 0) {\n                this.setProperties({ dataSourceSettings: { dataSource: dataSource } }, true);\n            }\n            this.initialLoad();\n        }\n    };\n    PivotFieldList.prototype.initialLoad = function () {\n        var _this = this;\n        this.trigger(events.load, { dataSourceSettings: isBlazor() ? PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings) : this.dataSourceSettings }, function (observedArgs) {\n            if (isBlazor()) {\n                observedArgs.dataSourceSettings.dataSource = _this.dataSourceSettings.dataSource;\n            }\n            _this.dataSourceSettings = observedArgs.dataSourceSettings;\n            addClass([_this.element], cls.ROOT);\n            if (_this.enableRtl) {\n                addClass([_this.element], cls.RTL);\n            }\n            else {\n                removeClass([_this.element], cls.RTL);\n            }\n            if (_this.isAdaptive) {\n                addClass([_this.element], cls.DEVICE);\n            }\n            else {\n                removeClass([_this.element], cls.DEVICE);\n            }\n            if (_this.cssClass) {\n                addClass([_this.element], _this.cssClass);\n            }\n            _this.notify(events.initialLoad, {});\n        });\n        if (isBlazor()) {\n            this.renderComplete();\n        }\n    };\n    /**\n     * Binding events to the Pivot Field List element.\n     * @hidden\n     */\n    PivotFieldList.prototype.wireEvent = function () {\n        this.on(events.initialLoad, this.generateData, this);\n        this.on(events.dataReady, this.fieldListRender, this);\n    };\n    /**\n     * Unbinding events from the element on widget destroy.\n     * @hidden\n     */\n    PivotFieldList.prototype.unWireEvent = function () {\n        if (this.pivotGridModule && this.pivotGridModule.isDestroyed) {\n            return;\n        }\n        this.off(events.initialLoad, this.generateData);\n        this.off(events.dataReady, this.fieldListRender);\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns {string}\n     */\n    PivotFieldList.prototype.getPersistData = function () {\n        var keyEntity = ['dataSourceSettings'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    PivotFieldList.prototype.getModuleName = function () {\n        return 'pivotfieldlist';\n    };\n    /**\n     * Called internally if any of the property value changed.\n     * @hidden\n     */\n    PivotFieldList.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var requireRefresh = false;\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'locale':\n                    if (isBlazor()) {\n                        break;\n                    }\n                    else {\n                        _super.prototype.refresh.call(this);\n                    }\n                    break;\n                case 'dataSourceSettings':\n                    if (!isNullOrUndefined(newProp.dataSourceSettings.dataSource)) {\n                        if (!isNullOrUndefined(this.savedDataSourceSettings)) {\n                            PivotUtil.updateDataSourceSettings(this.staticPivotGridModule, this.savedDataSourceSettings);\n                            this.savedDataSourceSettings = undefined;\n                        }\n                        if (newProp.dataSourceSettings.dataSource && newProp.dataSourceSettings.dataSource.length === 0 && !isNullOrUndefined(this.staticPivotGridModule)) {\n                            this.savedDataSourceSettings = PivotUtil.getClonedDataSourceSettings(this.staticPivotGridModule.dataSourceSettings);\n                            this.staticPivotGridModule.setProperties({ dataSourceSettings: { rows: [] } }, true);\n                            this.staticPivotGridModule.setProperties({ dataSourceSettings: { columns: [] } }, true);\n                            this.staticPivotGridModule.setProperties({ dataSourceSettings: { values: [] } }, true);\n                            this.staticPivotGridModule.setProperties({ dataSourceSettings: { filters: [] } }, true);\n                        }\n                        this.engineModule.fieldList = null;\n                        if (!isNullOrUndefined(this.staticPivotGridModule)) {\n                            this.staticPivotGridModule.pivotValues = [];\n                        }\n                        this.initEngine();\n                    }\n                    if (PivotUtil.isButtonIconRefesh(prop, oldProp, newProp)) {\n                        if (this.isPopupView && this.pivotGridModule &&\n                            this.pivotGridModule.showGroupingBar && this.pivotGridModule.groupingBarModule) {\n                            var filters = PivotUtil.cloneFieldSettings(this.dataSourceSettings.filters);\n                            var values = PivotUtil.cloneFieldSettings(this.dataSourceSettings.values);\n                            var rows = PivotUtil.cloneFieldSettings(this.dataSourceSettings.rows);\n                            var columns = PivotUtil.cloneFieldSettings(this.dataSourceSettings.columns);\n                            this.pivotGridModule.setProperties({ dataSourceSettings: { rows: rows, columns: columns, values: values, filters: filters } }, true);\n                            this.pivotGridModule.axisFieldModule.render();\n                        }\n                        else if (!this.isPopupView && this.staticPivotGridModule && !this.staticPivotGridModule.isDestroyed) {\n                            var pivot = this.staticPivotGridModule;\n                            if (pivot.showGroupingBar && pivot.groupingBarModule) {\n                                pivot.axisFieldModule.render();\n                            }\n                            if (pivot.showFieldList && pivot.pivotFieldListModule) {\n                                var rows = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.rows);\n                                var columns = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.columns);\n                                var values = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.values);\n                                var filters = PivotUtil.cloneFieldSettings(pivot.dataSourceSettings.filters);\n                                pivot.pivotFieldListModule.setProperties({ dataSourceSettings: { rows: rows, columns: columns, values: values, filters: filters } }, true);\n                                pivot.pivotFieldListModule.axisFieldModule.render();\n                                if (pivot.pivotFieldListModule.treeViewModule.fieldTable && !pivot.isAdaptive) {\n                                    pivot.pivotFieldListModule.notify(events.treeViewUpdate, {});\n                                }\n                            }\n                        }\n                        this.axisFieldModule.render();\n                        if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n                            this.notify(events.treeViewUpdate, {});\n                        }\n                    }\n                    break;\n                case 'aggregateTypes':\n                    if (this.axisFieldModule) {\n                        this.axisFieldModule.render();\n                    }\n                    if (this.pivotGridModule && this.pivotGridModule.axisFieldModule) {\n                        this.pivotGridModule.setProperties({ aggregateTypes: newProp.aggregateTypes }, true);\n                        this.pivotGridModule.axisFieldModule.render();\n                    }\n                    break;\n                case 'enableRtl':\n                    if (this.enableRtl) {\n                        addClass([this.element], cls.RTL);\n                    }\n                    else {\n                        removeClass([this.element], cls.RTL);\n                    }\n                    requireRefresh = true;\n                    break;\n            }\n            if (requireRefresh) {\n                this.fieldListRender();\n            }\n        }\n    };\n    /* eslint-disable */\n    PivotFieldList.prototype.initEngine = function () {\n        var _this = this;\n        if (this.dataType === 'pivot') {\n            var data = !isNullOrUndefined(this.dataSourceSettings.dataSource) ? this.dataSourceSettings.dataSource[0] :\n                !isNullOrUndefined(this.engineModule.data) ? this.engineModule.data[0] : undefined;\n            if (data && this.pivotCommon) {\n                var isArray = Object.prototype.toString.call(data) == '[object Array]';\n                if (isArray && this.dataSourceSettings.type === 'JSON') {\n                    this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidJSON'));\n                    return;\n                }\n                else if (!isArray && this.dataSourceSettings.type === 'CSV') {\n                    this.pivotCommon.errorDialog.createErrorDialog(this.localeObj.getConstant('error'), this.localeObj.getConstant('invalidCSV'));\n                    return;\n                }\n            }\n        }\n        var args = {\n            dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings)\n        };\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        control.trigger(events.enginePopulating, args, function (observedArgs) {\n            PivotUtil.updateDataSourceSettings(_this, observedArgs.dataSourceSettings);\n            if (_this.dataType === 'pivot') {\n                if (_this.dataSourceSettings.groupSettings && _this.dataSourceSettings.groupSettings.length > 0) {\n                    var pivotDataSet = void 0;\n                    if (isBlazor()) {\n                        pivotDataSet = _this.engineModule.data;\n                    }\n                    else {\n                        pivotDataSet = _this.dataSourceSettings.dataSource;\n                    }\n                    _this.clonedDataSet = (_this.clonedDataSet ? _this.clonedDataSet : PivotUtil.getClonedData(pivotDataSet));\n                    if (isBlazor()) {\n                        _this.clonedReport = _this.clonedReport ? _this.clonedReport : extend({}, _this.dataSourceSettings, null, true);\n                    }\n                    else {\n                        var dataSourceSettings = JSON.parse(_this.getPersistData()).dataSourceSettings;\n                        dataSourceSettings.dataSource = [];\n                        _this.clonedReport = _this.clonedReport ? _this.clonedReport : dataSourceSettings;\n                    }\n                }\n                var customProperties = _this.frameCustomProperties();\n                customProperties.enableValueSorting = _this.staticPivotGridModule ?\n                    _this.staticPivotGridModule.enableValueSorting : _this.enableValueSorting;\n                if (_this.dataSourceSettings.mode !== 'Server') {\n                    _this.engineModule.renderEngine(_this.dataSourceSettings, customProperties, _this.getValueCellInfo.bind(_this));\n                }\n                _this.pivotFieldList = _this.engineModule.fieldList;\n                var eventArgs = {\n                    pivotFieldList: _this.pivotFieldList,\n                    pivotValues: _this.engineModule.pivotValues\n                };\n                var this$_1 = _this;\n                control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n                    this$_1.pivotFieldList = observedArgs.pivotFieldList;\n                    this$_1.engineModule.pivotValues = isBlazor() ? _this.engineModule.pivotValues : observedArgs.pivotValues;\n                    this$_1.notify(events.dataReady, {});\n                    this$_1.trigger(events.dataBound);\n                });\n            }\n            else if (_this.dataType === 'olap') {\n                _this.olapEngineModule.renderEngine(_this.dataSourceSettings, _this.frameCustomProperties(_this.olapEngineModule.fieldListData, _this.olapEngineModule.fieldList));\n                _this.pivotFieldList = _this.olapEngineModule.fieldList;\n                var eventArgs = {\n                    pivotFieldList: _this.pivotFieldList,\n                    pivotValues: _this.olapEngineModule.pivotValues\n                };\n                var this$_2 = _this;\n                control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n                    this$_2.pivotFieldList = observedArgs.pivotFieldList;\n                    this$_2.olapEngineModule.pivotValues = isBlazor() ? _this.olapEngineModule.pivotValues : observedArgs.pivotValues;\n                    this$_2.notify(events.dataReady, {});\n                    this$_2.trigger(events.dataBound);\n                });\n            }\n        });\n    };\n    /* eslint-enable */\n    PivotFieldList.prototype.generateData = function () {\n        this.pivotFieldList = {};\n        if (this.dataSourceSettings && (this.dataSourceSettings.dataSource || this.dataSourceSettings.url)) {\n            if ((this.dataSourceSettings.url !== '' && this.dataType === 'olap') ||\n                this.dataSourceSettings.dataSource.length > 0) {\n                if (this.dataType === 'pivot') {\n                    this.engineModule.data = this.dataSourceSettings.dataSource;\n                }\n                this.initEngine();\n            }\n            else if (this.dataSourceSettings.dataSource instanceof DataManager) {\n                if (this.dataType === 'pivot' && this.remoteData.length > 0) {\n                    this.engineModule.data = this.remoteData;\n                    this.initEngine();\n                }\n                else {\n                    setTimeout(this.getData.bind(this), 100);\n                }\n            }\n        }\n        else if (isBlazor() && this.dataType === 'pivot' &&\n            this.engineModule.data && this.engineModule.data.length > 0) {\n            this.initEngine();\n        }\n        else {\n            this.notify(events.dataReady, {});\n            this.trigger(events.dataBound);\n        }\n    };\n    PivotFieldList.prototype.getValueCellInfo = function (aggregateObj) {\n        var args = aggregateObj;\n        this.trigger(events.aggregateCellInfo, args);\n        return args;\n    };\n    PivotFieldList.prototype.getData = function () {\n        this.dataSourceSettings.dataSource.executeQuery(new Query()).then(this.executeQuery.bind(this));\n    };\n    PivotFieldList.prototype.executeQuery = function (e) {\n        this.engineModule.data = e.result;\n        this.initEngine();\n    };\n    PivotFieldList.prototype.fieldListRender = function () {\n        this.element.innerHTML = '';\n        var showDialog;\n        if (this.renderMode === 'Popup' && this.dialogRenderer.fieldListDialog && !this.dialogRenderer.fieldListDialog.isDestroyed) {\n            showDialog = this.dialogRenderer.fieldListDialog.visible;\n            this.dialogRenderer.fieldListDialog.destroy();\n            remove(document.getElementById(this.element.id + '_Wrapper'));\n        }\n        this.renderModule.render();\n        if (this.renderMode === 'Popup') {\n            this.fieldListSpinnerElement = this.dialogRenderer.fieldListDialog.element;\n            if (showDialog) {\n                this.dialogRenderer.fieldListDialog.show();\n            }\n        }\n        else {\n            this.fieldListSpinnerElement = this.element.querySelector('.e-pivotfieldlist-wrapper');\n        }\n        if (this.spinnerTemplate) {\n            createSpinner({ target: this.fieldListSpinnerElement, template: this.spinnerTemplate }, this.createElement);\n        }\n        else {\n            createSpinner({ target: this.fieldListSpinnerElement }, this.createElement);\n        }\n        var args;\n        args = {\n            pivotEngine: this.dataType === 'olap' ? this.olapEngineModule : this.engineModule,\n            dataSourceSettings: this.dataSourceSettings,\n            id: this.element.id,\n            element: document.getElementById(this.element.id + '_Wrapper'),\n            moduleName: this.getModuleName(),\n            enableRtl: this.enableRtl,\n            isAdaptive: this.isAdaptive,\n            renderMode: this.renderMode,\n            localeObj: this.localeObj,\n            dataType: this.dataType\n        };\n        this.pivotCommon = new PivotCommon(args);\n        this.pivotCommon.control = this;\n        if (this.allowDeferLayoutUpdate) {\n            this.clonedDataSource = extend({}, this.dataSourceSettings, null, true);\n            this.clonedFieldList = extend({}, this.pivotFieldList, null, true);\n        }\n    };\n    PivotFieldList.prototype.getFieldCaption = function (dataSourceSettings) {\n        this.getFields(dataSourceSettings);\n        if (this.captionData.length > 0) {\n            var lnt = this.captionData.length;\n            var engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n            while (lnt--) {\n                if (this.captionData[lnt]) {\n                    for (var _i = 0, _a = this.captionData[lnt]; _i < _a.length; _i++) {\n                        var obj = _a[_i];\n                        if (obj) {\n                            if (engineModule.fieldList[obj.name]) {\n                                if (obj.caption) {\n                                    engineModule.fieldList[obj.name].caption = obj.caption;\n                                }\n                                else {\n                                    engineModule.fieldList[obj.name].caption = obj.name;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    PivotFieldList.prototype.getFields = function (dataSourceSettings) {\n        this.captionData =\n            [dataSourceSettings.rows, dataSourceSettings.columns, dataSourceSettings.values, dataSourceSettings.filters]; /* eslint-disable-line */\n    };\n    /* eslint-disable */\n    /**\n     * Updates the PivotEngine using dataSource from Pivot Field List component.\n     * @function updateDataSource\n     * @returns {void}\n     * @hidden\n     */\n    PivotFieldList.prototype.updateDataSource = function (isTreeViewRefresh, isEngineRefresh) {\n        var _this = this;\n        if (this.pivotGridModule) {\n            this.pivotGridModule.showWaitingPopup();\n        }\n        showSpinner(this.fieldListSpinnerElement);\n        var pivot = this;\n        var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;\n        //setTimeout(() => {\n        var isOlapDataRefreshed = false;\n        var pageSettings = pivot.pivotGridModule && pivot.pivotGridModule.enableVirtualization ?\n            pivot.pivotGridModule.pageSettings : undefined;\n        var isCalcChange = Object.keys(pivot.lastCalcFieldInfo).length > 0 ? true : false;\n        var isSorted = Object.keys(pivot.lastSortInfo).length > 0 ? true : false;\n        var isAggChange = Object.keys(pivot.lastAggregationInfo).length > 0 ? true : false;\n        var isFiltered = Object.keys(pivot.lastFilterInfo).length > 0 ? true : false;\n        var args = {\n            dataSourceSettings: PivotUtil.getClonedDataSourceSettings(pivot.dataSourceSettings)\n        };\n        control.trigger(events.enginePopulating, args, function (observedArgs) {\n            if (!(pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange))) {\n                PivotUtil.updateDataSourceSettings(pivot, observedArgs.dataSourceSettings);\n                PivotUtil.updateDataSourceSettings(pivot.pivotGridModule, observedArgs.dataSourceSettings);\n            }\n            if (isNullOrUndefined(isEngineRefresh)) {\n                if (pivot.dataType === 'pivot') {\n                    var customProperties = pivot.frameCustomProperties();\n                    if (!isSorted) {\n                        customProperties.enableValueSorting = pivot.staticPivotGridModule ?\n                            pivot.staticPivotGridModule.enableValueSorting : pivot.enableValueSorting;\n                    }\n                    else {\n                        pivot.setProperties({ dataSourceSettings: { valueSortSettings: { headerText: '' } } }, true);\n                        customProperties.enableValueSorting = false;\n                    }\n                    customProperties.savedFieldList = pivot.pivotFieldList;\n                    if (pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange)) {\n                        var interopArguments = {};\n                        if (isSorted) {\n                            pivot.pivotGridModule.setProperties({ dataSourceSettings: { valueSortSettings: { headerText: '' } } }, true);\n                            if ((isBlazor())) {\n                                interopArguments = { 'key': 'onSort', 'arg': pivot.lastSortInfo };\n                            }\n                            else if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n                            }\n                            else {\n                                pivot.engineModule.onSort(pivot.lastSortInfo);\n                            }\n                            pivot.lastSortInfo = {};\n                        }\n                        if (isFiltered) {\n                            if (isBlazor()) {\n                                var dataArgs = window['sfBlazor'].copyWithoutCircularReferences([pivot.dataSourceSettings.filterSettings], pivot.dataSourceSettings.filterSettings);\n                                interopArguments = {\n                                    'key': 'onFilter',\n                                    'arg': { 'lastFilterInfo': pivot.lastFilterInfo, 'filterSettings': dataArgs }\n                                };\n                            }\n                            else if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n                            }\n                            else {\n                                pivot.engineModule.onFilter(pivot.lastFilterInfo, pivot.dataSourceSettings);\n                            }\n                            pivot.lastFilterInfo = {};\n                        }\n                        if (isAggChange) {\n                            if (isBlazor()) {\n                                interopArguments = { 'key': 'onAggregation', 'arg': pivot.lastAggregationInfo };\n                            }\n                            else if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n                            }\n                            else {\n                                pivot.engineModule.onAggregation(pivot.lastAggregationInfo);\n                            }\n                            pivot.lastAggregationInfo = {};\n                        }\n                        if (isCalcChange) {\n                            if (isBlazor()) {\n                                interopArguments = {\n                                    'key': 'onCalcOperation',\n                                    'arg': {\n                                        lastCalcFieldInfo: pivot.lastCalcFieldInfo,\n                                        values: pivot.dataSourceSettings.values,\n                                        calculatedFieldSettings: pivot.dataSourceSettings.calculatedFieldSettings\n                                    }\n                                };\n                            }\n                            else if (control.dataSourceSettings.mode === 'Server') {\n                                control.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n                            }\n                            else {\n                                pivot.engineModule.onCalcOperation(pivot.lastCalcFieldInfo);\n                            }\n                            pivot.lastCalcFieldInfo = {};\n                        }\n                        if (isBlazor()) {\n                            var args_1 = window['sfBlazor'].copyWithoutCircularReferences([interopArguments['arg']], interopArguments['arg']);\n                            pivot.pivotGridModule.interopAdaptor.invokeMethodAsync(\"PivotInteropMethod\", interopArguments['key'], args_1).then(function (data) {\n                                if (data === 0) {\n                                    _this.pivotCommon.errorDialog.createErrorDialog(_this.localeObj.getConstant('error'), (pivot.dataSourceSettings.type === 'CSV' ?\n                                        _this.localeObj.getConstant('invalidCSV') : _this.localeObj.getConstant('invalidJSON')));\n                                    return;\n                                }\n                                else {\n                                    pivot.pivotGridModule.updateBlazorData(data, pivot.pivotGridModule);\n                                    pivot.getFieldCaption(pivot.dataSourceSettings);\n                                    pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n                                    if (pivot.calculatedFieldModule && pivot.calculatedFieldModule.isRequireUpdate) {\n                                        pivot.calculatedFieldModule.endDialog();\n                                        pivot.calculatedFieldModule.isRequireUpdate = false;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        if (isBlazor() && pageSettings) {\n                            var dataArgs = window['sfBlazor'].copyWithoutCircularReferences([pivot.dataSourceSettings.properties], pivot.dataSourceSettings.properties);\n                            pivot.pivotGridModule.interopAdaptor.invokeMethodAsync(\"PivotInteropMethod\", 'renderEngine', { 'dataSourceSettings': dataArgs, 'customProperties': customProperties }).then(function (data) {\n                                if (data === 0) {\n                                    _this.pivotCommon.errorDialog.createErrorDialog(_this.localeObj.getConstant('error'), (pivot.dataSourceSettings.type === 'CSV' ?\n                                        _this.localeObj.getConstant('invalidCSV') : _this.localeObj.getConstant('invalidJSON')));\n                                    return;\n                                }\n                                else {\n                                    pivot.pivotGridModule.updateBlazorData(data, pivot.pivotGridModule);\n                                    pivot.getFieldCaption(pivot.dataSourceSettings);\n                                    pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n                                }\n                            });\n                        }\n                        else if (pivot.dataSourceSettings.mode === 'Server') {\n                            if (isSorted)\n                                control.getEngine('onSort', null, pivot.lastSortInfo, null, null, null, null);\n                            else if (isAggChange)\n                                control.getEngine('onAggregation', null, null, pivot.lastAggregationInfo, null, null, null);\n                            else if (isCalcChange)\n                                control.getEngine('onCalcOperation', null, null, null, pivot.lastCalcFieldInfo, null, null);\n                            else if (isFiltered)\n                                control.getEngine('onFilter', null, null, null, null, pivot.lastFilterInfo, null);\n                            else\n                                control.getEngine('onDrop', null, null, null, null, null, null);\n                            pivot.lastSortInfo = {};\n                            pivot.lastAggregationInfo = {};\n                            pivot.lastCalcFieldInfo = {};\n                            pivot.lastFilterInfo = {};\n                        }\n                        else {\n                            pivot.engineModule.renderEngine(pivot.dataSourceSettings, customProperties, pivot.getValueCellInfo.bind(pivot));\n                        }\n                    }\n                }\n                else {\n                    isOlapDataRefreshed = pivot.updateOlapDataSource(pivot, isSorted, isCalcChange, isOlapDataRefreshed);\n                }\n                if (!(isBlazor() && pageSettings)) {\n                    pivot.getFieldCaption(pivot.dataSourceSettings);\n                }\n            }\n            else {\n                pivot.axisFieldModule.render();\n                pivot.isRequiredUpdate = false;\n            }\n            if (!(isBlazor() && pageSettings)) {\n                pivot.enginePopulatedEventMethod(pivot, isTreeViewRefresh, isOlapDataRefreshed);\n            }\n        });\n        //});\n    };\n    /* eslint-enable */\n    PivotFieldList.prototype.enginePopulatedEventMethod = function (pivot, isTreeViewRefresh, isOlapDataRefreshed) {\n        var _this = this;\n        var control = pivot.isPopupView ? pivot.pivotGridModule : pivot;\n        var eventArgs = {\n            dataSourceSettings: pivot.dataSourceSettings,\n            pivotFieldList: pivot.dataType === 'pivot' ? pivot.engineModule.fieldList : pivot.olapEngineModule.fieldList,\n            pivotValues: pivot.dataType === 'pivot' ? pivot.engineModule.pivotValues : pivot.olapEngineModule.pivotValues\n        };\n        control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n            var dataSource = pivot.dataSourceSettings.dataSource;\n            if (isBlazor() && observedArgs.dataSourceSettings.dataSource instanceof Object) {\n                observedArgs.dataSourceSettings.dataSource = dataSource;\n            }\n            pivot.dataSourceSettings = observedArgs.dataSourceSettings;\n            pivot.pivotCommon.dataSourceSettings = pivot.dataSourceSettings;\n            pivot.pivotFieldList = observedArgs.pivotFieldList;\n            if (pivot.dataType === 'olap') {\n                pivot.olapEngineModule.pivotValues = isBlazor() ? pivot.olapEngineModule.pivotValues : observedArgs.pivotValues;\n                pivot.pivotCommon.engineModule = pivot.olapEngineModule;\n            }\n            else {\n                pivot.engineModule.pivotValues = isBlazor() ? pivot.engineModule.pivotValues : observedArgs.pivotValues;\n                pivot.pivotCommon.engineModule = pivot.engineModule;\n            }\n            if (!isTreeViewRefresh && pivot.treeViewModule.fieldTable && !pivot.isAdaptive) {\n                pivot.notify(events.treeViewUpdate, {});\n            }\n            if (pivot.isRequiredUpdate) {\n                if (pivot.allowDeferLayoutUpdate) {\n                    pivot.clonedDataSource = extend({}, pivot.dataSourceSettings, null, true);\n                    pivot.clonedFieldList = extend({}, pivot.pivotFieldList, null, true);\n                }\n                pivot.updateView(pivot.pivotGridModule);\n            }\n            else if (_this.isPopupView && pivot.allowDeferLayoutUpdate) {\n                pivot.pivotGridModule.engineModule = pivot.engineModule;\n                pivot.pivotGridModule.setProperties({\n                    dataSourceSettings: pivot.dataSourceSettings.properties /* eslint-disable-line */\n                }, true);\n                pivot.pivotGridModule.notify(events.uiUpdate, pivot);\n                hideSpinner(pivot.fieldListSpinnerElement);\n            }\n            if (_this.isPopupView && pivot.pivotGridModule &&\n                pivot.pivotGridModule.allowDeferLayoutUpdate && !pivot.isRequiredUpdate) {\n                hideSpinner(pivot.fieldListSpinnerElement);\n                pivot.pivotGridModule.hideWaitingPopup();\n            }\n            pivot.isRequiredUpdate = true;\n            if (!pivot.pivotGridModule || isOlapDataRefreshed) {\n                hideSpinner(pivot.fieldListSpinnerElement);\n            }\n            else {\n                pivot.pivotGridModule.fieldListSpinnerElement = pivot.fieldListSpinnerElement;\n            }\n        });\n    };\n    PivotFieldList.prototype.updateOlapDataSource = function (pivot, isSorted, isCalcChange, isOlapDataRefreshed) {\n        var customProperties = pivot.frameCustomProperties(pivot.olapEngineModule.fieldListData, pivot.olapEngineModule.fieldList);\n        customProperties.savedFieldList = pivot.pivotFieldList;\n        if (isCalcChange || isSorted) {\n            pivot.olapEngineModule.savedFieldList = pivot.pivotFieldList;\n            pivot.olapEngineModule.savedFieldListData = pivot.olapEngineModule.fieldListData;\n            if (isCalcChange) {\n                pivot.olapEngineModule.updateCalcFields(pivot.dataSourceSettings, pivot.lastCalcFieldInfo);\n                pivot.lastCalcFieldInfo = {};\n                isOlapDataRefreshed = pivot.olapEngineModule.dataFields[pivot.lastCalcFieldInfo.name] ? false : true;\n                if (pivot.pivotGridModule) {\n                    pivot.pivotGridModule.hideWaitingPopup();\n                }\n            }\n            else {\n                pivot.olapEngineModule.onSort(pivot.dataSourceSettings);\n            }\n        }\n        else {\n            pivot.olapEngineModule.renderEngine(pivot.dataSourceSettings, customProperties);\n        }\n        return isOlapDataRefreshed;\n    };\n    /**\n     * Updates the Pivot Field List component using dataSource from PivotView component.\n     * @function update\n     * @param {PivotView} control - Pass the instance of pivot table component.\n     * @returns {void}\n     */\n    PivotFieldList.prototype.update = function (control) {\n        if (isBlazor() && control !== undefined) {\n            /* eslint-disable */\n            var pivotId = control.ID;\n            var pivotInstance = getInstance('#' + pivotId, PivotView);\n            control = pivotInstance;\n            /* eslint-enable */\n        }\n        if (control) {\n            this.clonedDataSet = control.clonedDataSet;\n            if (isBlazor() && !this.isPopupView) {\n                PivotUtil.updateDataSourceSettings(this, PivotUtil.getClonedDataSourceSettings(control.dataSourceSettings));\n            }\n            else {\n                this.setProperties({ dataSourceSettings: control.dataSourceSettings }, true);\n            }\n            this.engineModule = control.engineModule;\n            this.olapEngineModule = control.olapEngineModule;\n            this.dataType = control.dataType;\n            this.pivotFieldList = this.dataType === 'olap' ? control.olapEngineModule.fieldList : control.engineModule.fieldList;\n            if (this.isPopupView) {\n                this.pivotGridModule = control;\n            }\n            else {\n                this.staticPivotGridModule = control;\n            }\n            this.getFieldCaption(control.dataSourceSettings);\n            this.pivotCommon.engineModule = this.dataType === 'olap' ? this.olapEngineModule : this.engineModule;\n            this.pivotCommon.dataSourceSettings = this.dataSourceSettings;\n            this.pivotCommon.control = this;\n            if (this.treeViewModule.fieldTable && !this.isAdaptive) {\n                this.notify(events.treeViewUpdate, {});\n            }\n            this.axisFieldModule.render();\n            if (!this.isPopupView && this.allowDeferLayoutUpdate) {\n                this.clonedDataSource = extend({}, this.dataSourceSettings, null, true);\n                this.clonedFieldList = extend({}, this.pivotFieldList, null, true);\n            }\n        }\n    };\n    /**\n     * Updates the PivotView component using dataSource from Pivot Field List component.\n     * @function updateView\n     * @param {PivotView} control - Pass the instance of pivot table component.\n     * @returns {void}\n     */\n    PivotFieldList.prototype.updateView = function (control) {\n        if (isBlazor() && control !== undefined) {\n            /* eslint-disable */\n            var pivotId = control.ID;\n            var pivotInstance = getInstance('#' + pivotId, PivotView);\n            control = pivotInstance;\n            /* eslint-enable */\n        }\n        if (control) {\n            control.clonedDataSet = this.clonedDataSet;\n            if (isBlazor()) {\n                PivotUtil.updateDataSourceSettings(control, PivotUtil.getClonedDataSourceSettings(this.dataSourceSettings));\n            }\n            else {\n                control.setProperties({ dataSourceSettings: this.dataSourceSettings }, true);\n            }\n            control.engineModule = this.engineModule;\n            control.olapEngineModule = this.olapEngineModule;\n            control.dataType = this.dataType;\n            if (!this.pivotChange) {\n                control.pivotValues = this.dataType === 'olap' ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues;\n            }\n            var eventArgs = {\n                dataSourceSettings: PivotUtil.getClonedDataSourceSettings(control.dataSourceSettings),\n                pivotValues: control.pivotValues\n            };\n            control.trigger(events.fieldListRefreshed, eventArgs);\n            if (!this.isPopupView) {\n                this.staticPivotGridModule = control;\n                control.isStaticRefresh = true;\n            }\n            if (control.enableVirtualization && isBlazor()) {\n                control.renderPivotGrid();\n            }\n            else {\n                control.dataBind();\n            }\n        }\n    };\n    /* eslint-disable-next-line */\n    /**\n     * Called internally to trigger populate event.\n     * @hidden\n     */\n    PivotFieldList.prototype.triggerPopulateEvent = function () {\n        var _this = this;\n        var control = this.isPopupView ? this.pivotGridModule : this;\n        var eventArgs = {\n            dataSourceSettings: this.dataSourceSettings,\n            pivotFieldList: this.dataType === 'olap' ? this.olapEngineModule.fieldList : this.engineModule.fieldList,\n            pivotValues: this.dataType === 'olap' ? this.olapEngineModule.pivotValues : this.engineModule.pivotValues\n        };\n        control.trigger(events.enginePopulated, eventArgs, function (observedArgs) {\n            _this.dataSourceSettings = observedArgs.dataSourceSettings;\n            _this.pivotFieldList = observedArgs.pivotFieldList;\n            if (_this.dataType === 'olap') {\n                _this.olapEngineModule.pivotValues = isBlazor() ? _this.olapEngineModule.pivotValues : observedArgs.pivotValues;\n            }\n            else {\n                _this.engineModule.pivotValues = isBlazor() ? _this.engineModule.pivotValues : observedArgs.pivotValues;\n            }\n        });\n    };\n    /**\n     * Destroys the Field Table component.\n     * @function destroy\n     * @returns {void}\n     */\n    PivotFieldList.prototype.destroy = function () {\n        this.unWireEvent();\n        if (this.engineModule) {\n            this.engineModule.fieldList = {};\n            this.engineModule.rMembers = null;\n            this.engineModule.cMembers = null;\n            this.engineModule.valueMatrix = null;\n            this.engineModule.indexMatrix = null;\n            this.engineModule = {};\n        }\n        if (this.olapEngineModule) {\n            this.olapEngineModule.fieldList = {};\n            this.olapEngineModule = {};\n        }\n        if (this.pivotFieldList) {\n            this.pivotFieldList = {};\n        }\n        if (this.captionData) {\n            this.captionData = null;\n        }\n        if (this.contextMenuModule) {\n            this.contextMenuModule.destroy();\n        }\n        if (this.treeViewModule) {\n            this.treeViewModule.destroy();\n        }\n        if (this.pivotButtonModule) {\n            this.pivotButtonModule.destroy();\n        }\n        if (this.pivotCommon) {\n            this.pivotCommon.destroy();\n        }\n        if (this.dialogRenderer) {\n            this.dialogRenderer.destroy();\n        }\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule.destroy();\n        }\n        _super.prototype.destroy.call(this);\n        if (this.contextMenuModule) {\n            this.contextMenuModule = null;\n        }\n        if (this.treeViewModule) {\n            this.treeViewModule = null;\n        }\n        if (this.pivotButtonModule) {\n            this.pivotButtonModule = null;\n        }\n        if (this.pivotCommon) {\n            this.pivotCommon = null;\n        }\n        if (this.dialogRenderer) {\n            this.dialogRenderer = null;\n        }\n        if (this.calculatedFieldModule) {\n            this.calculatedFieldModule = null;\n        }\n        if (this.axisFieldModule) {\n            this.axisFieldModule = null;\n        }\n        if (this.axisTableModule) {\n            this.axisTableModule = null;\n        }\n        if (this.renderModule) {\n            this.renderModule = null;\n        }\n        if (this.clonedDataSet) {\n            this.clonedDataSet = null;\n        }\n        if (this.clonedFieldList) {\n            this.clonedFieldList = null;\n        }\n        if (this.localeObj) {\n            this.localeObj = null;\n        }\n        if (this.defaultLocale) {\n            this.defaultLocale = null;\n        }\n        this.element.innerHTML = '';\n        removeClass([this.element], cls.ROOT);\n        removeClass([this.element], cls.RTL);\n        removeClass([this.element], cls.DEVICE);\n    };\n    __decorate([\n        Complex({}, DataSourceSettings)\n    ], PivotFieldList.prototype, \"dataSourceSettings\", void 0);\n    __decorate([\n        Property('Popup')\n    ], PivotFieldList.prototype, \"renderMode\", void 0);\n    __decorate([\n        Property()\n    ], PivotFieldList.prototype, \"target\", void 0);\n    __decorate([\n        Property('')\n    ], PivotFieldList.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], PivotFieldList.prototype, \"allowCalculatedField\", void 0);\n    __decorate([\n        Property(false)\n    ], PivotFieldList.prototype, \"showValuesButton\", void 0);\n    __decorate([\n        Property(false)\n    ], PivotFieldList.prototype, \"allowDeferLayoutUpdate\", void 0);\n    __decorate([\n        Property(1000)\n    ], PivotFieldList.prototype, \"maxNodeLimitInMemberEditor\", void 0);\n    __decorate([\n        Property(true)\n    ], PivotFieldList.prototype, \"loadOnDemandInMemberEditor\", void 0);\n    __decorate([\n        Property()\n    ], PivotFieldList.prototype, \"spinnerTemplate\", void 0);\n    __decorate([\n        Property(['Sum', 'Count', 'DistinctCount', 'Product', 'Min', 'Max', 'Avg', 'Median', 'Index', 'PopulationVar', 'SampleVar', 'PopulationStDev', 'SampleStDev', 'RunningTotals', 'PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentRowTotal', 'DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentTotal'])\n    ], PivotFieldList.prototype, \"aggregateTypes\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"load\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"enginePopulating\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"memberFiltering\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"enginePopulated\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"onFieldDropped\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"fieldDrop\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"fieldDragStart\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"aggregateCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"memberEditorOpen\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"calculatedFieldCreate\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"aggregateMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"fieldRemove\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"destroyed\", void 0);\n    __decorate([\n        Event()\n    ], PivotFieldList.prototype, \"beforeServiceInvoke\", void 0);\n    PivotFieldList = __decorate([\n        NotifyPropertyChanges\n    ], PivotFieldList);\n    return PivotFieldList;\n}(Component));\nexport { PivotFieldList };\n"]},"metadata":{},"sourceType":"module"}