{"ast":null,"code":"import { createElement, addClass, removeClass, remove, EventHandler, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { closest } from '@syncfusion/ej2-base';\nimport * as cls from '../../common/base/css-constant';\nimport * as events from '../../common/base/constant';\nimport { TreeView } from '@syncfusion/ej2-navigations';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { MaskedTextBox } from '@syncfusion/ej2-inputs';\nimport { PivotUtil } from '../../base/util';\n/**\n * Module to render Field List\n */\n\n/** @hidden */\n\nvar TreeViewRenderer = function () {\n  /** Constructor for render module\n   * @param {PivotFieldList} parent - Instance of field list.\n   */\n  function TreeViewRenderer(parent) {\n    this.selectedNodes = [];\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * Initialize the field list tree rendering\n   * @param {number} axis - Axis position.\n   * @returns {void}\n   * @private\n   */\n\n\n  TreeViewRenderer.prototype.render = function (axis) {\n    this.parentElement = this.parent.dialogRenderer.parentElement;\n    this.fieldListSort = 'None';\n\n    if (!this.parent.isAdaptive) {\n      var fieldTable = createElement('div', {\n        className: cls.FIELD_TABLE_CLASS + ' ' + (this.parent.dataType === 'olap' ? cls.OLAP_FIELD_TABLE_CLASS : '')\n      });\n      var treeHeader = createElement('div', {\n        className: cls.FIELD_HEADER_CLASS,\n        innerHTML: this.parent.localeObj.getConstant('allFields')\n      });\n      var treeOuterDiv = createElement('div', {\n        className: cls.FIELD_LIST_TREE_CLASS + '-outer-div'\n      });\n      this.treeViewElement = createElement('div', {\n        id: this.parent.element.id + '_TreeView',\n        className: cls.FIELD_LIST_CLASS + ' ' + (this.parent.dataType === 'olap' ? cls.OLAP_FIELD_LIST_CLASS : '')\n      });\n      var fieldHeaderWrappper = createElement('div', {\n        className: 'e-field-header-wrapper'\n      });\n      fieldHeaderWrappper.appendChild(treeHeader);\n      fieldTable.appendChild(fieldHeaderWrappper);\n      this.updateSortElements(fieldHeaderWrappper);\n      treeOuterDiv.appendChild(this.treeViewElement);\n      fieldTable.appendChild(treeOuterDiv);\n      this.parentElement.appendChild(fieldTable);\n\n      if (this.parent.renderMode === 'Fixed') {\n        var centerDiv = createElement('div', {\n          className: cls.STATIC_CENTER_DIV_CLASS\n        });\n        var axisHeader = createElement('div', {\n          className: cls.STATIC_CENTER_HEADER_CLASS,\n          innerHTML: this.parent.localeObj.getConstant('centerHeader')\n        });\n        this.parentElement.appendChild(centerDiv);\n        this.parentElement.appendChild(axisHeader);\n      }\n\n      this.renderTreeView();\n    } else {\n      this.renderTreeDialog(axis);\n    }\n  };\n\n  TreeViewRenderer.prototype.updateSortElements = function (headerWrapper) {\n    var options = {\n      'None': 'sortNone',\n      'Ascend': 'sortAscending',\n      'Descend': 'sortDescending'\n    };\n    /* eslint-disable-line */\n\n    var keys = Object.keys(options);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var option = keys_1[_i];\n      var spanElement = createElement('span', {\n        attrs: {\n          'tabindex': '0',\n          'aria-disabled': 'false',\n          'aria-label': 'Sort ' + option,\n          'data-sort': option,\n          'title': this.parent.localeObj.getConstant(options[option])\n        },\n        className: cls.ICON + ' ' + 'e-sort-' + option.toLowerCase() + ' ' + (this.fieldListSort === option ? 'e-selected' : '')\n      });\n      headerWrapper.appendChild(spanElement);\n      this.unWireFieldListEvent(spanElement);\n      this.wireFieldListEvent(spanElement);\n    }\n  };\n\n  TreeViewRenderer.prototype.renderTreeView = function () {\n    this.fieldTable = new TreeView({\n      fields: {\n        dataSource: this.getTreeData(),\n        id: 'id',\n        text: 'caption',\n        isChecked: 'isSelected',\n        parentID: 'pid',\n        iconCss: 'spriteCssClass'\n      },\n      nodeChecked: this.nodeStateChange.bind(this),\n      cssClass: cls.FIELD_LIST_TREE_CLASS,\n      showCheckBox: true,\n      allowDragAndDrop: true,\n      sortOrder: 'None',\n      autoCheck: false,\n      loadOnDemand: this.parent.dataType === 'olap' ? false : true,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      nodeDragStart: this.dragStart.bind(this),\n      nodeDragStop: this.dragStop.bind(this),\n      drawNode: this.updateTreeNode.bind(this),\n      nodeExpanding: this.updateNodeIcon.bind(this),\n      nodeCollapsed: this.updateNodeIcon.bind(this),\n      nodeSelected: function (args) {\n        removeClass([args.node], 'e-active');\n        args.cancel = true;\n      }\n    });\n    this.treeViewElement.innerHTML = '';\n    this.fieldTable.isStringTemplate = true;\n    this.fieldTable.appendTo(this.treeViewElement);\n    /* eslint-disable */\n\n    var dragEle = this.parent.renderMode === \"Fixed\" ? this.parent.element : this.parentElement;\n\n    if (!isNullOrUndefined(dragEle.querySelector('.' + cls.FIELD_LIST_CLASS))) {\n      dragEle.querySelector('.' + cls.FIELD_LIST_CLASS).ej2_instances[0].dragObj.enableAutoScroll = false;\n    }\n    /* eslint-enable */\n\n  };\n\n  TreeViewRenderer.prototype.updateNodeIcon = function (args) {\n    if (this.parent.dataType === 'olap') {\n      if (args.node && args.node.querySelector('.e-list-icon') && args.node.querySelector('.e-list-icon').className.indexOf('e-folderCDB-icon') > -1) {\n        var node = args.node.querySelector('.e-list-icon');\n        removeClass([node], 'e-folderCDB-icon');\n        addClass([node], 'e-folderCDB-open-icon');\n      } else if (args.node && args.node.querySelector('.e-list-icon') && args.node.querySelector('.e-list-icon').className.indexOf('e-folderCDB-open-icon') > -1) {\n        var node = args.node.querySelector('.e-list-icon');\n        removeClass([node], 'e-folderCDB-open-icon');\n        addClass([node], 'e-folderCDB-icon');\n      }\n    }\n  };\n\n  TreeViewRenderer.prototype.updateTreeNode = function (args) {\n    var allowDrag = false;\n\n    if (this.parent.dataType === 'olap') {\n      allowDrag = this.updateOlapTreeNode(args);\n    } else {\n      allowDrag = true;\n    }\n\n    var liTextElement = args.node.querySelector('.' + cls.TEXT_CONTENT_CLASS);\n\n    if (args.node.querySelector('.e-list-icon') && liTextElement) {\n      var liIconElement = args.node.querySelector('.e-list-icon');\n      liTextElement.insertBefore(liIconElement, args.node.querySelector('.e-list-text'));\n    }\n\n    if (allowDrag && !this.parent.isAdaptive) {\n      /* eslint-disable */\n      var field = PivotUtil.getFieldInfo(args.nodeData.id, this.parent);\n      /* eslint-enable */\n\n      allowDrag = false;\n      var dragElement = createElement('span', {\n        attrs: {\n          'tabindex': '-1',\n          title: field.fieldItem ? field.fieldItem.allowDragAndDrop ? this.parent.localeObj.getConstant('drag') : '' : this.parent.localeObj.getConstant('drag'),\n          'aria-disabled': 'false'\n        },\n        className: cls.ICON + ' ' + cls.DRAG_CLASS + ' ' + (field.fieldItem ? field.fieldItem.allowDragAndDrop ? '' : cls.DRAG_DISABLE_CLASS : '')\n      });\n\n      if (args.node.querySelector('.e-checkbox-wrapper') && !args.node.querySelector('.cls.DRAG_CLASS') && liTextElement) {\n        liTextElement.insertBefore(dragElement, args.node.querySelector('.e-checkbox-wrapper'));\n      }\n    }\n\n    if (args.node.querySelector('.' + cls.NODE_CHECK_CLASS)) {\n      addClass([args.node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n    }\n  };\n\n  TreeViewRenderer.prototype.updateOlapTreeNode = function (args) {\n    var allowDrag = false;\n\n    if (this.parent.dataType === 'olap') {\n      if (args.node && args.node.querySelector('.e-calcMemberGroupCDB,.e-measureGroupCDB-icon,.e-folderCDB-icon,.e-folderCDB-open-icon,.e-dimensionCDB-icon,.e-kpiCDB-icon')) {\n        args.node.querySelector('.e-checkbox-wrapper').style.display = 'none';\n      }\n\n      if (args.node && args.node.querySelector('.e-list-icon') && args.node.querySelector('.e-list-icon').className.indexOf('e-level-members') > -1) {\n        if (this.parent.isAdaptive) {\n          args.node.querySelector('.e-checkbox-wrapper').style.display = 'none';\n        } else {\n          args.node.querySelector('.e-checkbox-wrapper').style.visibility = 'hidden';\n        }\n      }\n\n      if (args.node && (args.node.querySelector('.e-hierarchyCDB-icon,.e-attributeCDB-icon,.e-namedSetCDB-icon') || args.node.querySelector('.e-measure-icon,.e-kpiGoal-icon,.e-kpiStatus-icon,.e-kpiTrend-icon,.e-kpiValue-icon') || args.node.querySelector('.e-calc-measure-icon,.e-calc-dimension-icon'))) {\n        if (args.node.querySelector('.e-measure-icon')) {\n          args.node.querySelector('.e-list-icon').style.display = 'none';\n          allowDrag = true;\n        } else {\n          allowDrag = true;\n        }\n      }\n    } else {\n      allowDrag = true;\n    }\n\n    return allowDrag;\n  };\n\n  TreeViewRenderer.prototype.renderTreeDialog = function (axis) {\n    var fieldListDialog = createElement('div', {\n      id: this.parent.element.id + '_FieldListTreeView',\n      className: cls.ADAPTIVE_FIELD_LIST_DIALOG_CLASS + ' ' + (this.parent.dataType === 'olap' ? 'e-olap-editor-dialog' : '')\n    });\n    this.parentElement.appendChild(fieldListDialog);\n    this.fieldDialog = new Dialog({\n      animationSettings: {\n        effect: 'Fade'\n      },\n      allowDragging: false,\n      header: this.parent.localeObj.getConstant('adaptiveFieldHeader'),\n      content: this.createTreeView(this.getTreeData(axis)),\n      isModal: true,\n      visible: true,\n      showCloseIcon: false,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      width: 'auto',\n      height: '350px',\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      buttons: [{\n        click: this.closeTreeDialog.bind(this),\n        buttonModel: {\n          cssClass: cls.CANCEL_BUTTON_CLASS,\n          content: this.parent.localeObj.getConstant('cancel')\n        }\n      }, {\n        click: this.onFieldAdd.bind(this),\n        buttonModel: {\n          cssClass: cls.OK_BUTTON_CLASS,\n          content: this.parent.localeObj.getConstant('add'),\n          isPrimary: true\n        }\n      }],\n      closeOnEscape: false,\n      target: this.parentElement.parentElement,\n      close: this.dialogClose.bind(this)\n    });\n    this.fieldDialog.isStringTemplate = true;\n    this.fieldDialog.appendTo(fieldListDialog); // this.fieldDialog.element.querySelector('.e-dlg-header').innerHTML = this.parent.localeObj.getConstant('adaptiveFieldHeader');\n  };\n\n  TreeViewRenderer.prototype.dialogClose = function () {\n    if (document.getElementById(this.parent.element.id + '_FieldListTreeView')) {\n      remove(document.getElementById(this.parent.element.id + '_FieldListTreeView'));\n    }\n  };\n\n  TreeViewRenderer.prototype.createTreeView = function (treeData) {\n    var editorTreeWrapper = createElement('div', {\n      id: this.parent.element.id + 'EditorDiv',\n      className: cls.EDITOR_TREE_WRAPPER_CLASS\n    });\n    var searchWrapper = createElement('div', {\n      id: this.parent.element.id + '_SearchDiv',\n      attrs: {\n        'tabindex': '-1'\n      },\n      className: cls.EDITOR_SEARCH_WRAPPER_CLASS\n    });\n    var editorSearch = createElement('input', {\n      attrs: {\n        'type': 'text'\n      }\n    });\n    searchWrapper.appendChild(editorSearch);\n    var treeOuterDiv = createElement('div', {\n      className: cls.EDITOR_TREE_CONTAINER_CLASS + '-outer-div'\n    });\n    var treeViewContainer = createElement('div', {\n      className: cls.EDITOR_TREE_CONTAINER_CLASS + ' ' + (this.parent.dataType === 'olap' ? 'e-olap-field-list-tree' : '')\n    });\n    editorTreeWrapper.appendChild(searchWrapper);\n    this.editorSearch = new MaskedTextBox({\n      showClearButton: true,\n      placeholder: this.parent.localeObj.getConstant('search'),\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      cssClass: cls.EDITOR_SEARCH_CLASS,\n      change: this.textChange.bind(this)\n    });\n    this.editorSearch.isStringTemplate = true;\n    this.editorSearch.appendTo(editorSearch);\n    var promptDiv = createElement('div', {\n      className: cls.EMPTY_MEMBER_CLASS + ' ' + cls.ICON_DISABLE,\n      innerHTML: this.parent.localeObj.getConstant('noMatches')\n    });\n    editorTreeWrapper.appendChild(promptDiv);\n    treeOuterDiv.appendChild(treeViewContainer);\n    editorTreeWrapper.appendChild(treeOuterDiv);\n    this.fieldTable = new TreeView({\n      fields: {\n        dataSource: treeData,\n        id: 'id',\n        text: 'caption',\n        isChecked: 'isSelected',\n        parentID: 'pid',\n        iconCss: 'spriteCssClass'\n      },\n      showCheckBox: true,\n      autoCheck: false,\n      loadOnDemand: this.parent.dataType === 'olap' ? false : true,\n      sortOrder: this.parent.dataType === 'olap' ? 'None' : 'Ascending',\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      nodeChecked: this.addNode.bind(this),\n      drawNode: this.updateTreeNode.bind(this),\n      nodeExpanding: this.updateNodeIcon.bind(this),\n      nodeCollapsed: this.updateNodeIcon.bind(this),\n      nodeSelected: function (args) {\n        removeClass([args.node], 'e-active');\n        args.cancel = true;\n      }\n    });\n    this.fieldTable.isStringTemplate = true;\n    this.fieldTable.appendTo(treeViewContainer);\n    return editorTreeWrapper;\n  };\n\n  TreeViewRenderer.prototype.textChange = function (e) {\n    this.parent.pivotCommon.eventBase.searchTreeNodes(e, this.fieldTable, true);\n    var promptDiv = this.fieldDialog.element.querySelector('.' + cls.EMPTY_MEMBER_CLASS);\n    var liList = [].slice.call(this.fieldTable.element.querySelectorAll('li'));\n    var disabledList = [].slice.call(this.fieldTable.element.querySelectorAll('li.' + cls.ICON_DISABLE));\n\n    if (liList.length === disabledList.length) {\n      removeClass([promptDiv], cls.ICON_DISABLE);\n    } else {\n      addClass([promptDiv], cls.ICON_DISABLE);\n    }\n  };\n\n  TreeViewRenderer.prototype.dragStart = function (args) {\n    var _this = this;\n\n    if (args.event.target.classList.contains(cls.DRAG_CLASS) && !args.event.target.classList.contains(cls.DRAG_DISABLE_CLASS)) {\n      var fieldInfo = PivotUtil.getFieldInfo(args.draggedNode.getAttribute('data-uid'), this.parent);\n      var dragEventArgs = {\n        fieldName: fieldInfo.fieldName,\n        fieldItem: fieldInfo.fieldItem,\n        axis: fieldInfo.axis,\n        dataSourceSettings: this.parent.dataSourceSettings,\n        cancel: false\n      };\n      var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n      control.trigger(events.fieldDragStart, dragEventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.parent.isDragging = true;\n          addClass([args.draggedNode.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.SELECTED_NODE_CLASS);\n          var data = void 0;\n\n          if (_this.parent.dataType === 'olap') {\n            data = _this.parent.olapEngineModule.fieldList[args.draggedNode.getAttribute('data-uid')];\n          } else {\n            data = _this.parent.engineModule.fieldList[args.draggedNode.getAttribute('data-uid')];\n          }\n\n          var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];\n\n          if (data && data.aggregateType === 'CalculatedField') {\n            for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {\n              var axisContent = axis_1[_i];\n              addClass([_this.parentElement.querySelector('.' + axisContent)], cls.NO_DRAG_CLASS);\n            }\n          }\n\n          var dragItem = args.clonedNode;\n\n          if (dragItem && (_this.parent.getModuleName() === 'pivotfieldlist' && _this.parent.renderMode) === 'Popup') {\n            dragItem.style.zIndex = (_this.parent.dialogRenderer.fieldListDialog.zIndex + 1).toString();\n          }\n        } else {\n          _this.parent.isDragging = false;\n          args.cancel = true;\n        }\n      });\n    } else {\n      this.parent.isDragging = false;\n      args.cancel = true;\n    }\n  }; // private getFieldDragArgs(args: DragAndDropEventArgs): FieldDragStartEventArgs {\n  //     let fieldInfo: FieldItemInfo = PivotUtil.getFieldInfo(args.draggedNode.getAttribute('data-uid'), this.parent);\n  //     let dragEventArgs: any = {\n  //         fieldName: fieldInfo.fieldName, fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis,\n  //         dataSourceSettings: this.parent.dataSourceSettings, cancel: false\n  //     }\n  //     let treeModule: TreeViewRenderer = this;\n  //     if (isBlazor()) {\n  //         dragEventArgs = this.getFieldDragEventArgs(dragEventArgs);\n  //         dragEventArgs.then((e: any) => {\n  //             return e;\n  //         });\n  //     }\n  //     let control: PivotView | PivotFieldList = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n  //     control.trigger(events.fieldDragStart, dragEventArgs);\n  //     return dragEventArgs;\n  // }\n  // private getFieldDragEventArgs(dragEventArgs: FieldDragStartEventArgs): FieldDragStartEventArgs | Deferred {\n  //     let callbackPromise: Deferred = new Deferred();\n  //     let control: PivotView | PivotFieldList = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n  //     control.trigger(events.fieldDragStart, dragEventArgs, (observedArgs: FieldDragStartEventArgs) => {\n  //         callbackPromise.resolve(observedArgs);\n  //     });\n  //     return callbackPromise;\n  // }\n\n\n  TreeViewRenderer.prototype.dragStop = function (args) {\n    args.cancel = true;\n    this.parent.isDragging = false;\n    var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];\n\n    for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {\n      var axisElement = axis_2[_i];\n      removeClass([this.parentElement.querySelector('.' + axisElement)], cls.NO_DRAG_CLASS);\n    }\n\n    removeClass([args.draggedNode.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.SELECTED_NODE_CLASS);\n\n    if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n      this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n    }\n\n    var fieldName = args.draggedNodeData.id.toString();\n    /* eslint-disable */\n\n    if (!this.isNodeDropped(args, fieldName)) {\n      return;\n    }\n\n    var list = this.parent.pivotFieldList;\n    var selectedNode = list[fieldName];\n    /* eslint-enable */\n\n    this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === 'pivotview' ? this.parent : this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent;\n\n    if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, fieldName)) {\n      if (this.parent.allowDeferLayoutUpdate) {\n        selectedNode.isSelected = true;\n        this.updateDataSource();\n      } else {\n        this.parent.updateDataSource();\n      }\n\n      var parent_1 = this.parent; //setTimeout(() => {\n\n      parent_1.axisFieldModule.render(); //});\n    }\n  };\n\n  TreeViewRenderer.prototype.isNodeDropped = function (args, targetID) {\n    var isDropped = true;\n\n    if (args.draggedNodeData.isChecked === 'true') {\n      var target = this.getButton(targetID);\n      var axisPanel = closest(target, '.' + cls.DROPPABLE_CLASS);\n      var droppableElement = closest(args.target, '.' + cls.DROPPABLE_CLASS);\n\n      if (target && axisPanel === droppableElement) {\n        var pivotButtons = [].slice.call(axisPanel.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));\n        var dropTarget = closest(args.target, '.' + cls.PIVOT_BUTTON_WRAPPER_CLASS);\n        var sourcePosition = void 0;\n        var dropPosition = -1;\n\n        for (var i = 0, n = pivotButtons.length; i < n; i++) {\n          if (pivotButtons[i].id === target.id) {\n            sourcePosition = i;\n          }\n\n          if (dropTarget) {\n            var droppableButton = dropTarget.querySelector('.' + cls.PIVOT_BUTTON_CLASS);\n\n            if (pivotButtons[i].id === droppableButton.id) {\n              dropPosition = i;\n            }\n          }\n        }\n\n        if (sourcePosition === dropPosition || sourcePosition === pivotButtons.length - 1 && dropPosition === -1) {\n          var parentElement = document.getElementById(this.parent.element.id + '_Wrapper');\n          removeClass([].slice.call(parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);\n          isDropped = false;\n        }\n      }\n    }\n\n    return isDropped;\n  };\n\n  TreeViewRenderer.prototype.getButton = function (fieldName) {\n    var wrapperElement = document.getElementById(this.parent.element.id + '_Wrapper');\n    var pivotButtons = [].slice.call(wrapperElement.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));\n    var buttonElement;\n\n    for (var i = 0, n = pivotButtons.length; i < n; i++) {\n      if (pivotButtons[i].id === fieldName) {\n        buttonElement = pivotButtons[i];\n        break;\n      }\n    }\n\n    return buttonElement;\n  };\n\n  TreeViewRenderer.prototype.nodeStateChange = function (args) {\n    var _this = this;\n\n    var node = closest(args.node, '.' + cls.TEXT_CONTENT_CLASS);\n\n    if (!isNullOrUndefined(node)) {\n      var li_1 = closest(node, 'li');\n      var id_1 = li_1.getAttribute('data-uid');\n\n      if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n        this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n      }\n      /* eslint-disable */\n\n\n      var list = this.parent.pivotFieldList;\n      var selectedNode_1 = list[id_1];\n      /* eslint-enable */\n\n      var fieldInfo_1 = PivotUtil.getFieldInfo(id_1, this.parent);\n      var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n\n      if (args.action === 'check') {\n        var eventdrop = {\n          fieldName: id_1,\n          dropField: fieldInfo_1.fieldItem,\n          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n          dropAxis: selectedNode_1.type === 'number' || selectedNode_1.type === 'CalculatedField' && selectedNode_1.formula && selectedNode_1.formula.indexOf('Measure') > -1 && this.parent.dataType === 'olap' ? 'values' : 'rows',\n          dropPosition: fieldInfo_1.position,\n          draggedAxis: 'fieldlist',\n          cancel: false\n        };\n        control.trigger(events.fieldDrop, eventdrop, function (observedArgs) {\n          if (!observedArgs.cancel) {\n            addClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n\n            _this.updateSelectedNodes(li_1, args.action);\n\n            var addNode = _this.parent.pivotCommon.dataSourceUpdate.getNewField(id_1, fieldInfo_1.fieldItem);\n\n            _this.updateReportSettings(addNode, observedArgs);\n\n            _this.updateNodeStateChange(id_1, args, selectedNode_1);\n          } else {\n            _this.updateCheckState(selectedNode_1);\n          }\n        });\n      } else {\n        var removeFieldArgs = {\n          cancel: false,\n          fieldName: id_1,\n          dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n          fieldItem: fieldInfo_1.fieldItem,\n          axis: fieldInfo_1.axis\n        };\n        control.trigger(events.fieldRemove, removeFieldArgs, function (observedArgs) {\n          if (!observedArgs.cancel) {\n            removeClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n\n            _this.updateSelectedNodes(li_1, args.action);\n\n            _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(id_1);\n\n            if (_this.parent.dataType === 'olap' && _this.parent.dataSourceSettings.values.length === 0) {\n              _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport('[Measures]');\n            }\n\n            _this.updateNodeStateChange(id_1, args, selectedNode_1);\n          } else {\n            _this.updateCheckState(selectedNode_1);\n          }\n        });\n      }\n    }\n  };\n\n  TreeViewRenderer.prototype.updateReportSettings = function (newField, dropArgs) {\n    var dropPosition = dropArgs.dropPosition;\n    var dropClass = dropArgs.dropAxis;\n\n    switch (dropClass) {\n      case 'filters':\n        dropPosition !== -1 ?\n        /* eslint-disable-line */\n        this.parent.dataSourceSettings.filters.splice(dropPosition, 0, newField) : this.parent.dataSourceSettings.filters.push(newField);\n        break;\n\n      case 'rows':\n        dropPosition !== -1 ?\n        /* eslint-disable-line */\n        this.parent.dataSourceSettings.rows.splice(dropPosition, 0, newField) : this.parent.dataSourceSettings.rows.push(newField);\n        break;\n\n      case 'columns':\n        dropPosition !== -1 ?\n        /* eslint-disable-line */\n        this.parent.dataSourceSettings.columns.splice(dropPosition, 0, newField) : this.parent.dataSourceSettings.columns.push(newField);\n        break;\n\n      case 'values':\n        dropPosition !== -1 ?\n        /* eslint-disable-line */\n        this.parent.dataSourceSettings.values.splice(dropPosition, 0, newField) : this.parent.dataSourceSettings.values.push(newField);\n\n        if (this.parent.dataType === 'olap' && this.parent.olapEngineModule && !this.parent.olapEngineModule.isMeasureAvail) {\n          var measureField = {\n            name: '[Measures]',\n            caption: 'Measures',\n            baseField: undefined,\n            baseItem: undefined\n          };\n          var fieldAxis = this.parent.dataSourceSettings.valueAxis === 'row' ? this.parent.dataSourceSettings.rows : this.parent.dataSourceSettings.columns;\n          fieldAxis.push(measureField);\n        }\n\n        break;\n    }\n  };\n\n  TreeViewRenderer.prototype.updateCheckState = function (selectedNode) {\n    var chkState = this.fieldTable.element.querySelectorAll('.e-checkbox-wrapper');\n    var innerText = this.fieldTable.element.querySelectorAll('.e-list-text');\n    var checkClass = this.fieldTable.element.querySelectorAll('.e-frame');\n\n    for (var i = 0; i < chkState.length; i++) {\n      if (selectedNode.caption === innerText[i].textContent) {\n        if (chkState[i].getAttribute('aria-checked') === 'false') {\n          chkState[i].setAttribute('aria-checked', 'false');\n          checkClass[i].classList.add(cls.NODE_CHECK_CLASS);\n        } else {\n          chkState[i].setAttribute('aria-checked', 'true');\n          checkClass[i].classList.remove(cls.NODE_CHECK_CLASS);\n        }\n      }\n    }\n  };\n\n  TreeViewRenderer.prototype.updateNodeStateChange = function (id, args, selectedNode) {\n    if (!this.parent.allowDeferLayoutUpdate) {\n      this.parent.updateDataSource(true);\n    } else {\n      selectedNode.isSelected = args.action === 'check';\n\n      if (this.parent.dataType === 'olap') {\n        this.parent.olapEngineModule.updateFieldlistData(id, args.action === 'check');\n      }\n\n      this.updateDataSource();\n    }\n\n    var parent = this.parent;\n    setTimeout(function () {\n      parent.axisFieldModule.render();\n    });\n  };\n\n  TreeViewRenderer.prototype.updateSelectedNodes = function (li, state) {\n    if (li && li.querySelector('ul')) {\n      for (var _i = 0, _a = [].slice.call(li.querySelectorAll('li')); _i < _a.length; _i++) {\n        var element = _a[_i];\n\n        if (state === 'check') {\n          addClass([element.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n        } else {\n          removeClass([element.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n        }\n      }\n    }\n  };\n\n  TreeViewRenderer.prototype.updateDataSource = function () {\n    if (this.parent.isPopupView) {\n      if (this.parent.dataType === 'olap') {\n        this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;\n      } else {\n        this.parent.pivotGridModule.engineModule = this.parent.engineModule;\n      }\n\n      this.parent.pivotGridModule.setProperties({\n        dataSourceSettings: this.parent.dataSourceSettings.properties\n      }, true);\n      /* eslint-disable-line */\n\n      this.parent.pivotGridModule.notify(events.uiUpdate, this);\n    } else {\n      this.parent.triggerPopulateEvent();\n    }\n  };\n\n  TreeViewRenderer.prototype.addNode = function (args) {\n    var _this = this;\n    /* eslint-disable */\n\n\n    var fieldList = this.parent.pivotFieldList;\n    var selectedNode = fieldList[args.data[0].id.toString()];\n    /* eslint-enable */\n\n    var fieldInfo = PivotUtil.getFieldInfo(selectedNode.id.toString(), this.parent);\n    var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n\n    if (args.action === 'check') {\n      var eventdrop = {\n        fieldName: fieldInfo.fieldName,\n        dropField: fieldInfo.fieldItem,\n        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n        dropAxis: 'rows',\n        draggedAxis: 'fieldlist',\n        cancel: false\n      };\n      control.trigger(events.fieldDrop, eventdrop, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.selectedNodes.push(selectedNode.id.toString());\n        } else {\n          _this.updateCheckState(selectedNode);\n        }\n      });\n    } else {\n      var removeFieldArgs = {\n        cancel: false,\n        fieldName: fieldInfo.fieldName,\n        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n        fieldItem: fieldInfo.fieldItem,\n        axis: fieldInfo.axis\n      };\n      control.trigger(events.fieldRemove, removeFieldArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          var count = _this.selectedNodes.length;\n\n          while (count--) {\n            if (_this.selectedNodes[count] === selectedNode.id.toString()) {\n              _this.selectedNodes.splice(count, 1);\n\n              break;\n            }\n          }\n        } else {\n          _this.updateCheckState(selectedNode);\n        }\n      });\n    }\n  };\n\n  TreeViewRenderer.prototype.refreshTreeView = function () {\n    if (this.fieldTable) {\n      var treeData = this.getUpdatedData();\n      /* eslint-disable-line */\n\n      this.fieldTable.fields = {\n        dataSource: treeData,\n        id: 'id',\n        text: 'caption',\n        isChecked: 'isSelected',\n        parentID: 'pid',\n        iconCss: 'spriteCssClass'\n      };\n      this.fieldTable.dataBind();\n    }\n  };\n  /* eslint-disable */\n\n\n  TreeViewRenderer.prototype.getUpdatedData = function () {\n    var treeData = this.getTreeData();\n    /* eslint-enable */\n\n    var expandedNodes = this.fieldTable.expandedNodes;\n    this.updateExpandedNodes(treeData, expandedNodes);\n    return this.applySorting(treeData, this.fieldListSort);\n  };\n  /* eslint-disable */\n\n\n  TreeViewRenderer.prototype.getTreeData = function (axis) {\n    var data = [];\n    /* eslint-enable */\n\n    if (this.parent.dataType === 'olap') {\n      data = this.getOlapTreeData(axis);\n    } else {\n      var keys = this.parent.pivotFieldList ? Object.keys(this.parent.pivotFieldList) : [];\n      var fieldList = {};\n\n      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n        var key = keys_2[_i];\n        var member = this.parent.pivotFieldList[key];\n        fieldList[key] = {\n          id: member.id,\n          caption: member.caption,\n          isSelected: member.isSelected\n        };\n      }\n\n      if (this.parent.isAdaptive) {\n        var fields = [this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns, this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.values];\n        var currentFieldSet = fields[axis];\n        var len = keys.length;\n\n        while (len--) {\n          fieldList[keys[len]].isSelected = false;\n        }\n\n        for (var _a = 0, currentFieldSet_1 = currentFieldSet; _a < currentFieldSet_1.length; _a++) {\n          var item = currentFieldSet_1[_a];\n          fieldList[item.name].isSelected = true;\n        }\n      }\n      /* eslint-disable */\n\n\n      var list = fieldList;\n\n      for (var _b = 0, keys_3 = keys; _b < keys_3.length; _b++) {\n        var member = keys_3[_b];\n        var obj = list[member];\n        /* eslint-enable */\n\n        data.push(obj);\n      }\n    }\n\n    return data;\n  };\n  /* eslint-disable */\n\n\n  TreeViewRenderer.prototype.getOlapTreeData = function (axis) {\n    var data = [];\n    /* eslint-enable */\n\n    var fieldListData = this.parent.olapEngineModule.fieldListData ? this.parent.olapEngineModule.fieldListData : [];\n\n    if (this.parent.isAdaptive) {\n      var fields = [this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns, this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.values];\n      var currentFieldSet = fields[axis];\n      var i = 0;\n\n      while (i < fieldListData.length) {\n        var item = fieldListData[i];\n        /* eslint-disable */\n\n        var framedSet = void 0;\n        /* eslint-enable */\n\n        if (axis === 3) {\n          if (item.id.toLowerCase() !== '[measures]' && (item.id.toLowerCase().indexOf('[measures]') === 0 || item.spriteCssClass && item.spriteCssClass.indexOf('e-measureCDB') !== -1) || item.id.toLowerCase() === '[calculated members].[_0]' || item.spriteCssClass && item.spriteCssClass.indexOf('e-calc-measure-icon') !== -1) {\n            framedSet = {\n              id: item.id,\n              caption: item.caption,\n              hasChildren: item.hasChildren,\n              type: item.type,\n              aggregateType: item.aggregateType,\n              isSelected: item.isSelected,\n              pid: item.pid,\n              spriteCssClass: item.spriteCssClass\n            };\n            framedSet.isSelected = false;\n\n            if (framedSet.spriteCssClass && framedSet.spriteCssClass.indexOf('e-measureCDB') !== -1) {\n              framedSet.spriteCssClass = framedSet.spriteCssClass.replace('e-folderCDB-icon', 'e-measureGroupCDB-icon');\n              framedSet.pid = undefined;\n            }\n\n            for (var _i = 0, currentFieldSet_2 = currentFieldSet; _i < currentFieldSet_2.length; _i++) {\n              var field = currentFieldSet_2[_i];\n\n              if (framedSet.id === field.name) {\n                framedSet.isSelected = true;\n                break;\n              }\n            }\n\n            data.push(framedSet);\n          }\n        } else {\n          if (!(item.id.toLowerCase().indexOf('[measures]') === 0) && !(item.spriteCssClass && item.spriteCssClass.indexOf('e-measureCDB') !== -1) && !(item.spriteCssClass && item.spriteCssClass.indexOf('e-calc-measure-icon') !== -1)) {\n            framedSet = {\n              id: item.id,\n              caption: item.caption,\n              hasChildren: item.hasChildren,\n              type: item.type,\n              aggregateType: item.aggregateType,\n              isSelected: item.isSelected,\n              pid: item.pid,\n              spriteCssClass: item.spriteCssClass\n            };\n            framedSet.isSelected = false;\n\n            for (var _a = 0, currentFieldSet_3 = currentFieldSet; _a < currentFieldSet_3.length; _a++) {\n              var item_1 = currentFieldSet_3[_a];\n\n              if (framedSet.id === item_1.name) {\n                framedSet.isSelected = true;\n                break;\n              }\n            }\n\n            data.push(framedSet);\n          }\n        }\n\n        i++;\n      }\n    } else {\n      data = PivotUtil.getClonedData(this.parent.olapEngineModule.fieldListData);\n      /* eslint-disable-line */\n    }\n\n    return data;\n  };\n\n  TreeViewRenderer.prototype.updateExpandedNodes = function (data, expandedNodes) {\n    if (expandedNodes.length > 0) {\n      var i = 0;\n\n      for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n        var field = data_1[_i];\n\n        if (expandedNodes.indexOf(field.id) > -1) {\n          i++;\n          field.expanded = true;\n          field.spriteCssClass = field.spriteCssClass && field.spriteCssClass.toString().indexOf('e-folderCDB-icon') > -1 ? field.spriteCssClass.toString().replace('e-folderCDB-icon', 'e-folderCDB-open-icon') : field.spriteCssClass;\n\n          if (i === expandedNodes.length) {\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  TreeViewRenderer.prototype.updateSorting = function (args) {\n    var target = args.target;\n    var option = target.getAttribute('data-sort');\n\n    if (target.className.indexOf('e-selected') === -1) {\n      switch (option) {\n        case 'None':\n          this.fieldListSort = 'None';\n          addClass([target], 'e-selected');\n          removeClass([this.parentElement.querySelector('.e-sort-ascend')], 'e-selected');\n          removeClass([this.parentElement.querySelector('.e-sort-descend')], 'e-selected');\n          break;\n\n        case 'Ascend':\n          this.fieldListSort = 'Ascend';\n          addClass([target], 'e-selected');\n          removeClass([this.parentElement.querySelector('.e-sort-none')], 'e-selected');\n          removeClass([this.parentElement.querySelector('.e-sort-descend')], 'e-selected');\n          break;\n\n        case 'Descend':\n          this.fieldListSort = 'Descend';\n          addClass([target], 'e-selected');\n          removeClass([this.parentElement.querySelector('.e-sort-ascend')], 'e-selected');\n          removeClass([this.parentElement.querySelector('.e-sort-none')], 'e-selected');\n          break;\n      }\n\n      this.refreshTreeView();\n    }\n  };\n  /* eslint-disable */\n\n\n  TreeViewRenderer.prototype.applySorting = function (treeData, sortOrder) {\n    if (this.parent.dataType === 'olap') {\n      var measure = void 0;\n      var calcMember = void 0;\n      /* eslint-enable */\n\n      if (this.parent.dataSourceSettings.calculatedFieldSettings.length > 0 && treeData[0].id.toLowerCase() === '[calculated members].[_0]') {\n        calcMember = treeData[0];\n        measure = treeData[1];\n        treeData.splice(0, 2);\n      } else {\n        measure = treeData[0];\n        treeData.splice(0, 1);\n      }\n      /* eslint-disable  */\n\n\n      treeData = sortOrder === 'Ascend' ? treeData.sort(function (a, b) {\n        return a.caption > b.caption ? 1 : b.caption > a.caption ? -1 : 0;\n      }) : sortOrder === 'Descend' ? treeData.sort(function (a, b) {\n        return a.caption < b.caption ? 1 : b.caption < a.caption ? -1 : 0;\n      }) : treeData;\n      /* eslint-enable  */\n\n      if (calcMember) {\n        treeData.splice(0, 0, calcMember, measure);\n      } else {\n        treeData.splice(0, 0, measure);\n      }\n    } else {\n      this.fieldTable.sortOrder = sortOrder === 'Ascend' ? 'Ascending' : sortOrder === 'Descend' ? 'Descending' : 'None';\n    }\n\n    return treeData;\n  };\n\n  TreeViewRenderer.prototype.onFieldAdd = function (e) {\n    this.parent.dialogRenderer.updateDataSource(this.selectedNodes);\n    this.closeTreeDialog();\n  };\n\n  TreeViewRenderer.prototype.closeTreeDialog = function () {\n    this.selectedNodes = [];\n    this.fieldDialog.hide();\n  };\n\n  TreeViewRenderer.prototype.keyPress = function (e) {\n    if (e.keyCode === 13 && e.target) {\n      e.target.click();\n      e.preventDefault();\n      return;\n    }\n  };\n\n  TreeViewRenderer.prototype.wireFieldListEvent = function (element) {\n    EventHandler.add(element, 'keydown', this.keyPress, this);\n    EventHandler.add(element, 'click', this.updateSorting, this);\n  };\n\n  TreeViewRenderer.prototype.unWireFieldListEvent = function (element) {\n    EventHandler.remove(element, 'keydown', this.keyPress);\n    EventHandler.remove(element, 'click', this.updateSorting);\n  };\n  /* eslint-disable-next-line */\n\n  /**\n   * @hidden\n   */\n\n\n  TreeViewRenderer.prototype.addEventListener = function () {\n    this.parent.on(events.treeViewUpdate, this.refreshTreeView, this);\n  };\n  /* eslint-disable-next-line */\n\n  /**\n   * @hidden\n   */\n\n\n  TreeViewRenderer.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.treeViewUpdate, this.refreshTreeView);\n  };\n  /**\n   * To destroy the tree view event listener\n   * @returns {void}\n   * @hidden\n   */\n\n\n  TreeViewRenderer.prototype.destroy = function () {\n    this.removeEventListener();\n\n    if (this.fieldTable && !this.fieldTable.isDestroyed) {\n      this.fieldTable.destroy();\n      this.fieldTable = null;\n    }\n\n    if (this.fieldDialog && !this.fieldDialog.isDestroyed) {\n      this.fieldDialog.destroy();\n      this.fieldDialog = null;\n    }\n\n    if (this.editorSearch && !this.editorSearch.isDestroyed) {\n      this.editorSearch.destroy();\n      this.editorSearch = null;\n    }\n  };\n\n  return TreeViewRenderer;\n}();\n\nexport { TreeViewRenderer };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/tree-renderer.js"],"names":["createElement","addClass","removeClass","remove","EventHandler","isNullOrUndefined","closest","cls","events","TreeView","Dialog","MaskedTextBox","PivotUtil","TreeViewRenderer","parent","selectedNodes","addEventListener","prototype","render","axis","parentElement","dialogRenderer","fieldListSort","isAdaptive","fieldTable","className","FIELD_TABLE_CLASS","dataType","OLAP_FIELD_TABLE_CLASS","treeHeader","FIELD_HEADER_CLASS","innerHTML","localeObj","getConstant","treeOuterDiv","FIELD_LIST_TREE_CLASS","treeViewElement","id","element","FIELD_LIST_CLASS","OLAP_FIELD_LIST_CLASS","fieldHeaderWrappper","appendChild","updateSortElements","renderMode","centerDiv","STATIC_CENTER_DIV_CLASS","axisHeader","STATIC_CENTER_HEADER_CLASS","renderTreeView","renderTreeDialog","headerWrapper","options","keys","Object","_i","keys_1","length","option","spanElement","attrs","ICON","toLowerCase","unWireFieldListEvent","wireFieldListEvent","fields","dataSource","getTreeData","text","isChecked","parentID","iconCss","nodeChecked","nodeStateChange","bind","cssClass","showCheckBox","allowDragAndDrop","sortOrder","autoCheck","loadOnDemand","enableRtl","locale","nodeDragStart","dragStart","nodeDragStop","dragStop","drawNode","updateTreeNode","nodeExpanding","updateNodeIcon","nodeCollapsed","nodeSelected","args","node","cancel","isStringTemplate","appendTo","dragEle","querySelector","ej2_instances","dragObj","enableAutoScroll","indexOf","allowDrag","updateOlapTreeNode","liTextElement","TEXT_CONTENT_CLASS","liIconElement","insertBefore","field","getFieldInfo","nodeData","dragElement","title","fieldItem","DRAG_CLASS","DRAG_DISABLE_CLASS","NODE_CHECK_CLASS","LIST_TEXT_CLASS","LIST_SELECT_CLASS","style","display","visibility","fieldListDialog","ADAPTIVE_FIELD_LIST_DIALOG_CLASS","fieldDialog","animationSettings","effect","allowDragging","header","content","createTreeView","isModal","visible","showCloseIcon","width","height","position","X","Y","buttons","click","closeTreeDialog","buttonModel","CANCEL_BUTTON_CLASS","onFieldAdd","OK_BUTTON_CLASS","isPrimary","closeOnEscape","target","close","dialogClose","document","getElementById","treeData","editorTreeWrapper","EDITOR_TREE_WRAPPER_CLASS","searchWrapper","EDITOR_SEARCH_WRAPPER_CLASS","editorSearch","EDITOR_TREE_CONTAINER_CLASS","treeViewContainer","showClearButton","placeholder","EDITOR_SEARCH_CLASS","change","textChange","promptDiv","EMPTY_MEMBER_CLASS","ICON_DISABLE","addNode","e","pivotCommon","eventBase","searchTreeNodes","liList","slice","call","querySelectorAll","disabledList","_this","event","classList","contains","fieldInfo","draggedNode","getAttribute","dragEventArgs","fieldName","dataSourceSettings","control","isPopupView","pivotGridModule","trigger","fieldDragStart","observedArgs","isDragging","SELECTED_NODE_CLASS","data","olapEngineModule","fieldList","engineModule","ROW_AXIS_CLASS","COLUMN_AXIS_CLASS","FILTER_AXIS_CLASS","aggregateType","axis_1","axisContent","NO_DRAG_CLASS","dragItem","clonedNode","getModuleName","zIndex","toString","axis_2","axisElement","filterDialog","dialogPopUp","draggedNodeData","isNodeDropped","list","pivotFieldList","selectedNode","dataSourceUpdate","nodeStateModified","onStateModified","allowDeferLayoutUpdate","isSelected","updateDataSource","parent_1","axisFieldModule","targetID","isDropped","getButton","axisPanel","DROPPABLE_CLASS","droppableElement","pivotButtons","PIVOT_BUTTON_CLASS","dropTarget","PIVOT_BUTTON_WRAPPER_CLASS","sourcePosition","dropPosition","i","n","droppableButton","DROP_INDICATOR_CLASS","INDICATOR_HOVER_CLASS","wrapperElement","buttonElement","li_1","id_1","selectedNode_1","fieldInfo_1","action","eventdrop","dropField","getClonedDataSourceSettings","dropAxis","type","formula","draggedAxis","fieldDrop","updateSelectedNodes","getNewField","updateReportSettings","updateNodeStateChange","updateCheckState","removeFieldArgs","fieldRemove","removeFieldFromReport","values","newField","dropArgs","dropClass","filters","splice","push","rows","columns","isMeasureAvail","measureField","name","caption","baseField","undefined","baseItem","fieldAxis","valueAxis","chkState","innerText","checkClass","textContent","setAttribute","add","updateFieldlistData","setTimeout","li","state","_a","setProperties","properties","notify","uiUpdate","triggerPopulateEvent","count","refreshTreeView","getUpdatedData","dataBind","expandedNodes","updateExpandedNodes","applySorting","getOlapTreeData","keys_2","key","member","currentFieldSet","len","currentFieldSet_1","item","_b","keys_3","obj","fieldListData","framedSet","spriteCssClass","hasChildren","pid","replace","currentFieldSet_2","currentFieldSet_3","item_1","getClonedData","data_1","expanded","updateSorting","measure","calcMember","calculatedFieldSettings","sort","a","b","hide","keyPress","keyCode","preventDefault","on","treeViewUpdate","removeEventListener","isDestroyed","off","destroy"],"mappings":"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","sourcesContent":["import { createElement, addClass, removeClass, remove, EventHandler, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { closest } from '@syncfusion/ej2-base';\nimport * as cls from '../../common/base/css-constant';\nimport * as events from '../../common/base/constant';\nimport { TreeView } from '@syncfusion/ej2-navigations';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { MaskedTextBox } from '@syncfusion/ej2-inputs';\nimport { PivotUtil } from '../../base/util';\n/**\n * Module to render Field List\n */\n/** @hidden */\nvar TreeViewRenderer = /** @class */ (function () {\n    /** Constructor for render module\n     * @param {PivotFieldList} parent - Instance of field list.\n     */\n    function TreeViewRenderer(parent) {\n        this.selectedNodes = [];\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * Initialize the field list tree rendering\n     * @param {number} axis - Axis position.\n     * @returns {void}\n     * @private\n     */\n    TreeViewRenderer.prototype.render = function (axis) {\n        this.parentElement = this.parent.dialogRenderer.parentElement;\n        this.fieldListSort = 'None';\n        if (!this.parent.isAdaptive) {\n            var fieldTable = createElement('div', {\n                className: cls.FIELD_TABLE_CLASS + ' ' + (this.parent.dataType === 'olap' ? cls.OLAP_FIELD_TABLE_CLASS : '')\n            });\n            var treeHeader = createElement('div', {\n                className: cls.FIELD_HEADER_CLASS,\n                innerHTML: this.parent.localeObj.getConstant('allFields')\n            });\n            var treeOuterDiv = createElement('div', { className: cls.FIELD_LIST_TREE_CLASS + '-outer-div' });\n            this.treeViewElement = createElement('div', {\n                id: this.parent.element.id + '_TreeView',\n                className: cls.FIELD_LIST_CLASS + ' ' + (this.parent.dataType === 'olap' ? cls.OLAP_FIELD_LIST_CLASS : '')\n            });\n            var fieldHeaderWrappper = createElement('div', { className: 'e-field-header-wrapper' });\n            fieldHeaderWrappper.appendChild(treeHeader);\n            fieldTable.appendChild(fieldHeaderWrappper);\n            this.updateSortElements(fieldHeaderWrappper);\n            treeOuterDiv.appendChild(this.treeViewElement);\n            fieldTable.appendChild(treeOuterDiv);\n            this.parentElement.appendChild(fieldTable);\n            if (this.parent.renderMode === 'Fixed') {\n                var centerDiv = createElement('div', { className: cls.STATIC_CENTER_DIV_CLASS });\n                var axisHeader = createElement('div', {\n                    className: cls.STATIC_CENTER_HEADER_CLASS,\n                    innerHTML: this.parent.localeObj.getConstant('centerHeader')\n                });\n                this.parentElement.appendChild(centerDiv);\n                this.parentElement.appendChild(axisHeader);\n            }\n            this.renderTreeView();\n        }\n        else {\n            this.renderTreeDialog(axis);\n        }\n    };\n    TreeViewRenderer.prototype.updateSortElements = function (headerWrapper) {\n        var options = { 'None': 'sortNone', 'Ascend': 'sortAscending', 'Descend': 'sortDescending' }; /* eslint-disable-line */\n        var keys = Object.keys(options);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var option = keys_1[_i];\n            var spanElement = createElement('span', {\n                attrs: {\n                    'tabindex': '0',\n                    'aria-disabled': 'false',\n                    'aria-label': 'Sort ' + option,\n                    'data-sort': option,\n                    'title': this.parent.localeObj.getConstant(options[option])\n                },\n                className: cls.ICON + ' ' + 'e-sort-' + option.toLowerCase() + ' ' +\n                    (this.fieldListSort === option ? 'e-selected' : '')\n            });\n            headerWrapper.appendChild(spanElement);\n            this.unWireFieldListEvent(spanElement);\n            this.wireFieldListEvent(spanElement);\n        }\n    };\n    TreeViewRenderer.prototype.renderTreeView = function () {\n        this.fieldTable = new TreeView({\n            fields: { dataSource: this.getTreeData(), id: 'id', text: 'caption', isChecked: 'isSelected', parentID: 'pid', iconCss: 'spriteCssClass' },\n            nodeChecked: this.nodeStateChange.bind(this),\n            cssClass: cls.FIELD_LIST_TREE_CLASS,\n            showCheckBox: true,\n            allowDragAndDrop: true,\n            sortOrder: 'None',\n            autoCheck: false,\n            loadOnDemand: this.parent.dataType === 'olap' ? false : true,\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            nodeDragStart: this.dragStart.bind(this),\n            nodeDragStop: this.dragStop.bind(this),\n            drawNode: this.updateTreeNode.bind(this),\n            nodeExpanding: this.updateNodeIcon.bind(this),\n            nodeCollapsed: this.updateNodeIcon.bind(this),\n            nodeSelected: function (args) {\n                removeClass([args.node], 'e-active');\n                args.cancel = true;\n            }\n        });\n        this.treeViewElement.innerHTML = '';\n        this.fieldTable.isStringTemplate = true;\n        this.fieldTable.appendTo(this.treeViewElement);\n        /* eslint-disable */\n        var dragEle = this.parent.renderMode === \"Fixed\" ? this.parent.element : this.parentElement;\n        if (!isNullOrUndefined(dragEle.querySelector('.' + cls.FIELD_LIST_CLASS))) {\n            dragEle.querySelector('.' + cls.FIELD_LIST_CLASS).ej2_instances[0].dragObj.enableAutoScroll = false;\n        }\n        /* eslint-enable */\n    };\n    TreeViewRenderer.prototype.updateNodeIcon = function (args) {\n        if (this.parent.dataType === 'olap') {\n            if (args.node && args.node.querySelector('.e-list-icon') &&\n                (args.node.querySelector('.e-list-icon').className.indexOf('e-folderCDB-icon') > -1)) {\n                var node = args.node.querySelector('.e-list-icon');\n                removeClass([node], 'e-folderCDB-icon');\n                addClass([node], 'e-folderCDB-open-icon');\n            }\n            else if (args.node && args.node.querySelector('.e-list-icon') &&\n                (args.node.querySelector('.e-list-icon').className.indexOf('e-folderCDB-open-icon') > -1)) {\n                var node = args.node.querySelector('.e-list-icon');\n                removeClass([node], 'e-folderCDB-open-icon');\n                addClass([node], 'e-folderCDB-icon');\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateTreeNode = function (args) {\n        var allowDrag = false;\n        if (this.parent.dataType === 'olap') {\n            allowDrag = this.updateOlapTreeNode(args);\n        }\n        else {\n            allowDrag = true;\n        }\n        var liTextElement = args.node.querySelector('.' + cls.TEXT_CONTENT_CLASS);\n        if (args.node.querySelector('.e-list-icon') && liTextElement) {\n            var liIconElement = args.node.querySelector('.e-list-icon');\n            liTextElement.insertBefore(liIconElement, args.node.querySelector('.e-list-text'));\n        }\n        if (allowDrag && !this.parent.isAdaptive) {\n            /* eslint-disable */\n            var field = PivotUtil.getFieldInfo(args.nodeData.id, this.parent);\n            /* eslint-enable */\n            allowDrag = false;\n            var dragElement = createElement('span', {\n                attrs: {\n                    'tabindex': '-1',\n                    title: (field.fieldItem ? field.fieldItem.allowDragAndDrop ?\n                        this.parent.localeObj.getConstant('drag') : '' : this.parent.localeObj.getConstant('drag')),\n                    'aria-disabled': 'false'\n                },\n                className: cls.ICON + ' ' + cls.DRAG_CLASS + ' ' +\n                    (field.fieldItem ? field.fieldItem.allowDragAndDrop ? '' : cls.DRAG_DISABLE_CLASS : '')\n            });\n            if (args.node.querySelector('.e-checkbox-wrapper') &&\n                !args.node.querySelector('.cls.DRAG_CLASS') && liTextElement) {\n                liTextElement.insertBefore(dragElement, args.node.querySelector('.e-checkbox-wrapper'));\n            }\n        }\n        if (args.node.querySelector('.' + cls.NODE_CHECK_CLASS)) {\n            addClass([args.node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n        }\n    };\n    TreeViewRenderer.prototype.updateOlapTreeNode = function (args) {\n        var allowDrag = false;\n        if (this.parent.dataType === 'olap') {\n            if (args.node && args.node.querySelector('.e-calcMemberGroupCDB,.e-measureGroupCDB-icon,.e-folderCDB-icon,.e-folderCDB-open-icon,.e-dimensionCDB-icon,.e-kpiCDB-icon')) {\n                args.node.querySelector('.e-checkbox-wrapper').style.display = 'none';\n            }\n            if (args.node && args.node.querySelector('.e-list-icon') &&\n                (args.node.querySelector('.e-list-icon').className.indexOf('e-level-members') > -1)) {\n                if (this.parent.isAdaptive) {\n                    args.node.querySelector('.e-checkbox-wrapper').style.display = 'none';\n                }\n                else {\n                    args.node.querySelector('.e-checkbox-wrapper').style.visibility = 'hidden';\n                }\n            }\n            if (args.node && (args.node.querySelector('.e-hierarchyCDB-icon,.e-attributeCDB-icon,.e-namedSetCDB-icon') ||\n                args.node.querySelector('.e-measure-icon,.e-kpiGoal-icon,.e-kpiStatus-icon,.e-kpiTrend-icon,.e-kpiValue-icon') ||\n                args.node.querySelector('.e-calc-measure-icon,.e-calc-dimension-icon'))) {\n                if (args.node.querySelector('.e-measure-icon')) {\n                    args.node.querySelector('.e-list-icon').style.display = 'none';\n                    allowDrag = true;\n                }\n                else {\n                    allowDrag = true;\n                }\n            }\n        }\n        else {\n            allowDrag = true;\n        }\n        return allowDrag;\n    };\n    TreeViewRenderer.prototype.renderTreeDialog = function (axis) {\n        var fieldListDialog = createElement('div', {\n            id: this.parent.element.id + '_FieldListTreeView',\n            className: cls.ADAPTIVE_FIELD_LIST_DIALOG_CLASS + ' ' + (this.parent.dataType === 'olap' ? 'e-olap-editor-dialog' : '')\n        });\n        this.parentElement.appendChild(fieldListDialog);\n        this.fieldDialog = new Dialog({\n            animationSettings: { effect: 'Fade' },\n            allowDragging: false,\n            header: this.parent.localeObj.getConstant('adaptiveFieldHeader'),\n            content: this.createTreeView(this.getTreeData(axis)),\n            isModal: true,\n            visible: true,\n            showCloseIcon: false,\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            width: 'auto',\n            height: '350px',\n            position: { X: 'center', Y: 'center' },\n            buttons: [{\n                    click: this.closeTreeDialog.bind(this),\n                    buttonModel: {\n                        cssClass: cls.CANCEL_BUTTON_CLASS, content: this.parent.localeObj.getConstant('cancel')\n                    }\n                }, {\n                    click: this.onFieldAdd.bind(this),\n                    buttonModel: {\n                        cssClass: cls.OK_BUTTON_CLASS, content: this.parent.localeObj.getConstant('add'),\n                        isPrimary: true\n                    }\n                }],\n            closeOnEscape: false,\n            target: this.parentElement.parentElement,\n            close: this.dialogClose.bind(this)\n        });\n        this.fieldDialog.isStringTemplate = true;\n        this.fieldDialog.appendTo(fieldListDialog);\n        // this.fieldDialog.element.querySelector('.e-dlg-header').innerHTML = this.parent.localeObj.getConstant('adaptiveFieldHeader');\n    };\n    TreeViewRenderer.prototype.dialogClose = function () {\n        if (document.getElementById(this.parent.element.id + '_FieldListTreeView')) {\n            remove(document.getElementById(this.parent.element.id + '_FieldListTreeView'));\n        }\n    };\n    TreeViewRenderer.prototype.createTreeView = function (treeData) {\n        var editorTreeWrapper = createElement('div', {\n            id: this.parent.element.id + 'EditorDiv',\n            className: cls.EDITOR_TREE_WRAPPER_CLASS\n        });\n        var searchWrapper = createElement('div', {\n            id: this.parent.element.id + '_SearchDiv', attrs: { 'tabindex': '-1' },\n            className: cls.EDITOR_SEARCH_WRAPPER_CLASS\n        });\n        var editorSearch = createElement('input', { attrs: { 'type': 'text' } });\n        searchWrapper.appendChild(editorSearch);\n        var treeOuterDiv = createElement('div', { className: cls.EDITOR_TREE_CONTAINER_CLASS + '-outer-div' });\n        var treeViewContainer = createElement('div', {\n            className: cls.EDITOR_TREE_CONTAINER_CLASS + ' ' + (this.parent.dataType === 'olap' ? 'e-olap-field-list-tree' : '')\n        });\n        editorTreeWrapper.appendChild(searchWrapper);\n        this.editorSearch = new MaskedTextBox({\n            showClearButton: true,\n            placeholder: this.parent.localeObj.getConstant('search'),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            cssClass: cls.EDITOR_SEARCH_CLASS,\n            change: this.textChange.bind(this)\n        });\n        this.editorSearch.isStringTemplate = true;\n        this.editorSearch.appendTo(editorSearch);\n        var promptDiv = createElement('div', {\n            className: cls.EMPTY_MEMBER_CLASS + ' ' + cls.ICON_DISABLE,\n            innerHTML: this.parent.localeObj.getConstant('noMatches')\n        });\n        editorTreeWrapper.appendChild(promptDiv);\n        treeOuterDiv.appendChild(treeViewContainer);\n        editorTreeWrapper.appendChild(treeOuterDiv);\n        this.fieldTable = new TreeView({\n            fields: { dataSource: treeData, id: 'id', text: 'caption', isChecked: 'isSelected', parentID: 'pid', iconCss: 'spriteCssClass' },\n            showCheckBox: true,\n            autoCheck: false,\n            loadOnDemand: this.parent.dataType === 'olap' ? false : true,\n            sortOrder: this.parent.dataType === 'olap' ? 'None' : 'Ascending',\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            nodeChecked: this.addNode.bind(this),\n            drawNode: this.updateTreeNode.bind(this),\n            nodeExpanding: this.updateNodeIcon.bind(this),\n            nodeCollapsed: this.updateNodeIcon.bind(this),\n            nodeSelected: function (args) {\n                removeClass([args.node], 'e-active');\n                args.cancel = true;\n            }\n        });\n        this.fieldTable.isStringTemplate = true;\n        this.fieldTable.appendTo(treeViewContainer);\n        return editorTreeWrapper;\n    };\n    TreeViewRenderer.prototype.textChange = function (e) {\n        this.parent.pivotCommon.eventBase.searchTreeNodes(e, this.fieldTable, true);\n        var promptDiv = this.fieldDialog.element.querySelector('.' + cls.EMPTY_MEMBER_CLASS);\n        var liList = [].slice.call(this.fieldTable.element.querySelectorAll('li'));\n        var disabledList = [].slice.call(this.fieldTable.element.querySelectorAll('li.' + cls.ICON_DISABLE));\n        if (liList.length === disabledList.length) {\n            removeClass([promptDiv], cls.ICON_DISABLE);\n        }\n        else {\n            addClass([promptDiv], cls.ICON_DISABLE);\n        }\n    };\n    TreeViewRenderer.prototype.dragStart = function (args) {\n        var _this = this;\n        if (args.event.target.classList.contains(cls.DRAG_CLASS) &&\n            !args.event.target.classList.contains(cls.DRAG_DISABLE_CLASS)) {\n            var fieldInfo = PivotUtil.getFieldInfo(args.draggedNode.getAttribute('data-uid'), this.parent);\n            var dragEventArgs = {\n                fieldName: fieldInfo.fieldName, fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis,\n                dataSourceSettings: this.parent.dataSourceSettings, cancel: false\n            };\n            var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n            control.trigger(events.fieldDragStart, dragEventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.parent.isDragging = true;\n                    addClass([args.draggedNode.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.SELECTED_NODE_CLASS);\n                    var data = void 0;\n                    if (_this.parent.dataType === 'olap') {\n                        data = _this.parent.olapEngineModule.fieldList[args.draggedNode.getAttribute('data-uid')];\n                    }\n                    else {\n                        data = _this.parent.engineModule.fieldList[args.draggedNode.getAttribute('data-uid')];\n                    }\n                    var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];\n                    if (data && data.aggregateType === 'CalculatedField') {\n                        for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {\n                            var axisContent = axis_1[_i];\n                            addClass([_this.parentElement.querySelector('.' + axisContent)], cls.NO_DRAG_CLASS);\n                        }\n                    }\n                    var dragItem = args.clonedNode;\n                    if (dragItem && (_this.parent.getModuleName() === 'pivotfieldlist' &&\n                        _this.parent.renderMode) === 'Popup') {\n                        dragItem.style.zIndex = (_this.parent.dialogRenderer.fieldListDialog.zIndex + 1).toString();\n                    }\n                }\n                else {\n                    _this.parent.isDragging = false;\n                    args.cancel = true;\n                }\n            });\n        }\n        else {\n            this.parent.isDragging = false;\n            args.cancel = true;\n        }\n    };\n    // private getFieldDragArgs(args: DragAndDropEventArgs): FieldDragStartEventArgs {\n    //     let fieldInfo: FieldItemInfo = PivotUtil.getFieldInfo(args.draggedNode.getAttribute('data-uid'), this.parent);\n    //     let dragEventArgs: any = {\n    //         fieldName: fieldInfo.fieldName, fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis,\n    //         dataSourceSettings: this.parent.dataSourceSettings, cancel: false\n    //     }\n    //     let treeModule: TreeViewRenderer = this;\n    //     if (isBlazor()) {\n    //         dragEventArgs = this.getFieldDragEventArgs(dragEventArgs);\n    //         dragEventArgs.then((e: any) => {\n    //             return e;\n    //         });\n    //     }\n    //     let control: PivotView | PivotFieldList = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n    //     control.trigger(events.fieldDragStart, dragEventArgs);\n    //     return dragEventArgs;\n    // }\n    // private getFieldDragEventArgs(dragEventArgs: FieldDragStartEventArgs): FieldDragStartEventArgs | Deferred {\n    //     let callbackPromise: Deferred = new Deferred();\n    //     let control: PivotView | PivotFieldList = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n    //     control.trigger(events.fieldDragStart, dragEventArgs, (observedArgs: FieldDragStartEventArgs) => {\n    //         callbackPromise.resolve(observedArgs);\n    //     });\n    //     return callbackPromise;\n    // }\n    TreeViewRenderer.prototype.dragStop = function (args) {\n        args.cancel = true;\n        this.parent.isDragging = false;\n        var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];\n        for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {\n            var axisElement = axis_2[_i];\n            removeClass([this.parentElement.querySelector('.' + axisElement)], cls.NO_DRAG_CLASS);\n        }\n        removeClass([args.draggedNode.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.SELECTED_NODE_CLASS);\n        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n            this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n        }\n        var fieldName = args.draggedNodeData.id.toString();\n        /* eslint-disable */\n        if (!this.isNodeDropped(args, fieldName)) {\n            return;\n        }\n        var list = this.parent.pivotFieldList;\n        var selectedNode = list[fieldName];\n        /* eslint-enable */\n        this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === 'pivotview' ? this.parent :\n            (this.parent.pivotGridModule ? this.parent.pivotGridModule : this.parent);\n        if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, fieldName)) {\n            if (this.parent.allowDeferLayoutUpdate) {\n                selectedNode.isSelected = true;\n                this.updateDataSource();\n            }\n            else {\n                this.parent.updateDataSource();\n            }\n            var parent_1 = this.parent;\n            //setTimeout(() => {\n            parent_1.axisFieldModule.render();\n            //});\n        }\n    };\n    TreeViewRenderer.prototype.isNodeDropped = function (args, targetID) {\n        var isDropped = true;\n        if (args.draggedNodeData.isChecked === 'true') {\n            var target = this.getButton(targetID);\n            var axisPanel = closest(target, '.' + cls.DROPPABLE_CLASS);\n            var droppableElement = closest(args.target, '.' + cls.DROPPABLE_CLASS);\n            if (target && axisPanel === droppableElement) {\n                var pivotButtons = [].slice.call(axisPanel.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));\n                var dropTarget = closest(args.target, '.' + cls.PIVOT_BUTTON_WRAPPER_CLASS);\n                var sourcePosition = void 0;\n                var dropPosition = -1;\n                for (var i = 0, n = pivotButtons.length; i < n; i++) {\n                    if (pivotButtons[i].id === target.id) {\n                        sourcePosition = i;\n                    }\n                    if (dropTarget) {\n                        var droppableButton = dropTarget.querySelector('.' + cls.PIVOT_BUTTON_CLASS);\n                        if (pivotButtons[i].id === droppableButton.id) {\n                            dropPosition = i;\n                        }\n                    }\n                }\n                if (sourcePosition === dropPosition || (sourcePosition === (pivotButtons.length - 1) && dropPosition === -1)) {\n                    var parentElement = document.getElementById(this.parent.element.id + '_Wrapper');\n                    removeClass([].slice.call(parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);\n                    isDropped = false;\n                }\n            }\n        }\n        return isDropped;\n    };\n    TreeViewRenderer.prototype.getButton = function (fieldName) {\n        var wrapperElement = document.getElementById(this.parent.element.id + '_Wrapper');\n        var pivotButtons = [].slice.call(wrapperElement.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));\n        var buttonElement;\n        for (var i = 0, n = pivotButtons.length; i < n; i++) {\n            if (pivotButtons[i].id === fieldName) {\n                buttonElement = pivotButtons[i];\n                break;\n            }\n        }\n        return buttonElement;\n    };\n    TreeViewRenderer.prototype.nodeStateChange = function (args) {\n        var _this = this;\n        var node = closest(args.node, '.' + cls.TEXT_CONTENT_CLASS);\n        if (!isNullOrUndefined(node)) {\n            var li_1 = closest(node, 'li');\n            var id_1 = li_1.getAttribute('data-uid');\n            if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n                this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n            }\n            /* eslint-disable */\n            var list = this.parent.pivotFieldList;\n            var selectedNode_1 = list[id_1];\n            /* eslint-enable */\n            var fieldInfo_1 = PivotUtil.getFieldInfo(id_1, this.parent);\n            var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n            if (args.action === 'check') {\n                var eventdrop = {\n                    fieldName: id_1, dropField: fieldInfo_1.fieldItem,\n                    dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                    dropAxis: (selectedNode_1.type === 'number' || (selectedNode_1.type === 'CalculatedField' &&\n                        selectedNode_1.formula && selectedNode_1.formula.indexOf('Measure') > -1 &&\n                        this.parent.dataType === 'olap')) ? 'values' : 'rows',\n                    dropPosition: fieldInfo_1.position, draggedAxis: 'fieldlist', cancel: false\n                };\n                control.trigger(events.fieldDrop, eventdrop, function (observedArgs) {\n                    if (!observedArgs.cancel) {\n                        addClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n                        _this.updateSelectedNodes(li_1, args.action);\n                        var addNode = _this.parent.pivotCommon.dataSourceUpdate.getNewField(id_1, fieldInfo_1.fieldItem);\n                        _this.updateReportSettings(addNode, observedArgs);\n                        _this.updateNodeStateChange(id_1, args, selectedNode_1);\n                    }\n                    else {\n                        _this.updateCheckState(selectedNode_1);\n                    }\n                });\n            }\n            else {\n                var removeFieldArgs = {\n                    cancel: false, fieldName: id_1,\n                    dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                    fieldItem: fieldInfo_1.fieldItem, axis: fieldInfo_1.axis\n                };\n                control.trigger(events.fieldRemove, removeFieldArgs, function (observedArgs) {\n                    if (!observedArgs.cancel) {\n                        removeClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n                        _this.updateSelectedNodes(li_1, args.action);\n                        _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(id_1);\n                        if (_this.parent.dataType === 'olap' && _this.parent.dataSourceSettings.values.length === 0) {\n                            _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport('[Measures]');\n                        }\n                        _this.updateNodeStateChange(id_1, args, selectedNode_1);\n                    }\n                    else {\n                        _this.updateCheckState(selectedNode_1);\n                    }\n                });\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateReportSettings = function (newField, dropArgs) {\n        var dropPosition = dropArgs.dropPosition;\n        var dropClass = dropArgs.dropAxis;\n        switch (dropClass) {\n            case 'filters':\n                dropPosition !== -1 ? /* eslint-disable-line */\n                    this.parent.dataSourceSettings.filters.splice(dropPosition, 0, newField) :\n                    this.parent.dataSourceSettings.filters.push(newField);\n                break;\n            case 'rows':\n                dropPosition !== -1 ? /* eslint-disable-line */\n                    this.parent.dataSourceSettings.rows.splice(dropPosition, 0, newField) :\n                    this.parent.dataSourceSettings.rows.push(newField);\n                break;\n            case 'columns':\n                dropPosition !== -1 ? /* eslint-disable-line */\n                    this.parent.dataSourceSettings.columns.splice(dropPosition, 0, newField) :\n                    this.parent.dataSourceSettings.columns.push(newField);\n                break;\n            case 'values':\n                dropPosition !== -1 ? /* eslint-disable-line */\n                    this.parent.dataSourceSettings.values.splice(dropPosition, 0, newField) :\n                    this.parent.dataSourceSettings.values.push(newField);\n                if (this.parent.dataType === 'olap' && this.parent.olapEngineModule &&\n                    !(this.parent.olapEngineModule).isMeasureAvail) {\n                    var measureField = {\n                        name: '[Measures]', caption: 'Measures', baseField: undefined, baseItem: undefined\n                    };\n                    var fieldAxis = this.parent.dataSourceSettings.valueAxis === 'row' ?\n                        this.parent.dataSourceSettings.rows : this.parent.dataSourceSettings.columns;\n                    fieldAxis.push(measureField);\n                }\n                break;\n        }\n    };\n    TreeViewRenderer.prototype.updateCheckState = function (selectedNode) {\n        var chkState = this.fieldTable.element.querySelectorAll('.e-checkbox-wrapper');\n        var innerText = this.fieldTable.element.querySelectorAll('.e-list-text');\n        var checkClass = this.fieldTable.element.querySelectorAll('.e-frame');\n        for (var i = 0; i < chkState.length; i++) {\n            if (selectedNode.caption === innerText[i].textContent) {\n                if (chkState[i].getAttribute('aria-checked') === 'false') {\n                    chkState[i].setAttribute('aria-checked', 'false');\n                    checkClass[i].classList.add(cls.NODE_CHECK_CLASS);\n                }\n                else {\n                    chkState[i].setAttribute('aria-checked', 'true');\n                    checkClass[i].classList.remove(cls.NODE_CHECK_CLASS);\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateNodeStateChange = function (id, args, selectedNode) {\n        if (!this.parent.allowDeferLayoutUpdate) {\n            this.parent.updateDataSource(true);\n        }\n        else {\n            selectedNode.isSelected = args.action === 'check';\n            if (this.parent.dataType === 'olap') {\n                this.parent.olapEngineModule.updateFieldlistData(id, args.action === 'check');\n            }\n            this.updateDataSource();\n        }\n        var parent = this.parent;\n        setTimeout(function () {\n            parent.axisFieldModule.render();\n        });\n    };\n    TreeViewRenderer.prototype.updateSelectedNodes = function (li, state) {\n        if (li && li.querySelector('ul')) {\n            for (var _i = 0, _a = [].slice.call(li.querySelectorAll('li')); _i < _a.length; _i++) {\n                var element = _a[_i];\n                if (state === 'check') {\n                    addClass([element.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n                }\n                else {\n                    removeClass([element.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateDataSource = function () {\n        if (this.parent.isPopupView) {\n            if (this.parent.dataType === 'olap') {\n                this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;\n            }\n            else {\n                this.parent.pivotGridModule.engineModule = this.parent.engineModule;\n            }\n            this.parent.pivotGridModule.setProperties({ dataSourceSettings: this.parent.dataSourceSettings.properties }, true); /* eslint-disable-line */\n            this.parent.pivotGridModule.notify(events.uiUpdate, this);\n        }\n        else {\n            this.parent.triggerPopulateEvent();\n        }\n    };\n    TreeViewRenderer.prototype.addNode = function (args) {\n        var _this = this;\n        /* eslint-disable */\n        var fieldList = this.parent.pivotFieldList;\n        var selectedNode = fieldList[args.data[0].id.toString()];\n        /* eslint-enable */\n        var fieldInfo = PivotUtil.getFieldInfo(selectedNode.id.toString(), this.parent);\n        var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n        if (args.action === 'check') {\n            var eventdrop = {\n                fieldName: fieldInfo.fieldName, dropField: fieldInfo.fieldItem,\n                dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                dropAxis: 'rows', draggedAxis: 'fieldlist', cancel: false\n            };\n            control.trigger(events.fieldDrop, eventdrop, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.selectedNodes.push(selectedNode.id.toString());\n                }\n                else {\n                    _this.updateCheckState(selectedNode);\n                }\n            });\n        }\n        else {\n            var removeFieldArgs = {\n                cancel: false, fieldName: fieldInfo.fieldName,\n                dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis\n            };\n            control.trigger(events.fieldRemove, removeFieldArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    var count = _this.selectedNodes.length;\n                    while (count--) {\n                        if (_this.selectedNodes[count] === selectedNode.id.toString()) {\n                            _this.selectedNodes.splice(count, 1);\n                            break;\n                        }\n                    }\n                }\n                else {\n                    _this.updateCheckState(selectedNode);\n                }\n            });\n        }\n    };\n    TreeViewRenderer.prototype.refreshTreeView = function () {\n        if (this.fieldTable) {\n            var treeData = this.getUpdatedData(); /* eslint-disable-line */\n            this.fieldTable.fields = {\n                dataSource: treeData, id: 'id', text: 'caption', isChecked: 'isSelected', parentID: 'pid', iconCss: 'spriteCssClass'\n            };\n            this.fieldTable.dataBind();\n        }\n    };\n    /* eslint-disable */\n    TreeViewRenderer.prototype.getUpdatedData = function () {\n        var treeData = this.getTreeData();\n        /* eslint-enable */\n        var expandedNodes = this.fieldTable.expandedNodes;\n        this.updateExpandedNodes(treeData, expandedNodes);\n        return this.applySorting(treeData, this.fieldListSort);\n    };\n    /* eslint-disable */\n    TreeViewRenderer.prototype.getTreeData = function (axis) {\n        var data = [];\n        /* eslint-enable */\n        if (this.parent.dataType === 'olap') {\n            data = this.getOlapTreeData(axis);\n        }\n        else {\n            var keys = this.parent.pivotFieldList ? Object.keys(this.parent.pivotFieldList) : [];\n            var fieldList = {};\n            for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n                var key = keys_2[_i];\n                var member = this.parent.pivotFieldList[key];\n                fieldList[key] = { id: member.id, caption: member.caption, isSelected: member.isSelected };\n            }\n            if (this.parent.isAdaptive) {\n                var fields = [this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns,\n                    this.parent.dataSourceSettings.rows,\n                    this.parent.dataSourceSettings.values];\n                var currentFieldSet = fields[axis];\n                var len = keys.length;\n                while (len--) {\n                    fieldList[keys[len]].isSelected = false;\n                }\n                for (var _a = 0, currentFieldSet_1 = currentFieldSet; _a < currentFieldSet_1.length; _a++) {\n                    var item = currentFieldSet_1[_a];\n                    fieldList[item.name].isSelected = true;\n                }\n            }\n            /* eslint-disable */\n            var list = fieldList;\n            for (var _b = 0, keys_3 = keys; _b < keys_3.length; _b++) {\n                var member = keys_3[_b];\n                var obj = list[member];\n                /* eslint-enable */\n                data.push(obj);\n            }\n        }\n        return data;\n    };\n    /* eslint-disable */\n    TreeViewRenderer.prototype.getOlapTreeData = function (axis) {\n        var data = [];\n        /* eslint-enable */\n        var fieldListData = this.parent.olapEngineModule.fieldListData ? this.parent.olapEngineModule.fieldListData : [];\n        if (this.parent.isAdaptive) {\n            var fields = [\n                this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns,\n                this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.values\n            ];\n            var currentFieldSet = fields[axis];\n            var i = 0;\n            while (i < fieldListData.length) {\n                var item = fieldListData[i];\n                /* eslint-disable */\n                var framedSet = void 0;\n                /* eslint-enable */\n                if (axis === 3) {\n                    if (item.id.toLowerCase() !== '[measures]' &&\n                        (item.id.toLowerCase().indexOf('[measures]') === 0 ||\n                            (item.spriteCssClass && item.spriteCssClass.indexOf('e-measureCDB') !== -1)) ||\n                        (item.id.toLowerCase() === '[calculated members].[_0]' ||\n                            (item.spriteCssClass && item.spriteCssClass.indexOf('e-calc-measure-icon') !== -1))) {\n                        framedSet = {\n                            id: item.id, caption: item.caption, hasChildren: item.hasChildren,\n                            type: item.type, aggregateType: item.aggregateType,\n                            isSelected: item.isSelected, pid: item.pid, spriteCssClass: item.spriteCssClass\n                        };\n                        framedSet.isSelected = false;\n                        if (framedSet.spriteCssClass && framedSet.spriteCssClass.indexOf('e-measureCDB') !== -1) {\n                            framedSet.spriteCssClass = framedSet.spriteCssClass.replace('e-folderCDB-icon', 'e-measureGroupCDB-icon');\n                            framedSet.pid = undefined;\n                        }\n                        for (var _i = 0, currentFieldSet_2 = currentFieldSet; _i < currentFieldSet_2.length; _i++) {\n                            var field = currentFieldSet_2[_i];\n                            if (framedSet.id === field.name) {\n                                framedSet.isSelected = true;\n                                break;\n                            }\n                        }\n                        data.push(framedSet);\n                    }\n                }\n                else {\n                    if (!(item.id.toLowerCase().indexOf('[measures]') === 0) &&\n                        !(item.spriteCssClass && item.spriteCssClass.indexOf('e-measureCDB') !== -1) &&\n                        !(item.spriteCssClass && item.spriteCssClass.indexOf('e-calc-measure-icon') !== -1)) {\n                        framedSet = {\n                            id: item.id, caption: item.caption, hasChildren: item.hasChildren,\n                            type: item.type, aggregateType: item.aggregateType,\n                            isSelected: item.isSelected, pid: item.pid, spriteCssClass: item.spriteCssClass\n                        };\n                        framedSet.isSelected = false;\n                        for (var _a = 0, currentFieldSet_3 = currentFieldSet; _a < currentFieldSet_3.length; _a++) {\n                            var item_1 = currentFieldSet_3[_a];\n                            if (framedSet.id === item_1.name) {\n                                framedSet.isSelected = true;\n                                break;\n                            }\n                        }\n                        data.push(framedSet);\n                    }\n                }\n                i++;\n            }\n        }\n        else {\n            data = PivotUtil.getClonedData(this.parent.olapEngineModule.fieldListData); /* eslint-disable-line */\n        }\n        return data;\n    };\n    TreeViewRenderer.prototype.updateExpandedNodes = function (data, expandedNodes) {\n        if (expandedNodes.length > 0) {\n            var i = 0;\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                var field = data_1[_i];\n                if (expandedNodes.indexOf(field.id) > -1) {\n                    i++;\n                    field.expanded = true;\n                    field.spriteCssClass = (field.spriteCssClass &&\n                        field.spriteCssClass.toString().indexOf('e-folderCDB-icon') > -1 ?\n                        field.spriteCssClass.toString().replace('e-folderCDB-icon', 'e-folderCDB-open-icon') :\n                        field.spriteCssClass);\n                    if (i === (expandedNodes.length)) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateSorting = function (args) {\n        var target = args.target;\n        var option = target.getAttribute('data-sort');\n        if (target.className.indexOf('e-selected') === -1) {\n            switch (option) {\n                case 'None':\n                    this.fieldListSort = 'None';\n                    addClass([target], 'e-selected');\n                    removeClass([this.parentElement.querySelector('.e-sort-ascend')], 'e-selected');\n                    removeClass([this.parentElement.querySelector('.e-sort-descend')], 'e-selected');\n                    break;\n                case 'Ascend':\n                    this.fieldListSort = 'Ascend';\n                    addClass([target], 'e-selected');\n                    removeClass([this.parentElement.querySelector('.e-sort-none')], 'e-selected');\n                    removeClass([this.parentElement.querySelector('.e-sort-descend')], 'e-selected');\n                    break;\n                case 'Descend':\n                    this.fieldListSort = 'Descend';\n                    addClass([target], 'e-selected');\n                    removeClass([this.parentElement.querySelector('.e-sort-ascend')], 'e-selected');\n                    removeClass([this.parentElement.querySelector('.e-sort-none')], 'e-selected');\n                    break;\n            }\n            this.refreshTreeView();\n        }\n    };\n    /* eslint-disable */\n    TreeViewRenderer.prototype.applySorting = function (treeData, sortOrder) {\n        if (this.parent.dataType === 'olap') {\n            var measure = void 0;\n            var calcMember = void 0;\n            /* eslint-enable */\n            if (this.parent.dataSourceSettings.calculatedFieldSettings.length > 0 &&\n                treeData[0].id.toLowerCase() === '[calculated members].[_0]') {\n                calcMember = treeData[0];\n                measure = treeData[1];\n                treeData.splice(0, 2);\n            }\n            else {\n                measure = treeData[0];\n                treeData.splice(0, 1);\n            }\n            /* eslint-disable  */\n            treeData = sortOrder === 'Ascend' ?\n                (treeData.sort(function (a, b) { return (a.caption > b.caption) ? 1 : ((b.caption > a.caption) ? -1 : 0); })) :\n                sortOrder === 'Descend' ?\n                    (treeData.sort(function (a, b) { return (a.caption < b.caption) ? 1 : ((b.caption < a.caption) ? -1 : 0); })) :\n                    treeData;\n            /* eslint-enable  */\n            if (calcMember) {\n                treeData.splice(0, 0, calcMember, measure);\n            }\n            else {\n                treeData.splice(0, 0, measure);\n            }\n        }\n        else {\n            this.fieldTable.sortOrder = ((sortOrder === 'Ascend' ? 'Ascending' : (sortOrder === 'Descend' ? 'Descending' : 'None')));\n        }\n        return treeData;\n    };\n    TreeViewRenderer.prototype.onFieldAdd = function (e) {\n        this.parent.dialogRenderer.updateDataSource(this.selectedNodes);\n        this.closeTreeDialog();\n    };\n    TreeViewRenderer.prototype.closeTreeDialog = function () {\n        this.selectedNodes = [];\n        this.fieldDialog.hide();\n    };\n    TreeViewRenderer.prototype.keyPress = function (e) {\n        if (e.keyCode === 13 && e.target) {\n            e.target.click();\n            e.preventDefault();\n            return;\n        }\n    };\n    TreeViewRenderer.prototype.wireFieldListEvent = function (element) {\n        EventHandler.add(element, 'keydown', this.keyPress, this);\n        EventHandler.add(element, 'click', this.updateSorting, this);\n    };\n    TreeViewRenderer.prototype.unWireFieldListEvent = function (element) {\n        EventHandler.remove(element, 'keydown', this.keyPress);\n        EventHandler.remove(element, 'click', this.updateSorting);\n    };\n    /* eslint-disable-next-line */\n    /**\n     * @hidden\n     */\n    TreeViewRenderer.prototype.addEventListener = function () {\n        this.parent.on(events.treeViewUpdate, this.refreshTreeView, this);\n    };\n    /* eslint-disable-next-line */\n    /**\n     * @hidden\n     */\n    TreeViewRenderer.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.treeViewUpdate, this.refreshTreeView);\n    };\n    /**\n     * To destroy the tree view event listener\n     * @returns {void}\n     * @hidden\n     */\n    TreeViewRenderer.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.fieldTable && !this.fieldTable.isDestroyed) {\n            this.fieldTable.destroy();\n            this.fieldTable = null;\n        }\n        if (this.fieldDialog && !this.fieldDialog.isDestroyed) {\n            this.fieldDialog.destroy();\n            this.fieldDialog = null;\n        }\n        if (this.editorSearch && !this.editorSearch.isDestroyed) {\n            this.editorSearch.destroy();\n            this.editorSearch = null;\n        }\n    };\n    return TreeViewRenderer;\n}());\nexport { TreeViewRenderer };\n"]},"metadata":{},"sourceType":"module"}