{"ast":null,"code":"import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\n\nvar InfiniteScroll = function () {\n  /**\n   * Constructor for the Grid infinite scrolling.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n   * @hidden\n   */\n  function InfiniteScroll(parent, serviceLocator) {\n    this.infiniteCache = {};\n    this.infiniteCurrentViewData = {};\n    this.infiniteFrozenCache = {};\n    this.isDownScroll = false;\n    this.isUpScroll = false;\n    this.isScroll = true;\n    this.enableContinuousScroll = false;\n    this.initialRender = true;\n    this.isRemove = false;\n    this.isInitialCollapse = false;\n    this.prevScrollTop = 0;\n    this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n    this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n    this.rowTop = 0;\n    this.isInitialMovableRender = true;\n    this.virtualInfiniteData = {};\n    this.isCancel = false;\n    this.emptyRowData = {};\n    this.isNormaledit = false;\n    this.isInfiniteScroll = false;\n    this.isLastPage = false;\n    this.isInitialRender = true;\n    this.isFocusScroll = false;\n    this.isGroupCollapse = false;\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n    this.addEventListener();\n    this.widthService = serviceLocator.getService('widthService');\n    this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  }\n\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.dataReady, this.onDataReady, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n    this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n    this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n    this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n    this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n    this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n    this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n    this.parent.on(events.setInfiniteCache, this.setCache, this);\n    this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n    this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n    this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n    this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n    this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n    this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n    this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n    this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n    this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n    this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.contentReady, this.selectNewRow, this);\n    this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n    this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n    this.actionBeginFunction = this.actionBegin.bind(this);\n    this.actionCompleteFunction = this.actionComplete.bind(this);\n    this.dataBoundFunction = this.dataBound.bind(this);\n    this.parent.on(events.deleteComplete, this.deleteComplate, this);\n    this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.dataReady, this.onDataReady);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n    this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n    this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n    this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n    this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n    this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n    this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n    this.parent.off(events.setInfiniteCache, this.setCache);\n    this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n    this.parent.off(events.keyPressed, this.infiniteCellFocus);\n    this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n    this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n    this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n    this.parent.off(events.editReset, this.resetInfiniteEdit);\n    this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n    this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n    this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n    this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.contentReady, this.selectNewRow);\n    this.parent.off(events.captionActionComplete, this.captionActionComplete);\n    this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n    this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n  };\n\n  InfiniteScroll.prototype.dataBound = function () {\n    if (this.groupCaptionAction === 'collapse') {\n      this.groupCaptionAction = 'refresh';\n      this.makeGroupCollapseRequest();\n    } else if (this.groupCaptionAction === 'refresh') {\n      this.parent.hideSpinner();\n      this.groupCaptionAction = this.empty;\n    }\n  };\n\n  InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n    var gObj = this.parent;\n\n    if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n      args.skipPage = true;\n      this.isGroupCollapse = false;\n\n      if (this.groupCaptionAction === 'collapse') {\n        var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n        var rowObjs = gObj.getRowsObject();\n        var childCount = 0;\n\n        for (var i = rowObjs.length - 1; i >= 0; i--) {\n          if (rowObjs[i].indent === captionRow.indent) {\n            break;\n          }\n\n          if (rowObjs[i].isDataRow) {\n            childCount++;\n          }\n        }\n\n        var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n        var pred = generateExpandPredicates(key.fields, key.keys, this);\n        var predicateList = getPredicates(pred);\n        pred = predicateList[predicateList.length - 1];\n\n        for (var i = predicateList.length - 2; i >= 0; i--) {\n          pred = pred.and(predicateList[i]);\n        }\n\n        args.query.where(pred);\n        args.query.skip(childCount);\n        this.parentCapUid = this.empty;\n      } else {\n        var rows = gObj.getRows();\n        var size = gObj.pageSettings.pageSize;\n        var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n        var additionalCnt = skip - skip % size + size - skip;\n\n        if (skip % size === 0) {\n          additionalCnt = 0;\n        }\n\n        args.query.skip(skip);\n        args.query.take(gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize + additionalCnt);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.captionActionComplete = function (args) {\n    var gObj = this.parent;\n\n    if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n      var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n      var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n\n      if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n        this.parentCapUid = args.parentUid;\n        this.groupCaptionAction = 'collapse';\n        gObj.showSpinner();\n        var caption = gObj.getRowObjectFromUID(args.parentUid);\n        var childCount = this.getCaptionChildCount(caption);\n\n        if (!childCount) {\n          this.groupCaptionAction = 'refresh';\n          this.makeGroupCollapseRequest();\n        } else {\n          this.makeGroupCollapseRequest(args.parentUid);\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n    var gObj = this.parent;\n    var rows = gObj.getRows();\n    var index = getRowIndexFromElement(rows[rows.length - 1]);\n    var prevPage = this.parent.pageSettings.currentPage;\n    this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n\n    if (this.parent.pageSettings.currentPage > this.maxPage) {\n      gObj.hideSpinner();\n      return;\n    }\n\n    var scrollArg = {\n      requestType: 'infiniteScroll',\n      currentPage: this.parent.pageSettings.currentPage,\n      prevPage: prevPage,\n      startIndex: index + 1,\n      direction: 'down',\n      isCaptionCollapse: true,\n      parentUid: parentUid\n    };\n    this.isGroupCollapse = true;\n    this.parent.notify('model-changed', scrollArg);\n  };\n\n  InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n    var rowObj = this.parent.getRowsObject();\n    var index = rowObj.indexOf(caption);\n    var make = false;\n\n    for (var i = index; i < rowObj.length; i++) {\n      if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent) && rowObj[i].data.key !== caption.data.key) {\n        break;\n      }\n\n      if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {\n        make = true;\n        break;\n      }\n    }\n\n    return make;\n  };\n\n  InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n    var childCount = 0;\n\n    for (var i = index + 1; i < rowObj.length; i++) {\n      if (rowObj[i].indent === row.indent) {\n        break;\n      }\n\n      if (rowObj[i].indent === row.indent + 1 && rowObj[i].parentUid === row.uid) {\n        childCount++;\n      }\n    }\n\n    return row.data.count === childCount;\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewData = function () {\n    var gObj = this.parent;\n\n    if (gObj.groupSettings.columns.length) {\n      return;\n    }\n\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    gObj.currentViewData = [];\n    var page = gObj.pageSettings.currentPage;\n    var isCache = gObj.infiniteScrollSettings.enableCache;\n    var blocks = gObj.infiniteScrollSettings.maxBlocks;\n    var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);\n    var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;\n    var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;\n\n    for (var i = start; i <= end; i++) {\n      if (this.infiniteCurrentViewData[i]) {\n        gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n    var page = this.parent.pageSettings.currentPage;\n    var size = this.parent.pageSettings.pageSize;\n    var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var cache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (!this.parent.groupSettings.columns.length) {\n      var isAdd = e.args.requestType === 'save';\n      var isDelete = e.args.requestType === 'delete';\n\n      if (!cache && (isAdd || isDelete)) {\n        if (isAdd) {\n          this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n        } else {\n          this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n        }\n      } else {\n        if (blocks > 1 && e.data.length === blocks * size) {\n          this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n        } else {\n          this.infiniteCurrentViewData[page] = e.data.slice();\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.deleteComplate = function () {\n    if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n      this.parent.contentModule.refreshScrollOffset();\n    }\n  };\n\n  InfiniteScroll.prototype.modelChanged = function (args) {\n    var rows = this.parent.getRows();\n\n    if (rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n      this.firstIndex = getRowIndexFromElement(rows[0]);\n      this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n      this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n\n      if (args.requestType === 'delete') {\n        var rowObj = this.parent.getRowsObject();\n        args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n      } else {\n        args.startIndex = this.firstIndex;\n      }\n\n      if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n        this.isLastPage = true;\n        this.lastIndex = this.lastIndex - 1;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n    if (this.isNormaledit) {\n      this.isAdd = true;\n\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        if (!Object.keys(this.emptyRowData).length) {\n          this.createEmptyRowdata();\n        }\n\n        if (this.parent.pageSettings.currentPage > 1) {\n          args.startEdit = false;\n          this.resetInfiniteBlocks({}, true);\n          this.makeRequest({\n            currentPage: 1\n          });\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete' || args.e.requestType === 'save' && this.requestType === 'add')) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var rowElms = this.parent.getRows();\n      var rows = this.parent.getRowsObject();\n\n      if (this.ensureRowAvailability(rows, args.result[0])) {\n        if (rowElms.length) {\n          this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n\n          if (frozenCols) {\n            var rows_1 = this.parent.getMovableRowsObject();\n            this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n\n            if (this.parent.getFrozenMode() === literals.leftRight) {\n              var frRows = this.parent.getFrozenRightRowsObject();\n              this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n            }\n          }\n        }\n\n        if (!this.isLastPage) {\n          this.createRow(rows, args);\n        } else {\n          this.isLastPage = false;\n          this.parent.pageSettings.currentPage = this.maxPage;\n\n          if (this.parent.selectionModule.index < this.parent.frozenRows) {\n            remove(rowElms[this.parent.frozenRows - 1]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n\n            if (frozenCols) {\n              var movableRows = this.parent.getMovableDataRows();\n              remove(movableRows[this.parent.frozenRows]);\n              this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n\n              if (this.parent.getFrozenMode() === literals.leftRight) {\n                var rightRows = this.parent.getFrozenRightDataRows();\n                remove(rightRows[this.parent.frozenRows]);\n                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n              }\n            }\n\n            setRowElements(this.parent);\n          }\n        }\n      }\n\n      this.parent.hideSpinner();\n\n      if (this.requestType === 'delete') {\n        this.parent.notify(events.deleteComplete, args.e);\n      } else {\n        this.parent.notify(events.saveComplete, args.e);\n      }\n    }\n\n    this.parent.notify(events.freezeRender, {\n      case: 'refreshHeight'\n    });\n  };\n\n  InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n    var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    var tbody;\n\n    if (isFrozenRight) {\n      tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n    } else {\n      tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualContent().querySelector(literals.tbody) : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n    }\n\n    if (this.parent.frozenRows) {\n      tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add' ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody) : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody) : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n    }\n\n    var notifyArgs = {\n      rows: rows,\n      cancel: false,\n      args: args,\n      isMovable: isMovable,\n      isFrozenRows: isFrozenRows,\n      isFrozenRight: isFrozenRows,\n      row: row\n    };\n    this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n\n    if (!notifyArgs.cancel) {\n      for (var i = row.length - 1; i >= 0; i--) {\n        if (this.requestType === 'delete') {\n          tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n        } else {\n          tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n        }\n      }\n    }\n\n    if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n      var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows() : this.parent.getRows();\n      var index = (isMovable || isFrozenRight) && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n      remove(rowElems[index]);\n      this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n    }\n\n    if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n      if (isFrozenRight) {\n        setRowElements(this.parent);\n        this.parent.contentModule.rightFreezeRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n      } else if (!this.parent.isFrozenGrid() || isMovable) {\n        setRowElements(this.parent);\n        this.parent.contentModule.visibleRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          args.e.renderMovableContent = true;\n          this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n        }\n      } else {\n        this.parent.contentModule.visibleFrozenRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n        args.e.isFrozen = true;\n        this.createRow(this.parent.getMovableRowsObject(), args, true);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n    var resume = true;\n\n    if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === 'add') {\n      var key = this.parent.getPrimaryKeyFieldNames()[0];\n\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].data[key] === data[key]) {\n          resume = false;\n          break;\n        }\n      }\n    }\n\n    return resume;\n  };\n\n  InfiniteScroll.prototype.generateRows = function (data, args) {\n    return this.rowModelGenerator.generateRows(data, args);\n  };\n\n  InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n    var _this = this;\n\n    var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n    var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n\n    if (isAdd) {\n      if (isRemove) {\n        if (isFrozen && !this.parent.groupSettings.columns.length) {\n          this.swapCurrentViewData(1, true);\n        }\n\n        remove(rowElms[rows.length - 1]);\n        rowElms.splice(rows.length - 1, 1);\n        rows.splice(rows.length - 1, 1);\n      }\n    } else {\n      rows.filter(function (e, index) {\n        if (e.data[keyField] === args.data[0][keyField]) {\n          if (isFrozen && !_this.parent.groupSettings.columns.length) {\n            var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n\n            _this.resetInfiniteCurrentViewData(page, index);\n          }\n\n          rows.splice(index, 1);\n          remove(rowElms[index]);\n          rowElms.splice(index, 1);\n        }\n      });\n    }\n\n    var startIndex = isAdd ? 1 : 0;\n    resetRowIndex(this.parent, rows, rowElms, startIndex);\n  };\n\n  InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n    index = index - (page - 1) * this.parent.pageSettings.pageSize;\n    this.infiniteCurrentViewData[page].splice(index, 1);\n    this.swapCurrentViewData(page, false);\n  };\n\n  InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var end = isAdd ? keys.length + 1 : keys.length;\n\n    for (var i = page; i < end; i++) {\n      if (this.infiniteCurrentViewData[i + 1]) {\n        var pageIndex = isAdd ? i : i + 1;\n        var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n        var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n\n        if (isAdd) {\n          this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n\n          if (i + 1 === end - 1) {\n            this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n          }\n        } else {\n          this.infiniteCurrentViewData[i].push(data[0]);\n        }\n      }\n    }\n\n    this.updateCurrentViewData();\n  };\n\n  InfiniteScroll.prototype.setDisplayNone = function (args) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n\n      for (var i = 1; i <= keys.length; i++) {\n        var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0] : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n        cache.filter(function (e) {\n          e.cells[args.index].visible = args.visible === '';\n        });\n      }\n\n      this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCache = function (data) {\n    this.getEditedRowObject().data = data;\n  };\n\n  InfiniteScroll.prototype.getEditedRowObject = function () {\n    var rowObjects = this.parent.getRowsObject();\n    var editedrow;\n\n    for (var i = 0; i < rowObjects.length; i++) {\n      if (rowObjects[i].index === this.editRowIndex) {\n        editedrow = rowObjects[i];\n      }\n    }\n\n    return editedrow;\n  };\n\n  InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n    if (this.isNormaledit) {\n      if (!this.isAdd && args.data) {\n        this.updateCurrentViewRecords(args.data);\n      }\n\n      this.isAdd = false;\n    }\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n    var index = getEditedDataIndex(this.parent, data);\n\n    if (!isNullOrUndefined(index)) {\n      this.parent.getCurrentViewRecords()[index] = data;\n    }\n  };\n\n  InfiniteScroll.prototype.actionBegin = function (args) {\n    if (args.requestType === 'add' || args.requestType === 'delete') {\n      this.requestType = args.requestType;\n    } else if (args.action === 'add' && args.requestType === 'save') {\n      this.requestType = args.action;\n    }\n\n    if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching' || args.requestType === 'sorting' || args.requestType === 'filtering') {\n      this.isInitialRender = true;\n    }\n  };\n\n  InfiniteScroll.prototype.actionComplete = function (args) {\n    if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n      this.requestType = this.empty;\n      this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n      this.isAdd = this.isEdit = false;\n\n      if (this.isNormaledit) {\n        this.editRowIndex = this.empty;\n        this.virtualInfiniteData = {};\n        this.parent.editModule.previousVirtualData = {};\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteEdit = function () {\n    if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n      if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {\n        this.parent.isEdit = true;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n    data.virtualData = this.virtualInfiniteData;\n    data.isAdd = this.isAdd;\n    data.isCancel = this.isCancel;\n  };\n\n  InfiniteScroll.prototype.editActionBegin = function (e) {\n    this.isEdit = true;\n    this.editRowIndex = e.index;\n    var rowObject = extend({}, this.getEditedRowObject().data);\n    e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n  };\n\n  InfiniteScroll.prototype.dataSourceModified = function () {\n    this.resetInfiniteBlocks({\n      requestType: this.empty\n    }, true);\n  };\n\n  InfiniteScroll.prototype.onDataReady = function (e) {\n    if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n      this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n    }\n  };\n\n  InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n    this.isInitialCollapse = !isExpand;\n  };\n\n  InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n    this.restoreInfiniteEdit();\n    this.restoreInfiniteAdd();\n    var targetEle = e.target;\n    var isInfinite = targetEle.classList.contains(literals.content);\n\n    if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n      var scrollEle = this.parent.getContent().firstElementChild;\n      this.prevScrollTop = scrollEle.scrollTop;\n      var rows = this.parent.getRows();\n      var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n      var prevPage = this.parent.pageSettings.currentPage;\n      var args = void 0;\n      var offset = targetEle.scrollHeight - targetEle.scrollTop;\n      var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n      var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n\n      if (floor > targetEle.clientHeight) {\n        floor = floor - 1;\n      }\n\n      var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;\n\n      if (!isNullOrUndefined(this.groupCaptionAction)) {\n        return;\n      }\n\n      if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isUpScroll = false;\n          this.isDownScroll = true;\n        }\n\n        var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n        var row = rows_2[rows_2.length - 1];\n        var rowIndex = getRowIndexFromElement(row);\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n        args = {\n          requestType: 'infiniteScroll',\n          currentPage: this.parent.pageSettings.currentPage,\n          prevPage: prevPage,\n          startIndex: index,\n          direction: 'down'\n        };\n        this.makeRequest(args);\n      }\n\n      if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isDownScroll = false;\n          this.isUpScroll = true;\n        }\n\n        var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n        var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n        var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n\n        if (this.parent.pageSettings.currentPage) {\n          args = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: startIndex,\n            direction: 'up'\n          };\n          this.makeRequest(args);\n        }\n      }\n\n      if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n        if (this.isDownScroll || this.isUpScroll) {\n          scrollEle.scrollTop = this.top;\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.makeRequest = function (args) {\n    var _this = this;\n\n    if (this.parent.pageSettings.currentPage !== args.prevPage) {\n      if (this.parent.pageSettings.currentPage <= this.maxPage) {\n        this.isInfiniteScroll = true;\n\n        if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify('model-changed', args);\n          }, 100);\n        } else {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n          }, 100);\n        }\n      } else {\n        this.parent.pageSettings.currentPage = this.maxPage;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infinitePageQuery = function (query) {\n    if (this.initialRender) {\n      this.initialRender = false;\n      this.intialPageQuery(query);\n    } else {\n      if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n        this.editPageQuery(query);\n      } else {\n        query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.editPageQuery = function (query) {\n    var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var isCache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (isCache) {\n      this.infiniteCache = {};\n      this.infiniteFrozenCache = {};\n      this.infiniteCurrentViewData = {};\n      query.skip(this.firstIndex);\n      query.take(initialBlocks * this.parent.pageSettings.pageSize);\n    } else {\n      if (this.parent.editSettings.mode === 'Dialog') {\n        this.parent.clearSelection();\n      }\n\n      var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n      query.skip(index);\n      query.take(1);\n    }\n  };\n\n  InfiniteScroll.prototype.intialPageQuery = function (query) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n      this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n    }\n\n    var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n    query.page(1, pageSize);\n  };\n\n  InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n    var gObj = this.parent;\n    var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n    var cellIdx = this.lastFocusInfo.cellIdx;\n    var row = gObj.getRowByIndex(rowIdx);\n    var content = gObj.getContent().firstElementChild;\n\n    if (!row) {\n      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n      var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n      gObj.pageSettings.currentPage = page;\n      var cols = gObj.getColumns();\n      remove(gObj.getContent().querySelector('tbody'));\n      gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody'));\n      var focusRows = [];\n\n      for (var i = page === 1 || this.maxPage === page ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n        var rows = this.infiniteCache[page + i];\n\n        if (rows) {\n          focusRows = focusRows.concat(rows);\n\n          for (var j = 0; j < rows.length; j++) {\n            gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));\n          }\n        }\n      }\n\n      gObj.notify(events.contentReady, {\n        rows: focusRows,\n        args: {}\n      });\n      setRowElements(gObj);\n    }\n\n    row = gObj.getRowByIndex(rowIdx);\n    var target = row.cells[cellIdx];\n    gObj.focusModule.isInfiniteScroll = true;\n    gObj.focusModule.onClick({\n      target: target\n    }, true);\n    gObj.selectRow(rowIdx);\n    target.focus();\n    this.isFocusScroll = false;\n    e.cancel = true;\n  };\n\n  InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n    var cell = e.byClick && e.clickArgs.target || e.byKey && e.keyArgs.target || (!this.isFocusScroll && e).target;\n\n    if (cell && cell.classList.contains('e-rowcell')) {\n      var cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);\n      var rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));\n      this.lastFocusInfo = {\n        rowIdx: rowIdx,\n        cellIdx: cellIdx\n      };\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n    var gObj = this.parent;\n    var cache = gObj.infiniteScrollSettings.enableCache;\n\n    if (e.byKey) {\n      if (cache && this.isFocusScroll) {\n        this.scrollToLastFocusedCell(e);\n        return;\n      }\n\n      var cell = document.activeElement;\n      var rowIndex = getRowIndexFromElement(cell.parentElement);\n      this.cellIndex = parseInt(cell.getAttribute(literals.ariaColIndex), 10);\n      var content = gObj.getContent().firstElementChild;\n      var totalRowsCount = this.maxPage * gObj.pageSettings.pageSize - 1;\n      var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n      var contentRect = content.getBoundingClientRect();\n\n      if (!isNaN(rowIndex)) {\n        if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n          this.rowIndex = rowIndex += 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex + 1;\n          }\n\n          if (this.isFocusScroll || !row && rowIndex < totalRowsCount || rowRect && rowRect.bottom >= contentRect.bottom) {\n            if (!this.isFocusScroll) {\n              this.pressedKey = e.keyArgs.action;\n            }\n\n            this.isFocusScroll = false;\n            content.scrollTop = (rowIndex - visibleRowCount + 1) * this.parent.getRowHeight();\n          } else if (!cache && row) {\n            if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n              row.cells[this.cellIndex].scrollIntoView();\n            }\n          }\n        } else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n          this.rowIndex = rowIndex -= 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex - 1;\n          }\n\n          if (!row || rowRect.top <= contentRect.top) {\n            this.pressedKey = e.keyArgs.action;\n            content.scrollTop = rowIndex * this.parent.getRowHeight();\n          }\n        }\n      }\n    } else if (e.key === 'PageDown' || e.key === 'PageUp') {\n      this.pressedKey = e.key;\n    }\n\n    this.setLastCellFocusInfo(e);\n  };\n\n  InfiniteScroll.prototype.createEmptyRowdata = function () {\n    var _this = this;\n\n    this.parent.getColumns().filter(function (e) {\n      _this.emptyRowData[e.field] = _this.empty;\n    });\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n    var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n    var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n    var gridForm = this.parent.element.querySelector('.e-gridform');\n\n    if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n      var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);\n      this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n\n      if (this.parent.isFrozenGrid()) {\n        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n    var content = this.parent.getContent().firstElementChild;\n    var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n\n    if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n      if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n        var row = this.parent.getRowByIndex(this.editRowIndex);\n\n        if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n          var top_1 = row.getBoundingClientRect().top;\n\n          if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n            this.parent.isEdit = false;\n            this.parent.editModule.startEdit(row);\n          }\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n    var content = this.parent.getContent().firstElementChild;\n\n    if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n      var isTop = content.scrollTop < this.parent.getRowHeight();\n\n      if (isTop) {\n        this.parent.isEdit = false;\n        this.parent.addRecord();\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var scrollEle = this.parent.getContent().firstElementChild;\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n\n    if (isInfiniteScroll && !e.args.isFrozen && !isMovable || !isInfiniteScroll) {\n      if (isInfiniteScroll && e.args.direction === 'up') {\n        e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n      } else {\n        e.tbody.appendChild(e.frag);\n      }\n    }\n\n    if (!frozenCols) {\n      this.parent.contentModule.getTable().appendChild(e.tbody);\n      this.updateCurrentViewData();\n    } else {\n      if (isInfiniteScroll) {\n        if (e.tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight) {\n          this.frozenFrag = e.frag;\n        } else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n          this.movableFrag = e.frag;\n        } else {\n          var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n\n          if (e.args.direction === 'up') {\n            tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n          } else {\n            tbody.appendChild(this.frozenFrag);\n          }\n\n          if (e.tableName === literals.frozenRight) {\n            this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n            this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n          } else {\n            this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n          }\n\n          this.parent.contentModule.refreshScrollOffset();\n          this.updateCurrentViewData();\n        }\n      } else {\n        var table = void 0;\n\n        if (e.tableName === literals.frozenLeft) {\n          table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n        } else if (e.tableName === 'movable') {\n          table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n\n          if (this.parent.getFrozenMode() !== literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        } else {\n          table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n\n          if (this.parent.getFrozenMode() === literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        }\n\n        table.appendChild(e.tbody);\n        this.widthService.refreshFrozenScrollbar();\n      }\n    }\n\n    if (this.isInitialRender && !e.args.isFrozen) {\n      this.isInitialRender = false;\n      this.parent.scrollModule.setHeight();\n    }\n\n    if (!e.args.isFrozen) {\n      this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n\n      if (isInfiniteScroll) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n          scrollEle.scrollTop = this.top;\n        }\n\n        setRowElements(this.parent);\n      }\n\n      this.restoreInfiniteAdd();\n      this.isScroll = true;\n    }\n\n    this.isInfiniteScroll = false;\n  };\n\n  InfiniteScroll.prototype.selectNewRow = function (args) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var row = gObj.getRowByIndex(this.rowIndex);\n    var cache = gObj.infiniteScrollSettings.enableCache;\n\n    if (row && this.keys.some(function (value) {\n      return value === _this.pressedKey;\n    })) {\n      var content = gObj.getContent().firstElementChild;\n      var rowHeight = gObj.getRowHeight();\n      var target = row.cells[this.cellIndex];\n\n      if (this.pressedKey === literals.downArrow || this.pressedKey === literals.enter || cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter)) {\n        if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n          content.scrollTop = content.scrollTop + rowHeight;\n        }\n\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({\n          target: target\n        }, true);\n        gObj.selectRow(this.rowIndex);\n      }\n    } else if (this.lastFocusInfo || this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp) {\n      var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n      var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n\n      if (target) {\n        this.isFocusScroll = true;\n\n        if (!cache) {\n          gObj.focusModule.isInfiniteScroll = true;\n          gObj.focusModule.onClick({\n            target: target\n          }, true);\n        } else {\n          target.focus({\n            preventScroll: true\n          });\n        }\n      }\n    }\n\n    this.pressedKey = undefined;\n  };\n\n  InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n\n    if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n      var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n\n      if (e.args.direction === 'down') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        }\n\n        var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n        this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n      }\n\n      if (e.args.direction === 'up') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        } else {\n          this.removeBottomRows(rows, rows.length - 1, e.args);\n        }\n      }\n\n      this.isScroll = false;\n      this.top = this.calculateScrollTop(e.args);\n    }\n  };\n\n  InfiniteScroll.prototype.calculateScrollTop = function (args) {\n    var top = 0;\n    var scrollCnt = this.parent.getContent().firstElementChild;\n\n    if (args.direction === 'down') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.captionRowHeight();\n      }\n\n      var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n      var captionCount = 0;\n\n      if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n        captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n      }\n\n      var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n      var currentViewRowCount = 0;\n      var i = 0;\n\n      while (currentViewRowCount < scrollCnt.clientHeight) {\n        i++;\n        currentViewRowCount = i * this.parent.getRowHeight();\n      }\n\n      i = i - 1;\n      top += (value - i) * this.parent.getRowHeight();\n    }\n\n    if (args.direction === 'up') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n      } else if (this.isInitialCollapse) {\n        var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n        var count = 0;\n\n        for (var i = 0; i < groupedData.length; i++) {\n          if (groupedData[i].isCaptionRow) {\n            count++;\n          }\n        }\n\n        top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n      } else {\n        top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();\n      }\n    }\n\n    return top;\n  };\n\n  InfiniteScroll.prototype.captionRowHeight = function () {\n    var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n    return rows.length * this.parent.getRowHeight();\n  };\n\n  InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n    var frozeCols = this.parent.isFrozenGrid();\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n\n    for (var i = 0; i <= maxIndx; i++) {\n      if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {\n        continue;\n      }\n\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n    var cnt = 0;\n    var frozeCols = this.parent.isFrozenGrid();\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var pageSize = this.parent.pageSettings.pageSize;\n\n    if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n    }\n\n    if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n    }\n\n    for (var i = maxIndx; cnt < pageSize; i--) {\n      cnt++;\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n    var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n\n    if (args.direction === 'down') {\n      var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n      var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n      var k = 0;\n\n      for (var i = 0; k < lastRowIndex; i++) {\n        if (!rows[i].classList.contains(literals.row)) {\n          remove(rows[i]);\n        } else {\n          k = getRowIndexFromElement(rows[i]);\n        }\n      }\n    }\n\n    if (args.direction === 'up') {\n      var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n      var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n      var startIndex = 0;\n\n      for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n        startIndex += this.infiniteCache[i].length;\n      }\n\n      for (var i = startIndex; i < rows.length; i++) {\n        remove(rows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n\n    if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n      if (this.actions.some(function (value) {\n        return value === args.requestType;\n      }) || isDataModified) {\n        var scrollEle = this.parent.getContent().firstElementChild;\n        this.initialRender = true;\n        scrollEle.scrollTop = 0;\n        this.parent.pageSettings.currentPage = 1;\n        this.infiniteCache = this.infiniteFrozenCache = {};\n        this.infiniteCurrentViewData = {};\n        this.resetContentModuleCache({});\n        this.isRemove = false;\n        this.top = 0;\n        this.isInitialMovableRender = true;\n        this.isInitialCollapse = false;\n        this.parent.contentModule.isRemove = this.isRemove;\n        this.parent.contentModule.isAddRows = this.isRemove;\n        this.parent.contentModule.visibleRows = [];\n        this.parent.contentModule.visibleFrozenRows = [];\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setCache = function (e) {\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var frozeCols = this.parent.isFrozenGrid();\n      var idx = e.args.isFrozen ? 1 : 0;\n      var isEdit = e.args.requestType !== 'infiniteScroll' && (this.requestType === 'delete' || this.requestType === 'add');\n      var currentPage = this.parent.pageSettings.currentPage;\n\n      if (frozeCols && this.isInitialMovableRender || !frozeCols && !Object.keys(this.infiniteCache).length || isEdit) {\n        this.isInitialMovableRender = !e.args.isFrozen;\n        this.setInitialCache(e.modelData, e.args, isEdit);\n      }\n\n      if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n        this.resetContentModuleCache(this.infiniteCache);\n      }\n\n      if (frozeCols) {\n        if (idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]) || !this.infiniteFrozenCache[currentPage][idx].length) {\n          this.createFrozenCache(currentPage);\n          this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n\n          if (idx === 1) {\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          }\n        }\n      }\n\n      if (e.isInfiniteScroll && !this.isRemove) {\n        this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n        this.parent.contentModule.isRemove = this.isRemove;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var idx = args.isFrozen ? 1 : 0;\n    var k = !isEdit ? 1 : this.firstBlock;\n\n    for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n      var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n      var endIndex = i * this.parent.pageSettings.pageSize;\n\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n        this.setInitialGroupCache(data, k, startIndex, endIndex);\n      } else {\n        if (isCurrentViewData) {\n          this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n        } else {\n          if (frozenCols) {\n            this.createFrozenCache(k);\n            this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          } else {\n            this.infiniteCache[k] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteCache);\n          }\n        }\n      }\n\n      k++;\n    }\n  };\n\n  InfiniteScroll.prototype.createFrozenCache = function (index) {\n    if (!this.infiniteFrozenCache[index]) {\n      this.infiniteFrozenCache[index] = [[], []];\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n    var pageData = [];\n    var startIndex = 0;\n\n    for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n      startIndex += this.infiniteCache[i].length;\n    }\n\n    var k = sIndex;\n\n    for (var i = startIndex; i < data.length && k < eIndex; i++) {\n      if (data[i].index < eIndex || data[i].isCaptionRow) {\n        k = data[i].isCaptionRow ? k : data[i].index;\n        pageData.push(data[i]);\n      }\n\n      if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n        break;\n      }\n    }\n\n    this.infiniteCache[index] = pageData;\n    this.resetContentModuleCache(this.infiniteCache);\n  };\n\n  InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n    this.parent.contentModule.infiniteCache = data;\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return InfiniteScroll;\n}();\n\nexport { InfiniteScroll };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js"],"names":["isNullOrUndefined","remove","extend","RowModelGenerator","FreezeRowModelGenerator","RowRenderer","events","getScrollBarWidth","getEditedDataIndex","resetRowIndex","setRowElements","getRowIndexFromElement","getGroupKeysAndFields","getPredicates","generateExpandPredicates","literals","InfiniteScroll","parent","serviceLocator","infiniteCache","infiniteCurrentViewData","infiniteFrozenCache","isDownScroll","isUpScroll","isScroll","enableContinuousScroll","initialRender","isRemove","isInitialCollapse","prevScrollTop","actions","keys","downArrow","upArrow","enter","shiftEnter","rowTop","isInitialMovableRender","virtualInfiniteData","isCancel","emptyRowData","isNormaledit","isInfiniteScroll","isLastPage","isInitialRender","isFocusScroll","isGroupCollapse","editSettings","mode","addEventListener","widthService","getService","rowModelGenerator","isFrozenGrid","prototype","getModuleName","on","dataReady","onDataReady","dataSourceModified","infinitePageQuery","infiniteScrollHandler","beforeCellFocused","infiniteCellFocus","appendInfiniteContent","appendInfiniteRows","removeInfiniteRows","removeInfiniteCacheRows","resetInfiniteBlocks","setInfiniteCache","setCache","initialCollapse","ensureIntialCollapse","keyPressed","infiniteShowHide","setDisplayNone","virtualScrollEditActionBegin","editActionBegin","getVirtualData","getVirtualInfiniteData","editReset","resetInfiniteEdit","virtualScrollEditSuccess","infiniteEditSuccess","refreshVirtualCache","refreshInfiniteCache","infiniteEditHandler","virtualScrollAddActionBegin","infiniteAddActionBegin","modelChanged","refreshInfiniteCurrentViewData","destroy","contentReady","selectNewRow","captionActionComplete","setVirtualPageQuery","setGroupCollapsePageQuery","actionBeginFunction","actionBegin","bind","actionCompleteFunction","actionComplete","dataBoundFunction","dataBound","deleteComplete","deleteComplate","removeEventListener","isDestroyed","off","groupCaptionAction","makeGroupCollapseRequest","hideSpinner","empty","args","gObj","infiniteScrollSettings","enableCache","skipPage","captionRow","getRowObjectFromUID","parentCapUid","rowObjs","getRowsObject","childCount","i","length","indent","isDataRow","key","indexOf","pred","fields","predicateList","and","query","where","skip","rows","getRows","size","pageSettings","pageSize","additionalCnt","take","initialBlocks","isCollapse","contetRect","getContent","firstElementChild","getBoundingClientRect","tableReact","contentModule","getTable","Math","round","bottom","getRowHeight","parentUid","showSpinner","caption","getCaptionChildCount","index","prevPage","currentPage","ceil","maxPage","scrollArg","requestType","startIndex","direction","isCaptionCollapse","notify","rowObj","make","data","isCaptionRow","childCheck","row","uid","count","updateCurrentViewData","groupSettings","columns","Object","currentViewData","page","isCache","blocks","maxBlocks","isMiddlePage","start","end","concat","e","cache","isAdd","isDelete","push","setInitialCache","slice","refreshScrollOffset","firstIndex","firstBlock","lastIndex","createEmptyRowdata","startEdit","makeRequest","frozenCols","rowElms","ensureRowAvailability","result","rows_1","getMovableRowsObject","getMovableDataRows","getFrozenMode","leftRight","frRows","getFrozenRightRowsObject","getFrozenRightRows","createRow","selectionModule","frozenRows","movableRows","rightRows","getFrozenRightDataRows","saveComplete","freezeRender","case","isMovable","isFrozenRows","isFrozenRight","generateRows","rowRenderer","tbody","element","querySelector","getMovableVirtualContent","getFrozenVirtualContent","getHeaderContent","getMovableVirtualHeader","getFrozenVirtualHeader","notifyArgs","cancel","infiniteCrudCancel","appendChild","render","getColumns","insertBefore","rowElems","rightFreezeRows","visibleRows","renderMovableContent","visibleFrozenRows","isFrozen","resume","sortSettings","getPrimaryKeyFieldNames","_this","keyField","swapCurrentViewData","splice","filter","resetInfiniteCurrentViewData","pageIndex","isFreeze","cells","visible","resetContentModuleCache","getEditedRowObject","rowObjects","editedrow","editRowIndex","updateCurrentViewRecords","getCurrentViewRecords","action","isEdit","editModule","previousVirtualData","enableInfiniteScrolling","allowEditing","allowAdding","virtualData","rowObject","isExpand","restoreInfiniteEdit","restoreInfiniteAdd","targetEle","target","isInfinite","classList","contains","content","isLeft","scrollEle","scrollTop","offset","scrollHeight","floor","clientHeight","isBottom","rows_2","call","querySelectorAll","rowIndex","getElementsByClassName","top","setTimeout","getVirtualInfiniteEditedData","refreshInfiniteModeBlocks","intialPageQuery","editPageQuery","clearSelection","scrollToLastFocusedCell","rowIdx","lastFocusInfo","keyArgs","cellIdx","getRowByIndex","cols","createElement","focusRows","k","j","focusModule","onClick","selectRow","focus","setLastCellFocusInfo","cell","byClick","clickArgs","byKey","parseInt","getAttribute","parentElement","document","activeElement","cellIndex","ariaColIndex","totalRowsCount","visibleRowCount","offsetHeight","contentRect","isNaN","rowRect","pressedKey","scrollIntoView","field","editForm","editedRow","addForm","addedRow","gridForm","rowData","getCurrentEditedData","frozenEdit","top_1","isTop","addRecord","tableName","frag","frozenLeft","frozenRight","frozenFrag","movableFrag","table","refreshFrozenScrollbar","scrollModule","setHeight","some","value","rowHeight","pageDown","pageUp","idx","getCellFromIndex","preventScroll","undefined","getContentTable","allowGrouping","captionRows","removeCaptionRows","addRowCount","removeTopRows","removeBottomRows","calculateScrollTop","scrollCnt","captionRowHeight","captionCount","currentViewRowCount","groupedData","maxIndx","frozeCols","cnt","rowElements","lastRow","lastRowIndex","isDataModified","infiniteScrollModule","isAddRows","modelData","createFrozenCache","isCurrentViewData","endIndex","setInitialGroupCache","sIndex","eIndex","pageData"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for the Grid infinite scrolling.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n     * @hidden\n     */\n    function InfiniteScroll(parent, serviceLocator) {\n        this.infiniteCache = {};\n        this.infiniteCurrentViewData = {};\n        this.infiniteFrozenCache = {};\n        this.isDownScroll = false;\n        this.isUpScroll = false;\n        this.isScroll = true;\n        this.enableContinuousScroll = false;\n        this.initialRender = true;\n        this.isRemove = false;\n        this.isInitialCollapse = false;\n        this.prevScrollTop = 0;\n        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n        this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n        this.rowTop = 0;\n        this.isInitialMovableRender = true;\n        this.virtualInfiniteData = {};\n        this.isCancel = false;\n        this.emptyRowData = {};\n        this.isNormaledit = false;\n        this.isInfiniteScroll = false;\n        this.isLastPage = false;\n        this.isInitialRender = true;\n        this.isFocusScroll = false;\n        this.isGroupCollapse = false;\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n        this.addEventListener();\n        this.widthService = serviceLocator.getService('widthService');\n        this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent)\n            : new RowModelGenerator(this.parent);\n    }\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.dataReady, this.onDataReady, this);\n        this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n        this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n        this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n        this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n        this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n        this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n        this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n        this.parent.on(events.setInfiniteCache, this.setCache, this);\n        this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n        this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n        this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n        this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n        this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n        this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n        this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n        this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n        this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n        this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n        this.parent.on(events.modelChanged, this.modelChanged, this);\n        this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n        this.parent.on(events.destroy, this.destroy, this);\n        this.parent.on(events.contentReady, this.selectNewRow, this);\n        this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n        this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n        this.actionBeginFunction = this.actionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.dataBoundFunction = this.dataBound.bind(this);\n        this.parent.on(events.deleteComplete, this.deleteComplate, this);\n        this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dataReady, this.onDataReady);\n        this.parent.off(events.dataSourceModified, this.dataSourceModified);\n        this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n        this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n        this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n        this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n        this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n        this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n        this.parent.off(events.setInfiniteCache, this.setCache);\n        this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n        this.parent.off(events.keyPressed, this.infiniteCellFocus);\n        this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n        this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n        this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n        this.parent.off(events.editReset, this.resetInfiniteEdit);\n        this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n        this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n        this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n        this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n        this.parent.off(events.modelChanged, this.modelChanged);\n        this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n        this.parent.off(events.destroy, this.destroy);\n        this.parent.off(events.contentReady, this.selectNewRow);\n        this.parent.off(events.captionActionComplete, this.captionActionComplete);\n        this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n        this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    InfiniteScroll.prototype.dataBound = function () {\n        if (this.groupCaptionAction === 'collapse') {\n            this.groupCaptionAction = 'refresh';\n            this.makeGroupCollapseRequest();\n        }\n        else if (this.groupCaptionAction === 'refresh') {\n            this.parent.hideSpinner();\n            this.groupCaptionAction = this.empty;\n        }\n    };\n    InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n            args.skipPage = true;\n            this.isGroupCollapse = false;\n            if (this.groupCaptionAction === 'collapse') {\n                var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n                var rowObjs = gObj.getRowsObject();\n                var childCount = 0;\n                for (var i = rowObjs.length - 1; i >= 0; i--) {\n                    if (rowObjs[i].indent === captionRow.indent) {\n                        break;\n                    }\n                    if (rowObjs[i].isDataRow) {\n                        childCount++;\n                    }\n                }\n                var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n                var pred = generateExpandPredicates(key.fields, key.keys, this);\n                var predicateList = getPredicates(pred);\n                pred = predicateList[predicateList.length - 1];\n                for (var i = predicateList.length - 2; i >= 0; i--) {\n                    pred = pred.and(predicateList[i]);\n                }\n                args.query.where(pred);\n                args.query.skip(childCount);\n                this.parentCapUid = this.empty;\n            }\n            else {\n                var rows = gObj.getRows();\n                var size = gObj.pageSettings.pageSize;\n                var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n                var additionalCnt = ((skip - (skip % size)) + size) - skip;\n                if ((skip % size) === 0) {\n                    additionalCnt = 0;\n                }\n                args.query.skip(skip);\n                args.query.take((gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize) + additionalCnt);\n            }\n        }\n    };\n    InfiniteScroll.prototype.captionActionComplete = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n            var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n            var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n            if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n                this.parentCapUid = args.parentUid;\n                this.groupCaptionAction = 'collapse';\n                gObj.showSpinner();\n                var caption = gObj.getRowObjectFromUID(args.parentUid);\n                var childCount = this.getCaptionChildCount(caption);\n                if (!childCount) {\n                    this.groupCaptionAction = 'refresh';\n                    this.makeGroupCollapseRequest();\n                }\n                else {\n                    this.makeGroupCollapseRequest(args.parentUid);\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n        var gObj = this.parent;\n        var rows = gObj.getRows();\n        var index = getRowIndexFromElement(rows[rows.length - 1]);\n        var prevPage = this.parent.pageSettings.currentPage;\n        this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n        if (this.parent.pageSettings.currentPage > this.maxPage) {\n            gObj.hideSpinner();\n            return;\n        }\n        var scrollArg = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: index + 1,\n            direction: 'down',\n            isCaptionCollapse: true,\n            parentUid: parentUid\n        };\n        this.isGroupCollapse = true;\n        this.parent.notify('model-changed', scrollArg);\n    };\n    InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n        var rowObj = this.parent.getRowsObject();\n        var index = rowObj.indexOf(caption);\n        var make = false;\n        for (var i = index; i < rowObj.length; i++) {\n            if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent)\n                && rowObj[i].data.key !== caption.data.key) {\n                break;\n            }\n            if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {\n                make = true;\n                break;\n            }\n        }\n        return make;\n    };\n    InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n        var childCount = 0;\n        for (var i = index + 1; i < rowObj.length; i++) {\n            if (rowObj[i].indent === row.indent) {\n                break;\n            }\n            if (rowObj[i].indent === (row.indent + 1) && rowObj[i].parentUid === row.uid) {\n                childCount++;\n            }\n        }\n        return row.data.count === childCount;\n    };\n    InfiniteScroll.prototype.updateCurrentViewData = function () {\n        var gObj = this.parent;\n        if (gObj.groupSettings.columns.length) {\n            return;\n        }\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        gObj.currentViewData = [];\n        var page = gObj.pageSettings.currentPage;\n        var isCache = gObj.infiniteScrollSettings.enableCache;\n        var blocks = gObj.infiniteScrollSettings.maxBlocks;\n        var isMiddlePage = isCache && (page > blocks || (this.isUpScroll && page > 1));\n        var start = isMiddlePage ? this.isUpScroll ? page : (page - blocks) + 1 : 1;\n        var end = isMiddlePage ? (start + blocks) - 1 : isCache ? blocks : keys.length;\n        for (var i = start; i <= end; i++) {\n            if (this.infiniteCurrentViewData[i]) {\n                gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n        var page = this.parent.pageSettings.currentPage;\n        var size = this.parent.pageSettings.pageSize;\n        var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var cache = this.parent.infiniteScrollSettings.enableCache;\n        if (!this.parent.groupSettings.columns.length) {\n            var isAdd = e.args.requestType === 'save';\n            var isDelete = e.args.requestType === 'delete';\n            if (!cache && (isAdd || isDelete)) {\n                if (isAdd) {\n                    this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n                }\n                else {\n                    this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n                }\n            }\n            else {\n                if (blocks > 1 && e.data.length === (blocks * size)) {\n                    this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n                }\n                else {\n                    this.infiniteCurrentViewData[page] = e.data.slice();\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.deleteComplate = function () {\n        if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n            this.parent.contentModule.refreshScrollOffset();\n        }\n    };\n    InfiniteScroll.prototype.modelChanged = function (args) {\n        var rows = this.parent.getRows();\n        if (rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n            this.firstIndex = getRowIndexFromElement(rows[0]);\n            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n            this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n            if (args.requestType === 'delete') {\n                var rowObj = this.parent.getRowsObject();\n                args.startIndex = this.parent.infiniteScrollSettings.enableCache\n                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n            }\n            else {\n                args.startIndex = this.firstIndex;\n            }\n            if (!this.parent.infiniteScrollSettings.enableCache\n                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n                this.isLastPage = true;\n                this.lastIndex = this.lastIndex - 1;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n        if (this.isNormaledit) {\n            this.isAdd = true;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                if (!Object.keys(this.emptyRowData).length) {\n                    this.createEmptyRowdata();\n                }\n                if (this.parent.pageSettings.currentPage > 1) {\n                    args.startEdit = false;\n                    this.resetInfiniteBlocks({}, true);\n                    this.makeRequest({ currentPage: 1 });\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'\n            || (args.e.requestType === 'save' && this.requestType === 'add'))) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var rowElms = this.parent.getRows();\n            var rows = this.parent.getRowsObject();\n            if (this.ensureRowAvailability(rows, args.result[0])) {\n                if (rowElms.length) {\n                    this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n                    if (frozenCols) {\n                        var rows_1 = this.parent.getMovableRowsObject();\n                        this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n                        if (this.parent.getFrozenMode() === literals.leftRight) {\n                            var frRows = this.parent.getFrozenRightRowsObject();\n                            this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n                        }\n                    }\n                }\n                if (!this.isLastPage) {\n                    this.createRow(rows, args);\n                }\n                else {\n                    this.isLastPage = false;\n                    this.parent.pageSettings.currentPage = this.maxPage;\n                    if (this.parent.selectionModule.index < this.parent.frozenRows) {\n                        remove(rowElms[this.parent.frozenRows - 1]);\n                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n                        if (frozenCols) {\n                            var movableRows = this.parent.getMovableDataRows();\n                            remove(movableRows[this.parent.frozenRows]);\n                            this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n                            if (this.parent.getFrozenMode() === literals.leftRight) {\n                                var rightRows = this.parent.getFrozenRightDataRows();\n                                remove(rightRows[this.parent.frozenRows]);\n                                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n                            }\n                        }\n                        setRowElements(this.parent);\n                    }\n                }\n            }\n            this.parent.hideSpinner();\n            if (this.requestType === 'delete') {\n                this.parent.notify(events.deleteComplete, args.e);\n            }\n            else {\n                this.parent.notify(events.saveComplete, args.e);\n            }\n        }\n        this.parent.notify(events.freezeRender, { case: 'refreshHeight' });\n    };\n    InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n        var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        var tbody;\n        if (isFrozenRight) {\n            tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n        }\n        else {\n            tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable\n                ? this.parent.getMovableVirtualContent().querySelector(literals.tbody)\n                : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n        }\n        if (this.parent.frozenRows) {\n            tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'\n                ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody)\n                    : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody)\n                        : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody)\n                            : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n        }\n        var notifyArgs = {\n            rows: rows, cancel: false, args: args, isMovable: isMovable,\n            isFrozenRows: isFrozenRows, isFrozenRight: isFrozenRows, row: row\n        };\n        this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n        if (!notifyArgs.cancel) {\n            for (var i = row.length - 1; i >= 0; i--) {\n                if (this.requestType === 'delete') {\n                    tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n                }\n                else {\n                    tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n                }\n            }\n        }\n        if (!isFrozenRows && this.parent.frozenRows\n            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n            var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows()\n                : this.parent.getRows();\n            var index = (isMovable || isFrozenRight) && this.requestType === 'add'\n                ? this.parent.frozenRows : this.parent.frozenRows - 1;\n            remove(rowElems[index]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n        }\n        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n            if (isFrozenRight) {\n                setRowElements(this.parent);\n                this.parent.contentModule.rightFreezeRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n            }\n            else if (!this.parent.isFrozenGrid() || isMovable) {\n                setRowElements(this.parent);\n                this.parent.contentModule.visibleRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    args.e.renderMovableContent = true;\n                    this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n                }\n            }\n            else {\n                this.parent.contentModule.visibleFrozenRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                args.e.isFrozen = true;\n                this.createRow(this.parent.getMovableRowsObject(), args, true);\n            }\n        }\n    };\n    InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n        var resume = true;\n        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache\n            && this.parent.sortSettings.columns && this.requestType === 'add') {\n            var key = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < rows.length; i++) {\n                if (rows[i].data[key] === data[key]) {\n                    resume = false;\n                    break;\n                }\n            }\n        }\n        return resume;\n    };\n    InfiniteScroll.prototype.generateRows = function (data, args) {\n        return this.rowModelGenerator.generateRows(data, args);\n    };\n    InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n        var _this = this;\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n        if (isAdd) {\n            if (isRemove) {\n                if (isFrozen && !this.parent.groupSettings.columns.length) {\n                    this.swapCurrentViewData(1, true);\n                }\n                remove(rowElms[rows.length - 1]);\n                rowElms.splice(rows.length - 1, 1);\n                rows.splice(rows.length - 1, 1);\n            }\n        }\n        else {\n            rows.filter(function (e, index) {\n                if (e.data[keyField] === args.data[0][keyField]) {\n                    if (isFrozen && !_this.parent.groupSettings.columns.length) {\n                        var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n                        _this.resetInfiniteCurrentViewData(page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[index]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        }\n        var startIndex = isAdd ? 1 : 0;\n        resetRowIndex(this.parent, rows, rowElms, startIndex);\n    };\n    InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n        index = index - ((page - 1) * this.parent.pageSettings.pageSize);\n        this.infiniteCurrentViewData[page].splice(index, 1);\n        this.swapCurrentViewData(page, false);\n    };\n    InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var end = isAdd ? keys.length + 1 : keys.length;\n        for (var i = page; i < end; i++) {\n            if (this.infiniteCurrentViewData[i + 1]) {\n                var pageIndex = isAdd ? i : i + 1;\n                var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n                var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n                if (isAdd) {\n                    this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n                    if ((i + 1) === end - 1) {\n                        this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n                    }\n                }\n                else {\n                    this.infiniteCurrentViewData[i].push(data[0]);\n                }\n            }\n        }\n        this.updateCurrentViewData();\n    };\n    InfiniteScroll.prototype.setDisplayNone = function (args) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n            for (var i = 1; i <= keys.length; i++) {\n                var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0]\n                    : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n                cache.filter(function (e) {\n                    e.cells[args.index].visible = args.visible === '';\n                });\n            }\n            this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCache = function (data) {\n        this.getEditedRowObject().data = data;\n    };\n    InfiniteScroll.prototype.getEditedRowObject = function () {\n        var rowObjects = this.parent.getRowsObject();\n        var editedrow;\n        for (var i = 0; i < rowObjects.length; i++) {\n            if (rowObjects[i].index === this.editRowIndex) {\n                editedrow = rowObjects[i];\n            }\n        }\n        return editedrow;\n    };\n    InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n        if (this.isNormaledit) {\n            if (!this.isAdd && args.data) {\n                this.updateCurrentViewRecords(args.data);\n            }\n            this.isAdd = false;\n        }\n    };\n    InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n        var index = getEditedDataIndex(this.parent, data);\n        if (!isNullOrUndefined(index)) {\n            this.parent.getCurrentViewRecords()[index] = data;\n        }\n    };\n    InfiniteScroll.prototype.actionBegin = function (args) {\n        if (args.requestType === 'add' || args.requestType === 'delete') {\n            this.requestType = args.requestType;\n        }\n        else if (args.action === 'add' && args.requestType === 'save') {\n            this.requestType = args.action;\n        }\n        if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching'\n            || args.requestType === 'sorting' || args.requestType === 'filtering') {\n            this.isInitialRender = true;\n        }\n    };\n    InfiniteScroll.prototype.actionComplete = function (args) {\n        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n            this.requestType = this.empty;\n            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n            this.isAdd = this.isEdit = false;\n            if (this.isNormaledit) {\n                this.editRowIndex = this.empty;\n                this.virtualInfiniteData = {};\n                this.parent.editModule.previousVirtualData = {};\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteEdit = function () {\n        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {\n                this.parent.isEdit = true;\n            }\n        }\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n        data.virtualData = this.virtualInfiniteData;\n        data.isAdd = this.isAdd;\n        data.isCancel = this.isCancel;\n    };\n    InfiniteScroll.prototype.editActionBegin = function (e) {\n        this.isEdit = true;\n        this.editRowIndex = e.index;\n        var rowObject = extend({}, this.getEditedRowObject().data);\n        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n    };\n    InfiniteScroll.prototype.dataSourceModified = function () {\n        this.resetInfiniteBlocks({ requestType: this.empty }, true);\n    };\n    InfiniteScroll.prototype.onDataReady = function (e) {\n        if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n        }\n    };\n    InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n        this.isInitialCollapse = !isExpand;\n    };\n    InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n        this.restoreInfiniteEdit();\n        this.restoreInfiniteAdd();\n        var targetEle = e.target;\n        var isInfinite = targetEle.classList.contains(literals.content);\n        if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n            var scrollEle = this.parent.getContent().firstElementChild;\n            this.prevScrollTop = scrollEle.scrollTop;\n            var rows = this.parent.getRows();\n            var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n            var prevPage = this.parent.pageSettings.currentPage;\n            var args = void 0;\n            var offset = targetEle.scrollHeight - targetEle.scrollTop;\n            var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n            var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n            if (floor > targetEle.clientHeight) {\n                floor = floor - 1;\n            }\n            var isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);\n            if (!isNullOrUndefined(this.groupCaptionAction)) {\n                return;\n            }\n            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isUpScroll = false;\n                    this.isDownScroll = true;\n                }\n                var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n                var row = rows_2[rows_2.length - 1];\n                var rowIndex = getRowIndexFromElement(row);\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n                args = {\n                    requestType: 'infiniteScroll',\n                    currentPage: this.parent.pageSettings.currentPage,\n                    prevPage: prevPage,\n                    startIndex: index,\n                    direction: 'down'\n                };\n                this.makeRequest(args);\n            }\n            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0\n                && this.parent.pageSettings.currentPage !== 1) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isDownScroll = false;\n                    this.isUpScroll = true;\n                }\n                var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n                var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n                var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n                if (this.parent.pageSettings.currentPage) {\n                    args = {\n                        requestType: 'infiniteScroll',\n                        currentPage: this.parent.pageSettings.currentPage,\n                        prevPage: prevPage,\n                        startIndex: startIndex,\n                        direction: 'up'\n                    };\n                    this.makeRequest(args);\n                }\n            }\n            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n                if (this.isDownScroll || this.isUpScroll) {\n                    scrollEle.scrollTop = this.top;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeRequest = function (args) {\n        var _this = this;\n        if (this.parent.pageSettings.currentPage !== args.prevPage) {\n            if (this.parent.pageSettings.currentPage <= this.maxPage) {\n                this.isInfiniteScroll = true;\n                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify('model-changed', args);\n                    }, 100);\n                }\n                else {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n                    }, 100);\n                }\n            }\n            else {\n                this.parent.pageSettings.currentPage = this.maxPage;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infinitePageQuery = function (query) {\n        if (this.initialRender) {\n            this.initialRender = false;\n            this.intialPageQuery(query);\n        }\n        else {\n            if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n                this.editPageQuery(query);\n            }\n            else {\n                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n            }\n        }\n    };\n    InfiniteScroll.prototype.editPageQuery = function (query) {\n        var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var isCache = this.parent.infiniteScrollSettings.enableCache;\n        if (isCache) {\n            this.infiniteCache = {};\n            this.infiniteFrozenCache = {};\n            this.infiniteCurrentViewData = {};\n            query.skip(this.firstIndex);\n            query.take(initialBlocks * this.parent.pageSettings.pageSize);\n        }\n        else {\n            if (this.parent.editSettings.mode === 'Dialog') {\n                this.parent.clearSelection();\n            }\n            var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n            query.skip(index);\n            query.take(1);\n        }\n    };\n    InfiniteScroll.prototype.intialPageQuery = function (query) {\n        if (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n        }\n        var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n        query.page(1, pageSize);\n    };\n    InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n        var gObj = this.parent;\n        var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n        var cellIdx = this.lastFocusInfo.cellIdx;\n        var row = gObj.getRowByIndex(rowIdx);\n        var content = gObj.getContent().firstElementChild;\n        if (!row) {\n            var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n            var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n            gObj.pageSettings.currentPage = page;\n            var cols = gObj.getColumns();\n            remove(gObj.getContent().querySelector('tbody'));\n            gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody'));\n            var focusRows = [];\n            for (var i = (page === 1 || this.maxPage === page) ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n                var rows = this.infiniteCache[page + i];\n                if (rows) {\n                    focusRows = focusRows.concat(rows);\n                    for (var j = 0; j < rows.length; j++) {\n                        gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));\n                    }\n                }\n            }\n            gObj.notify(events.contentReady, { rows: focusRows, args: {} });\n            setRowElements(gObj);\n        }\n        row = gObj.getRowByIndex(rowIdx);\n        var target = row.cells[cellIdx];\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({ target: target }, true);\n        gObj.selectRow(rowIdx);\n        target.focus();\n        this.isFocusScroll = false;\n        e.cancel = true;\n    };\n    InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n        var cell = ((e.byClick && e.clickArgs.target) || (e.byKey && e.keyArgs.target)\n            || (!this.isFocusScroll && e).target);\n        if (cell && cell.classList.contains('e-rowcell')) {\n            var cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);\n            var rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));\n            this.lastFocusInfo = { rowIdx: rowIdx, cellIdx: cellIdx };\n        }\n    };\n    InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n        var gObj = this.parent;\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (e.byKey) {\n            if (cache && this.isFocusScroll) {\n                this.scrollToLastFocusedCell(e);\n                return;\n            }\n            var cell = document.activeElement;\n            var rowIndex = getRowIndexFromElement(cell.parentElement);\n            this.cellIndex = parseInt(cell.getAttribute(literals.ariaColIndex), 10);\n            var content = gObj.getContent().firstElementChild;\n            var totalRowsCount = (this.maxPage * gObj.pageSettings.pageSize) - 1;\n            var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n            var contentRect = content.getBoundingClientRect();\n            if (!isNaN(rowIndex)) {\n                if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n                    this.rowIndex = rowIndex += 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex + 1;\n                    }\n                    if (this.isFocusScroll || (!row && rowIndex < totalRowsCount)\n                        || (rowRect && rowRect.bottom >= contentRect.bottom)) {\n                        if (!this.isFocusScroll) {\n                            this.pressedKey = e.keyArgs.action;\n                        }\n                        this.isFocusScroll = false;\n                        content.scrollTop = ((rowIndex - visibleRowCount) + 1) * this.parent.getRowHeight();\n                    }\n                    else if (!cache && row) {\n                        if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n                            row.cells[this.cellIndex].scrollIntoView();\n                        }\n                    }\n                }\n                else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n                    this.rowIndex = rowIndex -= 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex - 1;\n                    }\n                    if (!row || rowRect.top <= contentRect.top) {\n                        this.pressedKey = e.keyArgs.action;\n                        content.scrollTop = rowIndex * this.parent.getRowHeight();\n                    }\n                }\n            }\n        }\n        else if (e.key === 'PageDown' || e.key === 'PageUp') {\n            this.pressedKey = e.key;\n        }\n        this.setLastCellFocusInfo(e);\n    };\n    InfiniteScroll.prototype.createEmptyRowdata = function () {\n        var _this = this;\n        this.parent.getColumns().filter(function (e) {\n            _this.emptyRowData[e.field] = _this.empty;\n        });\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n        var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n        var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n        var gridForm = this.parent.element.querySelector('.e-gridform');\n        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n            var rowData = editForm ? extend({}, this.getEditedRowObject().data)\n                : extend({}, this.emptyRowData);\n            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n            if (this.parent.isFrozenGrid()) {\n                this.virtualInfiniteData = this.parent.editModule\n                    .getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n        var content = this.parent.getContent().firstElementChild;\n        var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n                var row = this.parent.getRowByIndex(this.editRowIndex);\n                if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n                    var top_1 = row.getBoundingClientRect().top;\n                    if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n                        this.parent.isEdit = false;\n                        this.parent.editModule.startEdit(row);\n                    }\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n        var content = this.parent.getContent().firstElementChild;\n        if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit &&\n            this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n            var isTop = content.scrollTop < this.parent.getRowHeight();\n            if (isTop) {\n                this.parent.isEdit = false;\n                this.parent.addRecord();\n            }\n        }\n    };\n    InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var scrollEle = this.parent.getContent().firstElementChild;\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n        if ((isInfiniteScroll && !e.args.isFrozen && !isMovable) || !isInfiniteScroll) {\n            if (isInfiniteScroll && e.args.direction === 'up') {\n                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n            }\n            else {\n                e.tbody.appendChild(e.frag);\n            }\n        }\n        if (!frozenCols) {\n            this.parent.contentModule.getTable().appendChild(e.tbody);\n            this.updateCurrentViewData();\n        }\n        else {\n            if (isInfiniteScroll) {\n                if (e.tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight)) {\n                    this.frozenFrag = e.frag;\n                }\n                else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n                    this.movableFrag = e.frag;\n                }\n                else {\n                    var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n                    if (e.args.direction === 'up') {\n                        tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n                    }\n                    else {\n                        tbody.appendChild(this.frozenFrag);\n                    }\n                    if (e.tableName === literals.frozenRight) {\n                        this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n                        this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n                    }\n                    else {\n                        this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n                    }\n                    this.parent.contentModule.refreshScrollOffset();\n                    this.updateCurrentViewData();\n                }\n            }\n            else {\n                var table = void 0;\n                if (e.tableName === literals.frozenLeft) {\n                    table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n                }\n                else if (e.tableName === 'movable') {\n                    table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() !== literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                else {\n                    table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() === literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                table.appendChild(e.tbody);\n                this.widthService.refreshFrozenScrollbar();\n            }\n        }\n        if (this.isInitialRender && !e.args.isFrozen) {\n            this.isInitialRender = false;\n            this.parent.scrollModule.setHeight();\n        }\n        if (!e.args.isFrozen) {\n            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n            if (isInfiniteScroll) {\n                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n                    scrollEle.scrollTop = this.top;\n                }\n                setRowElements(this.parent);\n            }\n            this.restoreInfiniteAdd();\n            this.isScroll = true;\n        }\n        this.isInfiniteScroll = false;\n    };\n    InfiniteScroll.prototype.selectNewRow = function (args) {\n        var _this = this;\n        var gObj = this.parent;\n        var row = gObj.getRowByIndex(this.rowIndex);\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (row && this.keys.some(function (value) { return value === _this.pressedKey; })) {\n            var content = gObj.getContent().firstElementChild;\n            var rowHeight = gObj.getRowHeight();\n            var target = row.cells[this.cellIndex];\n            if ((this.pressedKey === literals.downArrow || this.pressedKey === literals.enter)\n                || (cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter))) {\n                if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n                    content.scrollTop = content.scrollTop + rowHeight;\n                }\n                gObj.focusModule.isInfiniteScroll = true;\n                gObj.focusModule.onClick({ target: target }, true);\n                gObj.selectRow(this.rowIndex);\n            }\n        }\n        else if (this.lastFocusInfo || this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp) {\n            var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n            var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n            if (target) {\n                this.isFocusScroll = true;\n                if (!cache) {\n                    gObj.focusModule.isInfiniteScroll = true;\n                    gObj.focusModule.onClick({ target: target }, true);\n                }\n                else {\n                    target.focus({ preventScroll: true });\n                }\n            }\n        }\n        this.pressedKey = undefined;\n    };\n    InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n            var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n            if (e.args.direction === 'down') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n            }\n            if (e.args.direction === 'up') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                else {\n                    this.removeBottomRows(rows, rows.length - 1, e.args);\n                }\n            }\n            this.isScroll = false;\n            this.top = this.calculateScrollTop(e.args);\n        }\n    };\n    InfiniteScroll.prototype.calculateScrollTop = function (args) {\n        var top = 0;\n        var scrollCnt = this.parent.getContent().firstElementChild;\n        if (args.direction === 'down') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.captionRowHeight();\n            }\n            var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n            var captionCount = 0;\n            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n            }\n            var value = captionCount ? captionCount\n                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n            var currentViewRowCount = 0;\n            var i = 0;\n            while (currentViewRowCount < scrollCnt.clientHeight) {\n                i++;\n                currentViewRowCount = i * this.parent.getRowHeight();\n            }\n            i = i - 1;\n            top += (value - i) * this.parent.getRowHeight();\n        }\n        if (args.direction === 'up') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n            }\n            else if (this.isInitialCollapse) {\n                var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n                var count = 0;\n                for (var i = 0; i < groupedData.length; i++) {\n                    if (groupedData[i].isCaptionRow) {\n                        count++;\n                    }\n                }\n                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n            }\n            else {\n                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());\n            }\n        }\n        return top;\n    };\n    InfiniteScroll.prototype.captionRowHeight = function () {\n        var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n        return rows.length * this.parent.getRowHeight();\n    };\n    InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n        var frozeCols = this.parent.isFrozenGrid();\n        var frRows = this.parent.getFrozenMode() === literals.leftRight\n            ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        for (var i = 0; i <= maxIndx; i++) {\n            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1\n                && i > (maxIndx - this.parent.frozenRows)) {\n                continue;\n            }\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n        var cnt = 0;\n        var frozeCols = this.parent.isFrozenGrid();\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        var frRows = this.parent.getFrozenMode() === literals.leftRight ?\n            [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var pageSize = this.parent.pageSettings.pageSize;\n        if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n        }\n        if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n        }\n        for (var i = maxIndx; cnt < pageSize; i--) {\n            cnt++;\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n        var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n        if (args.direction === 'down') {\n            var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n            var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n            var k = 0;\n            for (var i = 0; k < lastRowIndex; i++) {\n                if (!rows[i].classList.contains(literals.row)) {\n                    remove(rows[i]);\n                }\n                else {\n                    k = getRowIndexFromElement(rows[i]);\n                }\n            }\n        }\n        if (args.direction === 'up') {\n            var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n            var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n            var startIndex = 0;\n            for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n                startIndex += this.infiniteCache[i].length;\n            }\n            for (var i = startIndex; i < rows.length; i++) {\n                remove(rows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n            if (this.actions.some(function (value) { return value === args.requestType; }) || isDataModified) {\n                var scrollEle = this.parent.getContent().firstElementChild;\n                this.initialRender = true;\n                scrollEle.scrollTop = 0;\n                this.parent.pageSettings.currentPage = 1;\n                this.infiniteCache = this.infiniteFrozenCache = {};\n                this.infiniteCurrentViewData = {};\n                this.resetContentModuleCache({});\n                this.isRemove = false;\n                this.top = 0;\n                this.isInitialMovableRender = true;\n                this.isInitialCollapse = false;\n                this.parent.contentModule.isRemove = this.isRemove;\n                this.parent.contentModule.isAddRows = this.isRemove;\n                this.parent.contentModule.visibleRows = [];\n                this.parent.contentModule.visibleFrozenRows = [];\n            }\n        }\n    };\n    InfiniteScroll.prototype.setCache = function (e) {\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var frozeCols = this.parent.isFrozenGrid();\n            var idx = e.args.isFrozen ? 1 : 0;\n            var isEdit = e.args.requestType !== 'infiniteScroll'\n                && (this.requestType === 'delete' || this.requestType === 'add');\n            var currentPage = this.parent.pageSettings.currentPage;\n            if ((frozeCols && this.isInitialMovableRender) || (!frozeCols && !Object.keys(this.infiniteCache).length) || isEdit) {\n                this.isInitialMovableRender = !e.args.isFrozen;\n                this.setInitialCache(e.modelData, e.args, isEdit);\n            }\n            if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n                this.resetContentModuleCache(this.infiniteCache);\n            }\n            if (frozeCols) {\n                if ((idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]))\n                    || !this.infiniteFrozenCache[currentPage][idx].length) {\n                    this.createFrozenCache(currentPage);\n                    this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n                    if (idx === 1) {\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                }\n            }\n            if (e.isInfiniteScroll && !this.isRemove) {\n                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n                this.parent.contentModule.isRemove = this.isRemove;\n            }\n        }\n    };\n    InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var idx = args.isFrozen ? 1 : 0;\n        var k = !isEdit ? 1 : this.firstBlock;\n        for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n            var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n            var endIndex = i * this.parent.pageSettings.pageSize;\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n                this.setInitialGroupCache(data, k, startIndex, endIndex);\n            }\n            else {\n                if (isCurrentViewData) {\n                    this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n                }\n                else {\n                    if (frozenCols) {\n                        this.createFrozenCache(k);\n                        this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                    else {\n                        this.infiniteCache[k] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteCache);\n                    }\n                }\n            }\n            k++;\n        }\n    };\n    InfiniteScroll.prototype.createFrozenCache = function (index) {\n        if (!this.infiniteFrozenCache[index]) {\n            this.infiniteFrozenCache[index] = [[], []];\n        }\n    };\n    InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n        var pageData = [];\n        var startIndex = 0;\n        for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n            startIndex += this.infiniteCache[i].length;\n        }\n        var k = sIndex;\n        for (var i = startIndex; i < data.length && k < eIndex; i++) {\n            if (data[i].index < eIndex || data[i].isCaptionRow) {\n                k = data[i].isCaptionRow ? k : data[i].index;\n                pageData.push(data[i]);\n            }\n            if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n                break;\n            }\n        }\n        this.infiniteCache[index] = pageData;\n        this.resetContentModuleCache(this.infiniteCache);\n    };\n    InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n        this.parent.contentModule\n            .infiniteCache = data;\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"]},"metadata":{},"sourceType":"module"}