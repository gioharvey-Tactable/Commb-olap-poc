{"ast":null,"code":"import { measureText, TextOption, renderTextElement, CircleOption, PathOption, RectOption } from '../../smithchart/utils/helper';\nimport { SmithchartRect } from '../../smithchart/utils/utils';\nimport { legendRender } from '../model/constant';\n\nvar SmithchartLegend = function () {\n  function SmithchartLegend() {\n    this.legendSeries = [];\n  }\n\n  SmithchartLegend.prototype.renderLegend = function (smithchart) {\n    this.calculateLegendBounds(smithchart);\n\n    this._drawLegend(smithchart);\n\n    return this.legendActualBounds;\n  };\n\n  SmithchartLegend.prototype.calculateLegendBounds = function (smithchart) {\n    this.legendSeries = [];\n    var padding = 10;\n    var legend = smithchart.legendSettings;\n    var legendSizeHeight = legend.height;\n    var legendSizeWidth = legend.width;\n    var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n    var position = legend.position.toLowerCase();\n    var font = legend.title.textStyle;\n    var width = 0;\n    var height = 0;\n    var legendItemWidth = 0;\n    var legendItemHeight = 0;\n    var legendHeight = 0;\n    var svgObjectWidth = smithchart.availableSize.width - (smithchart.elementSpacing * 4 - legend.border.width * 2 + smithchart.border.width * 2);\n    var rowCount = legend.rowCount;\n    var columnCount = legend.columnCount;\n    var titleSize = measureText(smithchart.legendSettings['title']['text'], font);\n    var maxRowWidth = 0;\n    var totalRowHeight = 0;\n    var curRowWidth = 0;\n    var curRowHeight = 0;\n    var allowItems;\n    var itemsCountRow = 0;\n    var length = smithchart.series.length;\n    var legendBounds;\n\n    if (smithchart.legendSettings.visible && length !== 0) {\n      if (position === 'bottom' || position === 'top' || position === 'custom') {\n        if (rowCount && columnCount && rowCount <= columnCount) {\n          rowCount = length / columnCount;\n        } else if (rowCount == null && columnCount != null) {\n          rowCount = length / columnCount;\n        } else if (rowCount == null && columnCount == null) {\n          rowCount = 1;\n        }\n\n        if (rowCount) {\n          allowItems = Math.ceil(length / rowCount);\n        }\n      } else {\n        if (rowCount && columnCount && rowCount <= columnCount) {\n          columnCount = length / rowCount;\n        } else if (rowCount != null && columnCount == null) {\n          columnCount = length / rowCount;\n        } else if (rowCount == null && columnCount == null) {\n          columnCount = 1;\n        }\n\n        if (columnCount) {\n          allowItems = columnCount;\n        }\n      }\n\n      for (var i = 0; i < length; i++) {\n        this.legendSeries.push({\n          text: smithchart.series[i]['name'] ? smithchart.series[i]['name'] : 'series' + i,\n          seriesIndex: i,\n          shape: smithchart.legendSettings.shape,\n          fill: smithchart.series[i].fill || smithchart.seriesColors[i % smithchart.seriesColors.length],\n          bounds: null\n        });\n\n        var legendsize = this._getLegendSize(smithchart, this.legendSeries[i]);\n\n        legendItemWidth = Math.max(legendsize['width'], legendItemWidth);\n        legendItemHeight = Math.max(legendsize['height'], legendItemHeight);\n        this.legendSeries[i]['bounds'] = {\n          width: legendItemWidth,\n          height: legendItemHeight\n        };\n        itemsCountRow = itemsCountRow + 1;\n        curRowWidth = curRowWidth + legendItemWidth + itemPadding;\n        curRowHeight = Math.max(legendItemHeight, curRowHeight);\n\n        if (position === 'top' || position === 'bottom' || position === 'custom') {\n          if (curRowWidth > svgObjectWidth) {\n            curRowWidth -= legendsize.width + itemPadding;\n            maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n            curRowWidth = legendsize.width + itemPadding;\n            totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n          }\n        }\n\n        if (itemsCountRow === allowItems || i === length - 1) {\n          maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n          totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n          legendHeight = totalRowHeight;\n          itemsCountRow = 0;\n          curRowHeight = 0;\n          curRowWidth = 0;\n        }\n      }\n\n      width = titleSize.width > maxRowWidth - itemPadding ? titleSize.width + padding * 2 + itemPadding : maxRowWidth + padding * 2 - smithchart.border.width * 2;\n      height = legendHeight + smithchart.elementSpacing;\n      legendBounds = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n    }\n\n    this.legendActualBounds = legendBounds;\n\n    if (legendSizeWidth != null) {\n      this.legendActualBounds.width = legendSizeWidth;\n    }\n\n    if (legendSizeHeight != null) {\n      this.legendActualBounds.height = legendSizeHeight;\n    }\n  };\n\n  SmithchartLegend.prototype._getLegendSize = function (smithchart, series) {\n    var legend = smithchart.legendSettings;\n    var symbolWidth = legend.itemStyle.width;\n    var symbolHeight = legend.itemStyle.height;\n    var textSize = measureText(series.text, legend.textStyle);\n    var width = symbolWidth + textSize.width + legend.shapePadding;\n    var height = Math.max(symbolHeight, textSize.height);\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /* eslint-disable  */\n\n\n  SmithchartLegend.prototype._drawLegend = function (smithchart) {\n    var legend = smithchart.legendSettings;\n    var legendPosition = legend.position.toLowerCase();\n    var alignment = legend.alignment;\n    var legendBounds = this.legendActualBounds;\n    var maxWidth = 0;\n    var startX;\n    var startY;\n    var titleFont = smithchart.title.font ? smithchart.title.font : smithchart.title.textStyle;\n    var smithchartTitleHeight = measureText(smithchart.title.text, titleFont).height;\n    var smithchartSubtitleHeight = measureText(smithchart.title.subtitle.text, smithchart.title.subtitle.textStyle).height;\n    var elementSpacing = smithchart.elementSpacing;\n    var offset = smithchartTitleHeight + smithchartSubtitleHeight + elementSpacing + smithchart.margin.top;\n    var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n    var svgObjectWidth = smithchart.availableSize.width;\n    var svgObjectHeight = smithchart.availableSize.height;\n    var legendBorder = legend.border.width;\n    var legendWidth = 0;\n    var titleSize = measureText(legend['title']['text'], legend.title.textStyle);\n    var legendTitleHeight = titleSize.height;\n    var borderSize = smithchart.border.width;\n    var svgWidth = svgObjectWidth - borderSize * 2;\n    var svgHeight = svgObjectHeight - borderSize * 2;\n    legendBounds.height += legendTitleHeight;\n\n    if (legendPosition !== 'custom') {\n      switch (legendPosition) {\n        case 'bottom':\n          legendBounds.y = svgHeight - (legendBounds.height + legendBorder + elementSpacing);\n          break;\n\n        case 'top':\n          legendBounds.y = borderSize + offset;\n          break;\n\n        case 'right':\n          legendBounds.x = svgWidth - legendBounds.width - elementSpacing * 2;\n          break;\n\n        case 'left':\n          legendBounds.x = borderSize + elementSpacing * 2;\n          break;\n      }\n\n      if (legendPosition === 'left' || legendPosition === 'right') {\n        switch (alignment) {\n          case 'Center':\n            legendBounds.y = svgHeight / 2 - (legendBounds.height + legendBorder * 2) / 2 + elementSpacing / 2;\n            break;\n\n          case 'Near':\n            legendBounds.y = borderSize + elementSpacing * 2 + offset;\n            break;\n\n          case 'Far':\n            legendBounds.y = svgHeight - (legendBounds.height + legendBorder) - elementSpacing * 2;\n            break;\n        }\n      } else {\n        switch (alignment) {\n          case 'Center':\n            legendBounds.x = svgWidth / 2 - (legendBounds.width + legendBorder * 2) / 2 + elementSpacing / 2;\n            break;\n\n          case 'Near':\n            legendBounds.x = borderSize + elementSpacing * 2;\n            break;\n\n          case 'Far':\n            legendBounds.x = svgWidth - (legendBounds.width + legendBorder) - elementSpacing * 2;\n            break;\n        }\n      }\n    } else {\n      legendBounds.y = legend.location.y < svgHeight ? legend.location.y : 0;\n      legendBounds.x = legend.location.x < svgWidth ? legend.location.x : 0;\n    }\n\n    if (legendPosition === 'bottom' || legendPosition === 'top') {\n      for (var i = 0; i < this.legendSeries.length; i++) {\n        legendWidth += this.legendSeries[i].bounds.width + itemPadding;\n\n        if (legendWidth > svgWidth) {\n          legendBounds.x = svgWidth / 2 - (legendBounds.width + legendBorder * 2) / 2 + elementSpacing / 2;\n          break;\n        }\n      }\n    }\n\n    var gLegendEle = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_legend_group'\n    });\n    smithchart.svgObject.appendChild(gLegendEle);\n    this.legendItemGroup = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + 'legendItem_Group'\n    });\n    var currentX = startX = elementSpacing;\n    var currentY = startY = elementSpacing;\n\n    if (legend.title.text !== '' && legend.title.visible) {\n      gLegendEle.appendChild(this.drawLegendTitle(smithchart, legend, legendBounds, gLegendEle));\n      currentY = startY = elementSpacing + legendTitleHeight;\n    }\n\n    for (var k = 0; k < this.legendSeries.length; k++) {\n      if ((legend.rowCount < legend.columnCount || legend.rowCount === legend.columnCount) && (legendPosition === 'top' || legendPosition === 'bottom' || legendPosition === 'custom')) {\n        if (currentX + this.legendSeries[k]['bounds'].width > legendBounds.width + startX) {\n          currentX = elementSpacing;\n          currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n        }\n\n        this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, currentY, legendBounds);\n        gLegendEle.appendChild(this.legendGroup);\n        currentX += this.legendSeries[k]['bounds'].width + itemPadding;\n      } else {\n        if (currentY + this.legendSeries[k]['bounds'].height + itemPadding + legendTitleHeight + borderSize > legendBounds.height + startY) {\n          currentY = startY;\n          currentX += maxWidth + itemPadding;\n        }\n\n        this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, currentY, legendBounds);\n        gLegendEle.appendChild(this.legendGroup);\n        currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n        maxWidth = Math.max(maxWidth, this.legendSeries[k]['bounds'].width);\n      }\n    }\n\n    gLegendEle.setAttribute('transform', 'translate(' + legendBounds.x.toString() + ',' + legendBounds.y.toString() + ')');\n    this.drawLegendBorder(gLegendEle, smithchart, legend, legendBounds);\n  };\n\n  SmithchartLegend.prototype.drawLegendBorder = function (gLegendEle, smithchart, legend, legendBounds) {\n    var borderRect = new RectOption(smithchart.element.id + '_svg' + '_legendRect', 'none', legend.border, 1, new SmithchartRect(0, 0, legendBounds.width, legendBounds.height));\n    gLegendEle.appendChild(smithchart.renderer.drawRectangle(borderRect));\n  };\n\n  SmithchartLegend.prototype.drawLegendTitle = function (smithchart, legend, legendBounds, gLegendEle) {\n    var elementSpacing = smithchart.elementSpacing;\n    var titleSize = measureText(legend.title.text, legend.title.textStyle);\n    var titleWidth = titleSize.width;\n    var titleHeight = titleSize.height;\n    var textAlignment = legend.title.textAlignment;\n    var startX = 0;\n    var legendBoundsWidth = legendBounds.width;\n    var startY = elementSpacing + titleHeight / 2;\n\n    switch (textAlignment) {\n      case 'Far':\n        startX = legendBoundsWidth - titleWidth - startX;\n        break;\n\n      case 'Center':\n        startX = legendBoundsWidth / 2 - titleWidth / 2;\n        break;\n    }\n\n    if (startX < 0) {\n      startX = 0;\n      legendBoundsWidth = titleWidth;\n    }\n\n    if (legendBoundsWidth < titleWidth + startX) {\n      legendBoundsWidth = titleWidth + startX;\n    }\n\n    var options = new TextOption(smithchart.element.id + '_LegendTitleText', startX, startY, 'start', legend.title.text);\n    var element = renderTextElement(options, legend.title.textStyle, smithchart.themeStyle.legendLabel, gLegendEle);\n    element.setAttribute('aria-label', legend.title.description || legend.title.text);\n    return element;\n  };\n\n  SmithchartLegend.prototype.drawLegendItem = function (smithchart, legend, legendSeries, k, x, y, legendBounds) {\n    var _this = this;\n\n    var location;\n    var radius;\n    var symbol = legend.itemStyle;\n    var itemPadding = legend.itemPadding;\n    var textHeight;\n    radius = Math.sqrt(symbol['width'] * symbol['width'] + symbol['height'] * symbol['height']) / 2;\n    textHeight = measureText(legendSeries['text'], legend.textStyle).height;\n    location = {\n      x: x + symbol['width'] / 2,\n      y: y + (textHeight > symbol['height'] ? textHeight : symbol['height']) / 2\n    };\n    var legendGroup = smithchart.renderer.createGroup({\n      id: smithchart.element.id + '_svg' + '_Legend' + k.toString()\n    });\n    legendGroup['style']['cursor'] = legend.toggleVisibility ? 'pointer' : 'default';\n    var legendEventArgs = {\n      text: legendSeries['text'],\n      fill: legendSeries['fill'],\n      shape: legendSeries['shape'],\n      name: legendRender,\n      cancel: false\n    };\n\n    var legendRenderSuccess = function (args) {\n      if (!args.cancel) {\n        var shape = _this.drawLegendShape(smithchart, legendSeries, location.x, location.y, k, legend, args);\n\n        legendGroup.appendChild(shape);\n        var options = new TextOption(smithchart.element.id + '_LegendItemText' + k.toString(), location.x + symbol['width'] / 2 + legend.shapePadding, location.y + textHeight / 4, 'start', args.text);\n        legend.textStyle.fontFamily = smithchart.themeStyle.fontFamily || legend.textStyle.fontFamily;\n        legend.textStyle.size = smithchart.themeStyle.fontSize || legend.textStyle.size;\n        var element = renderTextElement(options, legend.textStyle, smithchart.themeStyle.legendLabel, legendGroup);\n        element.setAttribute('aria-label', legend.description || 'Click to show or hide the ' + options.text + ' series');\n        legendGroup.appendChild(element);\n\n        _this.legendItemGroup.appendChild(legendGroup);\n      }\n    };\n\n    legendRenderSuccess.bind(this);\n    smithchart.trigger(legendRender, legendEventArgs, legendRenderSuccess);\n    return this.legendItemGroup;\n  };\n\n  SmithchartLegend.prototype.drawLegendShape = function (smithchart, legendSeries, locX, locY, index, legend, legendEventArgs) {\n    var element;\n    var circleOptions;\n    var pathOptions;\n    var path;\n    var symbol = legend.itemStyle;\n    var width = symbol['width'];\n    var height = symbol['height'];\n    var x = locX + -width / 2;\n    var y = locY + -height / 2;\n    var border = {\n      color: symbol.border.color,\n      width: symbol.border.width\n    };\n    var opacity = 1;\n    var fill = smithchart.series[index].visibility === 'visible' ? legendEventArgs.fill : 'grey';\n    var shape = legendEventArgs.shape.toLowerCase();\n    var radius = Math.sqrt(height * height + width * width) / 2;\n\n    switch (shape) {\n      case 'circle':\n        circleOptions = new CircleOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border, opacity, locX, locY, radius, null);\n        element = smithchart.renderer.drawCircle(circleOptions);\n        break;\n\n      case 'rectangle':\n        path = 'M' + ' ' + x + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (width / 2 + locX) + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + -height / 2) + ' z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n\n      case 'diamond':\n        path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (width / 2 + locX) + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + locY + ' z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n\n      case 'pentagon':\n        var eq = 72;\n\n        for (var j = 0; j <= 5; j++) {\n          var xValue = radius * Math.cos(Math.PI / 180 * (j * eq));\n          var yValue = radius * Math.sin(Math.PI / 180 * (j * eq));\n\n          if (j === 0) {\n            path = 'M' + ' ' + (xValue + locX) + ' ' + (locY + yValue) + ' ';\n          } else {\n            path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n          }\n        }\n\n        path = path.concat('Z');\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n\n      case 'triangle':\n        path = 'M' + ' ' + x + ' ' + (height / 2 + locY) + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' Z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n    }\n\n    return element;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SmithchartLegend.prototype.getModuleName = function () {\n    return 'SmithchartLegend';\n  };\n  /**\n   * To destroy the legend.\n   * @return {void}\n   * @private\n   */\n\n\n  SmithchartLegend.prototype.destroy = function (smithchart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return SmithchartLegend;\n}();\n\nexport { SmithchartLegend };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-charts/src/smithchart/legend/legendrender.js"],"names":["measureText","TextOption","renderTextElement","CircleOption","PathOption","RectOption","SmithchartRect","legendRender","SmithchartLegend","legendSeries","prototype","renderLegend","smithchart","calculateLegendBounds","_drawLegend","legendActualBounds","padding","legend","legendSettings","legendSizeHeight","height","legendSizeWidth","width","itemPadding","position","toLowerCase","font","title","textStyle","legendItemWidth","legendItemHeight","legendHeight","svgObjectWidth","availableSize","elementSpacing","border","rowCount","columnCount","titleSize","maxRowWidth","totalRowHeight","curRowWidth","curRowHeight","allowItems","itemsCountRow","length","series","legendBounds","visible","Math","ceil","i","push","text","seriesIndex","shape","fill","seriesColors","bounds","legendsize","_getLegendSize","max","x","y","symbolWidth","itemStyle","symbolHeight","textSize","shapePadding","legendPosition","alignment","maxWidth","startX","startY","titleFont","smithchartTitleHeight","smithchartSubtitleHeight","subtitle","offset","margin","top","svgObjectHeight","legendBorder","legendWidth","legendTitleHeight","borderSize","svgWidth","svgHeight","location","gLegendEle","renderer","createGroup","element","id","svgObject","appendChild","legendItemGroup","currentX","currentY","drawLegendTitle","k","legendGroup","drawLegendItem","setAttribute","toString","drawLegendBorder","borderRect","drawRectangle","titleWidth","titleHeight","textAlignment","legendBoundsWidth","options","themeStyle","legendLabel","description","_this","radius","symbol","textHeight","sqrt","toggleVisibility","legendEventArgs","name","cancel","legendRenderSuccess","args","drawLegendShape","fontFamily","size","fontSize","bind","trigger","locX","locY","index","circleOptions","pathOptions","path","color","opacity","visibility","drawCircle","drawPath","eq","j","xValue","cos","PI","yValue","sin","concat","getModuleName","destroy"],"mappings":"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","sourcesContent":["import { measureText, TextOption, renderTextElement, CircleOption, PathOption, RectOption } from '../../smithchart/utils/helper';\nimport { SmithchartRect } from '../../smithchart/utils/utils';\nimport { legendRender } from '../model/constant';\nvar SmithchartLegend = /** @class */ (function () {\n    function SmithchartLegend() {\n        this.legendSeries = [];\n    }\n    SmithchartLegend.prototype.renderLegend = function (smithchart) {\n        this.calculateLegendBounds(smithchart);\n        this._drawLegend(smithchart);\n        return this.legendActualBounds;\n    };\n    SmithchartLegend.prototype.calculateLegendBounds = function (smithchart) {\n        this.legendSeries = [];\n        var padding = 10;\n        var legend = smithchart.legendSettings;\n        var legendSizeHeight = legend.height;\n        var legendSizeWidth = legend.width;\n        var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n        var position = legend.position.toLowerCase();\n        var font = legend.title.textStyle;\n        var width = 0;\n        var height = 0;\n        var legendItemWidth = 0;\n        var legendItemHeight = 0;\n        var legendHeight = 0;\n        var svgObjectWidth = smithchart.availableSize.width - ((smithchart.elementSpacing * 4) - (legend.border.width * 2)\n            + (smithchart.border.width * 2));\n        var rowCount = legend.rowCount;\n        var columnCount = legend.columnCount;\n        var titleSize = measureText(smithchart.legendSettings['title']['text'], font);\n        var maxRowWidth = 0;\n        var totalRowHeight = 0;\n        var curRowWidth = 0;\n        var curRowHeight = 0;\n        var allowItems;\n        var itemsCountRow = 0;\n        var length = smithchart.series.length;\n        var legendBounds;\n        if (smithchart.legendSettings.visible && length !== 0) {\n            if (position === 'bottom' || position === 'top' || position === 'custom') {\n                if ((rowCount && columnCount) && (rowCount <= columnCount)) {\n                    rowCount = length / columnCount;\n                }\n                else if (rowCount == null && columnCount != null) {\n                    rowCount = length / columnCount;\n                }\n                else if (rowCount == null && columnCount == null) {\n                    rowCount = 1;\n                }\n                if (rowCount) {\n                    allowItems = Math.ceil(length / rowCount);\n                }\n            }\n            else {\n                if ((rowCount && columnCount) && (rowCount <= columnCount)) {\n                    columnCount = length / rowCount;\n                }\n                else if (rowCount != null && columnCount == null) {\n                    columnCount = length / rowCount;\n                }\n                else if (rowCount == null && columnCount == null) {\n                    columnCount = 1;\n                }\n                if (columnCount) {\n                    allowItems = columnCount;\n                }\n            }\n            for (var i = 0; i < length; i++) {\n                this.legendSeries.push({\n                    text: smithchart.series[i]['name'] ? smithchart.series[i]['name'] : 'series' + i,\n                    seriesIndex: i,\n                    shape: smithchart.legendSettings.shape,\n                    fill: smithchart.series[i].fill || smithchart.seriesColors[i % smithchart.seriesColors.length],\n                    bounds: null\n                });\n                var legendsize = this._getLegendSize(smithchart, this.legendSeries[i]);\n                legendItemWidth = Math.max(legendsize['width'], legendItemWidth);\n                legendItemHeight = Math.max(legendsize['height'], legendItemHeight);\n                this.legendSeries[i]['bounds'] = { width: legendItemWidth, height: legendItemHeight };\n                itemsCountRow = itemsCountRow + 1;\n                curRowWidth = curRowWidth + legendItemWidth + itemPadding;\n                curRowHeight = Math.max(legendItemHeight, curRowHeight);\n                if (position === 'top' || position === 'bottom' || position === 'custom') {\n                    if (curRowWidth > svgObjectWidth) {\n                        curRowWidth -= legendsize.width + itemPadding;\n                        maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n                        curRowWidth = legendsize.width + itemPadding;\n                        totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n                    }\n                }\n                if (itemsCountRow === allowItems || i === length - 1) {\n                    maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n                    totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n                    legendHeight = totalRowHeight;\n                    itemsCountRow = 0;\n                    curRowHeight = 0;\n                    curRowWidth = 0;\n                }\n            }\n            width = (titleSize.width) > maxRowWidth - itemPadding ? (titleSize.width + padding * 2 + itemPadding) :\n                maxRowWidth + padding * 2 - (smithchart.border.width * 2);\n            height = legendHeight + smithchart.elementSpacing;\n            legendBounds = { x: 0, y: 0, width: width, height: height };\n        }\n        this.legendActualBounds = legendBounds;\n        if (legendSizeWidth != null) {\n            this.legendActualBounds.width = legendSizeWidth;\n        }\n        if (legendSizeHeight != null) {\n            this.legendActualBounds.height = legendSizeHeight;\n        }\n    };\n    SmithchartLegend.prototype._getLegendSize = function (smithchart, series) {\n        var legend = smithchart.legendSettings;\n        var symbolWidth = legend.itemStyle.width;\n        var symbolHeight = legend.itemStyle.height;\n        var textSize = measureText(series.text, legend.textStyle);\n        var width = symbolWidth + textSize.width + legend.shapePadding;\n        var height = Math.max(symbolHeight, textSize.height);\n        return { width: width, height: height };\n    };\n    /* eslint-disable  */\n    SmithchartLegend.prototype._drawLegend = function (smithchart) {\n        var legend = smithchart.legendSettings;\n        var legendPosition = legend.position.toLowerCase();\n        var alignment = legend.alignment;\n        var legendBounds = this.legendActualBounds;\n        var maxWidth = 0;\n        var startX;\n        var startY;\n        var titleFont = smithchart.title.font ? smithchart.title.font : smithchart.title.textStyle;\n        var smithchartTitleHeight = measureText(smithchart.title.text, titleFont).height;\n        var smithchartSubtitleHeight = measureText(smithchart.title.subtitle.text, smithchart.title.subtitle.textStyle).height;\n        var elementSpacing = smithchart.elementSpacing;\n        var offset = smithchartTitleHeight + smithchartSubtitleHeight + elementSpacing + smithchart.margin.top;\n        var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n        var svgObjectWidth = smithchart.availableSize.width;\n        var svgObjectHeight = smithchart.availableSize.height;\n        var legendBorder = legend.border.width;\n        var legendWidth = 0;\n        var titleSize = measureText(legend['title']['text'], legend.title.textStyle);\n        var legendTitleHeight = titleSize.height;\n        var borderSize = smithchart.border.width;\n        var svgWidth = svgObjectWidth - ((borderSize * 2));\n        var svgHeight = svgObjectHeight - ((borderSize * 2));\n        legendBounds.height += legendTitleHeight;\n        if (legendPosition !== 'custom') {\n            switch (legendPosition) {\n                case 'bottom':\n                    legendBounds.y = svgHeight - (legendBounds.height + (legendBorder) + elementSpacing);\n                    break;\n                case 'top':\n                    legendBounds.y = borderSize + offset;\n                    break;\n                case 'right':\n                    legendBounds.x = svgWidth - legendBounds.width - (elementSpacing * 2);\n                    break;\n                case 'left':\n                    legendBounds.x = borderSize + (elementSpacing * 2);\n                    break;\n            }\n            if (legendPosition === 'left' || legendPosition === 'right') {\n                switch (alignment) {\n                    case 'Center':\n                        legendBounds.y = (svgHeight / 2) - ((legendBounds.height + legendBorder * 2) / 2) + (elementSpacing / 2);\n                        break;\n                    case 'Near':\n                        legendBounds.y = borderSize + (elementSpacing * 2) + offset;\n                        break;\n                    case 'Far':\n                        legendBounds.y = svgHeight - (legendBounds.height + (legendBorder)) - (elementSpacing * 2);\n                        break;\n                }\n            }\n            else {\n                switch (alignment) {\n                    case 'Center':\n                        legendBounds.x = (svgWidth / 2) - ((legendBounds.width + legendBorder * 2) / 2) + (elementSpacing / 2);\n                        break;\n                    case 'Near':\n                        legendBounds.x = borderSize + (elementSpacing * 2);\n                        break;\n                    case 'Far':\n                        legendBounds.x = svgWidth - (legendBounds.width + (legendBorder)) - (elementSpacing * 2);\n                        break;\n                }\n            }\n        }\n        else {\n            legendBounds.y = (legend.location.y < svgHeight) ? legend.location.y : 0;\n            legendBounds.x = (legend.location.x < svgWidth) ? legend.location.x : 0;\n        }\n        if (legendPosition === 'bottom' || legendPosition === 'top') {\n            for (var i = 0; i < this.legendSeries.length; i++) {\n                legendWidth += this.legendSeries[i].bounds.width + itemPadding;\n                if (legendWidth > svgWidth) {\n                    legendBounds.x = (svgWidth / 2) - ((legendBounds.width + legendBorder * 2) / 2) + (elementSpacing / 2);\n                    break;\n                }\n            }\n        }\n        var gLegendEle = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_legend_group' });\n        smithchart.svgObject.appendChild(gLegendEle);\n        this.legendItemGroup = smithchart.renderer.createGroup({ 'id': smithchart.element.id + 'legendItem_Group' });\n        var currentX = startX = elementSpacing;\n        var currentY = startY = elementSpacing;\n        if (legend.title.text !== '' && legend.title.visible) {\n            gLegendEle.appendChild(this.drawLegendTitle(smithchart, legend, legendBounds, gLegendEle));\n            currentY = startY = elementSpacing + legendTitleHeight;\n        }\n        for (var k = 0; k < this.legendSeries.length; k++) {\n            if ((legend.rowCount < legend.columnCount || legend.rowCount === legend.columnCount) &&\n                (legendPosition === 'top' || legendPosition === 'bottom' || legendPosition === 'custom')) {\n                if ((currentX + this.legendSeries[k]['bounds'].width) > legendBounds.width + startX) {\n                    currentX = elementSpacing;\n                    currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n                }\n                this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, (currentY), legendBounds);\n                gLegendEle.appendChild(this.legendGroup);\n                currentX += this.legendSeries[k]['bounds'].width + itemPadding;\n            }\n            else {\n                if (((currentY + this.legendSeries[k]['bounds'].height + itemPadding) +\n                    legendTitleHeight + borderSize > legendBounds.height + startY)) {\n                    currentY = startY;\n                    currentX += maxWidth + (itemPadding);\n                }\n                this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, (currentX), (currentY), legendBounds);\n                gLegendEle.appendChild(this.legendGroup);\n                currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n                maxWidth = Math.max(maxWidth, this.legendSeries[k]['bounds'].width);\n            }\n        }\n        gLegendEle.setAttribute('transform', 'translate(' + legendBounds.x.toString() + ',' + legendBounds.y.toString() + ')');\n        this.drawLegendBorder(gLegendEle, smithchart, legend, legendBounds);\n    };\n    SmithchartLegend.prototype.drawLegendBorder = function (gLegendEle, smithchart, legend, legendBounds) {\n        var borderRect = new RectOption(smithchart.element.id + '_svg' + '_legendRect', 'none', legend.border, 1, new SmithchartRect(0, 0, legendBounds.width, legendBounds.height));\n        gLegendEle.appendChild(smithchart.renderer.drawRectangle(borderRect));\n    };\n    SmithchartLegend.prototype.drawLegendTitle = function (smithchart, legend, legendBounds, gLegendEle) {\n        var elementSpacing = smithchart.elementSpacing;\n        var titleSize = measureText(legend.title.text, legend.title.textStyle);\n        var titleWidth = titleSize.width;\n        var titleHeight = titleSize.height;\n        var textAlignment = legend.title.textAlignment;\n        var startX = 0;\n        var legendBoundsWidth = legendBounds.width;\n        var startY = elementSpacing + (titleHeight / 2);\n        switch (textAlignment) {\n            case 'Far':\n                startX = legendBoundsWidth - titleWidth - startX;\n                break;\n            case 'Center':\n                startX = legendBoundsWidth / 2 - (titleWidth) / 2;\n                break;\n        }\n        if (startX < 0) {\n            startX = 0;\n            legendBoundsWidth = titleWidth;\n        }\n        if (legendBoundsWidth < titleWidth + startX) {\n            legendBoundsWidth = titleWidth + startX;\n        }\n        var options = new TextOption(smithchart.element.id + '_LegendTitleText', startX, startY, 'start', legend.title.text);\n        var element = renderTextElement(options, legend.title.textStyle, smithchart.themeStyle.legendLabel, gLegendEle);\n        element.setAttribute('aria-label', legend.title.description || legend.title.text);\n        return element;\n    };\n    SmithchartLegend.prototype.drawLegendItem = function (smithchart, legend, legendSeries, k, x, y, legendBounds) {\n        var _this = this;\n        var location;\n        var radius;\n        var symbol = legend.itemStyle;\n        var itemPadding = legend.itemPadding;\n        var textHeight;\n        radius = Math.sqrt(symbol['width'] * symbol['width'] + symbol['height'] * symbol['height']) / 2;\n        textHeight = measureText(legendSeries['text'], legend.textStyle).height;\n        location = {\n            x: x + symbol['width'] / 2,\n            y: (y + (textHeight > symbol['height'] ? textHeight : symbol['height']) / 2)\n        };\n        var legendGroup = smithchart.renderer.createGroup({ id: smithchart.element.id + '_svg' + '_Legend' + k.toString() });\n        legendGroup['style']['cursor'] = legend.toggleVisibility ? 'pointer' : 'default';\n        var legendEventArgs = {\n            text: legendSeries['text'],\n            fill: legendSeries['fill'],\n            shape: legendSeries['shape'],\n            name: legendRender,\n            cancel: false\n        };\n        var legendRenderSuccess = function (args) {\n            if (!args.cancel) {\n                var shape = _this.drawLegendShape(smithchart, legendSeries, location.x, location.y, k, legend, args);\n                legendGroup.appendChild(shape);\n                var options = new TextOption(smithchart.element.id + '_LegendItemText' + k.toString(), location.x + symbol['width'] / 2 + legend.shapePadding, location.y + textHeight / 4, 'start', args.text);\n                legend.textStyle.fontFamily = smithchart.themeStyle.fontFamily || legend.textStyle.fontFamily;\n                legend.textStyle.size = smithchart.themeStyle.fontSize || legend.textStyle.size;\n                var element = renderTextElement(options, legend.textStyle, smithchart.themeStyle.legendLabel, legendGroup);\n                element.setAttribute('aria-label', legend.description || 'Click to show or hide the ' + options.text + ' series');\n                legendGroup.appendChild(element);\n                _this.legendItemGroup.appendChild(legendGroup);\n            }\n        };\n        legendRenderSuccess.bind(this);\n        smithchart.trigger(legendRender, legendEventArgs, legendRenderSuccess);\n        return this.legendItemGroup;\n    };\n    SmithchartLegend.prototype.drawLegendShape = function (smithchart, legendSeries, locX, locY, index, legend, legendEventArgs) {\n        var element;\n        var circleOptions;\n        var pathOptions;\n        var path;\n        var symbol = legend.itemStyle;\n        var width = symbol['width'];\n        var height = symbol['height'];\n        var x = locX + (-width / 2);\n        var y = locY + (-height / 2);\n        var border = { color: symbol.border.color, width: symbol.border.width };\n        var opacity = 1;\n        var fill = (smithchart.series[index].visibility === 'visible') ? legendEventArgs.fill : 'grey';\n        var shape = legendEventArgs.shape.toLowerCase();\n        var radius = Math.sqrt(height * height + width * width) / 2;\n        switch (shape) {\n            case 'circle':\n                circleOptions = new CircleOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border, opacity, locX, locY, radius, null);\n                element = smithchart.renderer.drawCircle(circleOptions);\n                break;\n            case 'rectangle':\n                path = 'M' + ' ' + x + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + ((width / 2) + locX) + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (-height / 2)) + ' z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'diamond':\n                path = 'M' + ' ' + x + ' ' + locY + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + ((width / 2) + locX) + ' ' + locY + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + locY + ' z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'pentagon':\n                var eq = 72;\n                for (var j = 0; j <= 5; j++) {\n                    var xValue = radius * Math.cos((Math.PI / 180) * (j * eq));\n                    var yValue = radius * Math.sin((Math.PI / 180) * (j * eq));\n                    if (j === 0) {\n                        path = 'M' + ' ' + (xValue + locX) + ' ' + (locY + yValue) + ' ';\n                    }\n                    else {\n                        path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n                    }\n                }\n                path = path.concat('Z');\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'triangle':\n                path = 'M' + ' ' + x + ' ' + ((height / 2) + locY) + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' Z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n        }\n        return element;\n    };\n    /**\n     * Get module name.\n     */\n    SmithchartLegend.prototype.getModuleName = function () {\n        return 'SmithchartLegend';\n    };\n    /**\n     * To destroy the legend.\n     * @return {void}\n     * @private\n     */\n    SmithchartLegend.prototype.destroy = function (smithchart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return SmithchartLegend;\n}());\nexport { SmithchartLegend };\n"]},"metadata":{},"sourceType":"module"}