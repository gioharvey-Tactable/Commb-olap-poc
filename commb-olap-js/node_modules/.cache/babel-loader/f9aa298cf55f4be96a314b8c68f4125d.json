{"ast":null,"code":"import * as events from '../../common/base/constant';\nimport { isBlazor } from '@syncfusion/ej2-base';\nimport { PivotUtil } from '../../base/util';\n/**\n * `DataSourceUpdate` module is used to update the dataSource.\n */\n\n/** @hidden */\n\nvar DataSourceUpdate = function () {\n  /**\n   * Constructor for the dialog action.\n   * @param {PivotCommon} parent - parent.\n   * @hidden\n   */\n  function DataSourceUpdate(parent) {\n    this.parent = parent;\n  }\n  /**\n   * Updates the dataSource by adding the given field along with field dropped position to the dataSource.\n   * @function updateDataSource\n   * @param  {string} fieldName - Defines dropped field name to update dataSource.\n   * @param  {string} droppedClass -  Defines dropped field axis name to update dataSource.\n   * @param  {number} droppedPosition - Defines dropped position to the axis based on field position.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  DataSourceUpdate.prototype.updateDataSource = function (fieldName, droppedClass, droppedPosition) {\n    var _this = this;\n\n    var dataSourceItem;\n    var draggedClass;\n    var row = this.parent.dataSourceSettings.rows;\n    var column = this.parent.dataSourceSettings.columns;\n    var value = this.parent.dataSourceSettings.values;\n    var filter = this.parent.dataSourceSettings.filters;\n    var field = [row, column, value, filter];\n\n    for (var len = 0, lnt = field.length; len < lnt; len++) {\n      if (field[len]) {\n        for (var i = 0, n = field[len].length; i < n; i++) {\n          if (field[len][i].name === fieldName || this.parent.dataType === 'olap' && field[len][i].name.toLowerCase() === '[measures]' && field[len][i].name.toLowerCase() === fieldName) {\n            draggedClass = len === 0 ? 'rows' : len === 1 ? 'columns' : len === 2 ? 'values' : 'filters';\n          }\n\n          if (!draggedClass) {\n            draggedClass = 'fieldList';\n          }\n        }\n      }\n    }\n\n    var eventdrop = {\n      fieldName: fieldName,\n      dropField: PivotUtil.getFieldInfo(fieldName, this.control).fieldItem,\n      dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n      dropAxis: droppedClass,\n      dropPosition: droppedPosition,\n      draggedAxis: draggedClass,\n      cancel: false\n    };\n    var control = this.control.getModuleName() === 'pivotfieldlist' && this.control.isPopupView ? this.control.pivotGridModule : this.control;\n    control.trigger(events.fieldDrop, eventdrop, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        droppedClass = observedArgs.dropAxis;\n        droppedPosition = observedArgs.dropPosition;\n        fieldName = observedArgs.dropField ? observedArgs.dropField.name : observedArgs.fieldName;\n        dataSourceItem = observedArgs.dropField;\n\n        if (_this.control && _this.btnElement && _this.btnElement.getAttribute('isvalue') === 'true') {\n          switch (droppedClass) {\n            case '':\n              _this.control.setProperties({\n                dataSourceSettings: {\n                  values: []\n                }\n              }, true);\n\n              break;\n\n            case 'rows':\n              _this.control.setProperties({\n                dataSourceSettings: {\n                  valueAxis: 'row'\n                }\n              }, true);\n\n              break;\n\n            case 'columns':\n              _this.control.setProperties({\n                dataSourceSettings: {\n                  valueAxis: 'column'\n                }\n              }, true);\n\n              break;\n          }\n        } else {\n          // dataSourceItem = this.removeFieldFromReport(fieldName.toString());\n          // dataSourceItem = dataSourceItem ? dataSourceItem : this.getNewField(fieldName.toString());\n          _this.removeFieldFromReport(fieldName.toString());\n\n          dataSourceItem = _this.getNewField(fieldName.toString(), observedArgs.dropField);\n\n          if (dataSourceItem.type === 'CalculatedField' && droppedClass !== '') {\n            droppedClass = 'values';\n          }\n        }\n\n        if (_this.parent.dataType === 'olap') {\n          // dataSourceItem = this.removeFieldFromReport(fieldName.toString());\n          // dataSourceItem = dataSourceItem ? dataSourceItem : this.getNewField(fieldName.toString());\n          _this.removeFieldFromReport(fieldName.toString());\n\n          dataSourceItem = _this.getNewField(fieldName.toString(), observedArgs.dropField);\n\n          if (_this.parent.dataSourceSettings.values.length === 0) {\n            _this.removeFieldFromReport('[measures]');\n          }\n\n          if (dataSourceItem.type === 'CalculatedField' && droppedClass !== '') {\n            droppedClass = 'values';\n          }\n        }\n\n        if (_this.control) {\n          var eventArgs = {\n            fieldName: fieldName,\n            droppedField: dataSourceItem,\n            dataSourceSettings: PivotUtil.getClonedDataSourceSettings(_this.parent.dataSourceSettings),\n            droppedAxis: droppedClass,\n            droppedPosition: droppedPosition\n          };\n          /* eslint-disable */\n\n          var dataSourceUpdate_1 = _this;\n          control.trigger(events.onFieldDropped, eventArgs, function (droppedArgs) {\n            dataSourceItem = droppedArgs.droppedField;\n\n            if (dataSourceItem) {\n              droppedPosition = droppedArgs.droppedPosition;\n              droppedClass = droppedArgs.droppedAxis;\n\n              switch (droppedClass) {\n                case 'filters':\n                  droppedPosition !== -1 ? isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.filters.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.filters.splice(droppedPosition, 0, dataSourceItem) : isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.filters.push(dataSourceItem) : _this.parent.dataSourceSettings.filters.push(dataSourceItem);\n                  break;\n\n                case 'rows':\n                  droppedPosition !== -1 ? isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.rows.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.rows.splice(droppedPosition, 0, dataSourceItem) : isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.rows.push(dataSourceItem) : _this.parent.dataSourceSettings.rows.push(dataSourceItem);\n                  break;\n\n                case 'columns':\n                  droppedPosition !== -1 ? isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.columns.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.columns.splice(droppedPosition, 0, dataSourceItem) : isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.columns.push(dataSourceItem) : _this.parent.dataSourceSettings.columns.push(dataSourceItem);\n                  break;\n\n                case 'values':\n                  droppedPosition !== -1 ? isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.values.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.values.splice(droppedPosition, 0, dataSourceItem) : isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.values.push(dataSourceItem) : _this.parent.dataSourceSettings.values.push(dataSourceItem);\n\n                  if (isBlazor()) {\n                    if (dataSourceUpdate_1.parent.dataType === 'olap' && !dataSourceUpdate_1.parent.engineModule.isMeasureAvail) {\n                      var measureField = {\n                        name: '[Measures]',\n                        caption: 'Measures',\n                        showRemoveIcon: true,\n                        allowDragAndDrop: true\n                      };\n                      var fieldAxis = dataSourceUpdate_1.parent.dataSourceSettings.valueAxis === 'row' ? dataSourceUpdate_1.parent.dataSourceSettings.rows : dataSourceUpdate_1.parent.dataSourceSettings.columns;\n                      fieldAxis.push(measureField);\n                    }\n                  } else {\n                    if (_this.parent.dataType === 'olap' && !_this.parent.engineModule.isMeasureAvail) {\n                      var measureField = {\n                        name: '[Measures]',\n                        caption: 'Measures',\n                        showRemoveIcon: true,\n                        allowDragAndDrop: true\n                      };\n                      var fieldAxis = _this.parent.dataSourceSettings.valueAxis === 'row' ? _this.parent.dataSourceSettings.rows : _this.parent.dataSourceSettings.columns;\n                      fieldAxis.push(measureField);\n                    }\n                  }\n\n                  break;\n              }\n\n              if (isBlazor()) {\n                dataSourceUpdate_1.parent.control.pivotButtonModule.updateDataSource();\n                dataSourceUpdate_1.parent.control.axisFieldModule.render();\n              }\n            }\n          });\n        }\n      }\n    });\n  };\n  /**\n   * Updates the dataSource by removing the given field from the dataSource.\n   * @param  {string} fieldName - Defines dropped field name to remove dataSource.\n   * @function removeFieldFromReport\n   * @returns {void}\n   * @hidden\n   */\n\n\n  DataSourceUpdate.prototype.removeFieldFromReport = function (fieldName) {\n    /* eslint-enable */\n    var dataSourceItem;\n    var isDataSource = false;\n    var rows = this.parent.dataSourceSettings.rows;\n    var columns = this.parent.dataSourceSettings.columns;\n    var values = this.parent.dataSourceSettings.values;\n    var filters = this.parent.dataSourceSettings.filters;\n    var fields = [rows, columns, values, filters];\n    var field = this.parent.engineModule.fieldList[fieldName];\n\n    for (var len = 0, lnt = fields.length; len < lnt; len++) {\n      if (!isDataSource && fields[len]) {\n        for (var i = 0, n = fields[len].length; i < n; i++) {\n          if (fields[len][i].name === fieldName || this.parent.dataType === 'olap' && fields[len][i].name.toLowerCase() === '[measures]' && fields[len][i].name.toLowerCase() === fieldName) {\n            dataSourceItem = fields[len][i].properties ? fields[len][i].properties : fields[len][i];\n            dataSourceItem.type = field && field.type === 'number' ? dataSourceItem.type : 'Count';\n            fields[len].splice(i, 1);\n\n            if (this.parent.dataType === 'olap') {\n              var engineModule = this.parent.engineModule;\n\n              if (engineModule && engineModule.fieldList[fieldName]) {\n                engineModule.fieldList[fieldName].currrentMembers = {};\n                engineModule.fieldList[fieldName].searchMembers = [];\n              }\n            }\n\n            isDataSource = true;\n            break;\n          }\n        }\n      }\n    }\n\n    return dataSourceItem;\n  };\n  /**\n   * Creates new field object given field name from the field list data.\n   * @param {string} fieldName - Defines dropped field name to add dataSource.\n   * @param {IFieldOptions} fieldItem - Defines dropped field.\n   * @function getNewField\n   * @returns {IFieldOptions} - IFieldOptions\n   * @hidden\n   */\n\n\n  DataSourceUpdate.prototype.getNewField = function (fieldName, fieldItem) {\n    var newField;\n\n    if (this.parent.dataType === 'olap') {\n      var field = this.parent.engineModule.fieldList[fieldName];\n      newField = {\n        name: fieldItem ? fieldItem.name : fieldName,\n        caption: fieldItem ? fieldItem.caption : field.caption,\n        isNamedSet: fieldItem ? fieldItem.isNamedSet : field.isNamedSets,\n        isCalculatedField: fieldItem ? fieldItem.isCalculatedField : field.isCalculatedField,\n        type: fieldItem ? fieldItem.type === undefined ? field.type === 'number' ? 'Sum' : 'Count' : fieldItem.type : field.aggregateType === undefined ? field.type === 'number' ? 'Sum' : 'Count' : field.aggregateType,\n        showFilterIcon: fieldItem ? fieldItem.showFilterIcon : field.showFilterIcon,\n        showSortIcon: fieldItem ? fieldItem.showSortIcon : field.showSortIcon,\n        showEditIcon: fieldItem ? fieldItem.showEditIcon : field.showEditIcon,\n        showRemoveIcon: fieldItem ? fieldItem.showRemoveIcon : field.showRemoveIcon,\n        showValueTypeIcon: fieldItem ? fieldItem.showValueTypeIcon : field.showValueTypeIcon,\n        allowDragAndDrop: fieldItem ? fieldItem.allowDragAndDrop : field.allowDragAndDrop,\n        showSubTotals: fieldItem ? fieldItem.showSubTotals : field.showSubTotals\n      };\n    } else {\n      var field = this.parent.engineModule.fieldList[fieldName];\n      newField = {\n        name: fieldItem ? fieldItem.name : fieldName,\n        caption: fieldItem ? fieldItem.caption : field.caption,\n        type: fieldItem ? fieldItem.type === undefined || fieldItem.type === null ? field.type === 'number' ? 'Sum' : 'Count' : fieldItem.type : field.aggregateType === undefined || field.aggregateType === null ? field.type === 'number' ? 'Sum' : 'Count' : field.aggregateType,\n        showNoDataItems: fieldItem ? fieldItem.showNoDataItems : field.showNoDataItems,\n        baseField: fieldItem ? fieldItem.baseField : field.baseField,\n        baseItem: fieldItem ? fieldItem.baseItem : field.baseItem,\n        allowDragAndDrop: fieldItem ? fieldItem.allowDragAndDrop : field.allowDragAndDrop,\n        showSubTotals: fieldItem ? fieldItem.showSubTotals : field.showSubTotals,\n        showFilterIcon: fieldItem ? fieldItem.showFilterIcon : field.showFilterIcon,\n        showSortIcon: fieldItem ? fieldItem.showSortIcon : field.showSortIcon,\n        showEditIcon: fieldItem ? fieldItem.showEditIcon : field.showEditIcon,\n        showRemoveIcon: fieldItem ? fieldItem.showRemoveIcon : field.showRemoveIcon,\n        showValueTypeIcon: fieldItem ? fieldItem.showValueTypeIcon : field.showValueTypeIcon\n      };\n    }\n\n    return newField;\n  };\n\n  return DataSourceUpdate;\n}();\n\nexport { DataSourceUpdate };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/common/actions/dataSource-update.js"],"names":["events","isBlazor","PivotUtil","DataSourceUpdate","parent","prototype","updateDataSource","fieldName","droppedClass","droppedPosition","_this","dataSourceItem","draggedClass","row","dataSourceSettings","rows","column","columns","value","values","filter","filters","field","len","lnt","length","i","n","name","dataType","toLowerCase","eventdrop","dropField","getFieldInfo","control","fieldItem","getClonedDataSourceSettings","dropAxis","dropPosition","draggedAxis","cancel","getModuleName","isPopupView","pivotGridModule","trigger","fieldDrop","observedArgs","btnElement","getAttribute","setProperties","valueAxis","removeFieldFromReport","toString","getNewField","type","eventArgs","droppedField","droppedAxis","dataSourceUpdate_1","onFieldDropped","droppedArgs","splice","push","engineModule","isMeasureAvail","measureField","caption","showRemoveIcon","allowDragAndDrop","fieldAxis","pivotButtonModule","axisFieldModule","render","isDataSource","fields","fieldList","properties","currrentMembers","searchMembers","newField","isNamedSet","isNamedSets","isCalculatedField","undefined","aggregateType","showFilterIcon","showSortIcon","showEditIcon","showValueTypeIcon","showSubTotals","showNoDataItems","baseField","baseItem"],"mappings":"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","sourcesContent":["import * as events from '../../common/base/constant';\nimport { isBlazor } from '@syncfusion/ej2-base';\nimport { PivotUtil } from '../../base/util';\n/**\n * `DataSourceUpdate` module is used to update the dataSource.\n */\n/** @hidden */\nvar DataSourceUpdate = /** @class */ (function () {\n    /**\n     * Constructor for the dialog action.\n     * @param {PivotCommon} parent - parent.\n     * @hidden\n     */\n    function DataSourceUpdate(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Updates the dataSource by adding the given field along with field dropped position to the dataSource.\n     * @function updateDataSource\n     * @param  {string} fieldName - Defines dropped field name to update dataSource.\n     * @param  {string} droppedClass -  Defines dropped field axis name to update dataSource.\n     * @param  {number} droppedPosition - Defines dropped position to the axis based on field position.\n     * @returns {void}\n     * @hidden\n     */\n    DataSourceUpdate.prototype.updateDataSource = function (fieldName, droppedClass, droppedPosition) {\n        var _this = this;\n        var dataSourceItem;\n        var draggedClass;\n        var row = this.parent.dataSourceSettings.rows;\n        var column = this.parent.dataSourceSettings.columns;\n        var value = this.parent.dataSourceSettings.values;\n        var filter = this.parent.dataSourceSettings.filters;\n        var field = [row, column, value, filter];\n        for (var len = 0, lnt = field.length; len < lnt; len++) {\n            if (field[len]) {\n                for (var i = 0, n = field[len].length; i < n; i++) {\n                    if (field[len][i].name === fieldName || (this.parent.dataType === 'olap' &&\n                        field[len][i].name.toLowerCase() === '[measures]' && field[len][i].name.toLowerCase() === fieldName)) {\n                        draggedClass = len === 0 ? 'rows' : len === 1 ? 'columns' : len === 2 ? 'values' : 'filters';\n                    }\n                    if (!draggedClass) {\n                        draggedClass = 'fieldList';\n                    }\n                }\n            }\n        }\n        var eventdrop = {\n            fieldName: fieldName, dropField: PivotUtil.getFieldInfo(fieldName, this.control).fieldItem,\n            dataSourceSettings: PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n            dropAxis: droppedClass, dropPosition: droppedPosition, draggedAxis: draggedClass, cancel: false\n        };\n        var control = this.control.getModuleName() === 'pivotfieldlist' && this.control.isPopupView ?\n            this.control.pivotGridModule : this.control;\n        control.trigger(events.fieldDrop, eventdrop, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                droppedClass = observedArgs.dropAxis;\n                droppedPosition = observedArgs.dropPosition;\n                fieldName = observedArgs.dropField ? observedArgs.dropField.name : observedArgs.fieldName;\n                dataSourceItem = observedArgs.dropField;\n                if (_this.control && _this.btnElement && _this.btnElement.getAttribute('isvalue') === 'true') {\n                    switch (droppedClass) {\n                        case '':\n                            _this.control.setProperties({ dataSourceSettings: { values: [] } }, true);\n                            break;\n                        case 'rows':\n                            _this.control.setProperties({ dataSourceSettings: { valueAxis: 'row' } }, true);\n                            break;\n                        case 'columns':\n                            _this.control.setProperties({ dataSourceSettings: { valueAxis: 'column' } }, true);\n                            break;\n                    }\n                }\n                else {\n                    // dataSourceItem = this.removeFieldFromReport(fieldName.toString());\n                    // dataSourceItem = dataSourceItem ? dataSourceItem : this.getNewField(fieldName.toString());\n                    _this.removeFieldFromReport(fieldName.toString());\n                    dataSourceItem = _this.getNewField(fieldName.toString(), observedArgs.dropField);\n                    if (dataSourceItem.type === 'CalculatedField' && droppedClass !== '') {\n                        droppedClass = 'values';\n                    }\n                }\n                if (_this.parent.dataType === 'olap') {\n                    // dataSourceItem = this.removeFieldFromReport(fieldName.toString());\n                    // dataSourceItem = dataSourceItem ? dataSourceItem : this.getNewField(fieldName.toString());\n                    _this.removeFieldFromReport(fieldName.toString());\n                    dataSourceItem = _this.getNewField(fieldName.toString(), observedArgs.dropField);\n                    if (_this.parent.dataSourceSettings.values.length === 0) {\n                        _this.removeFieldFromReport('[measures]');\n                    }\n                    if (dataSourceItem.type === 'CalculatedField' && droppedClass !== '') {\n                        droppedClass = 'values';\n                    }\n                }\n                if (_this.control) {\n                    var eventArgs = {\n                        fieldName: fieldName, droppedField: dataSourceItem,\n                        dataSourceSettings: PivotUtil.getClonedDataSourceSettings(_this.parent.dataSourceSettings),\n                        droppedAxis: droppedClass, droppedPosition: droppedPosition\n                    };\n                    /* eslint-disable */\n                    var dataSourceUpdate_1 = _this;\n                    control.trigger(events.onFieldDropped, eventArgs, function (droppedArgs) {\n                        dataSourceItem = droppedArgs.droppedField;\n                        if (dataSourceItem) {\n                            droppedPosition = droppedArgs.droppedPosition;\n                            droppedClass = droppedArgs.droppedAxis;\n                            switch (droppedClass) {\n                                case 'filters':\n                                    droppedPosition !== -1 ?\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.filters.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.filters.splice(droppedPosition, 0, dataSourceItem)) :\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.filters.push(dataSourceItem) : _this.parent.dataSourceSettings.filters.push(dataSourceItem));\n                                    break;\n                                case 'rows':\n                                    droppedPosition !== -1 ?\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.rows.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.rows.splice(droppedPosition, 0, dataSourceItem)) :\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.rows.push(dataSourceItem) : _this.parent.dataSourceSettings.rows.push(dataSourceItem));\n                                    break;\n                                case 'columns':\n                                    droppedPosition !== -1 ?\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.columns.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.columns.splice(droppedPosition, 0, dataSourceItem)) :\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.columns.push(dataSourceItem) : _this.parent.dataSourceSettings.columns.push(dataSourceItem));\n                                    break;\n                                case 'values':\n                                    droppedPosition !== -1 ?\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.values.splice(droppedPosition, 0, dataSourceItem) : _this.parent.dataSourceSettings.values.splice(droppedPosition, 0, dataSourceItem)) :\n                                        (isBlazor() ? dataSourceUpdate_1.parent.dataSourceSettings.values.push(dataSourceItem) : _this.parent.dataSourceSettings.values.push(dataSourceItem));\n                                    if (isBlazor()) {\n                                        if (dataSourceUpdate_1.parent.dataType === 'olap' && !dataSourceUpdate_1.parent.engineModule.isMeasureAvail) {\n                                            var measureField = {\n                                                name: '[Measures]', caption: 'Measures', showRemoveIcon: true, allowDragAndDrop: true\n                                            };\n                                            var fieldAxis = dataSourceUpdate_1.parent.dataSourceSettings.valueAxis === 'row' ?\n                                                dataSourceUpdate_1.parent.dataSourceSettings.rows : dataSourceUpdate_1.parent.dataSourceSettings.columns;\n                                            fieldAxis.push(measureField);\n                                        }\n                                    }\n                                    else {\n                                        if (_this.parent.dataType === 'olap' && !_this.parent.engineModule.isMeasureAvail) {\n                                            var measureField = {\n                                                name: '[Measures]', caption: 'Measures', showRemoveIcon: true, allowDragAndDrop: true\n                                            };\n                                            var fieldAxis = _this.parent.dataSourceSettings.valueAxis === 'row' ?\n                                                _this.parent.dataSourceSettings.rows : _this.parent.dataSourceSettings.columns;\n                                            fieldAxis.push(measureField);\n                                        }\n                                    }\n                                    break;\n                            }\n                            if (isBlazor()) {\n                                dataSourceUpdate_1.parent.control.pivotButtonModule.updateDataSource();\n                                dataSourceUpdate_1.parent.control.axisFieldModule.render();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    };\n    /**\n     * Updates the dataSource by removing the given field from the dataSource.\n     * @param  {string} fieldName - Defines dropped field name to remove dataSource.\n     * @function removeFieldFromReport\n     * @returns {void}\n     * @hidden\n     */\n    DataSourceUpdate.prototype.removeFieldFromReport = function (fieldName) {\n        /* eslint-enable */\n        var dataSourceItem;\n        var isDataSource = false;\n        var rows = this.parent.dataSourceSettings.rows;\n        var columns = this.parent.dataSourceSettings.columns;\n        var values = this.parent.dataSourceSettings.values;\n        var filters = this.parent.dataSourceSettings.filters;\n        var fields = [rows, columns, values, filters];\n        var field = this.parent.engineModule.fieldList[fieldName];\n        for (var len = 0, lnt = fields.length; len < lnt; len++) {\n            if (!isDataSource && fields[len]) {\n                for (var i = 0, n = fields[len].length; i < n; i++) {\n                    if (fields[len][i].name === fieldName || (this.parent.dataType === 'olap' &&\n                        fields[len][i].name.toLowerCase() === '[measures]' && fields[len][i].name.toLowerCase() === fieldName)) {\n                        dataSourceItem = fields[len][i].properties ?\n                            fields[len][i].properties : fields[len][i];\n                        dataSourceItem.type = (field && field.type === 'number') ? dataSourceItem.type :\n                            'Count';\n                        fields[len].splice(i, 1);\n                        if (this.parent.dataType === 'olap') {\n                            var engineModule = this.parent.engineModule;\n                            if (engineModule && engineModule.fieldList[fieldName]) {\n                                engineModule.fieldList[fieldName].currrentMembers = {};\n                                engineModule.fieldList[fieldName].searchMembers = [];\n                            }\n                        }\n                        isDataSource = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return dataSourceItem;\n    };\n    /**\n     * Creates new field object given field name from the field list data.\n     * @param {string} fieldName - Defines dropped field name to add dataSource.\n     * @param {IFieldOptions} fieldItem - Defines dropped field.\n     * @function getNewField\n     * @returns {IFieldOptions} - IFieldOptions\n     * @hidden\n     */\n    DataSourceUpdate.prototype.getNewField = function (fieldName, fieldItem) {\n        var newField;\n        if (this.parent.dataType === 'olap') {\n            var field = this.parent.engineModule.fieldList[fieldName];\n            newField = {\n                name: fieldItem ? fieldItem.name : fieldName,\n                caption: fieldItem ? fieldItem.caption : field.caption,\n                isNamedSet: fieldItem ? fieldItem.isNamedSet : field.isNamedSets,\n                isCalculatedField: fieldItem ? fieldItem.isCalculatedField : field.isCalculatedField,\n                type: (fieldItem ? (fieldItem.type === undefined ? field.type === 'number' ? 'Sum' :\n                    'Count' : fieldItem.type) :\n                    (field.aggregateType === undefined ? field.type === 'number' ? 'Sum' :\n                        'Count' : field.aggregateType)),\n                showFilterIcon: fieldItem ? fieldItem.showFilterIcon : field.showFilterIcon,\n                showSortIcon: fieldItem ? fieldItem.showSortIcon : field.showSortIcon,\n                showEditIcon: fieldItem ? fieldItem.showEditIcon : field.showEditIcon,\n                showRemoveIcon: fieldItem ? fieldItem.showRemoveIcon : field.showRemoveIcon,\n                showValueTypeIcon: fieldItem ? fieldItem.showValueTypeIcon : field.showValueTypeIcon,\n                allowDragAndDrop: fieldItem ? fieldItem.allowDragAndDrop : field.allowDragAndDrop,\n                showSubTotals: fieldItem ? fieldItem.showSubTotals : field.showSubTotals\n            };\n        }\n        else {\n            var field = this.parent.engineModule.fieldList[fieldName];\n            newField = {\n                name: fieldItem ? fieldItem.name : fieldName,\n                caption: fieldItem ? fieldItem.caption : field.caption,\n                type: (fieldItem ? ((fieldItem.type === undefined || fieldItem.type === null) ?\n                    field.type === 'number' ? 'Sum' : 'Count' : fieldItem.type) :\n                    ((field.aggregateType === undefined || field.aggregateType === null) ?\n                        field.type === 'number' ? 'Sum' :\n                            'Count' : field.aggregateType)),\n                showNoDataItems: fieldItem ? fieldItem.showNoDataItems : field.showNoDataItems,\n                baseField: fieldItem ? fieldItem.baseField : field.baseField,\n                baseItem: fieldItem ? fieldItem.baseItem : field.baseItem,\n                allowDragAndDrop: fieldItem ? fieldItem.allowDragAndDrop : field.allowDragAndDrop,\n                showSubTotals: fieldItem ? fieldItem.showSubTotals : field.showSubTotals,\n                showFilterIcon: fieldItem ? fieldItem.showFilterIcon : field.showFilterIcon,\n                showSortIcon: fieldItem ? fieldItem.showSortIcon : field.showSortIcon,\n                showEditIcon: fieldItem ? fieldItem.showEditIcon : field.showEditIcon,\n                showRemoveIcon: fieldItem ? fieldItem.showRemoveIcon : field.showRemoveIcon,\n                showValueTypeIcon: fieldItem ? fieldItem.showValueTypeIcon : field.showValueTypeIcon\n            };\n        }\n        return newField;\n    };\n    return DataSourceUpdate;\n}());\nexport { DataSourceUpdate };\n"]},"metadata":{},"sourceType":"module"}