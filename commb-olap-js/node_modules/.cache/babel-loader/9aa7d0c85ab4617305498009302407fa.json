{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable jsdoc/require-param */\n\n\nimport { withInRange, getPoint } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineRangeAreaSeries` module is used to render the range area series.\n */\n\nvar SplineRangeAreaSeries = function (_super) {\n  __extends(SplineRangeAreaSeries, _super);\n\n  function SplineRangeAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render SplineRangeArea Series.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  SplineRangeAreaSeries.prototype.render = function (series, xAxis, yAxis, inverted) {\n    var point;\n    var direction = '';\n    var closed = undefined;\n    var firstPoint = null;\n    var pt;\n    var betweenPt1;\n    var betweenPt2;\n    var highControlPt1;\n    var highControlPt2;\n    var realPoint = [];\n    var points = [];\n    var Index = 0;\n    realPoint = this.filterEmptyPoints(series);\n\n    for (var i = 0; i < realPoint.length; i++) {\n      point = realPoint[i];\n\n      if (point.x === null || point.x === '') {\n        continue;\n      } else {\n        point.index = Index;\n        Index++;\n        points.push(point);\n      }\n    }\n\n    var previous;\n    var next;\n    var visiblePoint = this.enableComplexProperty(series);\n    var length = visiblePoint.length;\n\n    for (var i = 0; i < length; i++) {\n      point = visiblePoint[i];\n      point.regions = [];\n      point.symbolLocations = [];\n      next = this.getNextIndex(points, point.index - 1, series);\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n      var lowPoint = Math.min(point.low, point.high);\n      var highPoint = Math.max(point.low, point.high);\n\n      if (yAxis.isInversed) {\n        var temp = lowPoint;\n        lowPoint = highPoint;\n        highPoint = temp;\n      }\n\n      var lowPtCoordinate = getPoint(point.xValue, lowPoint, xAxis, yAxis, inverted);\n      var highPtCoordinate = getPoint(point.xValue, highPoint, xAxis, yAxis, inverted);\n      point.symbolLocations.push(highPtCoordinate);\n      point.symbolLocations.push(lowPtCoordinate);\n      var rect1 = new Rect(Math.min(lowPtCoordinate.x, highPtCoordinate.x), Math.min(lowPtCoordinate.y, highPtCoordinate.y), Math.max(Math.abs(highPtCoordinate.x - lowPtCoordinate.x), series.marker.width), Math.max(Math.abs(highPtCoordinate.y - lowPtCoordinate.y), series.marker.width));\n\n      if (!inverted) {\n        rect1.x -= series.marker.width / 2;\n      } else {\n        rect1.y -= series.marker.width / 2;\n      }\n\n      point.regions.push(rect1); //Path to connect the high points\n\n      if (point.visible && withInRange(visiblePoint[previous], point, visiblePoint[next], series)) {\n        if (firstPoint) {\n          highControlPt1 = series.drawPoints[previous].controlPoint1;\n          highControlPt2 = series.drawPoints[previous].controlPoint2;\n          pt = getPoint(point.xValue, point.high > point.low ? point.high : point.low, xAxis, yAxis, inverted);\n          betweenPt1 = getPoint(highControlPt1.x, highControlPt1.y, xAxis, yAxis, inverted);\n          betweenPt2 = getPoint(highControlPt2.x, highControlPt2.y, xAxis, yAxis, inverted);\n          direction = direction.concat('C ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ');\n        } else {\n          if (yAxis.isInversed) {\n            direction = direction.concat('M ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ' + 'L ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ');\n          } else {\n            direction = direction.concat('M ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ' + 'L ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ');\n          }\n\n          closed = false;\n        }\n\n        if (i + 1 < visiblePoint.length && !visiblePoint[i + 1].visible || i === visiblePoint.length - 1) {\n          // Path to connect the low points\n          direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n          direction = direction.concat(' ' + 'Z');\n          closed = true;\n        }\n\n        firstPoint = point;\n      } else {\n        if (closed === false && i !== 0) {\n          direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n          closed = true;\n        }\n\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n    }\n\n    var name1 = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name : series.chart.element.id + '_Series_' + series.index;\n    var options = new PathOption(name1, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction);\n    this.appendLinePath(options, series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * path for rendering the low points in SplineRangeArea\n   *\n   * @returns {void}.\n   * @private\n   */\n\n\n  SplineRangeAreaSeries.prototype.closeSplineRangeAreaPath = function (visiblePoint, point, series, direction, i, xAxis, yAxis, inverted) {\n    var firstPoint = null;\n    var pt;\n    var betweenPt1;\n    var betweenPt2;\n    var lowControlPt1;\n    var lowControlPt2;\n\n    for (var j = i; j > 0; j--) {\n      if (visiblePoint[j].visible) {\n        point = visiblePoint[j];\n        var low = Math.min(point.low, point.high);\n        var high = Math.max(point.low, point.high);\n\n        if (yAxis.isInversed) {\n          var temp = low;\n          low = high;\n          high = temp;\n        }\n\n        var lowPtCoordinate = getPoint(point.xValue, low, xAxis, yAxis, inverted);\n        var highPtCoordinate = getPoint(point.xValue, high, xAxis, yAxis, inverted);\n\n        if (firstPoint) {\n          lowControlPt1 = series.lowDrawPoints[j].controlPoint1;\n          lowControlPt2 = series.lowDrawPoints[j].controlPoint2;\n          pt = getPoint(point.xValue, point.low < point.high ? point.low : point.high, xAxis, yAxis, inverted);\n          betweenPt1 = getPoint(lowControlPt1.x, lowControlPt1.y, xAxis, yAxis, inverted);\n          betweenPt2 = getPoint(lowControlPt2.x, lowControlPt2.y, xAxis, yAxis, inverted);\n          direction = direction.concat('C ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ');\n        } else {\n          if (yAxis.isInversed) {\n            direction = direction.concat('L ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ');\n          } else {\n            direction = direction.concat('L ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ');\n          }\n        }\n      } else {\n        break;\n      }\n\n      firstPoint = point;\n    }\n\n    return direction;\n  };\n  /**\n   * Animates the series.\n   *\n   * @param  {Series} series - Defines the series to animate.\n   * @returns {void}\n   */\n\n\n  SplineRangeAreaSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SplineRangeAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SplineRangeAreaSeries';\n  };\n  /**\n   * To destroy the line series.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  SplineRangeAreaSeries.prototype.destroy = function () {\n    /**\n     * Destroys range area series\n     */\n  };\n\n  return SplineRangeAreaSeries;\n}(SplineBase);\n\nexport { SplineRangeAreaSeries };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-charts/src/chart/series/spline-range-area-series.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","withInRange","getPoint","PathOption","Rect","SplineBase","SplineRangeAreaSeries","_super","apply","arguments","render","series","xAxis","yAxis","inverted","point","direction","closed","undefined","firstPoint","pt","betweenPt1","betweenPt2","highControlPt1","highControlPt2","realPoint","points","Index","filterEmptyPoints","i","length","x","index","push","previous","next","visiblePoint","enableComplexProperty","regions","symbolLocations","getNextIndex","getPreviousIndex","lowPoint","Math","min","low","high","highPoint","max","isInversed","temp","lowPtCoordinate","xValue","highPtCoordinate","rect1","y","abs","marker","width","visible","drawPoints","controlPoint1","controlPoint2","concat","closeSplineRangeAreaPath","name1","category","chart","element","id","name","options","interior","border","color","opacity","dashArray","appendLinePath","renderMarker","lowControlPt1","lowControlPt2","j","lowDrawPoints","doAnimation","option","animation","doLinearAnimation","getModuleName","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { withInRange, getPoint } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineRangeAreaSeries` module is used to render the range area series.\n */\nvar SplineRangeAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineRangeAreaSeries, _super);\n    function SplineRangeAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render SplineRangeArea Series.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.render = function (series, xAxis, yAxis, inverted) {\n        var point;\n        var direction = '';\n        var closed = undefined;\n        var firstPoint = null;\n        var pt;\n        var betweenPt1;\n        var betweenPt2;\n        var highControlPt1;\n        var highControlPt2;\n        var realPoint = [];\n        var points = [];\n        var Index = 0;\n        realPoint = this.filterEmptyPoints(series);\n        for (var i = 0; i < realPoint.length; i++) {\n            point = realPoint[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = Index;\n                Index++;\n                points.push(point);\n            }\n        }\n        var previous;\n        var next;\n        var visiblePoint = this.enableComplexProperty(series);\n        var length = visiblePoint.length;\n        for (var i = 0; i < length; i++) {\n            point = visiblePoint[i];\n            point.regions = [];\n            point.symbolLocations = [];\n            next = this.getNextIndex(points, point.index - 1, series);\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            var lowPoint = Math.min(point.low, point.high);\n            var highPoint = Math.max(point.low, point.high);\n            if (yAxis.isInversed) {\n                var temp = lowPoint;\n                lowPoint = highPoint;\n                highPoint = temp;\n            }\n            var lowPtCoordinate = getPoint(point.xValue, lowPoint, xAxis, yAxis, inverted);\n            var highPtCoordinate = getPoint(point.xValue, highPoint, xAxis, yAxis, inverted);\n            point.symbolLocations.push(highPtCoordinate);\n            point.symbolLocations.push(lowPtCoordinate);\n            var rect1 = new Rect(Math.min(lowPtCoordinate.x, highPtCoordinate.x), Math.min(lowPtCoordinate.y, highPtCoordinate.y), Math.max(Math.abs(highPtCoordinate.x - lowPtCoordinate.x), series.marker.width), Math.max(Math.abs(highPtCoordinate.y - lowPtCoordinate.y), series.marker.width));\n            if (!inverted) {\n                rect1.x -= series.marker.width / 2;\n            }\n            else {\n                rect1.y -= series.marker.width / 2;\n            }\n            point.regions.push(rect1);\n            //Path to connect the high points\n            if (point.visible &&\n                withInRange(visiblePoint[previous], point, visiblePoint[next], series)) {\n                if (firstPoint) {\n                    highControlPt1 = series.drawPoints[previous].controlPoint1;\n                    highControlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt = getPoint(point.xValue, point.high > point.low ? point.high : point.low, xAxis, yAxis, inverted);\n                    betweenPt1 = getPoint(highControlPt1.x, highControlPt1.y, xAxis, yAxis, inverted);\n                    betweenPt2 = getPoint(highControlPt2.x, highControlPt2.y, xAxis, yAxis, inverted);\n                    direction = direction.concat('C ' + betweenPt1.x + ' '\n                        + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ');\n                }\n                else {\n                    if (yAxis.isInversed) {\n                        direction = direction.concat('M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ' + 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ');\n                    }\n                    else {\n                        direction = direction.concat('M ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ' + 'L ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ');\n                    }\n                    closed = false;\n                }\n                if ((i + 1 < visiblePoint.length && !visiblePoint[i + 1].visible)\n                    || i === visiblePoint.length - 1) {\n                    // Path to connect the low points\n                    direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n                    direction = direction.concat(' ' + 'Z');\n                    closed = true;\n                }\n                firstPoint = point;\n            }\n            else {\n                if (closed === false && i !== 0) {\n                    direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n                    closed = true;\n                }\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n        }\n        var name1 = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name :\n            series.chart.element.id + '_Series_' + series.index;\n        var options = new PathOption(name1, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction);\n        this.appendLinePath(options, series, '');\n        this.renderMarker(series);\n    };\n    /**\n     * path for rendering the low points in SplineRangeArea\n     *\n     * @returns {void}.\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.closeSplineRangeAreaPath = function (visiblePoint, point, series, direction, i, xAxis, yAxis, inverted) {\n        var firstPoint = null;\n        var pt;\n        var betweenPt1;\n        var betweenPt2;\n        var lowControlPt1;\n        var lowControlPt2;\n        for (var j = i; j > 0; j--) {\n            if (visiblePoint[j].visible) {\n                point = visiblePoint[j];\n                var low = Math.min(point.low, point.high);\n                var high = Math.max(point.low, point.high);\n                if (yAxis.isInversed) {\n                    var temp = low;\n                    low = high;\n                    high = temp;\n                }\n                var lowPtCoordinate = getPoint(point.xValue, low, xAxis, yAxis, inverted);\n                var highPtCoordinate = getPoint(point.xValue, high, xAxis, yAxis, inverted);\n                if (firstPoint) {\n                    lowControlPt1 = series.lowDrawPoints[j].controlPoint1;\n                    lowControlPt2 = series.lowDrawPoints[j].controlPoint2;\n                    pt = getPoint(point.xValue, point.low < point.high ? point.low : point.high, xAxis, yAxis, inverted);\n                    betweenPt1 = getPoint(lowControlPt1.x, lowControlPt1.y, xAxis, yAxis, inverted);\n                    betweenPt2 = getPoint(lowControlPt2.x, lowControlPt2.y, xAxis, yAxis, inverted);\n                    direction = direction.concat('C ' + betweenPt2.x + ' '\n                        + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ');\n                }\n                else {\n                    if (yAxis.isInversed) {\n                        direction = direction.concat('L ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ');\n                    }\n                    else {\n                        direction = direction.concat('L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ');\n                    }\n                }\n            }\n            else {\n                break;\n            }\n            firstPoint = point;\n        }\n        return direction;\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     */\n    SplineRangeAreaSeries.prototype.doAnimation = function (series) {\n        var option = series.animation;\n        this.doLinearAnimation(series, option);\n    };\n    /**\n     * Get module name.\n     */\n    SplineRangeAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'SplineRangeAreaSeries';\n    };\n    /**\n     * To destroy the line series.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroys range area series\n         */\n    };\n    return SplineRangeAreaSeries;\n}(SplineBase));\nexport { SplineRangeAreaSeries };\n"]},"metadata":{},"sourceType":"module"}