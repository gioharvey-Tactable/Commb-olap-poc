{"ast":null,"code":"import { isNullOrUndefined, removeClass, addClass } from '@syncfusion/ej2-base';\nimport * as cls from '../base/css-constant';\nimport { PivotUtil } from '../../base/util';\n/**\n * `EventBase` for active fields action.\n */\n\n/** @hidden */\n\nvar EventBase = function () {\n  /**\n   * Constructor for the dialog action.\n   * @param {PivotCommon} parent - parent.\n   * @hidden\n   */\n  function EventBase(parent) {\n    this.parent = parent;\n  }\n  /**\n   * Updates sorting order for the selected field.\n   * @function updateSorting\n   * @param  {Event} args - Contains clicked element information to update dataSource.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  EventBase.prototype.updateSorting = function (args) {\n    if (!args.target.classList.contains(cls.FILTER_COMMON_CLASS) && !args.target.classList.contains(cls.REMOVE_CLASS)) {\n      if (this.parent.filterDialog.dialogPopUp) {\n        this.parent.filterDialog.dialogPopUp.close();\n      }\n\n      var target = args.target;\n      var fieldName = void 0;\n      var checkisDescending = void 0;\n      var isDescending = void 0;\n\n      if (target.id) {\n        fieldName = target.id;\n        checkisDescending = [].slice.call(target.querySelectorAll('.' + cls.SORT_DESCEND_CLASS));\n      } else {\n        fieldName = target.parentElement.id;\n        checkisDescending = [].slice.call(target.parentElement.querySelectorAll('.' + cls.SORT_DESCEND_CLASS));\n      }\n\n      if (checkisDescending.length === 0) {\n        isDescending = false;\n      } else {\n        isDescending = true;\n      } //isDescending = (target.querySelectorAll(cls.SORT_DESCEND_CLASS));\n\n\n      var sortObj = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.sortSettings);\n\n      if (!isNullOrUndefined(sortObj)) {\n        for (var i = 0; i < this.parent.dataSourceSettings.sortSettings.length; i++) {\n          if (this.parent.dataSourceSettings.sortSettings[i].name === fieldName) {\n            this.parent.dataSourceSettings.sortSettings.splice(i, 1);\n            break;\n          }\n        }\n\n        var newSortObj = {\n          name: fieldName,\n          order: isDescending ? 'Ascending' : 'Descending'\n        }; // let newSortObj: ISort = { name: fieldName, order: isNone ? 'Ascending' : isDescending ? 'None' : 'Descending' };\n\n        this.parent.dataSourceSettings.sortSettings.push(newSortObj);\n      } else {\n        var newSortObj = {\n          name: fieldName,\n          order: isDescending ? 'Ascending' : 'Descending'\n        }; //let newSortObj: ISort = { name: fieldName, order: isNone ? 'Ascending' : isDescending ? 'None' : 'Descending'  };\n\n        this.parent.dataSourceSettings.sortSettings.push(newSortObj);\n      }\n      /* eslint-disable */\n\n\n      this.parent.control.lastSortInfo = this.parent.dataSourceSettings.sortSettings[this.parent.dataSourceSettings.sortSettings.length - 1];\n      isDescending ? removeClass([target], cls.SORT_DESCEND_CLASS) : addClass([target], cls.SORT_DESCEND_CLASS);\n      /* eslint-enable */\n      // if (isDescending) {\n      //     removeClass([target], cls.SORT_DESCEND_CLASS);\n      //     addClass([target], cls.SORTING);\n      // } else if (!isDescending && !isNone) {\n      //     addClass([target], cls.SORT_DESCEND_CLASS);\n      // } else if (isNone) {\n      //     removeClass([target], cls.SORTING);\n      // } else if (!isNone) {\n      //     removeClass([target], cls.SORT_DESCEND_CLASS);\n      //     removeClass([target], cls.SORTING);\n      //    //addClass([target], cls.SORT_CLASS);\n      // }\n    }\n  };\n  /**\n   * Updates sorting order for the selected field.\n   * @function updateFiltering\n   * @param {Event} args - Contains clicked element information to update dataSource.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  EventBase.prototype.updateFiltering = function (args) {\n    var target = args.target;\n    var fieldName = target.parentElement.id;\n    var fieldCaption = target.parentElement.textContent;\n    var isInclude = false;\n    var filterItems = [];\n    var treeData = [];\n    /* eslint-disable-line */\n\n    if (this.parent.dataSourceSettings.allowMemberFilter) {\n      if (this.parent.dataType === 'olap') {\n        treeData = this.getOlapData(fieldName, isInclude);\n      } else {\n        var members = PivotUtil.getClonedData(this.parent.engineModule.fieldList[fieldName].dateMember);\n        /* eslint-disable  */\n\n        members = this.parent.engineModule.fieldList[fieldName].sort === 'Ascending' ? members.sort(function (a, b) {\n          return a.actualText > b.actualText ? 1 : b.actualText > a.actualText ? -1 : 0;\n        }) : this.parent.engineModule.fieldList[fieldName].sort === 'Descending' ? members.sort(function (a, b) {\n          return a.actualText < b.actualText ? 1 : b.actualText < a.actualText ? -1 : 0;\n        }) : members;\n        /* eslint-enable  */\n\n        var filterObj = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n\n        if (!isNullOrUndefined(filterObj)) {\n          isInclude = this.isValidFilterItemsAvail(fieldName, filterObj) && filterObj.type === 'Include' ? true : false;\n          filterItems = filterObj.items ? filterObj.items : [];\n        }\n\n        treeData = this.getTreeData(isInclude, members, filterItems, fieldName);\n      }\n    }\n\n    if (this.parent.filterDialog.dialogPopUp) {\n      this.parent.filterDialog.dialogPopUp.close();\n    }\n\n    var popupTarget = this.parent.control.filterTargetID;\n\n    if (isNullOrUndefined(popupTarget)) {\n      popupTarget = this.parent.moduleName !== 'pivotfieldlist' ? this.parent.element : document.getElementById(this.parent.parentID + '_Wrapper');\n    }\n\n    this.parent.filterDialog.createFilterDialog(treeData, fieldName, fieldCaption, popupTarget);\n  };\n  /**\n   * Returns boolean by checing the valid filter members from the selected filter settings.\n   * @function isValidFilterItemsAvail\n   * @param {string} fieldName - Gets filter members for the given field name.\n   * @param {IFilter} filterObj - filterObj.\n   * @returns {boolean} - boolean.\n   * @hidden\n   */\n\n\n  EventBase.prototype.isValidFilterItemsAvail = function (fieldName, filterObj) {\n    var isItemAvail = false;\n    var filterTypes = ['Include', 'Exclude'];\n\n    if (filterObj && filterTypes.indexOf(filterObj.type) >= 0) {\n      var engineModule = this.parent.engineModule;\n      var field = engineModule.fieldList[fieldName];\n      var members = engineModule.formatFields[fieldName] && ['date', 'dateTime', 'time'].indexOf(engineModule.formatFields[fieldName].type) > -1 ? field.formattedMembers : field.members;\n\n      for (var _i = 0, _a = filterObj.items; _i < _a.length; _i++) {\n        var item = _a[_i];\n\n        if (members[item]) {\n          isItemAvail = true;\n          break;\n        }\n      }\n    }\n\n    return isItemAvail;\n  };\n  /* eslint-disable */\n\n\n  EventBase.prototype.getOlapData = function (fieldName, isInclude) {\n    var treeData = [];\n    var filterItems = [];\n    this.parent.filterDialog.isSearchEnabled = false;\n    var updatedTreeData = [];\n    /* eslint-enable */\n\n    var engineModule = this.parent.engineModule;\n    var filterObj = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n\n    if (engineModule.fieldList[fieldName].filterMembers.length === 0) {\n      if (!this.parent.control.loadOnDemandInMemberEditor) {\n        engineModule.getMembers(this.parent.dataSourceSettings, fieldName, true);\n      } else if (filterObj && filterObj.levelCount > 1 && engineModule.fieldList[fieldName].levels.length > 1) {\n        engineModule.getFilterMembers(this.parent.dataSourceSettings, fieldName, filterObj.levelCount);\n      } else {\n        engineModule.fieldList[fieldName].levelCount = 1;\n        engineModule.getMembers(this.parent.dataSourceSettings, fieldName);\n      }\n    } else {\n      engineModule.fieldList[fieldName].currrentMembers = {};\n      engineModule.fieldList[fieldName].searchMembers = [];\n    }\n\n    var isHierarchy = engineModule.fieldList[fieldName].isHierarchy;\n    /* eslint-disable */\n\n    treeData = engineModule.fieldList[fieldName].filterMembers;\n    /* eslint-enable */\n\n    if (!isNullOrUndefined(filterObj)) {\n      isInclude = filterObj.type ? filterObj.type === 'Include' ? true : false : true;\n      filterItems = filterObj.items ? filterObj.items : [];\n    }\n\n    var filterItemObj = {};\n    var dummyfilterItems = {};\n    var memberObject = engineModule.fieldList[fieldName].members;\n\n    for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {\n      var item = filterItems_1[_i];\n      filterItemObj[item] = item;\n      dummyfilterItems[item] = item;\n\n      if (memberObject[item]) {\n        dummyfilterItems = this.getParentNode(fieldName, item, dummyfilterItems);\n      }\n    }\n\n    treeData = this.getFilteredTreeNodes(fieldName, treeData, dummyfilterItems, updatedTreeData, isHierarchy);\n    treeData = this.getOlapTreeData(isInclude, PivotUtil.getClonedData(treeData), filterItemObj, fieldName, isHierarchy);\n    treeData = this.sortOlapFilterData(treeData, engineModule.fieldList[fieldName].sort);\n    return treeData;\n  };\n  /* eslint-disable-next-line */\n\n  /**\n   * Gets sorted filter members for the selected field.\n   * @function sortOlapFilterData\n   * @param {{ [key: string]: Object }[]} treeData - Gets filter members for the given field name.\n   * @param {string} order - order.\n   * @returns {{ [key: string]: Object }[]} - return.\n   * @hidden\n   */\n\n\n  EventBase.prototype.sortOlapFilterData = function (treeData, order) {\n    if (treeData.length > 0) {\n      treeData = order === 'Ascending' ? treeData.sort(function (a, b) {\n        return a.caption > b.caption ? 1 : b.caption > a.caption ? -1 : 0;\n      }) : order === 'Descending' ? treeData.sort(function (a, b) {\n        return a.caption < b.caption ? 1 : b.caption < a.caption ? -1 : 0;\n      }) : treeData;\n    }\n\n    return treeData;\n  };\n\n  EventBase.prototype.getParentIDs = function (treeObj, id, parent) {\n    /* eslint-disable */\n    var data = treeObj.fields.dataSource;\n    /* eslint-enable */\n\n    var pid;\n\n    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n      var li = data_1[_i];\n\n      if (li.id === id) {\n        pid = li.pid;\n        break;\n      }\n    }\n\n    if (pid) {\n      parent.push(pid);\n      this.getParentIDs(treeObj, pid, parent);\n    }\n\n    return parent;\n  };\n\n  EventBase.prototype.getChildIDs = function (treeObj, id, children) {\n    /* eslint-disable */\n    var data = treeObj.fields.dataSource;\n    /* eslint-enable */\n\n    var cID;\n\n    for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {\n      var li = data_2[_i];\n\n      if (li.pid === id) {\n        cID = li.id;\n        break;\n      }\n    }\n\n    if (cID) {\n      children.push(cID);\n      this.getParentIDs(treeObj, cID, children);\n    }\n\n    return children;\n  };\n  /**\n   * show tree nodes using search text.\n   * @hidden\n   */\n\n  /* eslint-disable  */\n\n\n  EventBase.prototype.searchTreeNodes = function (args, treeObj, isFieldCollection, isHierarchy) {\n    if (isFieldCollection) {\n      var searchList = [];\n      var nonSearchList = [];\n      var list = [].slice.call(treeObj.element.querySelectorAll('li'));\n\n      for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n        var element = list_1[_i];\n\n        if (element.querySelector('.e-list-text').textContent.toLowerCase().indexOf(args.value.toLowerCase()) > -1) {\n          searchList.push(element);\n        } else {\n          nonSearchList.push(element);\n        }\n      }\n\n      treeObj.enableNodes(searchList);\n      removeClass(searchList, cls.ICON_DISABLE);\n      treeObj.disableNodes(nonSearchList);\n      addClass(nonSearchList, cls.ICON_DISABLE);\n\n      if (searchList.length > 0 && nonSearchList.length > 0) {\n        for (var _a = 0, searchList_1 = searchList; _a < searchList_1.length; _a++) {\n          var currentNode = searchList_1[_a];\n          var id = currentNode.getAttribute('data-uid');\n          var parentIDs = this.getParentIDs(treeObj, id, []);\n          var childIDs = this.getChildIDs(treeObj, id, []);\n          var pNodes = [];\n\n          if (parentIDs.length > 0) {\n            for (var _b = 0, nonSearchList_1 = nonSearchList; _b < nonSearchList_1.length; _b++) {\n              var li = nonSearchList_1[_b];\n\n              if (PivotUtil.inArray(li.getAttribute('data-uid'), parentIDs) !== -1) {\n                pNodes.push(li);\n              }\n            }\n          }\n\n          if (childIDs.length > 0) {\n            for (var _c = 0, nonSearchList_2 = nonSearchList; _c < nonSearchList_2.length; _c++) {\n              var li = nonSearchList_2[_c];\n\n              if (PivotUtil.inArray(li.getAttribute('data-uid'), childIDs) !== -1) {\n                pNodes.push(li);\n              }\n            }\n          }\n\n          treeObj.enableNodes(pNodes);\n          removeClass(pNodes, cls.ICON_DISABLE);\n        }\n      }\n\n      if ([].slice.call(treeObj.element.querySelectorAll('li.' + cls.ICON_DISABLE)).length === 0) {\n        treeObj.collapseAll();\n      } else {\n        treeObj.expandAll(undefined, undefined, true);\n      }\n    } else {\n      this.parent.searchTreeItems = [];\n\n      if (this.parent.dataType === 'olap' && !isHierarchy) {\n        this.updateOlapSearchTree(args, treeObj, isHierarchy);\n      } else {\n        var searchList = [];\n        var memberCount = 0;\n        memberCount = 1;\n\n        for (var _d = 0, _e = this.parent.currentTreeItems; _d < _e.length; _d++) {\n          var item = _e[_d];\n\n          if (item.name.toLowerCase().indexOf(args.value.toLowerCase()) > -1) {\n            this.parent.searchTreeItems.push(item);\n\n            if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor) {\n              searchList.push(item);\n            }\n\n            memberCount++;\n          }\n        }\n\n        memberCount--;\n\n        if (memberCount > this.parent.control.maxNodeLimitInMemberEditor) {\n          this.parent.editorLabelElement.innerText = memberCount - this.parent.control.maxNodeLimitInMemberEditor + this.parent.control.localeObj.getConstant('editorDataLimitMsg');\n          this.parent.filterDialog.dialogPopUp.height = this.parent.filterDialog.allowExcelLikeFilter ? '440px' : '400px';\n          this.parent.isDataOverflow = true;\n        } else {\n          this.parent.editorLabelElement.innerText = '';\n          this.parent.filterDialog.dialogPopUp.height = this.parent.filterDialog.allowExcelLikeFilter ? '400px' : '350px';\n          this.parent.isDataOverflow = false;\n        }\n\n        this.parent.isDataOverflow = memberCount > this.parent.control.maxNodeLimitInMemberEditor;\n        this.parent.editorLabelElement.parentElement.style.display = this.parent.isDataOverflow ? 'block' : 'none';\n        treeObj.fields = {\n          dataSource: searchList,\n          id: 'id',\n          text: 'name',\n          isChecked: 'isSelected',\n          parentID: 'pid'\n        };\n        treeObj.dataBind();\n      }\n    }\n  };\n\n  EventBase.prototype.updateOlapSearchTree = function (args, treeObj, isHierarchy) {\n    var treeData = [];\n    var filterDialog = this.parent.filterDialog.dialogPopUp.element;\n    var fieldName = filterDialog.getAttribute('data-fieldname');\n\n    if (args.value.toLowerCase() === '') {\n      this.parent.filterDialog.isSearchEnabled = false;\n      this.parent.engineModule.fieldList[fieldName].searchMembers = []; // (this.parent.engineModule.fieldList[fieldName] as IOlapField).currrentMembers = {};\n\n      var updatedTreeData = [];\n      var filterItemObj = {};\n      var dummyfilterItems = {};\n      var memberObject = this.parent.engineModule.fieldList[fieldName].members;\n      var members = Object.keys(memberObject);\n      var filterItems = [];\n\n      for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n        var item = members_1[_i];\n\n        if (memberObject[item].isSelected) {\n          if (!(memberObject[item].parent && memberObject[memberObject[item].parent].isSelected)) {\n            filterItems.push(item);\n          }\n        }\n      }\n\n      for (var _a = 0, filterItems_2 = filterItems; _a < filterItems_2.length; _a++) {\n        var item = filterItems_2[_a];\n        filterItemObj[item] = item;\n        dummyfilterItems[item] = item;\n\n        if (memberObject[item]) {\n          dummyfilterItems = this.getParentNode(fieldName, item, dummyfilterItems);\n        }\n      }\n\n      var searchData = this.parent.engineModule.fieldList[fieldName].filterMembers;\n      treeData = this.getFilteredTreeNodes(fieldName, searchData, dummyfilterItems, updatedTreeData, isHierarchy);\n      treeData = this.getOlapTreeData(true, PivotUtil.getClonedData(treeData), filterItemObj, fieldName, isHierarchy, true);\n    } else {\n      this.parent.filterDialog.isSearchEnabled = true;\n      var searchData = this.parent.engineModule.fieldList[fieldName].searchMembers;\n      treeData = PivotUtil.getClonedData(searchData);\n      treeData = this.getOlapSearchTreeData(true, treeData, fieldName);\n    }\n\n    treeObj.fields = {\n      dataSource: treeData,\n      id: 'id',\n      text: 'name',\n      isChecked: 'isSelected',\n      parentID: 'pid'\n    };\n    treeObj.dataBind();\n  };\n\n  EventBase.prototype.getTreeData = function (isInclude, members, filterItems, fieldName) {\n    this.parent.currentTreeItems = [];\n    this.parent.searchTreeItems = [];\n    this.parent.currentTreeItemsPos = {};\n    this.parent.savedTreeFilterPos = {};\n    var engineModule = this.parent.engineModule;\n    this.parent.isDateField = engineModule.formatFields[fieldName] && ['date', 'dateTime', 'time'].indexOf(engineModule.formatFields[fieldName].type) > -1;\n    var list = [];\n    var memberCount = 1;\n    var filterObj = {};\n\n    for (var _i = 0, filterItems_3 = filterItems; _i < filterItems_3.length; _i++) {\n      var item = filterItems_3[_i];\n      filterObj[item] = item;\n    }\n\n    var modifiedFieldName = fieldName.replace(/[^a-zA-Z0-9 ]/g, '_');\n\n    for (var _a = 0, members_2 = members; _a < members_2.length; _a++) {\n      var member = members_2[_a];\n      var memberName = this.parent.isDateField ? member.formattedText : member.actualText.toString();\n      /* eslint-disable */\n\n      var nodeAttr = {\n        'data-fieldName': fieldName,\n        'data-memberId': member.actualText.toString()\n      };\n      var obj = {\n        id: modifiedFieldName + '_' + memberCount,\n        htmlAttributes: nodeAttr,\n        actualText: member.actualText,\n        name: memberName,\n        isSelected: isInclude ? false : true\n      };\n      /* eslint-enable */\n\n      if (filterObj[memberName] !== undefined) {\n        obj.isSelected = isInclude ? true : false;\n      }\n\n      if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor) {\n        list.push(obj);\n      }\n\n      if (!obj.isSelected) {\n        this.parent.savedTreeFilterPos[memberCount - 1] = memberName;\n      }\n\n      this.parent.currentTreeItems.push(obj);\n      this.parent.searchTreeItems.push(obj);\n      this.parent.currentTreeItemsPos[member.actualText] = {\n        index: memberCount - 1,\n        isSelected: obj.isSelected\n      };\n      memberCount++;\n    }\n\n    this.parent.isDataOverflow = memberCount - 1 > this.parent.control.maxNodeLimitInMemberEditor;\n    return list;\n  };\n  /* eslint-disable */\n\n\n  EventBase.prototype.getOlapTreeData = function (isInclude, members, filterObj, fieldName, isHierarchy, isSearchRender) {\n    var engineModule = this.parent.engineModule;\n    var fieldList = engineModule.fieldList[fieldName];\n    this.parent.currentTreeItems = [];\n    this.parent.searchTreeItems = [];\n    this.parent.currentTreeItemsPos = {};\n    var list = [];\n    var memberCount = 1;\n\n    for (var _i = 0, members_3 = members; _i < members_3.length; _i++) {\n      var member = members_3[_i];\n      var obj = member;\n      /* eslint-enable */\n\n      var memberName = member.id.toString();\n\n      if (!isSearchRender) {\n        obj.isSelected = isInclude ? false : true;\n      }\n\n      if (filterObj[memberName] !== undefined) {\n        obj.isSelected = isInclude ? true : false;\n      }\n\n      if (!isSearchRender && member.hasChildren) {\n        this.updateChildNodeStates(fieldList.filterMembers, fieldName, member.id, obj.isSelected);\n      }\n\n      fieldList.members[memberName].isSelected = obj.isSelected;\n\n      if (fieldList.currrentMembers && fieldList.currrentMembers[memberName]) {\n        fieldList.currrentMembers[memberName].isSelected = obj.isSelected;\n      }\n\n      if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor && isHierarchy) {\n        list.push(obj);\n      }\n\n      this.parent.currentTreeItems.push(obj);\n      this.parent.searchTreeItems.push(obj);\n      this.parent.currentTreeItemsPos[memberName] = {\n        index: memberCount - 1,\n        isSelected: obj.isSelected\n      };\n      memberCount++;\n    }\n\n    this.parent.isDataOverflow = isHierarchy ? memberCount - 1 > this.parent.control.maxNodeLimitInMemberEditor : false;\n    return isHierarchy ? list : members;\n  };\n  /* eslint-disable */\n\n\n  EventBase.prototype.getOlapSearchTreeData = function (isInclude, members, fieldName) {\n    /* eslint-enable */\n    var cMembers = this.parent.engineModule.fieldList[fieldName].members;\n\n    for (var _i = 0, members_4 = members; _i < members_4.length; _i++) {\n      var member = members_4[_i];\n      var memberName = member.id.toString();\n\n      if (cMembers[memberName]) {\n        member.isSelected = cMembers[memberName].isSelected;\n      }\n\n      this.parent.searchTreeItems.push(member);\n    }\n\n    return members;\n  };\n\n  EventBase.prototype.updateChildNodeStates = function (members, fieldName, node, state) {\n    var cMembers = this.parent.engineModule.fieldList[fieldName].members;\n    var sMembers = this.parent.engineModule.fieldList[fieldName].currrentMembers;\n\n    for (var _i = 0, members_5 = members; _i < members_5.length; _i++) {\n      var member = members_5[_i];\n\n      if (member.pid && member.pid.toString() === node) {\n        cMembers[member.id].isSelected = state;\n\n        if (sMembers && sMembers[member.id]) {\n          sMembers[member.id].isSelected = state;\n        }\n\n        if (member.hasChildren) {\n          this.updateChildNodeStates(members, fieldName, member.id, state);\n        }\n      }\n    }\n  };\n  /* eslint-disable-next-line */\n\n  /**\n   * get the parent node of particular filter members.\n   * @hidden\n   */\n\n\n  EventBase.prototype.getParentNode = function (fieldName, item, filterObj) {\n    var members = this.parent.engineModule.fieldList[fieldName].members;\n\n    if (members[item].parent && item !== members[item].parent) {\n      var parentItem = members[item].parent;\n      filterObj[parentItem] = parentItem;\n      this.getParentNode(fieldName, parentItem, filterObj);\n    }\n\n    return filterObj;\n  };\n  /* eslint-disable */\n\n\n  EventBase.prototype.getFilteredTreeNodes = function (fieldName, members, filterObj, treeData, isHierarchy) {\n    /* eslint-enable */\n    var parentNodes = [];\n    var memberObject = this.parent.engineModule.fieldList[fieldName].members;\n    var selectedNodes = filterObj ? Object.keys(filterObj) : [];\n\n    for (var _i = 0, selectedNodes_1 = selectedNodes; _i < selectedNodes_1.length; _i++) {\n      var node = selectedNodes_1[_i];\n      var parent_1 = memberObject[node].parent;\n\n      if (parent_1 !== undefined && PivotUtil.inArray(parent_1, parentNodes) === -1) {\n        parentNodes.push(parent_1);\n      }\n    }\n\n    for (var _a = 0, members_6 = members; _a < members_6.length; _a++) {\n      var member = members_6[_a];\n      /* eslint-disable */\n\n      if (isNullOrUndefined(member.pid) || PivotUtil.inArray(member.pid, parentNodes) !== -1) {\n        treeData.push(member);\n        /* eslint-enable */\n\n        if (isNullOrUndefined(member.pid) && PivotUtil.inArray(member.id, parentNodes) !== -1) {\n          memberObject[member.id].isNodeExpand = true;\n        } else if (!isNullOrUndefined(member.pid) && PivotUtil.inArray(member.pid, parentNodes) !== -1) {\n          memberObject[member.id].isNodeExpand = false;\n          memberObject[member.pid].isNodeExpand = true;\n        } else {\n          memberObject[member.id].isNodeExpand = false;\n        }\n      } else {\n        memberObject[member.id].isNodeExpand = false;\n      }\n    }\n\n    return treeData;\n  };\n\n  return EventBase;\n}();\n\nexport { EventBase };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/common/actions/event-base.js"],"names":["isNullOrUndefined","removeClass","addClass","cls","PivotUtil","EventBase","parent","prototype","updateSorting","args","target","classList","contains","FILTER_COMMON_CLASS","REMOVE_CLASS","filterDialog","dialogPopUp","close","fieldName","checkisDescending","isDescending","id","slice","call","querySelectorAll","SORT_DESCEND_CLASS","parentElement","length","sortObj","getFieldByName","dataSourceSettings","sortSettings","i","name","splice","newSortObj","order","push","control","lastSortInfo","updateFiltering","fieldCaption","textContent","isInclude","filterItems","treeData","allowMemberFilter","dataType","getOlapData","members","getClonedData","engineModule","fieldList","dateMember","sort","a","b","actualText","filterObj","getFilterItemByName","filterSettings","isValidFilterItemsAvail","type","items","getTreeData","popupTarget","filterTargetID","moduleName","element","document","getElementById","parentID","createFilterDialog","isItemAvail","filterTypes","indexOf","field","formatFields","formattedMembers","_i","_a","item","isSearchEnabled","updatedTreeData","filterMembers","loadOnDemandInMemberEditor","getMembers","levelCount","levels","getFilterMembers","currrentMembers","searchMembers","isHierarchy","filterItemObj","dummyfilterItems","memberObject","filterItems_1","getParentNode","getFilteredTreeNodes","getOlapTreeData","sortOlapFilterData","caption","getParentIDs","treeObj","data","fields","dataSource","pid","data_1","li","getChildIDs","children","cID","data_2","searchTreeNodes","isFieldCollection","searchList","nonSearchList","list","list_1","querySelector","toLowerCase","value","enableNodes","ICON_DISABLE","disableNodes","searchList_1","currentNode","getAttribute","parentIDs","childIDs","pNodes","_b","nonSearchList_1","inArray","_c","nonSearchList_2","collapseAll","expandAll","undefined","searchTreeItems","updateOlapSearchTree","memberCount","_d","_e","currentTreeItems","maxNodeLimitInMemberEditor","editorLabelElement","innerText","localeObj","getConstant","height","allowExcelLikeFilter","isDataOverflow","style","display","text","isChecked","dataBind","Object","keys","members_1","isSelected","filterItems_2","searchData","getOlapSearchTreeData","currentTreeItemsPos","savedTreeFilterPos","isDateField","filterItems_3","modifiedFieldName","replace","members_2","member","memberName","formattedText","toString","nodeAttr","obj","htmlAttributes","index","isSearchRender","members_3","hasChildren","updateChildNodeStates","cMembers","members_4","node","state","sMembers","members_5","parentItem","parentNodes","selectedNodes","selectedNodes_1","parent_1","members_6","isNodeExpand"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, removeClass, addClass } from '@syncfusion/ej2-base';\nimport * as cls from '../base/css-constant';\nimport { PivotUtil } from '../../base/util';\n/**\n * `EventBase` for active fields action.\n */\n/** @hidden */\nvar EventBase = /** @class */ (function () {\n    /**\n     * Constructor for the dialog action.\n     * @param {PivotCommon} parent - parent.\n     * @hidden\n     */\n    function EventBase(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Updates sorting order for the selected field.\n     * @function updateSorting\n     * @param  {Event} args - Contains clicked element information to update dataSource.\n     * @returns {void}\n     * @hidden\n     */\n    EventBase.prototype.updateSorting = function (args) {\n        if (!(args.target.classList.contains(cls.FILTER_COMMON_CLASS)) &&\n            !(args.target.classList.contains(cls.REMOVE_CLASS))) {\n            if (this.parent.filterDialog.dialogPopUp) {\n                this.parent.filterDialog.dialogPopUp.close();\n            }\n            var target = args.target;\n            var fieldName = void 0;\n            var checkisDescending = void 0;\n            var isDescending = void 0;\n            if (target.id) {\n                fieldName = target.id;\n                checkisDescending = [].slice.call(target.querySelectorAll('.' + cls.SORT_DESCEND_CLASS));\n            }\n            else {\n                fieldName = target.parentElement.id;\n                checkisDescending = [].slice.call(target.parentElement.querySelectorAll('.' + cls.SORT_DESCEND_CLASS));\n            }\n            if (checkisDescending.length === 0) {\n                isDescending = false;\n            }\n            else {\n                isDescending = true;\n            }\n            //isDescending = (target.querySelectorAll(cls.SORT_DESCEND_CLASS));\n            var sortObj = PivotUtil.getFieldByName(fieldName, this.parent.dataSourceSettings.sortSettings);\n            if (!isNullOrUndefined(sortObj)) {\n                for (var i = 0; i < this.parent.dataSourceSettings.sortSettings.length; i++) {\n                    if (this.parent.dataSourceSettings.sortSettings[i].name === fieldName) {\n                        this.parent.dataSourceSettings.sortSettings.splice(i, 1);\n                        break;\n                    }\n                }\n                var newSortObj = { name: fieldName, order: isDescending ? 'Ascending' : 'Descending' };\n                // let newSortObj: ISort = { name: fieldName, order: isNone ? 'Ascending' : isDescending ? 'None' : 'Descending' };\n                this.parent.dataSourceSettings.sortSettings.push(newSortObj);\n            }\n            else {\n                var newSortObj = { name: fieldName, order: isDescending ? 'Ascending' : 'Descending' };\n                //let newSortObj: ISort = { name: fieldName, order: isNone ? 'Ascending' : isDescending ? 'None' : 'Descending'  };\n                this.parent.dataSourceSettings.sortSettings.push(newSortObj);\n            }\n            /* eslint-disable */\n            this.parent.control.lastSortInfo =\n                this.parent.dataSourceSettings.sortSettings[this.parent.dataSourceSettings.sortSettings.length - 1];\n            isDescending ? removeClass([target], cls.SORT_DESCEND_CLASS) : addClass([target], cls.SORT_DESCEND_CLASS);\n            /* eslint-enable */\n            // if (isDescending) {\n            //     removeClass([target], cls.SORT_DESCEND_CLASS);\n            //     addClass([target], cls.SORTING);\n            // } else if (!isDescending && !isNone) {\n            //     addClass([target], cls.SORT_DESCEND_CLASS);\n            // } else if (isNone) {\n            //     removeClass([target], cls.SORTING);\n            // } else if (!isNone) {\n            //     removeClass([target], cls.SORT_DESCEND_CLASS);\n            //     removeClass([target], cls.SORTING);\n            //    //addClass([target], cls.SORT_CLASS);\n            // }\n        }\n    };\n    /**\n     * Updates sorting order for the selected field.\n     * @function updateFiltering\n     * @param {Event} args - Contains clicked element information to update dataSource.\n     * @returns {void}\n     * @hidden\n     */\n    EventBase.prototype.updateFiltering = function (args) {\n        var target = args.target;\n        var fieldName = target.parentElement.id;\n        var fieldCaption = target.parentElement.textContent;\n        var isInclude = false;\n        var filterItems = [];\n        var treeData = []; /* eslint-disable-line */\n        if (this.parent.dataSourceSettings.allowMemberFilter) {\n            if (this.parent.dataType === 'olap') {\n                treeData = this.getOlapData(fieldName, isInclude);\n            }\n            else {\n                var members = PivotUtil.getClonedData(this.parent.engineModule.fieldList[fieldName].dateMember);\n                /* eslint-disable  */\n                members =\n                    this.parent.engineModule.fieldList[fieldName].sort === 'Ascending' ?\n                        (members.sort(function (a, b) { return (a.actualText > b.actualText) ? 1 :\n                            ((b.actualText > a.actualText) ? -1 : 0); })) :\n                        this.parent.engineModule.fieldList[fieldName].sort === 'Descending' ?\n                            (members.sort(function (a, b) { return (a.actualText < b.actualText) ? 1 :\n                                ((b.actualText < a.actualText) ? -1 : 0); })) :\n                            members;\n                /* eslint-enable  */\n                var filterObj = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n                if (!isNullOrUndefined(filterObj)) {\n                    isInclude = this.isValidFilterItemsAvail(fieldName, filterObj) && filterObj.type === 'Include' ? true : false;\n                    filterItems = filterObj.items ? filterObj.items : [];\n                }\n                treeData =\n                    this.getTreeData(isInclude, members, filterItems, fieldName);\n            }\n        }\n        if (this.parent.filterDialog.dialogPopUp) {\n            this.parent.filterDialog.dialogPopUp.close();\n        }\n        var popupTarget = this.parent.control.filterTargetID;\n        if (isNullOrUndefined(popupTarget)) {\n            popupTarget = this.parent.moduleName !== 'pivotfieldlist' ?\n                this.parent.element : document.getElementById(this.parent.parentID + '_Wrapper');\n        }\n        this.parent.filterDialog.createFilterDialog(treeData, fieldName, fieldCaption, popupTarget);\n    };\n    /**\n     * Returns boolean by checing the valid filter members from the selected filter settings.\n     * @function isValidFilterItemsAvail\n     * @param {string} fieldName - Gets filter members for the given field name.\n     * @param {IFilter} filterObj - filterObj.\n     * @returns {boolean} - boolean.\n     * @hidden\n     */\n    EventBase.prototype.isValidFilterItemsAvail = function (fieldName, filterObj) {\n        var isItemAvail = false;\n        var filterTypes = ['Include', 'Exclude'];\n        if (filterObj && filterTypes.indexOf(filterObj.type) >= 0) {\n            var engineModule = this.parent.engineModule;\n            var field = engineModule.fieldList[fieldName];\n            var members = (engineModule.formatFields[fieldName] &&\n                (['date', 'dateTime', 'time'].indexOf(engineModule.formatFields[fieldName].type) > -1)) ?\n                field.formattedMembers : field.members;\n            for (var _i = 0, _a = filterObj.items; _i < _a.length; _i++) {\n                var item = _a[_i];\n                if (members[item]) {\n                    isItemAvail = true;\n                    break;\n                }\n            }\n        }\n        return isItemAvail;\n    };\n    /* eslint-disable */\n    EventBase.prototype.getOlapData = function (fieldName, isInclude) {\n        var treeData = [];\n        var filterItems = [];\n        this.parent.filterDialog.isSearchEnabled = false;\n        var updatedTreeData = [];\n        /* eslint-enable */\n        var engineModule = this.parent.engineModule;\n        var filterObj = PivotUtil.getFilterItemByName(fieldName, this.parent.dataSourceSettings.filterSettings);\n        if (engineModule.fieldList[fieldName].filterMembers.length === 0) {\n            if (!this.parent.control.loadOnDemandInMemberEditor) {\n                engineModule.getMembers(this.parent.dataSourceSettings, fieldName, true);\n            }\n            else if (filterObj && filterObj.levelCount > 1 && engineModule.fieldList[fieldName].levels.length > 1) {\n                engineModule.getFilterMembers(this.parent.dataSourceSettings, fieldName, filterObj.levelCount);\n            }\n            else {\n                engineModule.fieldList[fieldName].levelCount = 1;\n                engineModule.getMembers(this.parent.dataSourceSettings, fieldName);\n            }\n        }\n        else {\n            engineModule.fieldList[fieldName].currrentMembers = {};\n            engineModule.fieldList[fieldName].searchMembers = [];\n        }\n        var isHierarchy = engineModule.fieldList[fieldName].isHierarchy;\n        /* eslint-disable */\n        treeData = engineModule.fieldList[fieldName].filterMembers;\n        /* eslint-enable */\n        if (!isNullOrUndefined(filterObj)) {\n            isInclude = filterObj.type ? filterObj.type === 'Include' ? true : false : true;\n            filterItems = filterObj.items ? filterObj.items : [];\n        }\n        var filterItemObj = {};\n        var dummyfilterItems = {};\n        var memberObject = engineModule.fieldList[fieldName].members;\n        for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {\n            var item = filterItems_1[_i];\n            filterItemObj[item] = item;\n            dummyfilterItems[item] = item;\n            if (memberObject[item]) {\n                dummyfilterItems = this.getParentNode(fieldName, item, dummyfilterItems);\n            }\n        }\n        treeData = this.getFilteredTreeNodes(fieldName, treeData, dummyfilterItems, updatedTreeData, isHierarchy);\n        treeData = this.getOlapTreeData(isInclude, PivotUtil.getClonedData(treeData), filterItemObj, fieldName, isHierarchy);\n        treeData = this.sortOlapFilterData(treeData, engineModule.fieldList[fieldName].sort);\n        return treeData;\n    };\n    /* eslint-disable-next-line */\n    /**\n     * Gets sorted filter members for the selected field.\n     * @function sortOlapFilterData\n     * @param {{ [key: string]: Object }[]} treeData - Gets filter members for the given field name.\n     * @param {string} order - order.\n     * @returns {{ [key: string]: Object }[]} - return.\n     * @hidden\n     */\n    EventBase.prototype.sortOlapFilterData = function (treeData, order) {\n        if (treeData.length > 0) {\n            treeData = order === 'Ascending' ?\n                (treeData.sort(function (a, b) { return (a.caption > b.caption) ? 1 :\n                    ((b.caption > a.caption) ? -1 : 0); })) : order === 'Descending' ?\n                (treeData.sort(function (a, b) { return (a.caption < b.caption) ? 1 :\n                    ((b.caption < a.caption) ? -1 : 0); })) : treeData;\n        }\n        return treeData;\n    };\n    EventBase.prototype.getParentIDs = function (treeObj, id, parent) {\n        /* eslint-disable */\n        var data = treeObj.fields.dataSource;\n        /* eslint-enable */\n        var pid;\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var li = data_1[_i];\n            if (li.id === id) {\n                pid = li.pid;\n                break;\n            }\n        }\n        if (pid) {\n            parent.push(pid);\n            this.getParentIDs(treeObj, pid, parent);\n        }\n        return parent;\n    };\n    EventBase.prototype.getChildIDs = function (treeObj, id, children) {\n        /* eslint-disable */\n        var data = treeObj.fields.dataSource;\n        /* eslint-enable */\n        var cID;\n        for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {\n            var li = data_2[_i];\n            if (li.pid === id) {\n                cID = li.id;\n                break;\n            }\n        }\n        if (cID) {\n            children.push(cID);\n            this.getParentIDs(treeObj, cID, children);\n        }\n        return children;\n    };\n    /**\n     * show tree nodes using search text.\n     * @hidden\n     */\n    /* eslint-disable  */\n    EventBase.prototype.searchTreeNodes = function (args, treeObj, isFieldCollection, isHierarchy) {\n        if (isFieldCollection) {\n            var searchList = [];\n            var nonSearchList = [];\n            var list = [].slice.call(treeObj.element.querySelectorAll('li'));\n            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n                var element = list_1[_i];\n                if ((element.querySelector('.e-list-text').textContent.toLowerCase()).indexOf(args.value.toLowerCase()) > -1) {\n                    searchList.push(element);\n                }\n                else {\n                    nonSearchList.push(element);\n                }\n            }\n            treeObj.enableNodes(searchList);\n            removeClass(searchList, cls.ICON_DISABLE);\n            treeObj.disableNodes(nonSearchList);\n            addClass(nonSearchList, cls.ICON_DISABLE);\n            if (searchList.length > 0 && nonSearchList.length > 0) {\n                for (var _a = 0, searchList_1 = searchList; _a < searchList_1.length; _a++) {\n                    var currentNode = searchList_1[_a];\n                    var id = currentNode.getAttribute('data-uid');\n                    var parentIDs = this.getParentIDs(treeObj, id, []);\n                    var childIDs = this.getChildIDs(treeObj, id, []);\n                    var pNodes = [];\n                    if (parentIDs.length > 0) {\n                        for (var _b = 0, nonSearchList_1 = nonSearchList; _b < nonSearchList_1.length; _b++) {\n                            var li = nonSearchList_1[_b];\n                            if (PivotUtil.inArray(li.getAttribute('data-uid'), parentIDs) !== -1) {\n                                pNodes.push(li);\n                            }\n                        }\n                    }\n                    if (childIDs.length > 0) {\n                        for (var _c = 0, nonSearchList_2 = nonSearchList; _c < nonSearchList_2.length; _c++) {\n                            var li = nonSearchList_2[_c];\n                            if (PivotUtil.inArray(li.getAttribute('data-uid'), childIDs) !== -1) {\n                                pNodes.push(li);\n                            }\n                        }\n                    }\n                    treeObj.enableNodes(pNodes);\n                    removeClass(pNodes, cls.ICON_DISABLE);\n                }\n            }\n            if ([].slice.call(treeObj.element.querySelectorAll('li.' + cls.ICON_DISABLE)).length === 0) {\n                treeObj.collapseAll();\n            }\n            else {\n                treeObj.expandAll(undefined, undefined, true);\n            }\n        }\n        else {\n            this.parent.searchTreeItems = [];\n            if (this.parent.dataType === 'olap' && !isHierarchy) {\n                this.updateOlapSearchTree(args, treeObj, isHierarchy);\n            }\n            else {\n                var searchList = [];\n                var memberCount = 0;\n                memberCount = 1;\n                for (var _d = 0, _e = this.parent.currentTreeItems; _d < _e.length; _d++) {\n                    var item = _e[_d];\n                    if (item.name.toLowerCase().indexOf(args.value.toLowerCase()) > -1) {\n                        this.parent.searchTreeItems.push(item);\n                        if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor) {\n                            searchList.push(item);\n                        }\n                        memberCount++;\n                    }\n                }\n                memberCount--;\n                if (memberCount > this.parent.control.maxNodeLimitInMemberEditor) {\n                    this.parent.editorLabelElement.innerText = (memberCount - this.parent.control.maxNodeLimitInMemberEditor) +\n                        this.parent.control.localeObj.getConstant('editorDataLimitMsg');\n                    this.parent.filterDialog.dialogPopUp.height = (this.parent.filterDialog.allowExcelLikeFilter ? '440px' : '400px');\n                    this.parent.isDataOverflow = true;\n                }\n                else {\n                    this.parent.editorLabelElement.innerText = '';\n                    this.parent.filterDialog.dialogPopUp.height = (this.parent.filterDialog.allowExcelLikeFilter ? '400px' : '350px');\n                    this.parent.isDataOverflow = false;\n                }\n                this.parent.isDataOverflow = (memberCount > this.parent.control.maxNodeLimitInMemberEditor);\n                this.parent.editorLabelElement.parentElement.style.display = this.parent.isDataOverflow ? 'block' : 'none';\n                treeObj.fields = { dataSource: searchList, id: 'id', text: 'name', isChecked: 'isSelected', parentID: 'pid' };\n                treeObj.dataBind();\n            }\n        }\n    };\n    EventBase.prototype.updateOlapSearchTree = function (args, treeObj, isHierarchy) {\n        var treeData = [];\n        var filterDialog = this.parent.filterDialog.dialogPopUp.element;\n        var fieldName = filterDialog.getAttribute('data-fieldname');\n        if (args.value.toLowerCase() === '') {\n            this.parent.filterDialog.isSearchEnabled = false;\n            this.parent.engineModule.fieldList[fieldName].searchMembers = [];\n            // (this.parent.engineModule.fieldList[fieldName] as IOlapField).currrentMembers = {};\n            var updatedTreeData = [];\n            var filterItemObj = {};\n            var dummyfilterItems = {};\n            var memberObject = this.parent.engineModule.fieldList[fieldName].members;\n            var members = Object.keys(memberObject);\n            var filterItems = [];\n            for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n                var item = members_1[_i];\n                if (memberObject[item].isSelected) {\n                    if (!(memberObject[item].parent && memberObject[memberObject[item].parent].isSelected)) {\n                        filterItems.push(item);\n                    }\n                }\n            }\n            for (var _a = 0, filterItems_2 = filterItems; _a < filterItems_2.length; _a++) {\n                var item = filterItems_2[_a];\n                filterItemObj[item] = item;\n                dummyfilterItems[item] = item;\n                if (memberObject[item]) {\n                    dummyfilterItems = this.getParentNode(fieldName, item, dummyfilterItems);\n                }\n            }\n            var searchData = this.parent.engineModule.fieldList[fieldName].filterMembers;\n            treeData = this.getFilteredTreeNodes(fieldName, searchData, dummyfilterItems, updatedTreeData, isHierarchy);\n            treeData = this.getOlapTreeData(true, PivotUtil.getClonedData(treeData), filterItemObj, fieldName, isHierarchy, true);\n        }\n        else {\n            this.parent.filterDialog.isSearchEnabled = true;\n            var searchData = this.parent.engineModule.fieldList[fieldName].searchMembers;\n            treeData = PivotUtil.getClonedData(searchData);\n            treeData = this.getOlapSearchTreeData(true, treeData, fieldName);\n        }\n        treeObj.fields = { dataSource: treeData, id: 'id', text: 'name', isChecked: 'isSelected', parentID: 'pid' };\n        treeObj.dataBind();\n    };\n    EventBase.prototype.getTreeData = function (isInclude, members, filterItems, fieldName) {\n        this.parent.currentTreeItems = [];\n        this.parent.searchTreeItems = [];\n        this.parent.currentTreeItemsPos = {};\n        this.parent.savedTreeFilterPos = {};\n        var engineModule = this.parent.engineModule;\n        this.parent.isDateField = engineModule.formatFields[fieldName] &&\n            ((['date', 'dateTime', 'time']).indexOf(engineModule.formatFields[fieldName].type) > -1);\n        var list = [];\n        var memberCount = 1;\n        var filterObj = {};\n        for (var _i = 0, filterItems_3 = filterItems; _i < filterItems_3.length; _i++) {\n            var item = filterItems_3[_i];\n            filterObj[item] = item;\n        }\n        var modifiedFieldName = fieldName.replace(/[^a-zA-Z0-9 ]/g, '_');\n        for (var _a = 0, members_2 = members; _a < members_2.length; _a++) {\n            var member = members_2[_a];\n            var memberName = this.parent.isDateField ? member.formattedText : member.actualText.toString();\n            /* eslint-disable */\n            var nodeAttr = { 'data-fieldName': fieldName, 'data-memberId': member.actualText.toString() };\n            var obj = {\n                id: modifiedFieldName + '_' + memberCount,\n                htmlAttributes: nodeAttr,\n                actualText: member.actualText,\n                name: memberName,\n                isSelected: isInclude ? false : true\n            };\n            /* eslint-enable */\n            if (filterObj[memberName] !== undefined) {\n                obj.isSelected = isInclude ? true : false;\n            }\n            if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor) {\n                list.push(obj);\n            }\n            if (!obj.isSelected) {\n                this.parent.savedTreeFilterPos[memberCount - 1] = memberName;\n            }\n            this.parent.currentTreeItems.push(obj);\n            this.parent.searchTreeItems.push(obj);\n            this.parent.currentTreeItemsPos[member.actualText] = { index: memberCount - 1, isSelected: obj.isSelected };\n            memberCount++;\n        }\n        this.parent.isDataOverflow = ((memberCount - 1) > this.parent.control.maxNodeLimitInMemberEditor);\n        return list;\n    };\n    /* eslint-disable */\n    EventBase.prototype.getOlapTreeData = function (isInclude, members, filterObj, fieldName, isHierarchy, isSearchRender) {\n        var engineModule = this.parent.engineModule;\n        var fieldList = engineModule.fieldList[fieldName];\n        this.parent.currentTreeItems = [];\n        this.parent.searchTreeItems = [];\n        this.parent.currentTreeItemsPos = {};\n        var list = [];\n        var memberCount = 1;\n        for (var _i = 0, members_3 = members; _i < members_3.length; _i++) {\n            var member = members_3[_i];\n            var obj = member;\n            /* eslint-enable */\n            var memberName = member.id.toString();\n            if (!isSearchRender) {\n                obj.isSelected = isInclude ? false : true;\n            }\n            if (filterObj[memberName] !== undefined) {\n                obj.isSelected = isInclude ? true : false;\n            }\n            if (!isSearchRender && member.hasChildren) {\n                this.updateChildNodeStates(fieldList.filterMembers, fieldName, member.id, obj.isSelected);\n            }\n            fieldList.members[memberName].isSelected = obj.isSelected;\n            if (fieldList.currrentMembers && fieldList.currrentMembers[memberName]) {\n                fieldList.currrentMembers[memberName].isSelected = obj.isSelected;\n            }\n            if (memberCount <= this.parent.control.maxNodeLimitInMemberEditor && isHierarchy) {\n                list.push(obj);\n            }\n            this.parent.currentTreeItems.push(obj);\n            this.parent.searchTreeItems.push(obj);\n            this.parent.currentTreeItemsPos[memberName] = { index: memberCount - 1, isSelected: obj.isSelected };\n            memberCount++;\n        }\n        this.parent.isDataOverflow = isHierarchy ? ((memberCount - 1) > this.parent.control.maxNodeLimitInMemberEditor) : false;\n        return isHierarchy ? list : members;\n    };\n    /* eslint-disable */\n    EventBase.prototype.getOlapSearchTreeData = function (isInclude, members, fieldName) {\n        /* eslint-enable */\n        var cMembers = this.parent.engineModule.fieldList[fieldName].members;\n        for (var _i = 0, members_4 = members; _i < members_4.length; _i++) {\n            var member = members_4[_i];\n            var memberName = member.id.toString();\n            if (cMembers[memberName]) {\n                member.isSelected = cMembers[memberName].isSelected;\n            }\n            this.parent.searchTreeItems.push(member);\n        }\n        return members;\n    };\n    EventBase.prototype.updateChildNodeStates = function (members, fieldName, node, state) {\n        var cMembers = this.parent.engineModule.fieldList[fieldName].members;\n        var sMembers = this.parent.engineModule.fieldList[fieldName].currrentMembers;\n        for (var _i = 0, members_5 = members; _i < members_5.length; _i++) {\n            var member = members_5[_i];\n            if (member.pid && member.pid.toString() === node) {\n                cMembers[member.id].isSelected = state;\n                if (sMembers && sMembers[member.id]) {\n                    sMembers[member.id].isSelected = state;\n                }\n                if (member.hasChildren) {\n                    this.updateChildNodeStates(members, fieldName, member.id, state);\n                }\n            }\n        }\n    };\n    /* eslint-disable-next-line */\n    /**\n     * get the parent node of particular filter members.\n     * @hidden\n     */\n    EventBase.prototype.getParentNode = function (fieldName, item, filterObj) {\n        var members = this.parent.engineModule.fieldList[fieldName].members;\n        if (members[item].parent && item !== members[item].parent) {\n            var parentItem = members[item].parent;\n            filterObj[parentItem] = parentItem;\n            this.getParentNode(fieldName, parentItem, filterObj);\n        }\n        return filterObj;\n    };\n    /* eslint-disable */\n    EventBase.prototype.getFilteredTreeNodes = function (fieldName, members, filterObj, treeData, isHierarchy) {\n        /* eslint-enable */\n        var parentNodes = [];\n        var memberObject = this.parent.engineModule.fieldList[fieldName].members;\n        var selectedNodes = filterObj ? Object.keys(filterObj) : [];\n        for (var _i = 0, selectedNodes_1 = selectedNodes; _i < selectedNodes_1.length; _i++) {\n            var node = selectedNodes_1[_i];\n            var parent_1 = memberObject[node].parent;\n            if (parent_1 !== undefined && PivotUtil.inArray(parent_1, parentNodes) === -1) {\n                parentNodes.push(parent_1);\n            }\n        }\n        for (var _a = 0, members_6 = members; _a < members_6.length; _a++) {\n            var member = members_6[_a];\n            /* eslint-disable */\n            if (isNullOrUndefined(member.pid) || PivotUtil.inArray(member.pid, parentNodes) !== -1) {\n                treeData.push(member);\n                /* eslint-enable */\n                if (isNullOrUndefined(member.pid) && PivotUtil.inArray(member.id, parentNodes) !== -1) {\n                    memberObject[member.id].isNodeExpand = true;\n                }\n                else if (!isNullOrUndefined(member.pid) && PivotUtil.inArray(member.pid, parentNodes) !== -1) {\n                    memberObject[member.id].isNodeExpand = false;\n                    memberObject[member.pid].isNodeExpand = true;\n                }\n                else {\n                    memberObject[member.id].isNodeExpand = false;\n                }\n            }\n            else {\n                memberObject[member.id].isNodeExpand = false;\n            }\n        }\n        return treeData;\n    };\n    return EventBase;\n}());\nexport { EventBase };\n"]},"metadata":{},"sourceType":"module"}