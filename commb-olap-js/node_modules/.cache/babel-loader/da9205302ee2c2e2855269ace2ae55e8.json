{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/**\n * Selection src file\n */\n\n\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\n\nvar Selection = function (_super) {\n  __extends(Selection, _super);\n  /**\n   * Constructor for selection module.\n   *\n   * @private\n   */\n\n\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n\n    _this.addEventListener();\n\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   */\n\n\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.completeSelection, this);\n    this.chart.on('click', this.calculateSelectedElements, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n  };\n  /**\n   * Chart mouse down\n   */\n\n\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\n   * UnBinding events for selection module.\n   */\n\n\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n    this.chart.off('click', this.calculateSelectedElements);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.completeSelection);\n  };\n  /**\n   * To find private variable values\n   */\n\n\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   *\n   * @returns {void}\n   */\n\n\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n\n      if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n\n    return 'undefined';\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n    }\n  };\n  /**\n   *  Method to get the selected index element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getElementByIndex = function (chart, index, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = !series.isRectSeries && series.type !== 'Scatter' && series.type !== 'Bubble' && series.marker.visible ? elementId + '_Symbol' + suffix : elementId;\n    return [getElement(elementId), (series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\n   *  Method to get the selected cluster element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n        clusters.push(this.getElementByIndex(chart, index)[0]);\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n        this.findTrackballElements(selectedElements, seriesStyle);\n\n        if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[clusters.length - 1].id) {\n          this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n        }\n      }\n    }\n\n    return clusters;\n  };\n  /**\n   *  Method to get trackball elements\n   *\n   * @private\n   */\n\n\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n\n        if (trackballElements.length > 0) {\n          elements = [];\n\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selected element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.findElements = function (chart, series, index, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix);\n    }\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.isAlreadySelected = function (event) {\n    var targetElem = event.target;\n\n    if (event.type === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (event.type === 'mousemove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (event.type === 'click') {\n        return false;\n      }\n    }\n\n    if (this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode.id;\n      var isElement = void 0;\n\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || event.type === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.calculateSelectedElements = function (event) {\n    if (isNullOrUndefined(event.target)) {\n      return;\n    }\n\n    var targetElement = event.target;\n\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n\n    if (event.type === 'mousemove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n\n    this.isAlreadySelected(event);\n\n    if (targetElement.id.indexOf('_Series_') > -1) {\n      var element = void 0;\n\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\n   *  Method to perform the selection\n   *\n   * @private\n   */\n\n\n  Selection.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n\n    if (chart.series[index.series].type === 'BoxAndWhisker' && element && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n\n    if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n    }\n\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        break;\n\n      case 'Point':\n        if (!isNaN(index.point) && element) {\n          this.selection(chart, index, [element]);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n\n        break;\n\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n\n        break;\n    }\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n\n            if (!isNaN(pointIndex)) {\n              yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n\n              if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : 0;\n        selectedPointValues.push({\n          seriesIndex: seriesIndex\n        });\n      }\n    } else if (selectionMode === 'Point') {\n      for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n        pointIndex = this.selectedDataIndexes[i].point;\n        seriesIndex = this.selectedDataIndexes[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   *  Method to perform selection\n   *\n   * @private\n   */\n\n\n  Selection.prototype.selection = function (chart, index, selectedElements) {\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n\n    if (!isNullOrUndefined(selectedElements[0])) {\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n\n      if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   *  Method to get the cluster selection element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Method to remove the multi selected elements\n   *\n   * @private\n   */\n\n\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i]));\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Method to remove the selection\n   *\n   * @private\n   */\n\n\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n    if (legendClick === void 0) {\n      legendClick = false;\n    }\n\n    var visibility = this.checkVisibility(this.highlightDataIndexes) || this.checkVisibility(this.selectedDataIndexes); // legend click scenario\n\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n        }\n      }\n    }\n  };\n  /**\n   * Method to add the add/remove class to element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n    var children = this.isSeriesMode ? [element] : element.childNodes;\n\n    if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n      children = element.children;\n    }\n\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n\n      if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n\n    if (this.control.legendModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n        }\n\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.unselected);\n          this.removeSvgClass(legendShape, className);\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n          }\n        }\n\n        if (legendClick && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to apply the styles\n   *\n   * @private\n   */\n\n\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n      }\n    }\n  };\n  /**\n   *  Method to get the selection class\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n  };\n  /**\n   *  Method to remove styles\n   *\n   * @private\n   */\n\n\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n      }\n    }\n  };\n  /**\n   *  Method to remove the selected data index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   *  Method to get the equal index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * To redraw the selected points.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n\n    if (!isNullOrUndefined(oldMode)) {\n      if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /** @private */\n\n\n  Selection.prototype.legendSelection = function (chart, series, event) {\n    var targetElement = event.target;\n\n    if (event.type === 'mousemove') {\n      if (event.target.id.indexOf('text') > 1) {\n        targetElement = getElement(event.target.id.replace('text', 'shape'));\n      }\n\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n\n      this.currentMode = this.chart.highlightMode;\n    }\n\n    var isPreSelected = this.isAlreadySelected(event);\n\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n\n        var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n\n        for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n          var seriesElement = seriesElements_1[_b];\n\n          if (isNullOrUndefined(seriesElement)) {\n            return;\n          }\n\n          this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n        }\n\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true);\n      }\n    }\n  };\n\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /** @private */\n\n\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n\n    return seriesElements;\n  };\n  /** @private */\n\n\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Drag selection that returns the selected data.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n\n    var _loop_1 = function (series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n\n          if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n\n      _loop_1(series);\n    }\n\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n    var location = points.symbolLocations[0];\n\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Method to draw dragging rect.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = void 0;\n        rectElement = getElement(this.draggedRect + this.targetIndex);\n\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg'); // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect));\n        element.setAttribute('style', 'cursor:move;');\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg'); // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        } //element.setAttribute('style', 'cursor:move;');\n\n\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\n   * To get drag selected group element index from its id\n   *\n   * @param {string} id element id\n   */\n\n\n  Selection.prototype.getIndex = function (id) {\n    var i;\n\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\n   * Method to remove dragged element.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.removeDraggedElements = function (chart, event) {\n    if (event.target.id.indexOf(this.closeIconId) > -1 && event.type.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(event.target.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n\n          this.multiDataIndexes[index] = null;\n\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\n   * Method to resize the drag rect.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n\n    if (rectelement) {\n      rectelement.setAttribute('style', 'cursor:' + cursorStyle + ';');\n    }\n  };\n\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n\n    var seriesElements;\n\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      seriesElements = this.getSeriesElements(series);\n      this.removeStyles(seriesElements);\n\n      for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n        var seriesElement = seriesElements_2[_a];\n        this.removeStyles(this.getChildren(seriesElement));\n      }\n    }\n  };\n\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\n   * Method to move the dragged rect.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n    var rect;\n\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect, target);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  /**\n   * To complete the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.completeSelection = function (e) {\n    var chart = this.chart;\n\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n\n    this.currentMode = chart.selectionMode;\n\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, e);\n  };\n\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /** @private */\n\n\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /** @private */\n\n\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n\n    if (chart.highlightMode !== 'None') {\n      if (!isNullOrUndefined(target)) {\n        if (event.target.id.indexOf('text') > 1) {\n          target = getElement(event.target.id.replace('text', 'shape'));\n        }\n\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n\n        this.calculateSelectedElements(event);\n        return;\n      }\n    }\n\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n\n    if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n\n    if (insideMoving) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true, target);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        }\n      }\n\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(event);\n    }\n  };\n\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n\n        if (element === path) {\n          point.isSelect = true;\n\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n\n    this.seriesIndex = 0;\n  };\n  /**\n   * Get module name.\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.destroy = function () {\n    this.removeEventListener(); // Destroy method performed here\n  };\n\n  return Selection;\n}(BaseSelection);\n\nexport { Selection };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","completeSelection","calculateSelectedElements","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","suffix","elementId","point","isRectSeries","type","marker","visible","getClusterElements","clusters","seriesStyle","selectedElements","_a","push","document","querySelectorAll","findTrackballElements","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","event","targetElem","target","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","addOrRemoveIndex","indexFinder","targetElement","split","selectionEle","blurEffect","selection","isNaN","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","args","name","selectedDataValues","cancel","trigger","removeMultiSelectElements","isAdd","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","legendClick","visibility","checkVisibility","visibleSeries_1","checkSelectionElements","children","childNodes","elementClassName","parentClassName","legendShape","selectElement","addSvgClass","removeSvgClass","classList","symbolEle","control","seriesClassName","legendModule","legendSettings","trim","elements_1","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","replace","isPreSelected","isBlurEffectNeeded","seriesElements","_b","seriesElements_1","seriesElement","NaN","value","elements_3","symbolElement","ids","parseInt","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","j","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","getElementById","enableCanvas","drawRectangle","color","setAttribute","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","style","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_2","getChildren","ele","object","keys","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","dragging","pointChecking","getDragRect","chartAreaType","undefined","_c","isDragRect","isIos","isIos7","preventDefault","insideMoving","getPath","startX","startY","endX","endY","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection = /** @class */ (function (_super) {\n    __extends(Selection, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @private\n     */\n    function Selection(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.isdrawRect = true;\n        _this.multiDataIndexes = [];\n        _this.pathIndex = 0;\n        _this.seriesIndex = 0;\n        _this.count = -1;\n        _this.dragRectArray = [];\n        _this.filterArray = [];\n        _this.totalSelectedPoints = [];\n        _this.chart = chart;\n        _this.renderer = chart.renderer;\n        var mode = chart.selectionMode;\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.completeSelection, this);\n        this.chart.on('click', this.calculateSelectedElements, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n    };\n    /**\n     * Chart mouse down\n     */\n    Selection.prototype.mousedown = function (e) {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n            return;\n        }\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n        }\n    };\n    /**\n     * UnBinding events for selection module.\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n        this.chart.off('click', this.calculateSelectedElements);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.completeSelection);\n    };\n    /**\n     * To find private variable values\n     */\n    Selection.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n        }\n    };\n    Selection.prototype.generateStyle = function (series) {\n        if (series) {\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n                this.unselected = series.unSelectedStyle || this.unselected;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n                this.unselected = series.nonHighlightStyle || this.unselected;\n            }\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     *  Method to get the selected index element\n     *\n     * @private\n     */\n    Selection.prototype.getElementByIndex = function (chart, index, suffix) {\n        if (suffix === void 0) { suffix = ''; }\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n        var series = chart.series[index.series];\n        elementId = (!series.isRectSeries && series.type !== 'Scatter' && series.type !== 'Bubble' &&\n            series.marker.visible) ? (elementId + '_Symbol' + suffix) : elementId;\n        return [getElement(elementId), ((series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible) ?\n                getElement(elementId + '1') : null];\n    };\n    /**\n     *  Method to get the selected cluster element\n     *\n     * @private\n     */\n    Selection.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new Index(series.index, index.point);\n                clusters.push(this.getElementByIndex(chart, index)[0]);\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\n                this.findTrackballElements(selectedElements, seriesStyle);\n                if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[clusters.length - 1].id) {\n                    this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n                }\n            }\n        }\n        return clusters;\n    };\n    /**\n     *  Method to get trackball elements\n     *\n     * @private\n     */\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\n        var trackballElements;\n        var elements;\n        for (var i = 0; i < selectedElements.length; i++) {\n            if (!isNullOrUndefined(selectedElements[i])) {\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n                if (trackballElements.length > 0) {\n                    elements = [];\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n                            elements.push(trackballElements[i_1]);\n                        }\n                    }\n                    this.removeStyles(elements);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selected element\n     *\n     * @private\n     */\n    Selection.prototype.findElements = function (chart, series, index, suffix) {\n        if (suffix === void 0) { suffix = ''; }\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index, suffix);\n        }\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.isAlreadySelected = function (event) {\n        var targetElem = event.target;\n        if (event.type === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (event.type === 'mousemove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (event.type === 'click') {\n                return false;\n            }\n        }\n        if ((this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var parentNodeId = targetElem.parentNode.id;\n            var isElement = void 0;\n            if (targetElem.parentNode) {\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                if (this.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || event.type === 'click')) {\n                        this.previousSelectedEle[i].removeAttribute('class');\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateSelectedElements = function (event) {\n        if (isNullOrUndefined(event.target)) {\n            return;\n        }\n        var targetElement = event.target;\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n            return;\n        }\n        if (event.type === 'mousemove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(event);\n        if (targetElement.id.indexOf('_Series_') > -1) {\n            var element = void 0;\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n            }\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n                return null;\n            }\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     *  Method to perform the selection\n     *\n     * @private\n     */\n    Selection.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        if (chart.series[index.series].type === 'BoxAndWhisker' && element &&\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n            element = element.parentNode;\n        }\n        if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element &&\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\n            var className = this.generateStyle(chart.series[index.series]);\n            var selectionEle = document.querySelectorAll('.' + className);\n            this.findTrackballElements(selectionEle, className);\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n                break;\n            case 'Point':\n                if (!isNaN(index.point) && element) {\n                    this.selection(chart, index, [element]);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                                points[pointIndex].regions[0].y;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            if (series.category !== 'Indicator') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                    pointIndex: pointIndex\n                                });\n                            }\n                            if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series : 0;\n                selectedPointValues.push({\n                    seriesIndex: seriesIndex\n                });\n            }\n        }\n        else if (selectionMode === 'Point') {\n            for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                pointIndex = this.selectedDataIndexes[i].point;\n                seriesIndex = this.selectedDataIndexes[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                        points[pointIndex].regions[0].y;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     *  Method to perform selection\n     *\n     * @private\n     */\n    Selection.prototype.selection = function (chart, index, selectedElements) {\n        if (!(this.currentMode === 'Lasso')) {\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\n                chart.selectionMode !== 'None')) {\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n            }\n        }\n        if (!isNullOrUndefined(selectedElements[0])) {\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (className !== '' && this.currentMode !== 'Cluster') {\n                this.findTrackballElements(selectedElements, className);\n            }\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles([selectedElements[0].parentNode]);\n            }\n            else {\n                this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     *  Method to get the cluster selection element\n     *\n     * @private\n     */\n    Selection.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Method to remove the multi selected elements\n     *\n     * @private\n     */\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i]));\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Method to remove the selection\n     *\n     * @private\n     */\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n        if (legendClick === void 0) { legendClick = false; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (series.visible) {\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                }\n            }\n        }\n    };\n    /**\n     * Method to add the add/remove class to element\n     *\n     * @private\n     */\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n        var children = (this.isSeriesMode ? [element] : element.childNodes);\n        if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n            children = (element.children);\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n                className = (parentClassName.indexOf('selection') > 0 ||\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                this.addSvgClass(children[i], className);\n            }\n        }\n        if (element.id.indexOf('Symbol') > -1) {\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\n                === className) {\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n                if (seriesClassName.indexOf(this.unselected) > -1) {\n                    this.removeSvgClass(symbolEle, this.unselected);\n                }\n            }\n        }\n        if (this.control.legendModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                }\n                elementClassName = selectElement.getAttribute('class') || '';\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                    }\n                }\n                if (legendClick && parentClassName.indexOf(className) > -1) {\n                    this.addSvgClass(legendShape, className);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to apply the styles\n     *\n     * @private\n     */\n    Selection.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n            }\n        }\n    };\n    /**\n     *  Method to get the selection class\n     *\n     * @private\n     */\n    Selection.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n    };\n    /**\n     *  Method to remove styles\n     *\n     * @private\n     */\n    Selection.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n            }\n        }\n    };\n    /**\n     *  Method to remove the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     *  Method to get the equal index\n     *\n     * @private\n     */\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * To redraw the selected points.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!isNullOrUndefined(oldMode)) {\n            if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /** @private */\n    Selection.prototype.legendSelection = function (chart, series, event) {\n        var targetElement = event.target;\n        if (event.type === 'mousemove') {\n            if (event.target.id.indexOf('text') > 1) {\n                targetElement = getElement(event.target.id.replace('text', 'shape'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(event);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n                    var seriesElement = seriesElements_1[_b];\n                    if (isNullOrUndefined(seriesElement)) {\n                        return;\n                    }\n                    this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n                }\n                this.isSeriesMode = true;\n                this.selection(chart, new Index(series, NaN), seriesElements);\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, true);\n            }\n        }\n    };\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /** @private */\n    Selection.prototype.getSeriesElements = function (series) {\n        var seriesElements = [series.seriesElement];\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        return seriesElements;\n    };\n    /** @private */\n    Selection.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('SeriesGroup') > -1) {\n            ids = id.split('SeriesGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('SymbolGroup') > -1) {\n            ids = id.split('SymbolGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('_Point_') > -1) {\n            ids = id.split('_Series_')[1].split('_Point_');\n        }\n        else if (id.indexOf('_Series_') > -1) {\n            ids[0] = id.split('_Series_')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Drag selection that returns the selected data.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        var isLasso = chart.selectionMode === 'Lasso';\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n        this.removeOffset(rect, axisOffset);\n        var points;\n        var index;\n        var selectedPointValues = [];\n        var selectedSeriesValues = [];\n        this.isSeriesMode = false;\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        if (dragRect.width && dragRect.height && !isClose) {\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n            this.removeOffset(rt, axisOffset);\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n        }\n        var _loop_1 = function (series) {\n            if (series.visible) {\n                points = series.points;\n                selectedPointValues = [];\n                var xAxisOffset_1;\n                var yAxisOffset_1;\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n                }\n                else {\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n                }\n                for (var j = 0; j < points.length; j++) {\n                    var yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[j].yValue :\n                        points[j].regions[0].y;\n                    var isCurrentPoint = void 0;\n                    var selectedPointX = points[j].xValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[j].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[j].xValue);\n                    }\n                    if (series.type === 'BoxAndWhisker') {\n                        isCurrentPoint = points[j].regions.some(function (region) {\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n                        });\n                    }\n                    else {\n                        if (chart.selectionMode === 'Lasso') {\n                            isCurrentPoint = points[j].isSelect;\n                        }\n                        else {\n                            isCurrentPoint = (chart.allowMultiSelection) ?\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) :\n                                points[j].symbolLocations.some(function (location) {\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n                                });\n                        }\n                    }\n                    if (isCurrentPoint && series.category !== 'Indicator') {\n                        index = new Index(series.index, points[j].index);\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index));\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\n                    }\n                    if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\n                    }\n                }\n                selectedSeriesValues.push(selectedPointValues);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\n        if (!isClose) {\n            this.createCloseButton(x, y);\n        }\n        var args = {\n            name: dragComplete,\n            selectedDataValues: selectedSeriesValues,\n            cancel: false\n        };\n        chart.trigger(dragComplete, args);\n    };\n    Selection.prototype.removeOffset = function (rect, clip) {\n        rect.x -= clip.x;\n        rect.y -= clip.y;\n    };\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n        var location = points.symbolLocations[0];\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n            var rect = rectCollection_1[_i];\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Method to draw dragging rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n        var border = chart.chartArea.border.width;\n        var rectFill = chart.themeStyle.selectionRectFill;\n        var rectStroke = chart.themeStyle.selectionRectStroke;\n        var isLasso = chart.selectionMode === 'Lasso';\n        if (this.isdrawRect) {\n            cartesianLayout.x = cartesianLayout.x - border / 2;\n            cartesianLayout.y = cartesianLayout.y - border / 2;\n            cartesianLayout.width = cartesianLayout.width + border;\n            cartesianLayout.height = cartesianLayout.height + border;\n            this.isdrawRect = false;\n        }\n        switch (chart.selectionMode) {\n            case 'DragX':\n                dragRect.y = cartesianLayout.y;\n                dragRect.height = cartesianLayout.height;\n                break;\n            case 'DragY':\n                dragRect.x = cartesianLayout.x;\n                dragRect.width = cartesianLayout.width;\n                break;\n        }\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n            return null;\n        }\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n        if ((chart.allowMultiSelection) && isDragMode) {\n            var element = void 0;\n            var dragGroup = void 0;\n            var multiGroup = getElement(this.multiRectGroup);\n            if (!multiGroup) {\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\n                chart.svgObject.appendChild(multiGroup);\n            }\n            if (this.rectGrabbing || this.resizing) {\n                var rectElement = void 0;\n                rectElement = getElement(this.draggedRect + this.targetIndex);\n                if (rectElement.nextSibling) {\n                    remove(rectElement.nextSibling);\n                }\n                this.setAttributes(rectElement, dragRect);\n            }\n            else if (!getElement(this.draggedRectGroup + this.count)) {\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n            }\n            if (!(chart.selectionMode === 'Lasso')) {\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                element.setAttribute('style', 'cursor:move;');\n            }\n            else {\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n            }\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\n            }\n            else if (!this.rectGrabbing && !this.resizing) {\n                dragGroup.appendChild(element);\n            }\n        }\n        else {\n            var element = isLasso ?\n                getElement(this.lassoPath) : getElement(this.draggedRect);\n            if (this.closeIcon) {\n                removeElement(this.closeIconId);\n            }\n            if (element) {\n                if (isLasso) {\n                    element.setAttribute('d', this.path);\n                }\n                else {\n                    this.setAttributes(element, dragRect);\n                }\n            }\n            else {\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n                if (!(chart.selectionMode === 'Lasso')) {\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                }\n                else {\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n                }\n                //element.setAttribute('style', 'cursor:move;');\n                dragGroup.appendChild(element);\n            }\n        }\n    };\n    /**\n     * To get drag selected group element index from its id\n     *\n     * @param {string} id element id\n     */\n    Selection.prototype.getIndex = function (id) {\n        var i;\n        for (i = id.length - 1; i > 0; i--) {\n            var x = Number(id[i]);\n            if (!isNaN(x)) {\n                continue;\n            }\n            else {\n                break;\n            }\n        }\n        var index = +id.substr(i + 1, id.length - 1);\n        return index;\n    };\n    Selection.prototype.createCloseButton = function (x, y) {\n        var isMultiDrag = this.chart.allowMultiSelection;\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n        var isDrag = this.rectGrabbing || this.resizing;\n        var closeIcon = this.chart.svgRenderer.createGroup({\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\n            style: 'cursor:pointer; visibility: visible;'\n        });\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\n            ' L ' + (x + 4) + ' ' + (y - 4);\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n            id: this.closeIconId + '_cross' +\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\n        }));\n        this.closeIcon = closeIcon;\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\n        if (pathElement) {\n            pathElement.appendChild(closeIcon);\n        }\n    };\n    /**\n     * Method to remove dragged element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.removeDraggedElements = function (chart, event) {\n        if ((event.target.id.indexOf(this.closeIconId) > -1) && (event.type.indexOf('move') === -1)) {\n            var isSelectedvalues = true;\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(event.target.id);\n                var multiRectGroupElement = getElement(this.multiRectGroup);\n                remove(getElement(this.draggedRectGroup + index));\n                this.dragRectArray[index] = null;\n                this.filterArray[index] = null;\n                this.totalSelectedPoints[index] = null;\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n                    removeElement(multiRectGroupElement);\n                    this.dragRectArray = [];\n                    this.filterArray = [];\n                    this.totalSelectedPoints = [];\n                }\n                if (this.currentMode === 'Lasso') {\n                    if (this.multiDataIndexes[index] != null) {\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n                            this.multiDataIndexes[index][i].isSelect = false;\n                        }\n                    }\n                    this.multiDataIndexes[index] = null;\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\n                        if (this.multiDataIndexes[j] != null) {\n                            isSelectedvalues = false;\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                                this.multiDataIndexes[j][k].isSelect = true;\n                            }\n                        }\n                    }\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\n                }\n                else if (this.filterArray.length) {\n                    for (var i = 0; i < this.filterArray.length; i++) {\n                        if (this.filterArray[i]) {\n                            isSelectedvalues = false;\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n                        }\n                    }\n                }\n                else {\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n                }\n            }\n            else {\n                remove(getElement(this.draggedRectGroup));\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n            }\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\n                this.rectPoints = null;\n            }\n        }\n    };\n    /**\n     * Method to resize the drag rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n        var rect;\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\n            this.dragRectArray[this.targetIndex]) {\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\n                this.targetIndex = this.getIndex(target.id);\n            }\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        if (!(chart.allowMultiSelection)) {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        if (rect) {\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\n            if (this.resizing) {\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\n                this.drawDraggingRect(chart, rect);\n                this.dragRect = rect;\n            }\n            if (tapped) {\n                this.resizing = resize;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n        var cursorStyle = 'se-resize';\n        var resize = false;\n        if (!this.resizing) {\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\n                new Rect((rect.x), rect.y, 5, rect.height),\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\n            for (var i = 0; i < resizeEdges.length; i++) {\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\n                    resize = true;\n                    this.resizeMode = i;\n                    break;\n                }\n            }\n        }\n        else {\n            var x = rect.x;\n            var y = rect.y;\n            var width = (location.x - x);\n            var height = (location.y - y);\n            switch (this.resizeMode) {\n                case 0:\n                    height = Math.abs((rect.height + rect.y) - location.y);\n                    rect.y = Math.min((rect.height + rect.y), location.y);\n                    rect.height = height;\n                    break;\n                case 1:\n                    width = Math.abs((rect.width + rect.x) - location.x);\n                    rect.x = Math.min((rect.width + rect.x), location.x);\n                    rect.width = width;\n                    break;\n                case 2:\n                    rect.height = Math.abs(height);\n                    rect.y = Math.min(location.y, y);\n                    break;\n                case 3:\n                    rect.width = Math.abs(width);\n                    rect.x = Math.min(location.x, x);\n                    break;\n                case 4:\n                    rect.width = Math.abs(width);\n                    rect.height = Math.abs(height);\n                    rect.x = Math.min(location.x, x);\n                    rect.y = Math.min(location.y, y);\n                    break;\n            }\n        }\n        if (this.currentMode !== 'Lasso') {\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\n                this.targetIndex : this.draggedRect), cursorStyle);\n        }\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n        return resize;\n    };\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\n        if (rectelement) {\n            rectelement.setAttribute('style', 'cursor:' + cursorStyle + ';');\n        }\n    };\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            seriesElements = this.getSeriesElements(series);\n            this.removeStyles(seriesElements);\n            for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n                var seriesElement = seriesElements_2[_a];\n                this.removeStyles(this.getChildren(seriesElement));\n            }\n        }\n    };\n    Selection.prototype.setAttributes = function (ele, object) {\n        var keys = Object.keys(object);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            ele.setAttribute(key, object[key]);\n        }\n    };\n    /**\n     * Method to move the dragged rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n        var rect;\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        else {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        rect.x -= (grabbedPoint.x - chart.mouseX);\n        rect.y -= (grabbedPoint.y - chart.mouseY);\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (doDrawing) {\n            this.drawDraggingRect(chart, rect, target);\n        }\n        else {\n            this.calculateDragSelectedElements(chart, rect);\n        }\n    };\n    /**\n     * To complete the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.completeSelection = function (e) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n            this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\n            this.rectPoints.width && this.rectPoints.height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n            if (this.path.indexOf('L') !== -1) {\n                if (!(chart.allowMultiSelection)) {\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath));\n                }\n                else if (getElement(this.lassoPath + this.count)) {\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath + this.count));\n                }\n                if (this.dragging || this.resizing) {\n                    this.calculateDragSelectedElements(chart, this.dragRect);\n                }\n            }\n        }\n        this.dragging = false;\n        this.rectGrabbing = false;\n        this.resizing = false;\n        this.removeDraggedElements(chart, e);\n    };\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n    };\n    /** @private */\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n        var mode = chart.selectionMode;\n        this.currentMode = chart.selectionMode;\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\n            chart.chartAreaType !== 'PolarRadar';\n        var target = event.target;\n        this.path = undefined;\n        if (this.dragging) {\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\n                this.dragging = false;\n            }\n        }\n        if (mode === 'Lasso') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                        var point = _c[_b];\n                        if (!(chart.allowMultiSelection)) {\n                            point.isSelect = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (!(mode === 'Lasso')) {\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n            }\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(target.id);\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n                }\n            }\n        }\n    };\n    Selection.prototype.isDragRect = function (id) {\n        return id.indexOf('_ej2_drag_rect') > -1;\n    };\n    /** @private */\n    Selection.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        if (chart.highlightMode !== 'None') {\n            if (!isNullOrUndefined(target)) {\n                if (event.target.id.indexOf('text') > 1) {\n                    target = getElement(event.target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(event);\n                return;\n            }\n        }\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n            event.preventDefault();\n        }\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (insideMoving) {\n            if (this.rectGrabbing && !this.resizing) {\n                this.draggedRectMoved(chart, this.dragRect, true, target);\n            }\n            else if (this.dragging && !this.resizing) {\n                if (chart.selectionMode === 'Lasso') {\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n                else {\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n            }\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n        }\n        else {\n            this.completeSelection(event);\n        }\n    };\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\n        if (this.dragging) {\n            if (this.path) {\n                this.path = this.path + ' L' + endX + ' ' + endY;\n            }\n            else {\n                this.path = 'M ' + startX + ' ' + startY;\n            }\n        }\n    };\n    Selection.prototype.pointChecking = function (path) {\n        var _this = this;\n        var chart = this.chart;\n        var element;\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n        this.multiDataIndexes[this.count] = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.points.filter(function (point) {\n                // To check whether the point have symbol location value or not.\n                if (point.symbolLocations && point.symbolLocations.length) {\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n                }\n                if (element === path) {\n                    point.isSelect = true;\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n                        _this.seriesIndex++;\n                    }\n                }\n                else if (!(chart.allowMultiSelection)) {\n                    point.isSelect = false;\n                }\n            });\n        }\n        this.seriesIndex = 0;\n    };\n    /**\n     * Get module name.\n     *\n     * @private\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'Selection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection;\n}(BaseSelection));\nexport { Selection };\n"]},"metadata":{},"sourceType":"module"}