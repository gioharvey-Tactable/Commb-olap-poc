{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { extend, Internationalization } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { PivotUtil } from './util';\n/**\n * PivotEngine is used to manipulate the relational or Multi-Dimensional data as pivoting values.\n */\n\n/** @hidden */\n\nvar PivotEngine = function () {\n  function PivotEngine() {\n    /** @hidden */\n    this.aggregatedValueMatrix = [];\n    /** @hidden */\n\n    this.valueContent = [];\n    /** @hidden */\n\n    this.formatFields = {};\n    /* eslint-disable  */\n\n    /** @hidden */\n\n    this.dateFormatFunction = {};\n    /** @hidden */\n\n    this.calculatedFields = {};\n    /** @hidden */\n\n    this.calculatedFormulas = {};\n    /** @hidden */\n\n    this.valueAxis = 0;\n    /** @hidden */\n\n    this.saveDataHeaders = {};\n    /** @hidden */\n\n    this.columnCount = 0;\n    /** @hidden */\n\n    this.rowCount = 0;\n    /** @hidden */\n\n    this.colFirstLvl = 0;\n    /** @hidden */\n\n    this.rowFirstLvl = 0;\n    /** @hidden */\n\n    this.rowStartPos = 0;\n    /** @hidden */\n\n    this.colStartPos = 0;\n    /** @hidden */\n\n    this.enableValueSorting = false;\n    /** @hidden */\n\n    this.headerCollection = {\n      rowHeaders: [],\n      columnHeaders: [],\n      rowHeadersCount: 0,\n      columnHeadersCount: 0\n    };\n    /** @hidden */\n\n    this.rMembers = [];\n    /** @hidden */\n\n    this.cMembers = [];\n    /** @hidden */\n\n    this.groupingFields = {};\n    this.valueMatrix = [];\n    this.indexMatrix = [];\n    this.memberCnt = -1;\n    this.pageInLimit = false;\n    this.endPos = 0;\n    this.removeCount = 0;\n    this.colHdrBufferCalculated = false;\n    this.colValuesLength = 1;\n    this.rowValuesLength = 1;\n    this.slicedHeaders = [];\n    this.fieldFilterMem = {};\n    this.filterPosObj = {};\n    this.selectedHeaders = {\n      selectedHeader: [],\n      values: []\n    };\n    this.rowGrandTotal = null;\n    this.columnGrandTotal = null;\n    this.removeRowGrandTotal = false;\n    this.removeColumnGrandTotal = false;\n    this.isValueHasAdvancedAggregate = false;\n    this.rawIndexObject = {};\n    /* eslint-disable  */\n\n    this.isEditing = false;\n    /** @hidden */\n\n    this.data = [];\n    /** @hidden */\n\n    this.actualData = [];\n    /** @hidden */\n\n    this.groupRawIndex = {};\n    /** @hidden */\n\n    this.fieldKeys = {};\n    this.allowDataCompression = false;\n    this.dataSourceSettings = {};\n    this.frameHeaderObjectsCollection = false;\n    this.headerObjectsCollection = {};\n    this.columnKeys = {};\n    this.fieldDrillCollection = {};\n    this.fieldMapping = [];\n    this.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n    /* private makeMirrorObject(elements: number[], obj: NumberIndex): void {\n         for (let lp: number = 0, end: number = elements.length; lp < end; lp++) {\n             obj[elements[lp]] = elements[lp];\n         }\n     } */\n  }\n\n  PivotEngine.prototype.renderEngine = function (dataSource, customProperties, fn) {\n    this.getValueCellInfo = fn;\n    this.formatFields = {};\n    this.dateFormatFunction = {};\n    this.calculatedFields = {};\n    this.calculatedFormulas = {};\n    this.valueAxis = 0;\n    this.saveDataHeaders = {};\n    this.columnCount = 0;\n    this.rowCount = 0;\n    this.colFirstLvl = 0;\n    this.rowFirstLvl = 0;\n    this.rowStartPos = 0;\n    this.colStartPos = 0;\n    this.excludeFields = isNullOrUndefined(dataSource.excludeFields) ? [] : dataSource.excludeFields;\n    this.enableValueSorting = false;\n    this.headerCollection = {\n      rowHeaders: [],\n      columnHeaders: [],\n      rowHeadersCount: 0,\n      columnHeadersCount: 0\n    };\n    this.valueMatrix = [];\n    this.indexMatrix = [];\n    this.aggregatedValueMatrix = [];\n    this.rMembers = [];\n    this.cMembers = [];\n    this.memberCnt = -1;\n    this.pageInLimit = false;\n    this.endPos = 0;\n    this.removeCount = 0;\n    this.colHdrBufferCalculated = false;\n    this.colValuesLength = 1;\n    this.rowValuesLength = 1;\n    this.slicedHeaders = [];\n    this.fieldFilterMem = {};\n    this.filterPosObj = {};\n    this.selectedHeaders = {\n      selectedHeader: [],\n      values: []\n    };\n    this.rowGrandTotal = null;\n    this.columnGrandTotal = null;\n    this.removeRowGrandTotal = false;\n    this.removeColumnGrandTotal = false;\n    this.isValueHasAdvancedAggregate = false;\n    this.rawIndexObject = {};\n    this.isEditing = false;\n    var fields;\n    this.globalize = new Internationalization();\n    this.localeObj = customProperties ? customProperties.localeObj : undefined;\n    this.fieldsType = customProperties ? customProperties.fieldsType : {};\n    this.clonedReport = customProperties ? customProperties.clonedReport : {};\n    this.enableSort = dataSource.enableSorting;\n    this.alwaysShowValueHeader = dataSource.alwaysShowValueHeader;\n    this.showHeaderWhenEmpty = isNullOrUndefined(dataSource.showHeaderWhenEmpty) ? true : dataSource.showHeaderWhenEmpty;\n    this.showSubTotals = isNullOrUndefined(dataSource.showSubTotals) ? true : dataSource.showSubTotals;\n    this.showRowSubTotals = isNullOrUndefined(dataSource.showRowSubTotals) ? true : dataSource.showRowSubTotals;\n    this.showColumnSubTotals = isNullOrUndefined(dataSource.showColumnSubTotals) ? true : dataSource.showColumnSubTotals;\n    this.showGrandTotals = isNullOrUndefined(dataSource.showGrandTotals) ? true : dataSource.showGrandTotals;\n    this.showRowGrandTotals = isNullOrUndefined(dataSource.showRowGrandTotals) ? true : dataSource.showRowGrandTotals;\n    this.showColumnGrandTotals = isNullOrUndefined(dataSource.showColumnGrandTotals) ? true : dataSource.showColumnGrandTotals;\n    this.allowValueFilter = dataSource.allowValueFilter;\n    this.isValueFilterEnabled = false;\n    this.enableValueSorting = customProperties ? customProperties.enableValueSorting : false;\n    this.isDrillThrough = customProperties ? customProperties.isDrillThrough ? customProperties.isDrillThrough : false : false;\n    this.valueContent = [];\n    this.dataSourceSettings = dataSource;\n\n    if (!(dataSource.dataSource instanceof DataManager)) {\n      this.data = isBlazor() && !dataSource.dataSource && this.data && this.data.length > 0 ? this.data : dataSource.dataSource;\n    }\n\n    if (this.data && this.data[0]) {\n      if (!this.fieldList) {\n        if (dataSource.type === 'CSV') {\n          this.fields = this.data.shift();\n        } else {\n          this.fields = Object.keys(this.data[0]);\n        }\n\n        for (var i = 0; i < this.fields.length; i++) {\n          this.fieldKeys[this.fields[i]] = dataSource.type === 'CSV' ? i : this.fields[i];\n        }\n      }\n\n      if (customProperties && customProperties.pageSettings && customProperties.pageSettings.allowDataCompression) {\n        this.actualData = this.data;\n        this.data = this.getGroupedRawData(dataSource);\n      }\n\n      this.rows = dataSource.rows ? dataSource.rows : [];\n      this.columns = dataSource.columns ? dataSource.columns : [];\n      this.filters = dataSource.filters ? dataSource.filters : [];\n      this.values = dataSource.values ? dataSource.values : [];\n      this.formats = dataSource.formatSettings ? dataSource.formatSettings : [];\n      this.groups = dataSource.groupSettings ? dataSource.groupSettings : [];\n      this.calculatedFieldSettings = dataSource.calculatedFieldSettings ? dataSource.calculatedFieldSettings : [];\n      this.enableSort = dataSource.enableSorting === undefined ? true : dataSource.enableSorting;\n      this.fieldMapping = dataSource.fieldMapping ? dataSource.fieldMapping : [];\n      fields = this.getGroupData(this.data);\n\n      for (var i = 0; i < this.fields.length; i++) {\n        this.fieldKeys[this.fields[i]] = dataSource.type === 'CSV' ? i : this.fields[i];\n      }\n\n      this.validateFilters(dataSource);\n      this.isExpandAll = this.isValueFiltersAvail && dataSource.allowValueFilter ? true : dataSource.expandAll;\n      this.drilledMembers = dataSource.drilledMembers ? this.isValueFiltersAvail && dataSource.allowValueFilter ? [] : dataSource.drilledMembers : [];\n      this.isMutiMeasures = this.values.length > 1 ? true : false;\n      this.valueAxis = dataSource.valueAxis === 'row' ? 1 : 0;\n      this.emptyCellTextContent = dataSource.emptyCellsTextContent ? dataSource.emptyCellsTextContent : '';\n      this.rowValuesLength = this.valueAxis === 1 ? this.values.length : 1;\n      this.colValuesLength = this.valueAxis === 0 ? this.values.length : 1;\n      this.valueSortSettings = dataSource.valueSortSettings || {\n        sortOrder: 'None',\n        headerDelimiter: '.',\n        headerText: '',\n        columnIndex: undefined\n      };\n      this.valueSortData = [];\n      this.pageSettings = customProperties ? customProperties.pageSettings ? customProperties.pageSettings : this.pageSettings : undefined;\n      this.allowDataCompression = this.pageSettings && this.pageSettings.allowDataCompression;\n      this.savedFieldList = customProperties ? customProperties.savedFieldList : undefined;\n      this.getFieldList(fields, this.enableSort, dataSource.allowValueFilter);\n      this.removeIrrelevantFields(dataSource, Object.keys(this.fieldList));\n      this.fillFieldMembers(this.data, this.indexMatrix);\n      this.updateSortSettings(dataSource.sortSettings, this.enableSort);\n      this.valueMatrix = this.generateValueMatrix(this.data);\n      this.filterMembers = [];\n      var columnLength = this.columns.length - 1;\n      this.columnKeys = {};\n\n      while (columnLength > -1) {\n        this.columnKeys[this.columns[columnLength].name] = this.columns[columnLength];\n        columnLength--;\n      }\n\n      this.updateFilterMembers(dataSource);\n      this.generateGridData(dataSource);\n    }\n  };\n\n  PivotEngine.prototype.removeIrrelevantFields = function (dataSource, fields) {\n    var report = {};\n    report[0] = dataSource.rows;\n    report[1] = dataSource.columns;\n    report[2] = dataSource.values;\n    report[3] = dataSource.filters;\n    var pos = 0;\n\n    while (pos < 4) {\n      if (report[pos]) {\n        for (var cnt = 0; cnt < report[pos].length; cnt++) {\n          if (this.excludeFields.indexOf(report[pos][cnt].name) > -1 || !isNullOrUndefined(fields) && fields.indexOf(report[pos][cnt].name) === -1) {\n            report[pos].splice(cnt, 1);\n            cnt--;\n          }\n        }\n      }\n\n      pos++;\n    }\n  };\n  /* eslint-disable */\n\n\n  PivotEngine.prototype.getGroupedRawData = function (dataSourceSettings) {\n    this.data = [];\n\n    for (var _i = 0, _a = this.actualData; _i < _a.length; _i++) {\n      var data = _a[_i];\n      this.data[this.data.length] = this.frameHeaderWithKeys(data);\n    }\n\n    var countFields = dataSourceSettings.values.filter(function (item) {\n      return item.type === 'Count' || item.type === 'DistinctCount';\n    }).map(function (item) {\n      return item.name;\n    });\n    var hasCountField = countFields.length > 0;\n    var realData = this.data;\n    var headerFields = dataSourceSettings.rows.concat(dataSourceSettings.columns.concat(dataSourceSettings.filters)).map(function (item) {\n      return item.name;\n    });\n    var groupRawData = {};\n    var finalData = [];\n    this.groupRawIndex = {};\n    var groupKeys = {};\n    var indexLength = 0;\n\n    for (var i = 0; i < realData.length; i++) {\n      var currData = realData[i];\n      var members = [];\n\n      if (hasCountField) {\n        for (var vPos = 0; vPos < countFields.length; vPos++) {\n          currData[this.fieldKeys[countFields[vPos]]] = isNullOrUndefined(currData[this.fieldKeys[countFields[vPos]]]) ? currData[this.fieldKeys[countFields[vPos]]] : 1;\n        }\n      }\n\n      for (var hPos = 0; hPos < headerFields.length; hPos++) {\n        members.push(currData[this.fieldKeys[headerFields[hPos]]]);\n      }\n\n      var memberJoin = members.join('-');\n\n      if (groupRawData[memberJoin]) {\n        for (var vPos = 0; vPos < dataSourceSettings.values.length; vPos++) {\n          var currFieldName = dataSourceSettings.values[vPos].name;\n          var currValue = currData[this.fieldKeys[currFieldName]];\n          var savedData = groupRawData[memberJoin];\n          var summType = dataSourceSettings.values[vPos].type;\n\n          if (!isNullOrUndefined(currValue)) {\n            if (typeof currValue !== 'number' || summType === 'DistinctCount') {\n              summType = 'Count';\n            }\n\n            if (isNullOrUndefined(savedData[currFieldName])) {\n              savedData[currFieldName] = summType === 'Product' ? 1 : summType === 'Min' || summType === 'Max' ? undefined : 0;\n            } else if (typeof savedData[currFieldName] !== 'number') {\n              savedData[currFieldName] = 1;\n            }\n\n            if (summType === 'Count') {\n              savedData[currFieldName] += 1;\n            } else if (summType === 'Min') {\n              if (!isNullOrUndefined(savedData[currFieldName])) {\n                savedData[currFieldName] = savedData[currFieldName] > currValue ? currValue : savedData[currFieldName];\n              }\n            } else if (summType === 'Max') {\n              if (!isNullOrUndefined(savedData[currFieldName])) {\n                savedData[currFieldName] = savedData[currFieldName] < currValue ? currValue : savedData[currFieldName];\n              }\n            } else if (summType === 'Product') {\n              savedData[currFieldName] *= currValue;\n            } else {\n              savedData[currFieldName] += currValue;\n            }\n          }\n        }\n\n        if (this.isDrillThrough) {\n          this.groupRawIndex[groupKeys[memberJoin]].push(i);\n        }\n      } else {\n        groupRawData[memberJoin] = currData;\n        finalData.push(currData);\n\n        if (this.isDrillThrough) {\n          this.groupRawIndex[indexLength] = [i];\n          groupKeys[memberJoin] = indexLength;\n          indexLength++;\n        }\n      }\n    }\n\n    return finalData;\n  };\n\n  PivotEngine.prototype.getGroupData = function (data) {\n    var _this = this;\n\n    var fieldkeySet = data[0];\n\n    var _loop_1 = function (group) {\n      var fieldName = group.name;\n      var caption = group.caption;\n\n      if (this_1.fields.indexOf(fieldName) > -1) {\n        var groupFields = {};\n        var customGroupFieldName = void 0;\n\n        if (group.type === 'Date' && this_1.groupingFields[fieldName]) {\n          return {\n            value: fieldkeySet\n          };\n        } else if (group.type === 'Number') {\n          if (PivotUtil.getType(fieldkeySet[fieldName]) === 'number' || !this_1.groupingFields[fieldName]) {\n            /* eslint-disable  */\n            if (group.rangeInterval) {\n              data.sort(function (a, b) {\n                return Number(a[_this.fieldKeys[fieldName]]) > Number(b[_this.fieldKeys[fieldName]]) ? 1 : Number(b[_this.fieldKeys[fieldName]]) > Number(a[_this.fieldKeys[fieldName]]) ? -1 : 0;\n              });\n            }\n          } else {\n            return {\n              value: fieldkeySet\n            };\n          }\n        } else if (group.type === 'Custom' && this_1.fields.indexOf(fieldName + '_custom_group') > -1) {\n          return {\n            value: fieldkeySet\n          };\n        }\n\n        var len = data.length;\n\n        while (len--) {\n          var item = data[len];\n\n          if (item[this_1.fieldKeys[fieldName]] && group.type === 'Date') {\n            var date = new Date(item[this_1.fieldKeys[fieldName]].toString());\n\n            if (!isNullOrUndefined(date) && group.groupInterval.length > 0) {\n              for (var i = 0, len_1 = group.groupInterval.length; i < len_1; i++) {\n                var interval = group.groupInterval[i];\n                var isInRangeAvail = this_1.getRange(group, date.getTime());\n                var newDate = PivotUtil.resetTime(new Date());\n\n                switch (interval) {\n                  case 'Years':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_years';\n                      groupFields[newFieldName] = interval;\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : new Date(newDate.setFullYear(date.getFullYear())).toString();\n                    }\n                    break;\n\n                  case 'Quarters':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_quarters';\n                      groupFields[newFieldName] = interval;\n                      var month = Math.ceil((date.getMonth() + 1) / 3);\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : (this_1.localeObj ? this_1.localeObj.getConstant('qtr') : 'Qtr') + month.toString();\n                    }\n                    break;\n\n                  case 'QuarterYear':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_quarterYear';\n                      groupFields[newFieldName] = interval;\n                      var month = Math.ceil((date.getMonth() + 1) / 3);\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : (this_1.localeObj ? this_1.localeObj.getConstant('qtr') : 'Qtr') + month.toString() + ' ' + (this_1.localeObj ? this_1.localeObj.getConstant('of') : 'of') + ' ' + date.getFullYear().toString();\n                    }\n                    break;\n\n                  case 'Months':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_months';\n                      groupFields[newFieldName] = interval;\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : new Date(newDate.setMonth(date.getMonth(), newDate.getDate())).toString();\n                    }\n                    break;\n\n                  case 'Days':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_days';\n                      groupFields[newFieldName] = interval;\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : new Date(newDate.setMonth(date.getMonth(), date.getDate())).toString();\n                    }\n                    break;\n\n                  case 'Hours':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_hours';\n                      groupFields[newFieldName] = interval;\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : new Date(newDate.setHours(date.getHours())).toString();\n                    }\n                    break;\n\n                  case 'Minutes':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_minutes';\n                      groupFields[newFieldName] = interval;\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : new Date(newDate.setMinutes(date.getMinutes())).toString();\n                    }\n                    break;\n\n                  case 'Seconds':\n                    {\n                      var newFieldName = i === group.groupInterval.length - 1 ? fieldName : fieldName + '_date_group_seconds';\n                      groupFields[newFieldName] = interval;\n                      this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                      if (this_1.fields.indexOf(newFieldName) === -1) {\n                        this_1.fields.push(newFieldName);\n                      }\n\n                      item[this_1.fieldKeys[newFieldName]] = isInRangeAvail ? undefined : new Date(newDate.setSeconds(date.getSeconds())).toString();\n                    }\n                    break;\n                }\n              }\n            }\n          } else if (item[this_1.fieldKeys[fieldName]] && group.type === 'Number') {\n            var isInRangeAvail = this_1.getRange(group, Number(item[this_1.fieldKeys[fieldName]]));\n            item[this_1.fieldKeys[fieldName]] = isInRangeAvail ? undefined : item[this_1.fieldKeys[fieldName]];\n          } else if (item[this_1.fieldKeys[fieldName]] && group.type === 'Custom' && group.customGroups && group.customGroups.length > 0) {\n            var newFieldName = fieldName + '_custom_group';\n            var customGroups = group.customGroups;\n            var groupValue = void 0;\n\n            for (var i = 0, len_2 = customGroups.length; i < len_2; i++) {\n              {\n                var cGroup = customGroups[i];\n\n                if (cGroup.items && cGroup.items.length > 1) {\n                  customGroupFieldName = newFieldName;\n                  this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length : newFieldName;\n\n                  if (this_1.fields.indexOf(newFieldName) === -1) {\n                    this_1.fields.push(newFieldName);\n                  }\n\n                  var isDataMatch = PivotUtil.inArray(item[this_1.fieldKeys[fieldName]].toString(), cGroup.items) === -1 ? false : true;\n                  item[this_1.fieldKeys[newFieldName]] = isDataMatch ? cGroup.groupName && cGroup.groupName !== '' ? cGroup.groupName : this_1.localeObj.getConstant('group') + ' ' + i : groupValue && groupValue !== item[this_1.fieldKeys[fieldName]].toString() ? groupValue : item[this_1.fieldKeys[fieldName]].toString();\n                  groupValue = item[this_1.fieldKeys[newFieldName]];\n                }\n              }\n            }\n          }\n\n          var keys = Object.keys(item);\n          var isCompleteSet = [];\n\n          for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            isCompleteSet.push(item[key] ? true : false);\n          }\n\n          fieldkeySet = isCompleteSet.indexOf(false) === -1 && keys.length === Object.keys(data[0]).length ? item : fieldkeySet; //this.fields = Object.keys(fieldkeySet);\n        }\n        /* eslint-enable */\n\n\n        if (group.type === 'Date') {\n          var isDataSource = false;\n          var axisFields = [this_1.rows, this_1.columns, this_1.values, this_1.filters];\n          var groupKeys = Object.keys(groupFields);\n          var gCnt = Object.keys(groupKeys).length;\n          var groupField = void 0;\n\n          for (var _a = 0, axisFields_1 = axisFields; _a < axisFields_1.length; _a++) {\n            var axis = axisFields_1[_a];\n\n            if (!isDataSource && axis) {\n              var cnt = axis.length;\n              var i = 0;\n\n              while (i < cnt) {\n                if (axis[i].name === fieldName) {\n                  isDataSource = true;\n                  var actualField = axis[i];\n                  axis.splice(i, 1);\n                  var dataFields = this_1.rows;\n                  dataFields = dataFields.concat(this_1.columns, this_1.values, this_1.filters);\n\n                  while (gCnt--) {\n                    var caption_1 = actualField.caption ? actualField.caption : actualField.name;\n\n                    if (this_1.clonedReport) {\n                      var clonedFields = this_1.clonedReport.rows;\n                      clonedFields = clonedFields.concat(this_1.clonedReport.columns, this_1.clonedReport.values, this_1.clonedReport.filters);\n                      /* eslint-disable-line */\n\n                      var cloneField = PivotUtil.getFieldByName(groupKeys[gCnt], clonedFields);\n\n                      if (cloneField) {\n                        caption_1 = cloneField.caption ? cloneField.caption : cloneField.name;\n                      }\n                    }\n\n                    if (!PivotUtil.getFieldByName(groupKeys[gCnt], dataFields)) {\n                      groupField = groupFields[groupKeys[gCnt]];\n                      var newField = {\n                        name: groupKeys[gCnt],\n                        caption: (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + ' (' + caption_1 + ')',\n                        type: 'Count',\n                        showNoDataItems: actualField.showNoDataItems,\n                        baseField: actualField.baseField,\n                        baseItem: actualField.baseItem,\n                        showFilterIcon: actualField.showFilterIcon,\n                        showSortIcon: actualField.showSortIcon,\n                        showEditIcon: actualField.showEditIcon,\n                        showRemoveIcon: actualField.showRemoveIcon,\n                        showSubTotals: actualField.showValueTypeIcon,\n                        allowDragAndDrop: actualField.allowDragAndDrop\n                      };\n                      axis.splice(i, 0, newField);\n                    }\n                  }\n\n                  break;\n                }\n\n                i++;\n              }\n\n              if (isDataSource) {\n                break;\n              }\n            }\n          }\n\n          gCnt = Object.keys(groupKeys).length;\n\n          while (gCnt--) {\n            groupField = groupFields[groupKeys[gCnt]];\n\n            for (var i = 0, len_3 = this_1.formats.length; i < len_3; i++) {\n              if (this_1.formats[i].name === groupKeys[gCnt]) {\n                this_1.formats.splice(i, 1);\n                break;\n              }\n            }\n\n            if (groupField !== 'Quarters' && groupField !== 'QuarterYear') {\n              var formatSettings = {\n                name: groupKeys[gCnt],\n                type: ['Years', 'Months', 'Days'].indexOf(groupField) > -1 ? 'date' : 'time',\n                format: groupField === 'Years' ? 'yyyy' : groupField === 'Months' ? 'MMM' : groupField === 'Days' ? 'd-MMM' : groupField === 'Hours' ? 'hh a' : groupField === 'Minutes' ? ':mm' : groupField === 'Seconds' ? ':ss' : undefined\n              };\n              this_1.formats.push(formatSettings);\n            }\n          }\n        } else if (group.type === 'Number' && group.rangeInterval) {\n          /* eslint-disable */\n          var startValue = void 0;\n          var endValue = void 0;\n          var cStartValue = void 0;\n          var cEndValue = void 0;\n          var framedSet = [];\n          var unframedSet = [];\n          var dataLength = data.length;\n          var cnt = 0;\n          this_1.groupingFields[fieldName] = fieldName;\n\n          while (cnt < dataLength) {\n            unframedSet.push(Number(data[cnt][this_1.fieldKeys[fieldName]]));\n\n            if (data[cnt][this_1.fieldKeys[fieldName]] && framedSet.indexOf(Number(data[cnt][this_1.fieldKeys[fieldName]])) === -1) {\n              framedSet.push(Number(data[cnt][this_1.fieldKeys[fieldName]]));\n            }\n\n            cnt++;\n          }\n\n          var framedSetLength = Math.max.apply(Math, framedSet);\n\n          for (var i = framedSet[0], len_4 = framedSetLength; i < len_4; i++) {\n            if (unframedSet.indexOf(i) < 0) {\n              var duplicateData = this_1.frameData(data[0]);\n              duplicateData[this_1.fieldKeys[fieldName]] = i;\n              var index = unframedSet.lastIndexOf(i - 1);\n              unframedSet.splice(index + 1, 0, i);\n              data.splice(index + 1, 0, duplicateData);\n            }\n          }\n\n          dataLength = data.length;\n          cnt = 0;\n\n          while (cnt < dataLength) {\n            if (data[cnt] && data[cnt][this_1.fieldKeys[fieldName]]) {\n              cStartValue = Number(data[cnt][this_1.fieldKeys[fieldName]]);\n              cEndValue = cStartValue + (group.rangeInterval - 1);\n              startValue = !startValue ? cStartValue : startValue;\n              endValue = !endValue ? cEndValue > framedSetLength ? framedSetLength : cEndValue : endValue > framedSetLength ? framedSetLength : endValue;\n\n              if (cStartValue >= startValue && cStartValue <= endValue) {\n                data[cnt][this_1.fieldKeys[fieldName]] = startValue === endValue ? startValue.toString() : startValue.toString() + '-' + endValue.toString();\n              } else if (cStartValue > endValue && cStartValue === endValue + 1) {\n                startValue = endValue + 1;\n                endValue = startValue + (group.rangeInterval - 1) > framedSetLength ? framedSetLength : startValue + (group.rangeInterval - 1);\n                data[cnt][this_1.fieldKeys[fieldName]] = startValue === endValue ? startValue.toString() : startValue.toString() + '-' + endValue.toString();\n              }\n\n              var keys = Object.keys(data[cnt]);\n              var isCompleteSet = [];\n\n              for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {\n                var key = keys_2[_b];\n                isCompleteSet.push(data[cnt][key] ? true : false);\n              }\n\n              fieldkeySet = isCompleteSet.indexOf(false) === -1 && keys.length === Object.keys(data[0]).length ? data[cnt] : fieldkeySet;\n            }\n\n            cnt++;\n          }\n\n          var axisFields = [this_1.rows, this_1.columns, this_1.values, this_1.filters];\n\n          for (var _c = 0, axisFields_2 = axisFields; _c < axisFields_2.length; _c++) {\n            var fields = axisFields_2[_c];\n            var field = PivotUtil.getFieldByName(fieldName, fields);\n\n            if (field) {\n              field = field.properties ? field.properties : field;\n              field.type = 'Count';\n            }\n            /* eslint-enable */\n\n          }\n\n          for (var i = 0, len_5 = this_1.formats.length; i < len_5; i++) {\n            if (this_1.formats[i].name === fieldName) {\n              this_1.formats.splice(i, 1);\n              break;\n            }\n          }\n        } else if (group.type === 'Custom' && customGroupFieldName) {\n          var customFieldName = customGroupFieldName; // this.groupingFields[customFieldName] = customFieldName;\n\n          var isDataSource = false;\n          var axisFields = [this_1.rows, this_1.columns, this_1.values, this_1.filters];\n          var dataFields = this_1.rows;\n          dataFields = dataFields.concat(this_1.columns, this_1.values, this_1.filters);\n          var pattern = [];\n\n          if (!caption || caption === '') {\n            pattern = customFieldName.match(/_custom_group/g);\n          } // let actualFieldName: string = fieldName.replace(/_custom_group/g, '');\n\n\n          var parentField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ''), dataFields);\n          var customGroupField = PivotUtil.getFieldByName(customFieldName, dataFields);\n\n          for (var _d = 0, axisFields_3 = axisFields; _d < axisFields_3.length; _d++) {\n            var axis = axisFields_3[_d];\n\n            if (!isDataSource && axis) {\n              var cnt = axis.length;\n              var i = 0;\n\n              while (i < cnt) {\n                if (axis[i].name === group.name && !customGroupField) {\n                  isDataSource = true;\n                  var actualField = axis[i];\n                  var newField = {\n                    name: customFieldName,\n                    caption: !caption || caption === '' ? (parentField.caption ? parentField.caption : parentField.name) + (pattern.length + 1) : caption,\n                    type: 'Count',\n                    showNoDataItems: actualField.showNoDataItems,\n                    baseField: actualField.baseField,\n                    baseItem: actualField.baseItem,\n                    showSubTotals: actualField.showValueTypeIcon,\n                    allowDragAndDrop: actualField.allowDragAndDrop,\n                    showFilterIcon: actualField.showFilterIcon,\n                    showSortIcon: actualField.showSortIcon,\n                    showRemoveIcon: actualField.showRemoveIcon,\n                    showEditIcon: actualField.showEditIcon\n                  };\n                  axis.splice(i, 0, newField);\n                  break;\n                } else if (axis[i].name === customFieldName && customGroupField) {\n                  var newField = {\n                    name: customGroupField.name,\n                    caption: !caption || caption === '' ? customGroupField.caption : caption,\n                    type: customGroupField.type,\n                    showNoDataItems: customGroupField.showNoDataItems,\n                    baseField: customGroupField.baseField,\n                    baseItem: customGroupField.baseItem,\n                    showRemoveIcon: customGroupField.showRemoveIcon,\n                    showSubTotals: customGroupField.showValueTypeIcon,\n                    allowDragAndDrop: customGroupField.allowDragAndDrop,\n                    showFilterIcon: customGroupField.showFilterIcon,\n                    showSortIcon: customGroupField.showSortIcon,\n                    showEditIcon: customGroupField.showEditIcon\n                  };\n                  axis.splice(i, 1, newField);\n                  break;\n                }\n\n                i++;\n              }\n\n              if (isDataSource) {\n                break;\n              }\n            }\n          }\n\n          var formatfield = PivotUtil.getFieldByName(fieldName, PivotUtil.cloneFormatSettings(this_1.formats));\n\n          if (formatfield) {\n            formatfield.name = customFieldName;\n            this_1.formats.push(formatfield);\n          }\n        }\n        /* eslint-enable max-len */\n\n\n        this_1.groupingFields = extend(this_1.groupingFields, groupFields);\n      } else {\n        return {\n          value: fieldkeySet\n        };\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = this.groups; _i < _a.length; _i++) {\n      var group = _a[_i];\n\n      var state_1 = _loop_1(group);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    } //this.fields = Object.keys(fieldkeySet);\n\n\n    return fieldkeySet;\n  };\n  /* eslint-disable */\n\n\n  PivotEngine.prototype.frameData = function (data) {\n    var fields = Object.keys(data);\n    var keyPos = 0;\n    var framedSet = {};\n\n    while (keyPos < fields.length) {\n      framedSet[fields[keyPos]] = undefined;\n      keyPos++;\n    }\n\n    return framedSet;\n  };\n  /* eslint-enable */\n\n\n  PivotEngine.prototype.getRange = function (group, cValue) {\n    var isRangeAvail;\n\n    if (group.type === 'Date') {\n      var cDate = new Date(cValue);\n      var startDate = typeof group.startingAt === 'string' ? new Date(group.startingAt) : group.startingAt;\n      var endDate = typeof group.endingAt === 'string' ? new Date(group.endingAt) : group.endingAt;\n\n      if (startDate && cDate.getTime() < startDate.getTime() || endDate && cDate.getTime() > endDate.getTime()) {\n        isRangeAvail = true;\n      } else {\n        isRangeAvail = false;\n      }\n    } else {\n      var startValue = typeof group.startingAt === 'string' ? parseInt(group.startingAt, 10) : group.startingAt;\n      var endValue = typeof group.endingAt === 'string' ? parseInt(group.endingAt, 10) : group.endingAt;\n\n      if (startValue && cValue < startValue || endValue && cValue > endValue) {\n        isRangeAvail = true;\n      } else {\n        isRangeAvail = false;\n      }\n    }\n\n    return isRangeAvail;\n  };\n\n  PivotEngine.prototype.getPercentFormat = function (formatField, currentField) {\n    var isHavingFormat = !isNullOrUndefined(formatField[currentField]) && !isNullOrUndefined(this.formatFields[currentField].format) ? this.formatFields[currentField].format.toLowerCase().match(/p[0-9]/) : undefined;\n    /* eslint-disable-line */\n\n    return !isNullOrUndefined(isHavingFormat) ? Number(this.formatFields[currentField].format.replace(/[^0-9]/g, '')) : 2;\n  };\n\n  PivotEngine.prototype.getFormattedFields = function (fields) {\n    var cnt = this.formats.length;\n\n    while (cnt--) {\n      this.formatFields[this.formats[cnt].name] = this.formats[cnt];\n\n      if (this.formats[cnt].type) {\n        this.dateFormatFunction[this.formats[cnt].name] = {\n          exactFormat: this.globalize.getDateFormat(this.formats[cnt]),\n          fullFormat: this.globalize.getDateFormat({\n            format: 'yyyy/MM/dd/HH/mm/ss',\n            type: this.formats[cnt].type\n          })\n        };\n      } // for (let len: number = 0, lnt: number = fields.length; len < lnt; len++) {\n      // if (fields[len] && fields[len].name === this.formats[cnt].name) {\n      //     this.formatFields[fields[len].name] = this.formats[cnt];\n      // }\n      // }\n\n    }\n  };\n  /* eslint-disable  */\n\n\n  PivotEngine.prototype.getFieldList = function (fields, isSort, isValueFilteringEnabled) {\n    var type;\n    var keys = this.fields;\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns, this.values, this.filters);\n    this.getFormattedFields(dataFields);\n    this.getCalculatedField(keys);\n    keys = this.fields;\n    var lenE = this.excludeFields.length;\n    lenE = lenE - 1;\n\n    while (lenE > -1) {\n      var index = this.fields.indexOf(this.excludeFields[lenE]);\n\n      if (index !== -1) {\n        this.fields.splice(index, 1);\n      }\n\n      if (this.fieldList) {\n        delete this.fieldList[this.excludeFields[lenE]];\n      }\n\n      lenE--;\n    }\n\n    var len = keys.length;\n    var dataTypes = ['string', 'number', 'datetime', 'date', 'boolean'];\n\n    if (this.savedFieldList) {\n      this.fieldList = this.savedFieldList;\n\n      while (len--) {\n        /** while is used for better performance than for */\n        var key = keys[len];\n        var field = this.getMappingField(key);\n\n        if (this.fieldList[key]) {\n          this.fieldList[key].isSelected = false;\n          this.fieldList[key].index = len;\n          this.fieldList[key].filter = [];\n          this.fieldList[key].sort = isSort ? 'Ascending' : 'None';\n          this.fieldList[key].isExcelFilter = false;\n          this.fieldList[key].filterType = '';\n          this.fieldList[key].showFilterIcon = field && 'showFilterIcon' in field ? field.showFilterIcon : true;\n          this.fieldList[key].showRemoveIcon = field && 'showRemoveIcon' in field ? field.showRemoveIcon : true;\n          this.fieldList[key].showSortIcon = field && 'showSortIcon' in field ? field.showSortIcon : true;\n          this.fieldList[key].showEditIcon = field && 'showEditIcon' in field ? field.showEditIcon : true;\n          this.fieldList[key].showValueTypeIcon = field && 'showValueTypeIcon' in field ? field.showValueTypeIcon : true;\n          this.fieldList[key].allowDragAndDrop = field && 'allowDragAndDrop' in field ? field.allowDragAndDrop : true;\n          this.fieldList[key].isCalculatedField = field && 'isCalculatedField' in field ? field.isCalculatedField : false;\n          this.fieldList[key].showNoDataItems = field && 'showNoDataItems' in field ? field.showNoDataItems : false;\n          this.fieldList[key].showSubTotals = field && 'showSubTotals' in field ? field.showSubTotals : true;\n\n          if (this.isValueFiltersAvail && isValueFilteringEnabled) {\n            this.fieldList[key].dateMember = [];\n            this.fieldList[key].formattedMembers = {};\n            this.fieldList[key].members = {};\n          }\n        } else {\n          type = field && 'dataType' in field && field.dataType && dataTypes.indexOf(field.dataType.toLowerCase()) > -1 ? field.dataType.toLowerCase() : type;\n          this.fieldList[key] = {\n            caption: field && 'caption' in field && field.caption ? field.caption : key,\n            id: key,\n            type: key.indexOf('_custom_group') !== -1 || key.indexOf('_date_group') !== -1 ? 'string' : type === undefined || type === 'undefined' ? 'number' : type,\n            isSelected: false,\n            sort: isSort ? 'Ascending' : 'None',\n            filterType: '',\n            index: len,\n            filter: [],\n            isCustomField: key.indexOf('_custom_group') !== -1 || key.indexOf('_date_group') !== -1,\n            showRemoveIcon: field && 'showRemoveIcon' in field ? field.showRemoveIcon : true,\n            showFilterIcon: field && 'showFilterIcon' in field ? field.showFilterIcon : true,\n            showSortIcon: field && 'showSortIcon' in field ? field.showSortIcon : true,\n            showNoDataItems: field && 'showNoDataItems' in field ? field.showNoDataItems : false,\n            isCalculatedField: field && 'isCalculatedField' in field ? field.isCalculatedField : false,\n            showEditIcon: field && 'showEditIcon' in field ? field.showEditIcon : true,\n            showValueTypeIcon: field && 'showValueTypeIcon' in field ? field.showValueTypeIcon : true,\n            allowDragAndDrop: field && 'allowDragAndDrop' in field ? field.allowDragAndDrop : true,\n            showSubTotals: field && 'showSubTotals' in field ? field.showSubTotals : true,\n            aggregateType: field && 'type' in field ? field.type : (key.indexOf('_custom_group') !== -1 || key.indexOf('_date_group') !== -1 ? 'string' : type === undefined || type === 'undefined' ? 'number' : type) === 'number' ? 'Sum' : 'Count',\n            baseField: field && 'baseField' in field ? field.baseField : undefined,\n            baseItem: field && 'baseItem' in field ? field.baseItem : undefined\n          };\n        }\n      }\n    } else {\n      this.fieldList = {};\n\n      while (len--) {\n        /** while is used for better performance than for */\n        var key = keys[len];\n        var field = this.getMappingField(key);\n        type = field && 'dataType' in field && field.dataType && dataTypes.indexOf(field.dataType.toLowerCase()) > -1 ? field.dataType.toLowerCase() : PivotUtil.getType(fields[this.fieldKeys[key]]);\n        this.fieldList[key] = {\n          id: key,\n          caption: field && 'caption' in field && field.caption ? field.caption : key,\n          type: key.indexOf('_custom_group') !== -1 || key.indexOf('_date_group') !== -1 ? 'string' : type === undefined || type === 'undefined' ? 'number' : type,\n          filterType: '',\n          index: len,\n          filter: [],\n          sort: isSort ? 'Ascending' : 'None',\n          isSelected: false,\n          isCustomField: key.indexOf('_custom_group') !== -1 || key.indexOf('_date_group') !== -1,\n          showFilterIcon: field && 'showFilterIcon' in field ? field.showFilterIcon : true,\n          showRemoveIcon: field && 'showRemoveIcon' in field ? field.showRemoveIcon : true,\n          showSortIcon: field && 'showSortIcon' in field ? field.showSortIcon : true,\n          showEditIcon: field && 'showEditIcon' in field ? field.showEditIcon : true,\n          showValueTypeIcon: field && 'showValueTypeIcon' in field ? field.showValueTypeIcon : true,\n          allowDragAndDrop: field && 'allowDragAndDrop' in field ? field.allowDragAndDrop : true,\n          showSubTotals: field && 'showSubTotals' in field ? field.showSubTotals : true,\n          showNoDataItems: field && 'showNoDataItems' in field ? field.showNoDataItems : false,\n          isCalculatedField: field && 'isCalculatedField' in field ? field.isCalculatedField : false,\n          aggregateType: field && 'type' in field ? field.type : (key.indexOf('_custom_group') !== -1 || key.indexOf('_date_group') !== -1 ? 'string' : type === undefined || type === 'undefined' ? 'number' : type) === 'number' ? 'Sum' : 'Count',\n          baseField: field && 'baseField' in field ? field.baseField : undefined,\n          baseItem: field && 'baseItem' in field ? field.baseItem : undefined\n        };\n      }\n    }\n\n    this.updateTreeViewData(dataFields);\n  };\n\n  PivotEngine.prototype.getMappingField = function (key) {\n    var field = {};\n\n    if (this.fieldMapping.length > 0) {\n      for (var index = 0, cnt = this.fieldMapping.length; index < cnt; index++) {\n        if (this.fieldMapping[index].name === key) {\n          field = this.fieldMapping[index];\n          break;\n        }\n      }\n    }\n\n    return field;\n  };\n\n  PivotEngine.prototype.updateFieldList = function (savedFieldList) {\n    var keys = this.fields;\n    var len = keys.length;\n\n    while (len--) {\n      /** while is used for better performance than for */\n      this.fieldList[keys[len]].isExcelFilter = savedFieldList[keys[len]].isExcelFilter;\n    }\n  };\n\n  PivotEngine.prototype.updateTreeViewData = function (fields) {\n    var cnt = fields.length;\n    var lnt = this.calculatedFieldSettings.length;\n\n    while (cnt--) {\n      if (this.fieldList[fields[cnt].name]) {\n        var field = this.fieldList[fields[cnt].name];\n        field.type = fields[cnt].dataType ? fields[cnt].dataType.toLowerCase() : field.type;\n        field.caption = fields[cnt].caption ? fields[cnt].caption : fields[cnt].name;\n        field.isSelected = true;\n        field.showNoDataItems = fields[cnt].showNoDataItems;\n        field.aggregateType = fields[cnt].type;\n        field.baseField = fields[cnt].baseField;\n        field.baseItem = fields[cnt].baseItem;\n        field.allowDragAndDrop = fields[cnt].allowDragAndDrop;\n        field.showFilterIcon = fields[cnt].showFilterIcon;\n        field.showSortIcon = fields[cnt].showSortIcon;\n        field.showRemoveIcon = fields[cnt].showRemoveIcon;\n        field.showValueTypeIcon = fields[cnt].showValueTypeIcon;\n        field.showEditIcon = fields[cnt].showEditIcon;\n        field.showSubTotals = fields[cnt].showSubTotals;\n      }\n    }\n\n    while (lnt--) {\n      if (this.fieldList[this.calculatedFieldSettings[lnt].name]) {\n        this.fieldList[this.calculatedFieldSettings[lnt].name].aggregateType = 'CalculatedField';\n        this.fieldList[this.calculatedFieldSettings[lnt].name].isCalculatedField = true;\n        this.fieldList[this.calculatedFieldSettings[lnt].name].formula = this.calculatedFieldSettings[lnt].formula;\n      }\n    }\n  };\n\n  PivotEngine.prototype.getCalculatedField = function (keys) {\n    for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {\n      var field = _a[_i];\n      this.calculatedFields[field.name] = extend({}, field, null, true);\n      this.calculatedFields[field.name].actualFormula = field.formula;\n    }\n\n    var fieldKeys = Object.keys(this.calculatedFields);\n\n    var _loop_2 = function (calc, cnt) {\n      var field = this_2.calculatedFields[fieldKeys[calc]];\n      var calcProperties = field.properties;\n      var actualFormula = (calcProperties ? calcProperties.formula : field.formula).trim();\n      var formula = actualFormula.replace(/\"/g, '');\n      field.formula = formula.indexOf('^') > -1 ? this_2.powerFunction(formula) : formula;\n\n      if (field.formula.indexOf('Math.min(') === -1 && field.formula.indexOf('min(') > -1) {\n        field.formula = field.formula.replace(/min\\(/g, 'Math.min(');\n      }\n\n      if (field.formula.indexOf('Math.max(') === -1 && field.formula.indexOf('max(') > -1) {\n        field.formula = field.formula.replace(/max\\(/g, 'Math.max(');\n      }\n\n      if (field.formula.indexOf('Math.abs(') === -1 && field.formula.indexOf('abs(') > -1) {\n        field.formula = field.formula.replace(/abs\\(/g, 'Math.abs(');\n      }\n      /* eslint-disable  */\n\n\n      field.name = calcProperties ? calcProperties.name : field.name;\n      keys = keys.filter(function (key) {\n        return key !== field.name;\n      });\n      keys.push(field.name);\n      var formulaType = actualFormula.split('\\\"');\n\n      for (var len = 0, lmt = formulaType.length; len < lmt; len++) {\n        var type = formulaType[len].trim();\n        var aggregateValue = type.split(/[ .:;?!~,`\"&|()<>{}\\[\\]\\r\\n/\\\\]+/);\n        var matchStrings = type.match(/^([^()]+)\\((.*)\\)$/);\n        var selectedString = aggregateValue[0] === 'DistinctCount' ? 'DistinctCount' : aggregateValue[0] === 'PopulationStDev' ? 'PopulationStDev' : aggregateValue[0] === 'SampleStDev' ? 'SampleStDev' : aggregateValue[0] === 'PopulationVar' ? 'PopulationVar' : aggregateValue[0] === 'SampleVar' ? 'SampleVar' : aggregateValue[0];\n\n        if (['Sum', 'Count', 'Min', 'Max', 'Avg', 'Product', 'DistinctCount', 'PopulationStDev', 'SampleStDev', 'PopulationVar', 'SampleVar', 'Median'].indexOf(selectedString) !== -1) {\n          var index = keys.indexOf(aggregateValue[1]) === -1 && matchStrings[2] ? keys.indexOf(matchStrings[2]) : keys.indexOf(aggregateValue[1]);\n\n          if (!this_2.calculatedFormulas[field.name]) {\n            this_2.calculatedFormulas[field.name] = [{\n              index: index,\n              type: selectedString,\n              formula: type\n            }];\n          } else {\n            this_2.calculatedFormulas[field.name].push({\n              index: index,\n              type: selectedString,\n              formula: type\n            });\n          }\n          /* eslint-enable */\n\n        }\n      }\n    };\n\n    var this_2 = this;\n\n    for (var calc = 0, cnt = fieldKeys.length; calc < cnt; calc++) {\n      _loop_2(calc, cnt);\n    }\n\n    this.fields = keys;\n  };\n\n  PivotEngine.prototype.validateFilters = function (data) {\n    this.isValueFiltersAvail = false;\n    var filterElements = data.filterSettings ? data.filterSettings : [];\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns);\n\n    for (var _i = 0, filterElements_1 = filterElements; _i < filterElements_1.length; _i++) {\n      var filter = filterElements_1[_i];\n\n      for (var _a = 0, dataFields_1 = dataFields; _a < dataFields_1.length; _a++) {\n        var field = dataFields_1[_a];\n\n        if (filter.name === field.name && filter.type === 'Value') {\n          this.isValueFiltersAvail = true;\n          break;\n        }\n      }\n\n      if (this.isValueFiltersAvail) {\n        break;\n      }\n    }\n  };\n\n  PivotEngine.prototype.validateValueFields = function () {\n    this.isValueHasAdvancedAggregate = false;\n\n    for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n      var value = _a[_i];\n\n      if (['DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentTotal', 'RunningTotals'].indexOf(value.type) !== -1) {\n        this.isValueHasAdvancedAggregate = true;\n        break;\n      }\n    }\n  };\n\n  PivotEngine.prototype.fillFieldMembers = function (data, indMat) {\n    var keys = this.fields;\n    var dlen = data.length;\n    var fList = this.fieldList;\n    var kLn = keys.length;\n\n    for (var kl = 0; kl < kLn; kl++) {\n      var key = keys[kl];\n\n      if (!fList[key].members || this.allowDataCompression) {\n        fList[key].members = {};\n      }\n\n      if (!fList[key].formattedMembers || this.allowDataCompression) {\n        fList[key].formattedMembers = {};\n      }\n\n      if (!fList[key].dateMember || this.allowDataCompression) {\n        fList[key].dateMember = [];\n      }\n\n      var members = fList[key].members;\n      var isDataAvail = Object.keys(members).length > 0 ? true : false;\n      var formattedMembers = fList[key].formattedMembers;\n      var dateMember = fList[key].dateMember;\n      var membersCnt = 0;\n      var fmembersCnt = 0; //let sort: string[] = [];\n\n      for (var dl = 0; dl < dlen; dl++) {\n        var mkey = data[dl][this.fieldKeys[key]]; // if (!isNullOrUndefined(mkey)) {\n\n        if (!isDataAvail) {\n          var fKey = mkey;\n          var formattedValue = this.pageSettings && !(this.formatFields[key] && ['date', 'dateTime', 'time'].indexOf(this.formatFields[key].type) > -1) ? {\n            formattedText: mkey === null ? this.localeObj ? this.localeObj.getConstant('null') : String(mkey) : mkey === undefined ? this.localeObj ? key in this.groupingFields ? this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') : String(mkey) : mkey.toString(),\n            actualText: mkey === null ? this.localeObj ? this.localeObj.getConstant('null') : String(mkey) : mkey === undefined ? this.localeObj ? key in this.groupingFields ? this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') : String(mkey) : mkey\n          } : this.getFormattedValue(mkey, key);\n\n          if (formattedValue.formattedText) {\n            fKey = formattedValue.formattedText;\n          }\n          /* eslint-disable */\n\n\n          if (!members.hasOwnProperty(mkey)) {\n            membersCnt++;\n            members[mkey] = {\n              index: [dl],\n              ordinal: membersCnt,\n              isDrilled: this.isExpandAll ? true : false\n            };\n            dateMember.push({\n              formattedText: formattedValue.formattedText,\n              actualText: formattedValue.dateText ? formattedValue.dateText : formattedValue.actualText\n            }); //sort.push(mkey);\n          } else {\n            members[mkey].index.push(dl);\n          }\n\n          if (!formattedMembers.hasOwnProperty(fKey)) {\n            /* eslint-enable */\n            fmembersCnt++;\n            formattedMembers[fKey] = {\n              index: [dl],\n              ordinal: fmembersCnt,\n              isDrilled: this.isExpandAll ? true : false\n            };\n          } else {\n            formattedMembers[fKey].index.push(dl);\n          }\n        }\n\n        if (!indMat[dl]) {\n          indMat[dl] = [];\n          indMat[dl][kl] = members[mkey].ordinal;\n        } else {\n          indMat[dl][kl] = members[mkey].ordinal;\n        } // }\n\n      }\n      /*sort = Object.keys(members).sort();\n      let sortedMembers: Members = {};\n      for (let sln: number = 0, slt: number = sort.length; sln < slt; sln++) {\n          sortedMembers[sort[sln]] = members[sort[sln]];\n      }\n      fList[key].members = sortedMembers; */\n\n    }\n  };\n  /* eslint-disable , @typescript-eslint/no-explicit-any */\n\n\n  PivotEngine.prototype.generateValueMatrix = function (data) {\n    var keys = this.fields;\n    var len = data.length;\n    var vMat = [];\n    var keyLen = keys.length;\n    var flList = this.fieldList;\n\n    while (len--) {\n      var tkln = keyLen; //if (isNullOrUndefined(vMat[len])) {\n\n      vMat[len] = []; //}\n\n      while (tkln--) {\n        var key = keys[tkln];\n        vMat[len][tkln] = flList[key].type === 'number' || isNullOrUndefined(data[len][this.fieldKeys[key]]) ? isNullOrUndefined(data[len][this.fieldKeys[key]]) ? data[len][this.fieldKeys[key]] : !isNaN(Number(data[len][this.fieldKeys[key]])) ? Number(data[len][this.fieldKeys[key]]) : undefined : 1;\n      }\n    }\n\n    return vMat;\n  };\n\n  PivotEngine.prototype.updateSortSettings = function (sortSettings, isSort) {\n    for (var sln = 0, slt = sortSettings ? sortSettings.length : 0; sln < slt && isSort; sln++) {\n      if (this.fieldList[sortSettings[sln].name]) {\n        this.fieldList[sortSettings[sln].name].sort = sortSettings[sln].order;\n      }\n    }\n  };\n\n  PivotEngine.prototype.updateFilterMembers = function (source) {\n    var filterRw = this.filterMembers;\n    var list = {}; //let eList: {[key: string] : number} = {};\n\n    var isInclude = this.getFilters(source, list); //this.getFilterExcludeList(source.rows, flist);\n    //this.getFilterExcludeList(source.columns, flist);\n    //this.getFilterExcludeList(source.filters, flist);\n    // let filters: Iterator = isInclude ? iList : eList;\n\n    var dln = this.indexMatrix.length;\n\n    if (isInclude) {\n      var keys = list.include.index;\n\n      for (var ln = 0; ln < keys.length; ln++) {\n        if (list.exclude === undefined || list.exclude.indexObject[keys[ln]] === undefined) {\n          filterRw.push(keys[ln]);\n        }\n      }\n    } else {\n      for (var ln = 0; ln < dln; ln++) {\n        if (list.exclude === undefined || list.exclude.indexObject[ln] === undefined) {\n          filterRw.push(ln);\n        }\n      }\n    }\n  };\n\n  PivotEngine.prototype.getFilters = function (source, ilist) {\n    var filterElements = source.filterSettings ? source.filterSettings : [];\n    var isInclude = false;\n    var filter = [];\n    /* eslint-disable */\n\n    for (var rln = 0, rlt = filterElements.length; rln < rlt; rln++) {\n      var filterElement = filterElements[rln].properties ? filterElements[rln].properties : filterElements[rln];\n      /* eslint-enable */\n\n      if (this.fieldList[filterElement.name] && this.fieldList[filterElement.name].isSelected && this.isValidFilterField(filterElement, source.allowMemberFilter, source.allowLabelFilter)) {\n        this.applyLabelFilter(filterElement);\n\n        if (filterElement) {\n          filter = filterElement.items;\n        }\n\n        if (filterElement.type && filterElement.type === 'Include') {\n          this.frameFilterList(filter, filterElement.name, ilist, 'include', filterElement.showLabelFilter, isInclude);\n          isInclude = true;\n        } else {\n          this.frameFilterList(filter, filterElement.name, ilist, 'exclude', filterElement.showLabelFilter);\n        }\n\n        if (filterElement.showLabelFilter) {\n          filterElement.items = [];\n          filterElement.type = filterElement.showDateFilter ? 'Date' : filterElement.showNumberFilter ? 'Number' : 'Label';\n        }\n      }\n    }\n    /* for (let cln: number = 0, clt: number = cols.length; cln < clt; cln ++) {\n         filter = cols[cln].filter ? cols[cln].filter.items : [];\n         if (filter.length && cols[cln].filter.type && cols[cln].filter.type === 'include') {\n             //type = cols[cln].filter.type;\n             this.frameFilterList(filter, cols[cln].name, ilist, 'include', isInclude);\n             isInclude = true;\n         } else {\n             this.frameFilterList(filter, cols[cln].name, ilist, 'exclude');\n         }\n     }\n     for (let vln: number = 0, vlt: number = filters.length; vln < vlt; vln ++) {\n         filter = filters[vln].filter ? filters[vln].filter.items : [];\n         if (filter.length && filters[vln].filter.type && filters[vln].filter.type === 'include') {\n             this.frameFilterList(filter, filters[vln].name, ilist, 'include', isInclude);\n             isInclude = true;\n         } else {\n             this.frameFilterList(filter, filters[vln].name, ilist, 'exclude');\n         }\n     } */\n\n\n    return isInclude;\n  };\n\n  PivotEngine.prototype.isValidFilterField = function (filterElement, allowMemberFiltering, allowLabelFiltering) {\n    var fieldName = filterElement.name;\n    var isValidFilterElement = false;\n    var filterTypes = ['Include', 'Exclude'];\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns);\n\n    if (this.fieldList[fieldName].isSelected && allowMemberFiltering && filterTypes.indexOf(filterElement.type) >= 0) {\n      isValidFilterElement = true;\n\n      for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n        var field = _a[_i];\n\n        if (fieldName === field.name) {\n          isValidFilterElement = false;\n          break;\n        }\n      }\n    } else if (allowLabelFiltering) {\n      for (var _b = 0, dataFields_2 = dataFields; _b < dataFields_2.length; _b++) {\n        var field = dataFields_2[_b];\n\n        if (fieldName === field.name && ['Label', 'Date', 'Number'].indexOf(filterElement.type) >= 0) {\n          isValidFilterElement = true;\n          break;\n        }\n      }\n    }\n\n    return isValidFilterElement;\n  };\n\n  PivotEngine.prototype.applyLabelFilter = function (filterElement) {\n    if (['Label', 'Date', 'Number'].indexOf(filterElement.type) >= 0) {\n      var members = Object.keys(this.fieldList[filterElement.name].members);\n      filterElement.showLabelFilter = true;\n\n      if (filterElement.type === 'Label') {\n        filterElement.items = this.getLabelFilterMembers(members, filterElement.condition, filterElement.value1, filterElement.value2);\n        /* eslint-disable-line */\n      } else if (filterElement.type === 'Date') {\n        filterElement.showDateFilter = true;\n        var date1 = typeof filterElement.value1 === 'string' ? new Date(filterElement.value1) : filterElement.value1;\n        var date2 = typeof filterElement.value2 === 'string' ? new Date(filterElement.value2) : filterElement.value2;\n        filterElement.items = this.getDateFilterMembers(members, filterElement.name, filterElement.condition, date1, date2);\n        /* eslint-disable-line */\n      } else {\n        filterElement.showNumberFilter = true;\n        filterElement.items = [];\n\n        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n          var member = members_1[_i];\n          var operand1 = this.getParsedValue(filterElement.name, filterElement.value1);\n          var operand2 = this.getParsedValue(filterElement.name, filterElement.value2);\n          var cValue = this.getParsedValue(filterElement.name, member);\n\n          if (this.validateFilterValue(cValue, filterElement.condition, operand1, operand2)) {\n            filterElement.items.push(member);\n          }\n        }\n      }\n      /* eslint-enable max-len */\n\n\n      var excludeOperators = ['DoesNotBeginWith', 'DoesNotContains', 'DoesNotEndsWith', 'DoesNotEquals', 'NotBetween'];\n      filterElement.type = filterElement.condition ? excludeOperators.indexOf(filterElement.condition) > -1 && !filterElement.showNumberFilter ? 'Exclude' : 'Include' : 'Exclude';\n    } else {\n      filterElement.showLabelFilter = false;\n    }\n  };\n\n  PivotEngine.prototype.getLabelFilterMembers = function (members, operator, value1, value2) {\n    var items = [];\n\n    for (var _i = 0, members_2 = members; _i < members_2.length; _i++) {\n      var member = members_2[_i];\n      var filterValue = member.toLowerCase();\n\n      if (value1.toString()) {\n        switch (operator) {\n          case 'Equals':\n          case 'DoesNotEquals':\n            if (filterValue === value1.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'BeginWith':\n          case 'DoesNotBeginWith':\n            if (filterValue.indexOf(value1.toLowerCase()) === 0) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'EndsWith':\n          case 'DoesNotEndsWith':\n            if (filterValue.match(value1.toLowerCase() + '$') !== null) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'Contains':\n          case 'DoesNotContains':\n            if (filterValue.indexOf(value1.toLowerCase()) > -1) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'GreaterThan':\n            if (filterValue > value1.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'GreaterThanOrEqualTo':\n            if (filterValue >= value1.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'LessThan':\n            if (filterValue < value1.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'LessThanOrEqualTo':\n            if (filterValue <= value1.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n\n          case 'Between':\n          case 'NotBetween':\n            if (filterValue >= value1.toLowerCase() && filterValue <= value2.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n\n          default:\n            if (filterValue === value1.toLowerCase()) {\n              items.push(member);\n            }\n\n            break;\n        }\n      }\n    }\n\n    return items;\n  };\n\n  PivotEngine.prototype.getDateFilterMembers = function (members, name, operator, value1, value2) {\n    var items = [];\n\n    for (var _i = 0, members_3 = members; _i < members_3.length; _i++) {\n      var member = members_3[_i];\n      var filterValue = new Date(member);\n\n      if (value1) {\n        switch (operator) {\n          case 'Equals':\n          case 'DoesNotEquals':\n            if (this.getFormattedValue(filterValue.toString(), name).formattedText === this.getFormattedValue(value1.toString(), name).formattedText) {\n              /* eslint-disable-line */\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n\n          case 'After':\n            if (filterValue.getTime() > value1.getTime()) {\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n\n          case 'AfterOrEqualTo':\n            if (filterValue.getTime() >= value1.getTime()) {\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n\n          case 'Before':\n            if (filterValue.getTime() < value1.getTime()) {\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n\n          case 'BeforeOrEqualTo':\n            if (filterValue.getTime() <= value1.getTime()) {\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n\n          case 'Between':\n          case 'NotBetween':\n            if (filterValue.getTime() >= value1.getTime() && filterValue.getTime() <= value2.getTime()) {\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n\n          default:\n            if (this.getFormattedValue(filterValue.toString(), name).formattedText === this.getFormattedValue(value1.toString(), name).formattedText) {\n              /* eslint-disable-line */\n              items.push(this.getFormattedValue(member, name).formattedText);\n            }\n\n            break;\n        }\n      }\n    }\n\n    return items;\n  };\n  /* eslint-enable max-len */\n\n\n  PivotEngine.prototype.validateFilterValue = function (val, operator, value1, value2) {\n    var isMemberInclude = false;\n\n    if (typeof value1 === 'number') {\n      switch (operator) {\n        case 'Equals':\n          if (val === value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'DoesNotEquals':\n          if (val !== value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'GreaterThan':\n          if (val > value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'GreaterThanOrEqualTo':\n          if (val >= value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'LessThan':\n          if (val < value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'LessThanOrEqualTo':\n          if (val <= value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'Between':\n          if (val >= value1 && val <= value2) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        case 'NotBetween':\n          if (!(val >= value1 && val <= value2)) {\n            isMemberInclude = true;\n          }\n\n          break;\n\n        default:\n          if (val !== value1) {\n            isMemberInclude = true;\n          }\n\n          break;\n      }\n    }\n\n    return isMemberInclude;\n  };\n\n  PivotEngine.prototype.frameFilterList = function (filter, name, list, type, isLabelFilter, isInclude) {\n    if (!list[type]) {\n      list[type] = {\n        indexObject: {},\n        index: []\n      };\n      this.updateFilter(filter, name, list, type, isLabelFilter, isInclude);\n    } else {\n      this.updateFilter(filter, name, list, type, isLabelFilter, isInclude);\n    } // }\n\n  };\n\n  PivotEngine.prototype.updateFilter = function (filter, name, list, type, isLabelFilter, isInclude) {\n    var fln = 0;\n    var field = this.fieldList[name];\n    field.filter = filter;\n    field.filterType = type;\n    field.isExcelFilter = isLabelFilter;\n    var members = this.formatFields[name] && ['date', 'dateTime', 'time'].indexOf(this.formatFields[name].type) > -1 ? field.formattedMembers : field.members;\n    var allowFil = isInclude;\n    var final = {};\n    var filterObj = {};\n    final[type] = {\n      indexObject: {},\n      index: []\n    };\n    this.fieldFilterMem[name] = {\n      memberObj: {}\n    };\n\n    while (filter[fln]) {\n      if (members[filter[fln]]) {\n        var indx = members[filter[fln]].index;\n\n        if (type === 'include') {\n          for (var iln = 0, ilt = indx.length; iln < ilt; iln++) {\n            if (!allowFil || list[type].indexObject[indx[iln]] !== undefined) {\n              final[type].indexObject[indx[iln]] = indx[iln];\n              final[type].index.push(indx[iln]);\n            }\n          }\n        } else {\n          for (var iln = 0, ilt = indx.length; iln < ilt; iln++) {\n            if (list[type].indexObject[indx[iln]] === undefined) {\n              list[type].indexObject[indx[iln]] = indx[iln];\n              list[type].index.push(indx[iln]);\n            }\n          }\n\n          this.fieldFilterMem[name].memberObj[filter[fln]] = filter[fln];\n        }\n      }\n\n      fln++;\n    }\n\n    if (type === 'include') {\n      list[type] = final[type];\n\n      for (var iln = 0; iln < filter.length; iln++) {\n        if (members[filter[iln]]) {\n          filterObj[filter[iln]] = filter[iln];\n        }\n      }\n\n      var items = Object.keys(members);\n\n      for (var iln = 0, ilt = items.length; iln < ilt; iln++) {\n        if (filterObj[items[iln]] === undefined) {\n          this.fieldFilterMem[name].memberObj[items[iln]] = items[iln];\n        }\n      }\n    }\n  };\n\n  PivotEngine.prototype.applyValueFiltering = function (rowData, level, rows, columns, valueFilter, rowFilterData, type) {\n    this.isValueFiltered = false;\n    var allMember = extend({}, type === 'row' && this.rowGrandTotal ? this.rowGrandTotal : type === 'column' && this.columnGrandTotal ? this.columnGrandTotal : rows[rows.length - 1], null, true);\n    this.getFilteredData(rows, columns, valueFilter, rowFilterData, level, rowData.name, allMember, type);\n\n    if (this.isValueFiltered) {\n      if (type === 'row' && this.rowGrandTotal === null || type === 'column' && this.columnGrandTotal === null) {\n        rowFilterData.push(allMember);\n      }\n\n      rows = rowFilterData;\n    }\n\n    return rows;\n  };\n\n  PivotEngine.prototype.getFilteredData = function (rows, columns, filterSettings, rowFilterData, level, fieldName, allMember, type) {\n    var rLen = rows.length;\n\n    for (var i = 0; i < rLen; i++) {\n      if (filterSettings[fieldName]) {\n        if (rows[i].level === level) {\n          this.isValueFiltered = true;\n          this.fieldList[fieldName].isExcelFilter = true;\n          var value = 0;\n          var measure = filterSettings[fieldName].measure;\n          var mPos = this.fieldList[measure].index;\n          var aggregate = this.fieldList[measure].aggregateType;\n          this.rawIndexObject = {};\n          value = type === 'row' ? this.getAggregateValue(rows[i].index, columns.indexObject, mPos, aggregate) : this.getAggregateValue(columns.index, rows[i].indexObject, mPos, aggregate);\n          var cellDetails = {\n            fieldName: measure,\n            row: rows[i],\n            column: columns,\n            value: value,\n            cellSets: this.getCellSet(this.rawIndexObject),\n            rowCellType: rows[i].hasChild && rows[i].isDrilled ? 'subTotal' : rows[i].type === 'grand sum' ? 'grandTotal' : 'value',\n            columnCellType: columns.hasChild && columns.isDrilled ? 'subTotal' : columns.type === 'grand sum' ? 'grandTotal' : 'value',\n            aggregateType: aggregate,\n            skipFormatting: false\n          };\n\n          if (this.getValueCellInfo) {\n            this.getValueCellInfo(cellDetails);\n          }\n\n          value = cellDetails.value;\n          this.rawIndexObject = {};\n          var operand1 = this.getParsedValue(measure, filterSettings[fieldName].value1);\n          var operand2 = this.getParsedValue(measure, filterSettings[fieldName].value2);\n\n          if (!this.validateFilterValue(value, filterSettings[fieldName].condition, operand1, operand2) && rows[i].type !== 'grand sum') {\n            var data = this.removefilteredData(rows[i], this.valueFilteredData);\n            var row = data ? data : rows[i];\n            this.validateFilteredParentData(row, this.valueFilteredData, allMember, 0, level, type);\n          } else if (rows[i].type !== 'grand sum') {\n            rowFilterData.push(extend({}, rows[i], null, true));\n            rowFilterData[rowFilterData.length - 1].isLevelFiltered = true;\n          }\n        } else if (rows[i].hasChild && rows[i].members.length > 0 && rows[i].type !== 'grand sum') {\n          rowFilterData.push(extend({}, rows[i], null, true));\n          rowFilterData[rowFilterData.length - 1].members = [];\n          rowFilterData[rowFilterData.length - 1].isLevelFiltered = true;\n          this.getFilteredData(rows[i].members, columns, filterSettings, rowFilterData[rowFilterData.length - 1].members, level, fieldName, allMember, type);\n          /* eslint-disable-line */\n        }\n      }\n    }\n  };\n  /* eslint-enable max-len */\n\n\n  PivotEngine.prototype.getParsedValue = function (measure, value) {\n    var cValue = value ? value.toString() : '';\n\n    if (this.formatFields[measure] && value) {\n      var formatSetting = extend({}, this.formatFields[measure], null, true);\n      delete formatSetting.name;\n      return this.globalize.parseNumber(cValue, formatSetting);\n    } else {\n      return this.globalize.parseNumber(cValue, {\n        format: 'N'\n      });\n    }\n  };\n\n  PivotEngine.prototype.removefilteredData = function (row, rowFilterData) {\n    var rows = extend([], rowFilterData, null, true);\n    var filteredData;\n\n    for (var i = 0; i < rows.length; i++) {\n      if (row.isLevelFiltered && row.axis === rows[i].axis && row.valueSort.levelName === rows[i].valueSort.levelName && row.actualText === rows[i].actualText && row.axis === rows[i].axis && row.level === rows[i].level && row.ordinal === rows[i].ordinal) {\n        filteredData = rows[i];\n        rowFilterData.splice(i, 1);\n        break;\n      } else if (rowFilterData[i].hasChild && rowFilterData[i].members.length > 0) {\n        this.removefilteredData(row, rowFilterData[i].members);\n      }\n    }\n\n    return filteredData;\n  };\n\n  PivotEngine.prototype.validateFilteredParentData = function (row, rows, allMemberData, i, level, type) {\n    if (rows.length > 0) {\n      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n        var rowFilteredData = rows_1[_i];\n\n        if (rowFilteredData.level === i) {\n          if (type === 'row') {\n            var index = row.index;\n\n            for (var _a = 0, index_1 = index; _a < index_1.length; _a++) {\n              var key = index_1[_a];\n\n              if (allMemberData.index.indexOf(key) >= 0) {\n                allMemberData.index.splice(allMemberData.index.indexOf(key), 1);\n              }\n\n              if (row.valueSort.levelName.toString().indexOf(rowFilteredData.valueSort.levelName.toString()) >= 0 && rowFilteredData.level !== level && rowFilteredData.index.indexOf(key) >= 0) {\n                rowFilteredData.index.splice(rowFilteredData.index.indexOf(key), 1);\n              }\n            }\n          } else {\n            /* eslint-disable */\n            var index = row.indexObject;\n\n            for (var _b = 0, _c = Object.keys(index); _b < _c.length; _b++) {\n              var key = _c[_b];\n\n              if (index.hasOwnProperty(key)) {\n                delete allMemberData.indexObject[key];\n\n                if (row.valueSort.levelName.toString().indexOf(rowFilteredData.valueSort.levelName.toString()) >= 0 && rowFilteredData.level !== level) {\n                  delete rowFilteredData.indexObject[key];\n                }\n              }\n            }\n            /* eslint-enable */\n\n          }\n\n          if (rowFilteredData && rowFilteredData.members.length > 0 && rowFilteredData.members[0].level === i + 1 && rowFilteredData.members[0].level !== level) {\n            this.validateFilteredParentData(row, rowFilteredData.members, allMemberData, i + 1, level, type);\n          }\n        }\n      }\n    } else {\n      if (type === 'row') {\n        var index = row.index;\n\n        for (var _d = 0, index_2 = index; _d < index_2.length; _d++) {\n          var key = index_2[_d];\n\n          if (allMemberData.index.indexOf(key) >= 0) {\n            allMemberData.index.splice(allMemberData.index.indexOf(key), 1);\n          }\n        }\n      } else {\n        /* eslint-disable */\n        var index = row.indexObject;\n\n        for (var _e = 0, _f = Object.keys(index); _e < _f.length; _e++) {\n          var key = _f[_e];\n\n          if (index.hasOwnProperty(key)) {\n            delete allMemberData.indexObject[key];\n          }\n        }\n        /* eslint-enable */\n\n      }\n    }\n  };\n\n  PivotEngine.prototype.updateFramedHeaders = function (framedHeaders, dataHeaders, filteredHeaders, headers, type) {\n    for (var _i = 0, framedHeaders_1 = framedHeaders; _i < framedHeaders_1.length; _i++) {\n      var dHeader = framedHeaders_1[_i];\n      this.isHeaderAvail = false;\n\n      if (this.validateFilteredHeaders(dHeader, filteredHeaders, type) || dHeader.type === 'grand sum') {\n        if (type === 'row') {\n          this.rowCount += this.rowValuesLength;\n        } else {\n          this.columnCount += this.colValuesLength;\n        }\n\n        headers.push(extend({}, dHeader, null, true));\n        headers[headers.length - 1].members = [];\n\n        if (dHeader.hasChild && dHeader.isDrilled && dHeader.members.length > 0) {\n          this.updateFramedHeaders(dHeader.members, dataHeaders, filteredHeaders, headers[headers.length - 1].members, type);\n        }\n      }\n    }\n\n    return this.filterFramedHeaders;\n  };\n\n  PivotEngine.prototype.validateFilteredHeaders = function (dHeader, filteredHeaders, type) {\n    for (var _i = 0, filteredHeaders_1 = filteredHeaders; _i < filteredHeaders_1.length; _i++) {\n      var vHeader = filteredHeaders_1[_i];\n\n      if (!this.isHeaderAvail) {\n        if (dHeader.actualText === vHeader.actualText && dHeader.level === vHeader.level && dHeader.valueSort.levelName === vHeader.valueSort.levelName) {\n          if (type === 'row') {\n            if (vHeader.index.length > 0) {\n              this.isHeaderAvail = true;\n              dHeader.index = vHeader.index;\n              return true;\n            } else {\n              this.isHeaderAvail = false;\n              dHeader.index = vHeader.index;\n              return false;\n            }\n          } else {\n            if (Object.keys(vHeader.indexObject).length > 0) {\n              this.isHeaderAvail = true;\n              dHeader.indexObject = vHeader.indexObject;\n              return true;\n            } else {\n              this.isHeaderAvail = false;\n              dHeader.indexObject = vHeader.indexObject;\n              return false;\n            }\n          }\n        } else if (vHeader.hasChild && vHeader.members.length > 0 && vHeader.type !== 'grand sum') {\n          this.validateFilteredHeaders(dHeader, vHeader.members, type);\n        }\n      }\n    }\n\n    return this.isHeaderAvail;\n  };\n\n  PivotEngine.prototype.isEmptyDataAvail = function (rowHeaders, columnHeaders) {\n    this.isEmptyData = false;\n\n    if (rowHeaders.length > 0 && rowHeaders[rowHeaders.length - 1].type === 'grand sum' && rowHeaders[rowHeaders.length - 1].index.length === 0) {\n      this.isEmptyData = true;\n    }\n\n    if (columnHeaders.length > 0 && columnHeaders[columnHeaders.length - 1].type === 'grand sum' && Object.keys(columnHeaders[columnHeaders.length - 1].indexObject).length === 0) {\n      this.isEmptyData = true;\n    }\n\n    if (rowHeaders.length === 0 || columnHeaders.length === 0) {\n      this.isEmptyData = true;\n    }\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.updateGridData = function (dataSource) {\n    this.data = dataSource.dataSource;\n\n    if (this.pageSettings && this.pageSettings.allowDataCompression) {\n      this.actualData = this.data;\n      this.data = this.getGroupedRawData(dataSource);\n    }\n\n    this.indexMatrix = [];\n\n    for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n      var field = _a[_i];\n      this.fieldList[field].members = {};\n      this.fieldList[field].formattedMembers = {};\n      this.fieldList[field].dateMember = [];\n    }\n\n    this.fillFieldMembers(this.data, this.indexMatrix);\n    this.valueMatrix = this.generateValueMatrix(this.data);\n    this.filterMembers = [];\n    this.cMembers = [];\n    this.rMembers = [];\n    this.updateFilterMembers(dataSource);\n    this.isEditing = true;\n    this.isDrillThrough = true;\n    this.generateGridData(dataSource);\n    this.isEditing = false;\n  };\n\n  PivotEngine.prototype.generateGridData = function (dataSource, headerCollection) {\n    var columns = dataSource.columns ? dataSource.columns : [];\n    var data = this.data;\n    var rows = dataSource.rows ? dataSource.rows : [];\n    var filterSettings = dataSource.filterSettings;\n    var values = dataSource.values ? dataSource.values : [];\n    this.removeCount = 0;\n    this.isExpandAll = dataSource.expandAll;\n    this.drilledMembers = dataSource.drilledMembers ? dataSource.drilledMembers : [];\n    this.isEmptyData = false;\n    var filterMembers = [];\n    /* eslint-disable */\n\n    var showNoDataItems = rows[0] && rows[0].showNoDataItems || columns[0] && columns[0].showNoDataItems;\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns, this.values, this.filters);\n\n    if (showNoDataItems) {\n      for (var ln = 0; ln < this.indexMatrix.length; ln++) {\n        filterMembers.push(ln);\n      }\n    }\n    /* eslint-enable */\n\n\n    for (var ln = 0; ln < this.filterMembers.length; ln++) {\n      this.filterPosObj[this.filterMembers[ln]] = this.filterMembers[ln];\n    } //let childrens: Field = this.fieldList[rows[0].name + ''];\n\n\n    this.valueSortSettings.columnIndex = undefined;\n    this.validateValueFields();\n    this.frameDrillObject();\n\n    if (!this.isValueFilterEnabled || this.isEditing) {\n      if (!headerCollection) {\n        this.columnCount = 0;\n        this.rowCount = 0;\n        this.cMembers = [];\n        this.rMembers = [];\n\n        if (rows.length !== 0) {\n          this.rMembers = this.getIndexedHeaders(rows, data, 0, rows[0].showNoDataItems ? filterMembers : this.filterMembers, 'row', '', this.allowValueFilter);\n        }\n\n        if (columns.length !== 0) {\n          this.cMembers = this.getIndexedHeaders(columns, data, 0, columns[0].showNoDataItems ? filterMembers : this.filterMembers, 'column', '', this.allowValueFilter);\n        }\n\n        this.insertAllMembersCommon();\n        this.saveDataHeaders = this.isValueFiltersAvail && dataSource.allowValueFilter ? {\n          rowHeaders: extend([], this.rMembers, null, true),\n          columnHeaders: extend([], this.cMembers, null, true)\n        } : {};\n      }\n    }\n\n    this.pivotValues = [];\n    this.headerContent = [];\n    this.valueContent = [];\n    this.valueFilteredData = [];\n    this.filterFramedHeaders = [];\n    var rowheads = [];\n    var colheads = [];\n    var rowFilteredData = [];\n    var columnFilteredData = [];\n    var valuesCount = this.values.length;\n\n    if (this.isValueFiltersAvail && dataSource.allowValueFilter && !headerCollection) {\n      this.valueFilteredData = [];\n      var rowHeaders = this.saveDataHeaders.rowHeaders;\n      var columnHeaders = this.saveDataHeaders.columnHeaders;\n\n      if (filterSettings.length > 0) {\n        var valueFilters = {};\n        var valueFields = {};\n        /* eslint-disable */\n\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n          var value = values_1[_i];\n          valueFields[value.name] = value;\n        }\n\n        for (var _a = 0, filterSettings_1 = filterSettings; _a < filterSettings_1.length; _a++) {\n          var filter = filterSettings_1[_a];\n          rowHeaders = rowFilteredData.length > 0 ? rowFilteredData : rowHeaders;\n          columnHeaders = columnFilteredData.length > 0 ? columnFilteredData : columnHeaders;\n          this.valueFilteredData = [];\n          var filterElement = filter.properties ? filter.properties : filter;\n          /* eslint-enable */\n\n          if (filterElement.type === 'Value' && this.fieldList[filter.name] && this.fieldList[filter.name].isSelected) {\n            valueFilters[filter.name] = filter;\n            filterElement.items = [];\n            var isAvail = false;\n            var rLen = rows.length;\n            var cLen = columns.length;\n\n            for (var i = 0; i < rLen; i++) {\n              if (filterElement.name === rows[i].name && valueFields[filterElement.measure] && !isAvail) {\n                isAvail = true;\n                rowFilteredData = this.applyValueFiltering(rows[i], i, rowHeaders, this.columnGrandTotal ? this.columnGrandTotal : columnHeaders[columnHeaders.length - 1], valueFilters, this.valueFilteredData, 'row');\n                break;\n              }\n            }\n\n            for (var j = 0; j < cLen; j++) {\n              if (filterElement.name === columns[j].name && valueFields[filterElement.measure] && !isAvail) {\n                isAvail = true;\n                columnFilteredData = this.applyValueFiltering(columns[j], j, columnHeaders, this.rowGrandTotal ? this.rowGrandTotal : rowHeaders[rowHeaders.length - 1], valueFilters, this.valueFilteredData, 'column');\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      rowFilteredData = rowFilteredData.length > 0 ? rowFilteredData : rowHeaders;\n      columnFilteredData = columnFilteredData.length > 0 ? columnFilteredData : columnHeaders;\n      this.isEmptyDataAvail(rowFilteredData, columnFilteredData);\n      var savedFieldList = extend({}, this.fieldList, null, true);\n      this.indexMatrix = [];\n      var fields = this.data[0];\n      this.getFieldList(fields, this.enableSort, dataSource.allowValueFilter);\n      this.fillFieldMembers(this.data, this.indexMatrix);\n      this.updateSortSettings(dataSource.sortSettings, this.enableSort);\n      this.valueMatrix = this.generateValueMatrix(this.data);\n      this.filterMembers = [];\n      this.updateFilterMembers(dataSource);\n      this.rMembers = rows.length !== 0 ? this.getIndexedHeaders(rows, data, 0, rows[0].showNoDataItems ? filterMembers : this.filterMembers, 'row', '') : [];\n      this.cMembers = columns.length !== 0 ? this.getIndexedHeaders(columns, data, 0, columns[0].showNoDataItems ? filterMembers : this.filterMembers, 'column', '') : [];\n      this.insertAllMembersCommon();\n      this.updateFieldList(savedFieldList);\n      this.rowCount = 0;\n      this.columnCount = 0;\n      this.rMembers = this.updateFramedHeaders(this.rMembers, this.rMembers, rowFilteredData, this.filterFramedHeaders, 'row');\n      this.filterFramedHeaders = [];\n      this.cMembers = this.updateFramedHeaders(this.cMembers, this.cMembers, columnFilteredData, this.filterFramedHeaders, 'column');\n      this.isValueFilterEnabled = true;\n    }\n\n    if (!headerCollection) {\n      this.applyValueSorting();\n    }\n\n    if (this.pageSettings) {\n      if (!headerCollection) {\n        this.headerCollection.rowHeaders = this.rMembers;\n        this.headerCollection.columnHeaders = this.cMembers;\n        this.headerCollection.rowHeadersCount = this.rowCount;\n        this.headerCollection.columnHeadersCount = this.columnCount;\n      } else {\n        this.rMembers = headerCollection.rowHeaders;\n        this.cMembers = headerCollection.columnHeaders;\n        this.rowCount = headerCollection.rowHeadersCount;\n        this.columnCount = headerCollection.columnHeadersCount;\n      }\n\n      this.calculatePagingValues();\n    }\n\n    this.getAggregatedHeaders(rows, columns, this.rMembers, this.cMembers, values);\n    this.getHeaderData(this.cMembers, colheads, this.pivotValues, 0, this.valueAxis ? 1 : valuesCount);\n    this.insertSubTotals();\n    this.getTableData(this.rMembers, rowheads, colheads, 0, this.pivotValues, valuesCount, this.rowGrandTotal ? this.rowGrandTotal : this.rMembers[this.rMembers.length - 1], this.columnGrandTotal ? this.columnGrandTotal : this.cMembers[this.cMembers.length - 1]);\n    /* eslint-disable-line */\n\n    this.applyAdvancedAggregate(rowheads, colheads, this.pivotValues);\n    this.isEngineUpdated = true;\n    this.isEmptyDataAvail(this.rMembers, this.cMembers); //  console.log(st1 - st2);\n  };\n\n  PivotEngine.prototype.updateHeaders = function (rowFlag, columnFlag) {\n    /* removing the row grant-total members */\n    rowFlag = isNullOrUndefined(rowFlag) ? this.showGrandTotals && this.showRowGrandTotals ? true : this.rows.length > 0 ? false : true : rowFlag;\n\n    if ((this.pageSettings && this.removeRowGrandTotal || !rowFlag && !this.rowGrandTotal) && this.rMembers[this.rMembers.length - 1].type === 'grand sum') {\n      this.rMembers = this.rMembers.slice(0, this.rMembers.length - 1);\n    }\n    /* removing the column gran-total members */\n\n\n    columnFlag = isNullOrUndefined(columnFlag) ? this.showGrandTotals && this.showColumnGrandTotals ? true : this.columns.length > 0 ? false : true : columnFlag;\n\n    if ((this.pageSettings && this.removeColumnGrandTotal || !columnFlag && !this.columnGrandTotal) && this.cMembers[this.cMembers.length - 1].type === 'grand sum') {\n      this.cMembers = this.cMembers.slice(0, this.cMembers.length - 1);\n    }\n  };\n\n  PivotEngine.prototype.updatePivotValues = function (updateHeaders) {\n    var rowFlag = this.showGrandTotals && this.showRowGrandTotals ? true : this.rows.length > 0 ? false : true;\n    var columnFlag = this.showGrandTotals && this.showColumnGrandTotals ? true : this.columns.length > 0 ? false : true;\n\n    if (updateHeaders) {\n      this.updateHeaders(rowFlag, columnFlag);\n    }\n    /* removing the row grant-totals */\n\n\n    if ((this.pageSettings && this.removeRowGrandTotal || !rowFlag && !this.rowGrandTotal) && this.valueContent.length > 0) {\n      var slicePos = 1;\n\n      if (this.valueAxis && this.values.length > 0) {\n        slicePos = 1 + this.values.length;\n      }\n\n      if (this.pivotValues[this.pivotValues.length - slicePos] && this.pivotValues[this.pivotValues.length - slicePos][0].type === 'grand sum') {\n        this.pivotValues = this.pivotValues.slice(0, this.pivotValues.length - slicePos);\n        this.valueContent = this.valueContent.slice(0, this.valueContent.length - slicePos);\n      }\n    }\n    /* removing the column gran-totals */\n\n\n    if ((this.pageSettings && this.removeColumnGrandTotal || !columnFlag && !this.columnGrandTotal) && this.headerContent.length > 0) {\n      var slicePos = this.values.length;\n\n      if (this.valueAxis && this.values.length > 0) {\n        slicePos = 1;\n      }\n\n      if (this.pivotValues[0][this.pivotValues[0].length - slicePos] && this.pivotValues[0][this.pivotValues[0].length - slicePos].type === 'grand sum') {\n        for (var ln = 0; ln < this.pivotValues.length; ln++) {\n          if (this.pivotValues[ln]) {\n            this.pivotValues[ln] = this.pivotValues[ln].slice(0, this.pivotValues[ln].length - slicePos);\n          }\n\n          if (this.headerContent[ln]) {\n            for (var pos = this.pivotValues[ln].length; pos < this.pivotValues[ln].length + slicePos; pos++) {\n              delete this.headerContent[ln][pos];\n            }\n          }\n        }\n      }\n    }\n\n    this.removeRowGrandTotal = this.removeColumnGrandTotal = false;\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.onDrill = function (drilledItem) {\n    this.frameDrillObject();\n    var headersInfo = this.getHeadersInfo(drilledItem.fieldName, drilledItem.axis);\n    this.performDrillOperation(headersInfo.headers, drilledItem, headersInfo.fields, headersInfo.position, 0);\n    this.headerCollection.rowHeadersCount = this.rowCount;\n    this.headerCollection.columnHeadersCount = this.columnCount;\n\n    if (headersInfo.axis === 'row') {\n      this.headerCollection.rowHeaders = headersInfo.headers;\n    } else {\n      this.headerCollection.columnHeaders = headersInfo.headers;\n    }\n\n    this.updateEngine();\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.onSort = function (sortItem) {\n    var headersInfo = this.getHeadersInfo(sortItem.name, '');\n    this.fieldList[sortItem.name].sort = sortItem.order;\n    this.performSortOperation(headersInfo.headers, sortItem, headersInfo, 0);\n    this.updateEngine();\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.onFilter = function (filterItem, dataSource) {\n    var headersInfo = this.getHeadersInfo(filterItem.name, '');\n\n    if (filterItem.type === 'Include' && filterItem.items.length === this.fieldList[filterItem.name].dateMember.length) {\n      this.fieldList[filterItem.name].filter = [];\n      this.fieldList[filterItem.name].filterType = '';\n    } else {\n      this.fieldList[filterItem.name].filter = filterItem.items;\n      this.fieldList[filterItem.name].filterType = filterItem.type;\n    }\n\n    var posObj = {};\n\n    for (var _i = 0, _a = this.filterMembers; _i < _a.length; _i++) {\n      var pos = _a[_i];\n      posObj[pos] = pos;\n    }\n\n    this.filterMembers = [];\n    this.fieldFilterMem = {};\n    this.updateFilterMembers(dataSource);\n    /* eslint-disable  */\n\n    var addPos = this.filterMembers.filter(function (pos) {\n      return posObj[pos] === undefined;\n    });\n    /* eslint-enable  */\n\n    var itemsObj = {};\n\n    for (var _b = 0, _c = filterItem.items; _b < _c.length; _b++) {\n      var item = _c[_b];\n      itemsObj[item] = item;\n    }\n\n    var showNoDataItems = this.rows[0] && this.rows[0].showNoDataItems || this.columns[0] && this.columns[0].showNoDataItems;\n\n    if (showNoDataItems) {\n      var filterMembers = [];\n      this.filterPosObj = {};\n\n      for (var ln = 0; ln < addPos.length; ln++) {\n        this.filterPosObj[addPos[ln]] = addPos[ln];\n      }\n\n      for (var ln = 0; ln < this.indexMatrix.length; ln++) {\n        filterMembers.push(ln);\n      }\n\n      addPos = filterMembers;\n    }\n\n    this.performFilterCommonUpdate(filterItem, headersInfo, addPos);\n    this.frameHeaderObjectsCollection = false;\n    this.headerObjectsCollection = {};\n    this.updateEngine();\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.onAggregation = function (field) {\n    this.fieldList[field.name].aggregateType = field.type;\n    this.rMembers = this.headerCollection.rowHeaders;\n    this.cMembers = this.headerCollection.columnHeaders;\n\n    if (this.allowDataCompression) {\n      this.data = this.getGroupedRawData(this.dataSourceSettings);\n      this.valueMatrix = this.generateValueMatrix(this.data);\n    }\n\n    this.updateEngine();\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.onCalcOperation = function (field) {\n    this.rMembers = this.headerCollection.rowHeaders;\n    this.cMembers = this.headerCollection.columnHeaders;\n    this.getCalculatedField(this.fields);\n\n    if (this.fieldList[field.name]) {\n      this.fieldList[field.name].formula = field.formula;\n    } else {\n      this.fieldList[field.name] = {\n        id: field.name,\n        caption: field.name,\n        type: 'number',\n        aggregateType: 'CalculatedField',\n        filterType: '',\n        index: this.fields.length - 1,\n        filter: [],\n        sort: this.enableSort ? 'Ascending' : 'None',\n        isSelected: true,\n        isExcelFilter: false,\n        formula: field.formula\n      };\n\n      if (this.valueAxis === 1) {\n        this.headerCollection.rowHeadersCount = this.rowCount = this.rowCount / (this.values.length - 1) * this.values.length;\n      } else {\n        this.headerCollection.columnHeadersCount = this.columnCount = this.columnCount / (this.values.length - 1) * this.values.length;\n      }\n    }\n\n    this.updateEngine();\n  };\n\n  PivotEngine.prototype.performDrillOperation = function (headers, drilledItem, fields, position, currentPosition) {\n    var count = 0;\n\n    while (count < headers.length) {\n      if (position === currentPosition) {\n        if (drilledItem.memberName === headers[count].valueSort.levelName.split(this.valueSortSettings.headerDelimiter).join(drilledItem.delimiter ? drilledItem.delimiter : '**')) {\n          if (drilledItem.action === 'down') {\n            headers[count].isDrilled = true;\n            headers[count].members = this.getIndexedHeaders(fields, this.data, position + 1, headers[count].index, drilledItem.axis, drilledItem.memberName.split(drilledItem.delimiter ? drilledItem.delimiter : '**').join(this.valueSortSettings.headerDelimiter));\n            var sortedHeaders = void 0;\n\n            if (drilledItem.axis === 'row') {\n              sortedHeaders = this.applyValueSorting(headers[count].members, this.cMembers);\n              headers[count].members = sortedHeaders.rMembers;\n            } else {\n              var showSubTotals = this.showSubTotals && this.showColumnSubTotals && fields[position].showSubTotals;\n              this.columnCount -= !showSubTotals ? this.colValuesLength : 0;\n              sortedHeaders = this.applyValueSorting(this.rMembers, headers[count].members);\n              headers[count].members = sortedHeaders.cMembers;\n            }\n          } else {\n            headers[count].isDrilled = false;\n            this.updateHeadersCount(headers[count].members, drilledItem.axis, position, fields, 'minus', true);\n            headers[count].members = [];\n          }\n\n          break;\n        }\n      } else if (headers[count].members.length > 0) {\n        headers[count].members = this.performDrillOperation(headers[count].members, drilledItem, fields, position, currentPosition + 1);\n      }\n\n      count++;\n    }\n\n    return headers;\n  };\n\n  PivotEngine.prototype.performSortOperation = function (headers, sortItem, headersInfo, currentPosition) {\n    var count = 0;\n\n    while (count < headers.length) {\n      if (headersInfo.position === currentPosition) {\n        headers = this.getSortedHeaders(headers, sortItem.order.toString());\n        break;\n      } else if (headers[count].members.length > 0) {\n        headers[count].members = this.performSortOperation(headers[count].members, sortItem, headersInfo, currentPosition + 1);\n      }\n\n      count++;\n    }\n\n    return headers;\n  };\n  /* eslint-disable  */\n\n\n  PivotEngine.prototype.performFilterDeletion = function (headers, filterItem, headersInfo, filterObjects, currentPosition) {\n    var count = 0;\n    var loopIn = true;\n\n    var _loop_3 = function () {\n      if (headersInfo.position === currentPosition) {\n        var engine_1 = this_3;\n        headers = headers.filter(function (item) {\n          return !engine_1.fieldFilterMem[filterItem.name].memberObj[item.formattedText] || item.type === 'grand sum';\n        });\n        loopIn = false;\n      } else if (headers[count].members.length > 0) {\n        headers[count].members = this_3.performFilterDeletion(headers[count].members, filterItem, headersInfo, filterObjects, currentPosition + 1);\n      }\n\n      count++;\n    };\n\n    var this_3 = this;\n\n    while (count < headers.length && loopIn) {\n      _loop_3();\n    }\n\n    var engine = this;\n    return headers.filter(function (item) {\n      return item.members.length > 0 ? item.members.length > 0 : engine.matchIndexes(item.indexObject, filterObjects);\n    });\n  };\n\n  PivotEngine.prototype.matchIndexes = function (index, filterObjects) {\n    var keys = Object.keys(index);\n    var len = keys.length;\n\n    if (len === 0) {\n      return true;\n    }\n\n    while (len > -1) {\n      if (filterObjects[index[keys[len]]] !== undefined) {\n        return true;\n      }\n\n      len--;\n    }\n\n    return false;\n  };\n\n  PivotEngine.prototype.performFilterAddition = function (headers, fields, headersInfo) {\n    var count = 0;\n\n    var _loop_4 = function () {\n      var levelName = headers[count].valueSort.levelName;\n\n      if (this_4.headerObjectsCollection[levelName]) {\n        var memberNameObj_1 = {};\n\n        for (var _i = 0, _a = headers[count].members; _i < _a.length; _i++) {\n          var member = _a[_i];\n          memberNameObj_1[member.valueSort.levelName.toString()] = member.valueSort.levelName.toString();\n        }\n\n        var excessHeaders = this_4.headerObjectsCollection[levelName].filter(function (member) {\n          return !memberNameObj_1[member.valueSort.levelName.toString()];\n        });\n        headers[count].members = headers[count].members.concat(excessHeaders);\n        headers[count].members = this_4.getSortedHeaders(headers[count].members, this_4.fieldList[headersInfo.fields[headers[count].members[0].level].name].sort);\n        delete this_4.headerObjectsCollection[levelName];\n      }\n\n      if (headers[count].members.length > 0) {\n        headers[count].members = this_4.performFilterAddition(headers[count].members, fields, headersInfo);\n      }\n\n      count++;\n    };\n\n    var this_4 = this;\n\n    while (count < headers.length) {\n      _loop_4();\n    }\n\n    return headers;\n  };\n\n  PivotEngine.prototype.performFilterCommonUpdate = function (filterItem, headersInfo, addPos) {\n    var rawHeaders = headersInfo.axis === 'row' ? this.rMembers : this.cMembers;\n    var filterObjects = {};\n\n    for (var _i = 0, _a = this.filterMembers; _i < _a.length; _i++) {\n      var item = _a[_i];\n      filterObjects[item] = item;\n    }\n\n    if (this.fieldFilterMem[filterItem.name]) {\n      rawHeaders = this.performFilterDeletion(headersInfo.headers, filterItem, headersInfo, filterObjects, 0);\n    }\n\n    if (addPos.length > 0 && headersInfo.fields.length > 0) {\n      this.frameHeaderObjectsCollection = true;\n\n      if (headersInfo.fields.filter(function (item) {\n        return item.showNoDataItems;\n      }).length > 0) {\n        for (var i = 0; i < this.data.length; i++) {\n          addPos.push(i);\n        } //addPos = (this.data as any).map((item, pos) => { return pos; });\n\n      }\n      /* eslint-disable */\n\n\n      this.headerObjectsCollection['parent'] = this.getIndexedHeaders(headersInfo.fields, this.data, 0, addPos, headersInfo.axis, '');\n      rawHeaders = this.performFilterAddition(rawHeaders, headersInfo.fields, headersInfo);\n      var headerNames_1 = {};\n\n      for (var _b = 0, rawHeaders_1 = rawHeaders; _b < rawHeaders_1.length; _b++) {\n        var header = rawHeaders_1[_b];\n        headerNames_1[header.valueSort.levelName.toString()] = header.valueSort.levelName.toString();\n      }\n\n      var excessHeaders = this.headerObjectsCollection['parent'].filter(function (header) {\n        return !headerNames_1[header.valueSort.levelName.toString()];\n      });\n      var grandHeader = rawHeaders.filter(function (item) {\n        return item.type === 'grand sum';\n      });\n\n      if (grandHeader.length > 0) {\n        rawHeaders.pop();\n      }\n      /* eslint-enable */\n\n\n      rawHeaders = this.getSortedHeaders(rawHeaders.concat(excessHeaders), this.fieldList[headersInfo.fields[0].name].sort).concat(grandHeader);\n    }\n\n    if (headersInfo.axis === 'row') {\n      this.rowCount = 0;\n    } else {\n      this.columnCount = 0;\n    }\n\n    this.updateHeadersCount(rawHeaders, headersInfo.axis, 0, headersInfo.fields, 'plus', false);\n\n    if (headersInfo.axis === 'row') {\n      if (headersInfo.position > 0) {\n        this.insertPosition(this.rows, this.data, 0, this.filterMembers, 'row', '', rawHeaders);\n      }\n\n      this.insertTotalPosition(rawHeaders);\n      this.rMembers = this.headerCollection.rowHeaders = rawHeaders;\n      this.headerCollection.rowHeadersCount = this.rowCount;\n    } else {\n      if (headersInfo.position > 0) {\n        this.insertPosition(this.columns, this.data, 0, this.filterMembers, 'column', '', rawHeaders);\n      }\n\n      this.insertTotalPosition(rawHeaders);\n      this.cMembers = this.headerCollection.columnHeaders = rawHeaders;\n      this.headerCollection.columnHeadersCount = this.columnCount;\n    }\n\n    this.applyValueSorting();\n  };\n  /* eslint-enable  */\n\n\n  PivotEngine.prototype.getHeadersInfo = function (fieldName, axis) {\n    this.rMembers = this.headerCollection.rowHeaders;\n    this.cMembers = this.headerCollection.columnHeaders;\n    axis = axis === '' ? this.getAxisByFieldName(fieldName) : axis;\n    var headers = axis === 'row' ? this.rMembers : this.cMembers;\n    var fields = axis === 'row' ? this.rows : this.columns;\n    var position = 0;\n\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var field = fields_1[_i];\n\n      if (field.name === fieldName) {\n        break;\n      }\n\n      position++;\n    }\n\n    return {\n      axis: axis,\n      fields: fields,\n      headers: headers,\n      position: position\n    };\n  };\n  /* eslint-disable-next-line */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.updateEngine = function () {\n    this.removeCount = 0;\n    this.validateValueFields();\n    this.calculatePagingValues();\n    this.pivotValues = [];\n    this.headerContent = [];\n    this.valueContent = [];\n    var rowheads = [];\n    var colheads = [];\n    var valuesCount = this.values.length;\n    this.getAggregatedHeaders(this.rows, this.columns, this.rMembers, this.cMembers, this.values);\n    this.getHeaderData(this.cMembers, colheads, this.pivotValues, 0, this.valueAxis ? 1 : valuesCount);\n    this.insertSubTotals();\n    this.getTableData(this.rMembers, rowheads, colheads, 0, this.pivotValues, valuesCount, this.rowGrandTotal ? this.rowGrandTotal : this.rMembers[this.rMembers.length - 1], this.columnGrandTotal ? this.columnGrandTotal : this.cMembers[this.cMembers.length - 1]);\n    /* eslint-disable-line */\n\n    this.applyAdvancedAggregate(rowheads, colheads, this.pivotValues);\n    this.isEngineUpdated = true;\n    this.isEmptyDataAvail(this.rMembers, this.cMembers);\n  };\n\n  PivotEngine.prototype.getAxisByFieldName = function (fieldName) {\n    var axisCount = 0;\n    var axis = '';\n\n    while (axisCount < 4 && axis === '') {\n      switch (axisCount) {\n        case 0:\n          axis = this.getFieldByName(fieldName, this.rows) ? 'row' : '';\n          break;\n\n        case 1:\n          axis = this.getFieldByName(fieldName, this.columns) ? 'column' : '';\n          break;\n      }\n\n      axisCount++;\n    }\n\n    return axis;\n  };\n\n  PivotEngine.prototype.getFieldByName = function (fieldName, fields) {\n    return new DataManager({\n      json: fields\n    }).executeLocal(new Query().where('name', 'equal', fieldName))[0];\n  };\n\n  PivotEngine.prototype.updateHeadersCount = function (headers, axis, position, fields, action, isDrill) {\n    var lenCnt = 0;\n    var field = fields[position];\n    var showSubTotals = true;\n\n    if (axis === 'column') {\n      // showSubTotals = this.showSubTotals && this.showColumnSubTotals && field ? field.showSubTotals : true;\n      showSubTotals = this.showSubTotals && this.showColumnSubTotals && field.showSubTotals;\n    } else {\n      showSubTotals = this.showSubTotals && this.showRowSubTotals && field ? field.showSubTotals : true;\n    }\n\n    while (lenCnt < headers.length) {\n      if (axis === 'row') {\n        this.rowCount = this.rowCount - (action === 'plus' ? -(this.valueAxis === 1 ? this.values.length : 1) : this.valueAxis === 1 ? this.values.length : 1);\n      } else {\n        this.columnCount = this.columnCount - (action === 'plus' ? -(this.valueAxis === 1 ? 1 : this.values.length) : this.valueAxis === 1 ? 1 : this.values.length);\n      }\n\n      if (headers[lenCnt].members.length > 0) {\n        this.updateHeadersCount(headers[lenCnt].members, axis, position + 1, fields, action, true);\n      }\n\n      lenCnt++;\n    }\n\n    if (axis === 'column' && !showSubTotals && isDrill) {\n      this.columnCount += action === 'plus' ? -this.colValuesLength : this.colValuesLength;\n    }\n  };\n  /* eslint-disable */\n\n  /** @hidden */\n\n\n  PivotEngine.prototype.frameHeaderWithKeys = function (header) {\n    var keys = Object.keys(header);\n    var keyPos = 0;\n    var framedHeader = {};\n\n    while (keyPos < keys.length) {\n      framedHeader[keys[keyPos]] = header[keys[keyPos]];\n      keyPos++;\n    }\n\n    return framedHeader;\n  };\n\n  PivotEngine.prototype.getSortedHeaders = function (headers, sortOrder) {\n    var isNotDateType = !(this.formatFields && this.formatFields[headers[0].valueSort.axis] && this.formatFields[headers[0].valueSort.axis].type);\n    var childrens = this.fieldList[headers[0].valueSort.axis];\n\n    if (isNotDateType) {\n      if (childrens && childrens.type == 'number' && headers.length > 0 && typeof headers[0].actualText == 'string') {\n        var stringValue = [];\n        var alphaNumbervalue = [];\n        var nullValue = [];\n\n        for (var i = 0; i < headers.length; i++) {\n          if (isNaN(headers[i].actualText.toString().charAt(0))) {\n            stringValue.push(headers[i]);\n          } else if (headers[i].actualText === \"\") {\n            nullValue.push(headers[i]);\n          } else {\n            alphaNumbervalue.push(headers[i]);\n          }\n        }\n\n        if (stringValue.length > 0) {\n          stringValue = childrens.sort === 'Ascending' ? stringValue.sort(function (a, b) {\n            return a.actualText > b.actualText ? 1 : b.actualText > a.actualText ? -1 : 0;\n          }) : childrens.sort === 'Descending' ? stringValue.sort(function (a, b) {\n            return a.actualText < b.actualText ? 1 : b.actualText < a.actualText ? -1 : 0;\n          }) : stringValue;\n        }\n\n        if (alphaNumbervalue.length > 0) {\n          alphaNumbervalue = childrens.sort === 'Ascending' ? alphaNumbervalue.sort(function (a, b) {\n            return Number(a.actualText.toString().match(/\\d+/)[0]) > Number(b.actualText.toString().match(/\\d+/)[0]) ? 1 : Number(b.actualText.toString().match(/\\d+/)[0]) > Number(a.actualText.toString().match(/\\d+/)[0]) ? -1 : 0;\n          }) : childrens.sort === 'Descending' ? alphaNumbervalue.sort(function (a, b) {\n            return Number(a.actualText.toString().match(/\\d+/)[0]) < Number(b.actualText.toString().match(/\\d+/)[0]) ? 1 : Number(b.actualText.toString().match(/\\d+/)[0]) < Number(a.actualText.toString().match(/\\d+/)[0]) ? -1 : 0;\n          }) : alphaNumbervalue;\n        }\n\n        return headers = nullValue.concat(alphaNumbervalue, stringValue);\n      } else {\n        return sortOrder === 'Ascending' ? headers.sort(function (a, b) {\n          return a.actualText > b.actualText ? 1 : b.actualText > a.actualText ? -1 : 0;\n        }) : sortOrder === 'Descending' ? headers.sort(function (a, b) {\n          return a.actualText < b.actualText ? 1 : b.actualText < a.actualText ? -1 : 0;\n        }) : headers;\n      }\n    } else {\n      return sortOrder === 'Ascending' ? headers.sort(function (a, b) {\n        return a.dateText > b.dateText ? 1 : b.dateText > a.dateText ? -1 : 0;\n      }) : sortOrder === 'Descending' ? headers.sort(function (a, b) {\n        return a.dateText < b.dateText ? 1 : b.dateText < a.dateText ? -1 : 0;\n      }) : headers;\n    }\n  };\n  /** @hidden */\n\n\n  PivotEngine.prototype.applyValueSorting = function (rMembers, cMembers) {\n    /* eslint-enable */\n    var isNullArgument = false;\n\n    if (rMembers === undefined || cMembers === undefined) {\n      rMembers = this.rMembers;\n      cMembers = this.cMembers;\n      isNullArgument = true;\n    }\n\n    if (this.enableValueSorting && this.valueSortSettings.headerText && this.valueSortSettings.headerText !== '' && this.values.length > 0) {\n      var textArray = this.valueSortSettings.headerText.split(this.valueSortSettings.headerDelimiter);\n      var hText = '';\n      var mIndex = void 0;\n      var mType = void 0;\n      var caption = void 0;\n\n      for (var i = 0; i < this.values.length; i++) {\n        if (this.values[i].caption === textArray[textArray.length - 1]) {\n          caption = this.values[i].name;\n          break;\n        } else {\n          caption = textArray[textArray.length - 1];\n        }\n      }\n\n      if ((this.values.length === 1 && this.columns.length === 0 || this.values.length > 1) && caption && this.fieldList[caption]) {\n        for (var i = 0; i < textArray.length - 1; i++) {\n          hText = hText === '' ? textArray[i] : hText + this.valueSortSettings.headerDelimiter + textArray[i];\n        }\n\n        mIndex = this.fieldList[caption].index;\n        mType = this.fieldList[caption].aggregateType;\n      } else {\n        if (!this.alwaysShowValueHeader || textArray.length === 1) {\n          hText = this.valueSortSettings.headerText;\n        } else {\n          for (var i = 0; i < textArray.length - 1; i++) {\n            hText = hText === '' ? textArray[i] : hText + this.valueSortSettings.headerDelimiter + textArray[i];\n          }\n        }\n\n        mIndex = this.fieldList[this.values[0].name].index;\n        mType = this.fieldList[this.values[0].name].aggregateType;\n      }\n\n      var member = void 0;\n\n      if (this.valueAxis === 0) {\n        member = this.getMember(cMembers, hText);\n\n        if (member) {\n          rMembers = this.sortByValueRow(rMembers, member, this.valueSortSettings.sortOrder, mIndex, mType);\n        }\n      } else {\n        member = this.getMember(rMembers, hText);\n\n        if (member) {\n          cMembers = this.sortByValueRow(cMembers, member, this.valueSortSettings.sortOrder, mIndex, mType);\n        }\n      }\n\n      if (isNullArgument) {\n        this.rMembers = rMembers;\n        this.cMembers = cMembers;\n\n        if (this.pageSettings) {\n          this.headerCollection.rowHeaders = this.rMembers;\n          this.headerCollection.columnHeaders = this.cMembers;\n        }\n      }\n    }\n\n    return {\n      rMembers: rMembers,\n      cMembers: cMembers\n    };\n  };\n\n  PivotEngine.prototype.getMember = function (cMembers, headerText) {\n    var vlen = cMembers.length;\n    var member;\n\n    for (var j = 0; j < vlen; j++) {\n      if (cMembers[j].valueSort.levelName === headerText) {\n        member = cMembers[j];\n        break;\n      } else if (cMembers[j].members.length > 0) {\n        member = this.getMember(cMembers[j].members, headerText);\n      }\n\n      if (member) {\n        return member;\n      }\n    }\n\n    return member;\n  };\n\n  PivotEngine.prototype.sortByValueRow = function (rMembers, member, sortOrder, mIndex, mType) {\n    var aggreColl = [];\n\n    for (var _i = 0, rMembers_1 = rMembers; _i < rMembers_1.length; _i++) {\n      var header = rMembers_1[_i];\n\n      if (header.type === 'grand sum') {\n        aggreColl.push({\n          'header': header\n        });\n      } else {\n        this.rawIndexObject = {};\n        var value = this.getAggregateValue(header.index, member.indexObject, mIndex, mType);\n        var cellDetails = {\n          fieldName: this.fields[mIndex],\n          row: header,\n          column: member,\n          value: value,\n          cellSets: this.getCellSet(this.rawIndexObject),\n          rowCellType: header.hasChild && header.isDrilled ? 'subTotal' : header.type === 'grand sum' ? 'grandTotal' : 'value',\n          columnCellType: member.hasChild && member.isDrilled ? 'subTotal' : member.type === 'grand sum' ? 'grandTotal' : 'value',\n          aggregateType: mType,\n          skipFormatting: false\n        };\n\n        if (this.getValueCellInfo) {\n          this.getValueCellInfo(cellDetails);\n        }\n\n        value = cellDetails.value;\n        this.rawIndexObject = {};\n        aggreColl.push({\n          'header': header,\n          'value': value\n        });\n      }\n    }\n    /* eslint-disable */\n\n\n    aggreColl.sort(function (a, b) {\n      return sortOrder === 'Descending' ? (b['value'] || b['header']['type'] === 'grand sum' ? b['value'] : 0) - (a['value'] || a['header']['type'] === 'grand sum' ? a['value'] : 0) : (a['value'] || a['header']['type'] === 'grand sum' ? a['value'] : 0) - (b['value'] || b['header']['type'] === 'grand sum' ? b['value'] : 0);\n    });\n    rMembers = aggreColl.map(function (item) {\n      return item['header'];\n    });\n\n    for (var _a = 0, rMembers_2 = rMembers; _a < rMembers_2.length; _a++) {\n      var header = rMembers_2[_a];\n\n      if (header.members.length > 0) {\n        header.members = this.sortByValueRow(header.members, member, sortOrder, mIndex, mType);\n      }\n    }\n\n    return rMembers;\n    /* eslint-enable */\n  };\n\n  PivotEngine.prototype.insertAllMembersCommon = function () {\n    this.rowGrandTotal = this.columnGrandTotal = null;\n    var rowFlag = this.showGrandTotals && this.showRowGrandTotals ? true : this.rows.length > 0 ? false : true;\n    var columnFlag = this.showGrandTotals && this.showColumnGrandTotals ? true : this.columns.length > 0 ? false : true;\n\n    if (this.isValueHasAdvancedAggregate) {\n      /* inserting the row grant-total members */\n      this.insertAllMember(this.rMembers, this.filterMembers, '', 'row');\n\n      if (rowFlag) {\n        this.rowCount += this.rowValuesLength;\n      }\n      /* inserting the column gran-total members */\n\n\n      this.insertAllMember(this.cMembers, this.filterMembers, '', 'column');\n\n      if (columnFlag) {\n        this.columnCount += this.colValuesLength;\n      }\n    } else {\n      if (rowFlag) {\n        /* inserting the row grant-total members */\n        this.insertAllMember(this.rMembers, this.filterMembers, '', 'row');\n        this.rowCount += this.rowValuesLength;\n      } else {\n        this.rowGrandTotal = this.insertAllMember([], this.filterMembers, '', 'row')[0];\n      }\n\n      if (columnFlag) {\n        /* inserting the column gran-total members */\n        this.insertAllMember(this.cMembers, this.filterMembers, '', 'column');\n        this.columnCount += this.colValuesLength;\n      } else {\n        this.columnGrandTotal = this.insertAllMember([], this.filterMembers, '', 'column')[0];\n      }\n    }\n  };\n\n  PivotEngine.prototype.insertSubTotals = function () {\n    var rowLength = this.pivotValues.length;\n\n    for (var rowCnt = 0; rowCnt < rowLength; rowCnt++) {\n      var rowCells = this.pivotValues[rowCnt];\n\n      if (rowCells) {\n        var savedCell = void 0;\n        var spanCnt = 1;\n        var colLength = rowCells.length;\n        /* eslint-disable */\n\n        var indexObj = void 0;\n        /* eslint-enable */\n\n        for (var colCnt = colLength - 1; colCnt > 0; colCnt--) {\n          var cell = rowCells[colCnt];\n\n          if (cell) {\n            // if (cell.rowSpan > 1) {\n            //     cell.rowSpan = 1;\n            // }\n            if (savedCell) {\n              savedCell.colSpan = spanCnt;\n              savedCell.colIndex = savedCell.colIndex - (spanCnt - 1);\n            }\n\n            indexObj = {\n              index: cell.index,\n              indexObject: cell.indexObject\n            };\n            cell.index = [];\n            cell.indexObject = {};\n            savedCell = extend({}, cell, null, true);\n            cell.index = indexObj.index;\n            cell.indexObject = indexObj.indexObject;\n            var rowPos = rowCnt + 1;\n\n            while (this.pivotValues[rowPos] && !this.pivotValues[rowPos][colCnt]) {\n              if (!this.pivotValues[rowCnt][colCnt].isDrilled) {\n                this.pivotValues[rowCnt][colCnt].rowSpan = rowPos - rowCnt + 1;\n                savedCell.rowSpan = rowPos - rowCnt + 1;\n              }\n\n              var cellType = cell.type === 'sum' || cell.type === 'grand sum' ? cell.type : 'sum';\n              this.pivotValues[rowPos][colCnt] = this.headerContent[rowPos][colCnt] = {\n                type: cellType,\n                formattedText: cell.type === 'sum' || cell.type === 'grand sum' ? cell.formattedText : cell.formattedText + ' Total',\n                axis: 'column',\n                level: -1,\n                colIndex: colCnt,\n                rowIndex: rowPos,\n                valueSort: cell.valueSort\n              };\n\n              if (cell.valueSort && cell.valueSort[this.valueSortSettings.headerText]) {\n                this.valueSortSettings.columnIndex = colCnt;\n              }\n\n              var isSpanned = false;\n\n              if (cellType === 'grand sum') {\n                this.pivotValues[rowCnt][colCnt].rowSpan = rowPos - rowCnt + 1;\n                savedCell.rowSpan = rowPos - rowCnt + 1;\n              } else if (this.pivotValues[rowCnt][colCnt].type !== 'sum' && this.pivotValues[rowCnt][colCnt].isDrilled) {\n                this.pivotValues[rowCnt + 1][colCnt].rowSpan = rowPos - rowCnt;\n                isSpanned = true;\n              } else {\n                this.pivotValues[rowPos][colCnt].rowSpan = -1;\n              }\n\n              if (rowPos > rowCnt + 1 && (this.pivotValues[rowCnt][colCnt].type === 'sum' || isSpanned)) {\n                this.pivotValues[rowPos][colCnt].rowSpan = -1;\n              }\n\n              rowPos++;\n            }\n\n            spanCnt = 1;\n          } else {\n            rowCells[colCnt] = this.headerContent[rowCnt][colCnt] = extend({}, savedCell, null, true);\n            rowCells[colCnt].index = this.headerContent[rowCnt][colCnt].index = indexObj.index;\n            rowCells[colCnt].indexObject = this.headerContent[rowCnt][colCnt].indexObject = indexObj.indexObject;\n            spanCnt++;\n            rowCells[colCnt].colSpan = spanCnt;\n            rowCells[colCnt].colIndex = rowCells[colCnt].colIndex - (spanCnt - 1);\n          }\n\n          if (colCnt === 1 && savedCell) {\n            savedCell.colSpan = spanCnt;\n            savedCell.colIndex = savedCell.colIndex - (spanCnt - 1);\n          }\n        }\n      }\n    }\n  };\n\n  PivotEngine.prototype.frameDrillObject = function () {\n    this.fieldDrillCollection = {};\n\n    for (var fieldCnt = 0; fieldCnt < this.drilledMembers.length; fieldCnt++) {\n      var drillOption = this.drilledMembers[fieldCnt];\n\n      for (var memberCnt = 0; memberCnt < drillOption.items.length; memberCnt++) {\n        var memberString = drillOption.name + this.valueSortSettings.headerDelimiter + drillOption.items[memberCnt].split(drillOption.delimiter).join(this.valueSortSettings.headerDelimiter);\n        this.fieldDrillCollection[memberString] = memberString;\n      }\n    }\n  };\n  /* eslint-disable */\n\n\n  PivotEngine.prototype.getIndexedHeaders = function (keys, data, keyInd, position, axis, parentMember, valueFil) {\n    var hierarchy = [];\n\n    if (keys) {\n      var rlen = keys.length;\n      var decisionObj = {};\n      var fieldName = keys[keyInd].name;\n      var field = keys[keyInd]; // let members: string[] = Object.keys(this.fieldList[field].members);\n\n      var childrens = this.fieldList[fieldName];\n\n      if (isNullOrUndefined(this.reportDataType)) {\n        this.reportDataType = {};\n\n        for (var i = 0; i < this.dataSourceSettings.rows.length; i++) {\n          this.reportDataType[this.dataSourceSettings.rows[i].name] = this.dataSourceSettings.rows[i].dataType;\n        }\n\n        for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {\n          this.reportDataType[this.dataSourceSettings.columns[i].name] = this.dataSourceSettings.columns[i].dataType;\n        }\n\n        for (var i = 0; i < this.dataSourceSettings.values.length; i++) {\n          this.reportDataType[this.dataSourceSettings.values[i].name] = this.dataSourceSettings.values[i].dataType;\n        }\n      }\n\n      childrens.type = !isNullOrUndefined(this.reportDataType[childrens.id]) ? this.reportDataType[childrens.id] : childrens.type;\n      var isNoData = false;\n      var isDateType = this.formatFields[fieldName] && ['date', 'dateTime', 'time'].indexOf(this.formatFields[fieldName].type) > -1;\n      var showNoDataItems = position.length < 1 && keyInd > 0 || field.showNoDataItems;\n      var savedMembers = {};\n\n      if (showNoDataItems) {\n        var members = Object.keys(childrens.members);\n\n        for (var pos = 0, lt = members.length; pos < lt; pos++) {\n          if (this.showHeaderWhenEmpty || this.localeObj && members[pos] !== this.localeObj.getConstant('undefined')) {\n            savedMembers[members[pos]] = members[pos];\n          }\n        }\n\n        if (position.length < 1) {\n          isNoData = true;\n          position.length = members.length;\n        }\n      }\n\n      for (var pos = 0, lt = position.length; pos < lt; pos++) {\n        var member = {};\n\n        if (!isNullOrUndefined(keys[keyInd].showSubTotals) && !keys[keyInd].showSubTotals) {\n          member.showSubTotals = false;\n        }\n\n        member.hasChild = keyInd < rlen - 1;\n        member.level = keyInd;\n        member.axis = axis;\n        member.colSpan = 1;\n        var memInd = isNoData ? childrens.members[Object.keys(savedMembers)[0]].ordinal : this.indexMatrix[position[pos]][childrens.index];\n        var headerValue = isNoData ? Object.keys(savedMembers)[0] : data[position[pos]][this.fieldKeys[fieldName]];\n\n        if ((isNullOrUndefined(headerValue) || this.localeObj && headerValue === this.localeObj.getConstant('undefined')) && !this.showHeaderWhenEmpty) {\n          if (showNoDataItems && !isNoData && keyInd > 0 && pos + 1 === position.length && Object.keys(savedMembers).length > 0) {\n            lt = Object.keys(savedMembers).length;\n            isNoData = true;\n            pos = -1;\n          }\n\n          continue;\n        }\n\n        delete savedMembers[headerValue];\n\n        if (showNoDataItems && this.fieldFilterMem[fieldName] && this.fieldFilterMem[fieldName].memberObj[headerValue] === headerValue) {\n          continue;\n        }\n\n        var formattedValue = isDateType ? {\n          actualText: headerValue,\n          formattedText: childrens.dateMember[memInd - 1].formattedText,\n          dateText: childrens.dateMember[memInd - 1].actualText\n        } : {\n          formattedText: headerValue === null ? this.localeObj ? this.localeObj.getConstant('null') : String(headerValue) : headerValue === undefined ? this.localeObj ? fieldName in this.groupingFields ? this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') : String(headerValue) : String(headerValue),\n          actualText: headerValue === null ? this.localeObj ? this.localeObj.getConstant('null') : String(headerValue) : headerValue === undefined ? this.localeObj ? fieldName in this.groupingFields ? this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') : String(headerValue) : headerValue\n        };\n        member.actualText = formattedValue.actualText;\n        member.formattedText = formattedValue.formattedText;\n\n        if (isDateType) {\n          member.dateText = formattedValue.dateText;\n        }\n\n        var availData = showNoDataItems ? this.filterPosObj[position[pos]] !== undefined && !isNoData ? true : false : true; //member.name = members[memInd];\n        // member.type = member.hasChild ? 'All' : 'Single';\n\n        var pindx = void 0;\n\n        if (!(decisionObj && decisionObj[memInd])) {\n          decisionObj[memInd] = {\n            index: [],\n            indexObject: {}\n          };\n          member.index = decisionObj[memInd].index;\n          member.indexObject = decisionObj[memInd].indexObject;\n\n          if (availData) {\n            member.index = decisionObj[memInd].index = [position[pos]];\n            decisionObj[memInd].indexObject[position[pos]] = position[pos];\n            member.indexObject = decisionObj[memInd].indexObject;\n          }\n\n          member.ordinal = memInd;\n          member.valueSort = {};\n          member.valueSort.axis = fieldName;\n\n          if (keyInd !== 0) {\n            member.valueSort.levelName = parentMember + this.valueSortSettings.headerDelimiter + member.formattedText;\n            member.valueSort[parentMember + this.valueSortSettings.headerDelimiter + member.formattedText] = 1;\n          } else {\n            member.valueSort[member.formattedText] = 1;\n            member.valueSort.levelName = member.formattedText;\n          }\n\n          var memberString = member.valueSort.axis + this.valueSortSettings.headerDelimiter + member.valueSort.levelName;\n          member.isDrilled = valueFil && this.isValueFiltersAvail ? true : member.hasChild && this.fieldDrillCollection[memberString] ? this.isExpandAll ? false : true : childrens.members[headerValue].isDrilled; //if (!member.members) {\n\n          member.members = []; //}\n          //let copyObj: AxisSet = Object.create(member);\n\n          hierarchy.push(member);\n        } else if (availData) {\n          decisionObj[memInd].index.push(position[pos]);\n          decisionObj[memInd].indexObject[position[pos]] = position[pos];\n        }\n\n        if (showNoDataItems && !isNoData && keyInd > 0 && pos + 1 === position.length && Object.keys(savedMembers).length > 0) {\n          isNoData = true;\n          lt = Object.keys(savedMembers).length;\n          pos = -1;\n        }\n      }\n\n      for (var iln = 0, ilt = hierarchy.length; iln < ilt; iln++) {\n        if (!this.frameHeaderObjectsCollection) {\n          if (axis === 'row') {\n            this.rowCount += this.rowValuesLength;\n          } else {\n            this.columnCount += this.colValuesLength;\n          }\n        }\n\n        var level = null;\n\n        if (hierarchy[iln].valueSort && hierarchy[iln].valueSort.levelName) {\n          level = hierarchy[iln].valueSort.levelName;\n        }\n\n        parentMember = level || hierarchy[iln].formattedText;\n\n        if (!this.showHeaderWhenEmpty && rlen - 1 > keyInd && hierarchy[iln].index && hierarchy[iln].index.length > 0) {\n          if (showNoDataItems && keys[keyInd + 1] && keys[keyInd + 1].name && Object.keys(this.fieldList[keys[keyInd + 1].name].members).length > 0) {\n            hierarchy[iln].hasChild = true;\n          } else {\n            var hIndLen = hierarchy[iln].index.length;\n            var count = 0;\n\n            for (var len = 0; len < hIndLen; len++) {\n              var headerValue = data[hierarchy[iln].index[len]][this.fieldKeys[keys[keyInd + 1].name]];\n\n              if (isNullOrUndefined(headerValue) || this.localeObj && headerValue === this.localeObj.getConstant('undefined')) {\n                count++;\n              }\n            }\n\n            hierarchy[iln].hasChild = count !== hIndLen;\n          }\n        }\n\n        if (rlen - 1 > keyInd && hierarchy[iln].isDrilled) {\n          this.columnCount -= !(this.showSubTotals && this.showColumnSubTotals && field.showSubTotals) && axis === 'column' ? this.colValuesLength : 0;\n          var filterPosition = hierarchy[iln].index;\n          hierarchy[iln].members = this.getIndexedHeaders(keys, data, keyInd + 1, filterPosition === undefined ? [] : filterPosition, axis, parentMember);\n\n          if (this.frameHeaderObjectsCollection) {\n            this.headerObjectsCollection[parentMember] = hierarchy[iln].members;\n          }\n        }\n      }\n      /* eslint-disable  */\n\n\n      if (this.enableSort) {\n        // return new DataManager(hierarchy as JSON[]).executeLocal(new Query().sortBy('actualText', childrens.sort.toLowerCase()));\n        if (isDateType) {\n          return childrens.sort === 'Ascending' ? hierarchy.sort(function (a, b) {\n            return a.dateText > b.dateText ? 1 : b.dateText > a.dateText ? -1 : 0;\n          }) : childrens.sort === 'Descending' ? hierarchy.sort(function (a, b) {\n            return a.dateText < b.dateText ? 1 : b.dateText < a.dateText ? -1 : 0;\n          }) : hierarchy;\n        } else {\n          if (childrens.type === 'number' && hierarchy.length > 0 && typeof hierarchy[0].actualText === 'string') {\n            var stringValue = [];\n            var alphaNumbervalue = [];\n            var nullValue = [];\n\n            for (var i = 0; i < hierarchy.length; i++) {\n              if (isNaN(hierarchy[i].actualText.toString().charAt(0))) {\n                stringValue.push(hierarchy[i]);\n              } else if (hierarchy[i].actualText === \"\") {\n                nullValue.push(hierarchy[i]);\n              } else {\n                alphaNumbervalue.push(hierarchy[i]);\n              }\n            }\n\n            if (stringValue.length > 0) {\n              stringValue = childrens.sort === 'Ascending' ? stringValue.sort(function (a, b) {\n                return a.actualText > b.actualText ? 1 : b.actualText > a.actualText ? -1 : 0;\n              }) : childrens.sort === 'Descending' ? stringValue.sort(function (a, b) {\n                return a.actualText < b.actualText ? 1 : b.actualText < a.actualText ? -1 : 0;\n              }) : stringValue;\n            }\n\n            if (alphaNumbervalue.length > 0) {\n              alphaNumbervalue = childrens.sort === 'Ascending' ? alphaNumbervalue.sort(function (a, b) {\n                return Number(a.actualText.toString().match(/\\d+/)[0]) > Number(b.actualText.toString().match(/\\d+/)[0]) ? 1 : Number(b.actualText.toString().match(/\\d+/)[0]) > Number(a.actualText.toString().match(/\\d+/)[0]) ? -1 : 0;\n              }) : childrens.sort === 'Descending' ? alphaNumbervalue.sort(function (a, b) {\n                return Number(a.actualText.toString().match(/\\d+/)[0]) < Number(b.actualText.toString().match(/\\d+/)[0]) ? 1 : Number(b.actualText.toString().match(/\\d+/)[0]) < Number(a.actualText.toString().match(/\\d+/)[0]) ? -1 : 0;\n              }) : alphaNumbervalue;\n            }\n\n            return hierarchy = nullValue.concat(alphaNumbervalue, stringValue);\n          } else {\n            return childrens.sort === 'Ascending' ? hierarchy.sort(function (a, b) {\n              return a.actualText > b.actualText ? 1 : b.actualText > a.actualText ? -1 : 0;\n            }) : childrens.sort === 'Descending' ? hierarchy.sort(function (a, b) {\n              return a.actualText < b.actualText ? 1 : b.actualText < a.actualText ? -1 : 0;\n            }) : hierarchy;\n          }\n        }\n      } else {\n        return hierarchy;\n      }\n      /* eslint-enable  */\n\n    } else {\n      return hierarchy;\n    }\n  };\n\n  PivotEngine.prototype.getOrderedIndex = function (headers) {\n    var orderedIndex = {};\n\n    for (var i = 0; i < headers.length; i++) {\n      if (headers[i].type !== 'grand sum') {\n        orderedIndex[headers[i].ordinal] = i;\n      }\n    }\n\n    return orderedIndex;\n  };\n  /* eslint-disable , @typescript-eslint/no-explicit-any */\n\n\n  PivotEngine.prototype.insertPosition = function (keys, data, keyInd, position, axis, parentMember, slicedHeaders) {\n    var hierarchy = [];\n    var orderedIndex = this.getOrderedIndex(slicedHeaders);\n\n    if (keys) {\n      var decisionObj = {};\n      var field = keys[keyInd].name;\n      var childrens = this.fieldList[field];\n\n      for (var pos = 0, lt = position.length; pos < lt; pos++) {\n        var member = {};\n        var memInd = this.indexMatrix[position[pos]][childrens.index];\n        var slicedHeader = slicedHeaders[orderedIndex[memInd]];\n        var value = data[position[pos]][this.fieldKeys[field]];\n        value = value === null ? this.localeObj ? this.localeObj.getConstant('null') : String(value) : value;\n        var formattedValue = this.formatFields[field] && ['date', 'dateTime', 'time'].indexOf(this.formatFields[field].type) > -1 ? this.getFormattedValue(value, field) : {\n          formattedText: value.toString(),\n          actualText: value.toString()\n        };\n\n        if (!(slicedHeader && slicedHeader.formattedText === formattedValue.formattedText)) {\n          continue;\n        }\n\n        if (!(decisionObj && decisionObj[memInd])) {\n          decisionObj[memInd] = {\n            index: [],\n            indexObject: {}\n          };\n          slicedHeader.index = decisionObj[memInd].index = [position[pos]];\n          decisionObj[memInd].indexObject[position[pos]] = position[pos];\n          slicedHeader.indexObject = decisionObj[memInd].indexObject;\n          slicedHeader.valueSort = {};\n          slicedHeader.valueSort.axis = field;\n\n          if (keyInd !== 0) {\n            slicedHeader.valueSort.levelName = parentMember + this.valueSortSettings.headerDelimiter + slicedHeader.formattedText;\n            slicedHeader.valueSort[parentMember + this.valueSortSettings.headerDelimiter + slicedHeader.formattedText] = 1;\n          } else {\n            slicedHeader.valueSort[slicedHeader.formattedText] = 1;\n            slicedHeader.valueSort.levelName = slicedHeader.formattedText;\n          }\n\n          member.members = [];\n          hierarchy.push(member);\n        } else {\n          decisionObj[memInd].index.push(position[pos]);\n          decisionObj[memInd].indexObject[position[pos]] = position[pos];\n        }\n      }\n\n      var diff = slicedHeaders.length - hierarchy.length;\n\n      while (diff > 0) {\n        hierarchy.push({\n          members: []\n        });\n        diff--;\n      }\n\n      for (var iln = 0, ilt = hierarchy.length; iln < ilt; iln++) {\n        if (slicedHeaders[iln].members.length > 0) {\n          var level = null;\n\n          if (slicedHeaders[iln].valueSort && slicedHeaders[iln].valueSort.levelName) {\n            level = slicedHeaders[iln].valueSort.levelName;\n          }\n\n          parentMember = level || slicedHeaders[iln].formattedText;\n          hierarchy[iln].members = this.insertPosition(keys, data, keyInd + 1, slicedHeaders[iln].index, axis, parentMember, slicedHeaders[iln].members);\n        }\n      }\n\n      return hierarchy;\n    } else {\n      return hierarchy;\n    }\n  };\n\n  PivotEngine.prototype.insertTotalPosition = function (headers) {\n    var summCell = headers[headers.length - 1];\n\n    if (summCell && summCell.type === 'grand sum') {\n      summCell.index = this.filterMembers;\n      /* eslint-disable  */\n\n      var lt = void 0;\n\n      for (var ln = 0, lt_1 = this.filterMembers.length; ln < lt_1; ln++) {\n        summCell.indexObject[this.filterMembers[ln]] = this.filterMembers[ln];\n      }\n      /* eslint-enable  */\n\n    }\n\n    return headers;\n  };\n\n  PivotEngine.prototype.calculatePagingValues = function () {\n    if (this.pageSettings) {\n      if (this.valueAxis === 1) {\n        this.rowValuesLength = this.values.length;\n      } else {\n        this.colValuesLength = this.values.length;\n      }\n\n      this.memberCnt = -this.rowValuesLength;\n      this.rowStartPos = (this.pageSettings.rowCurrentPage * this.pageSettings.rowSize - this.pageSettings.rowSize) * this.rowValuesLength;\n      var exactStartPos = this.rowStartPos + this.pageSettings.rowSize * 3 * this.rowValuesLength > this.rowCount ? this.rowCount - this.pageSettings.rowSize * 3 * this.rowValuesLength : this.rowStartPos;\n\n      if (exactStartPos < 0) {\n        exactStartPos = this.rowStartPos = 0;\n        this.pageSettings.rowCurrentPage = 1;\n      }\n\n      this.rowFirstLvl = (this.rowStartPos - exactStartPos) % this.pageSettings.rowSize;\n      this.rowStartPos = exactStartPos;\n      this.endPos = this.rowStartPos + this.pageSettings.rowSize * 3 * this.rowValuesLength;\n      this.endPos = this.endPos > this.rowCount ? this.rowCount : this.endPos;\n      this.rMembers = this.performSlicing(this.rMembers, [], this.rowStartPos, 'row');\n      this.memberCnt = -this.colValuesLength;\n      this.pageInLimit = false;\n      this.colHdrBufferCalculated = false;\n      this.colStartPos = (this.pageSettings.columnCurrentPage * this.pageSettings.columnSize - this.pageSettings.columnSize) * this.colValuesLength;\n      exactStartPos = this.colStartPos + this.pageSettings.columnSize * 3 * this.colValuesLength > this.columnCount ? this.columnCount - this.pageSettings.columnSize * 3 * this.colValuesLength : this.colStartPos;\n\n      if (exactStartPos < 0) {\n        exactStartPos = this.colStartPos = 0;\n        this.pageSettings.columnCurrentPage = 1;\n      }\n\n      this.colFirstLvl = (this.colStartPos - exactStartPos) % this.pageSettings.columnSize;\n      this.colStartPos = exactStartPos;\n      this.endPos = this.colStartPos + this.pageSettings.columnSize * 3 * this.colValuesLength;\n      this.endPos = this.endPos > this.columnCount ? this.columnCount : this.endPos;\n      this.cMembers = this.performSlicing(this.cMembers, [], this.colStartPos, 'column');\n      this.memberCnt = -1;\n      this.pageInLimit = false;\n\n      if (this.isValueHasAdvancedAggregate) {\n        if (this.rMembers[this.rMembers.length - 1].type !== 'grand sum' && this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1].type === 'grand sum') {\n          this.rMembers.push(this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1]);\n          this.removeRowGrandTotal = true;\n        }\n\n        if (this.cMembers[this.cMembers.length - 1].type !== 'grand sum' && this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1].type === 'grand sum') {\n          this.cMembers.push(this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1]);\n          this.removeColumnGrandTotal = true;\n        }\n      } else {\n        this.rowGrandTotal = this.rowGrandTotal ? this.rowGrandTotal : this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1];\n        this.columnGrandTotal = this.columnGrandTotal ? this.columnGrandTotal : this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1];\n      }\n    }\n  };\n\n  PivotEngine.prototype.performSlicing = function (headers, slicedHeaders, startPos, axis) {\n    var pos = 0;\n\n    while (headers[pos]) {\n      this.memberCnt += axis === 'column' ? this.colValuesLength : this.rowValuesLength;\n\n      if (startPos <= this.memberCnt && this.endPos >= this.memberCnt && !this.pageInLimit) {\n        if (axis === 'column') {\n          this.colFirstLvl = this.colFirstLvl + headers[pos].level;\n        } else {\n          this.rowFirstLvl = this.rowFirstLvl + headers[pos].level;\n        }\n\n        this.pageInLimit = true;\n      }\n\n      if (this.pageInLimit) {\n        if (this.endPos <= this.memberCnt) {\n          if (axis === 'column') {\n            if (headers[pos].members.length === 0) {\n              if (this.colHdrBufferCalculated) {\n                break;\n              }\n\n              this.colHdrBufferCalculated = true;\n              this.endPos += headers[pos].level * this.colValuesLength;\n            } else if (this.colHdrBufferCalculated) {\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n      }\n\n      slicedHeaders.push(headers[pos].members.length > 0 ? this.removeChildMembers(headers[pos]) : headers[pos]);\n\n      if (headers[pos].members.length > 0) {\n        if (axis === 'column') {\n          /* eslint-disable @typescript-eslint/no-explicit-any */\n          this.memberCnt -= !(this.showSubTotals && this.showColumnSubTotals && this.columnKeys[headers[pos].valueSort.axis].showSubTotals) ? this.colValuesLength : 0;\n          /* eslint-enable @typescript-eslint/no-explicit-any */\n        }\n\n        slicedHeaders[slicedHeaders.length - 1].members = this.performSlicing(headers[pos].members, [], startPos, axis);\n      }\n\n      if (!this.pageInLimit) {\n        slicedHeaders.pop();\n      }\n\n      if (headers[pos].level === 0 && this.pageInLimit && this.endPos <= this.memberCnt) {\n        break;\n      }\n\n      pos++;\n    }\n\n    return slicedHeaders;\n  };\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n  PivotEngine.prototype.removeChildMembers = function (member) {\n    var keys = Object.keys(member);\n    var keyPos = 0;\n    var framedMember = {};\n    /* eslint-disable @typescript-eslint/dot-notation */\n\n    while (keyPos < keys.length) {\n      framedMember[keys[keyPos]] = member[keys[keyPos]];\n\n      if (keys[keyPos] === 'members') {\n        framedMember['members'] = [];\n      }\n\n      keyPos++;\n    }\n    /* eslint-enable @typescript-eslint/dot-notation */\n\n\n    return framedMember;\n  };\n\n  PivotEngine.prototype.insertAllMember = function (set, filter, customText, axis) {\n    var len = set.length;\n    customText = ' Total';\n    set[len] = {\n      hasChild: false,\n      index: filter,\n      level: 0,\n      axis: axis,\n      isDrilled: false,\n      indexObject: {},\n      members: [],\n      formattedText: 'Grand' + customText,\n      ordinal: len,\n      type: 'grand sum',\n      valueSort: {}\n    };\n    set[len].valueSort[set[len].formattedText] = 1;\n    set[len].valueSort.levelName = set[len].formattedText;\n\n    for (var ln = 0, lt = filter.length; ln < lt; ln++) {\n      set[len].indexObject[filter[ln]] = filter[ln];\n    } // if (axis === 'row') {\n    //     this.rowCount += this.rowValuesLength;\n    // } else {\n    //     this.columnCount += this.colValuesLength;\n    // }\n\n\n    return set;\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n\n  PivotEngine.prototype.getTableData = function (rows, reformAxis, columns, tnum, data, vlt, rTotal, cTotal) {\n    for (var rlt = rows.length, rln = 0; rln < rlt; rln++) {\n      tnum = data.length;\n      reformAxis[tnum] = rows[rln];\n      var actCnt = tnum - Number(Object.keys(reformAxis)[0]); //let rplus: number = rln + 1;\n      //let lvl: number = rows[rln].level;\n\n      var isLeastNode = !reformAxis[tnum].members.length;\n      rows[rln].colIndex = 0;\n      rows[rln].rowIndex = tnum;\n\n      if (!data[tnum]) {\n        data[tnum] = [];\n        this.valueContent[actCnt] = {}; //data[tnum][0] = rows[rln].name;\n\n        data[tnum][0] = this.valueContent[actCnt][0] = this.frameHeaderWithKeys(rows[rln]);\n      } else {\n        // data[tnum][0] = rows[rln].name;\n        data[tnum][0] = this.valueContent[actCnt][0] = this.frameHeaderWithKeys(rows[rln]);\n      }\n\n      if (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader)) {\n        var hpos = tnum;\n        var actpos = actCnt;\n        var rowIndex = tnum;\n\n        if (!(rows[rln].hasChild && rows[rln].isDrilled && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.showSubTotals || !this.showRowSubTotals))) {\n          for (var vln = 0; vln < vlt; vln++) {\n            tnum++;\n            actCnt++;\n            var name_1 = this.values[vln].caption ? this.values[vln].caption : this.values[vln].name;\n            /* eslint-disable */\n\n            var calObj = {\n              axis: 'row',\n              actualText: this.values[vln].name,\n              formattedText: name_1,\n              level: 0,\n              valueSort: {},\n              colIndex: 0,\n              rowIndex: tnum,\n              type: 'value'\n            };\n            /* eslint-enable */\n\n            if (!data[tnum]) {\n              data[tnum] = [];\n              this.valueContent[actCnt] = {};\n              data[tnum][0] = this.valueContent[actCnt][0] = calObj;\n            }\n\n            var vData = data[tnum][0].valueSort;\n            vData[data[tnum - vln - 1][0].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_1] = 1;\n            /* eslint-disable-line */\n\n            vData.levelName = data[tnum - vln - 1][0].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_1;\n            /* eslint-disable-line */\n\n            for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {\n              //for (let vln: number = 0; (!this.valueAxis && vln < vlt); vln++) {\n              this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);\n              dln = data[tnum].length;\n              data[hpos][dln - 1] = this.valueContent[actpos][dln - 1] = {\n                axis: 'value',\n                actualText: '',\n                colSpan: 1,\n                colIndex: dln,\n                formattedText: '',\n                hasChild: false\n              }; // }\n            }\n          }\n\n          rowIndex = tnum;\n        } else {\n          for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {\n            dln = data[tnum].length;\n            data[hpos][dln] = this.valueContent[actpos][dln] = {\n              axis: 'value',\n              actualText: '',\n              colSpan: 1,\n              colIndex: dln,\n              formattedText: '',\n              hasChild: false\n            };\n          }\n\n          rowIndex = tnum + vlt;\n        }\n\n        this.recursiveRowData(rows, reformAxis, columns, rowIndex, data, vlt, isLeastNode, rln, vlt, rTotal, cTotal);\n      } else {\n        for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {\n          for (var vln = 0; vln < vlt; vln++) {\n            this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);\n            dln = data[tnum].length;\n          }\n        }\n\n        this.recursiveRowData(rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, 0, rTotal, cTotal);\n      }\n    }\n    /* for (let rlt: number = rows.length, rln: number = 0; rln < rlt; rln++) {\n        if (!data[rln]) {\n            data[rln] = [];\n            data[rln][0] = rows[rln].name;\n        } else {\n            data[rln][0] = rows[rln].name;\n        }\n        for (let cln: number = 0, dln: number = 1, clt: number = columns.length; cln < clt; dln = ++cln) {\n            data[rln][dln] = this.getAggregateValue(rows[rln].index, columns[cln].index, 11);\n        }\n    } */\n\n  };\n\n  PivotEngine.prototype.getAggregatedHeaders = function (rows, columns, rMembers, cMembers, values) {\n    this.selectedHeaders = {\n      selectedHeader: [],\n      values: []\n    };\n\n    for (var vlt = values.length, vln = 0; vln < vlt; vln++) {\n      switch (values[vln].type) {\n        case 'DifferenceFrom':\n        case 'PercentageOfDifferenceFrom':\n          {\n            var baseField = void 0;\n            var baseItem = void 0;\n            this.selectedHeaders.values.push(values[vln].name);\n\n            if (values[vln].baseField && values[vln].baseItem) {\n              baseField = values[vln].baseField;\n              baseItem = values[vln].baseItem;\n            } else if (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) && columns.length > 0) {\n              baseField = columns[0].name;\n              baseItem = Object.keys(this.fieldList[columns[0].name].members)[0];\n            } else if (rows.length > 0) {\n              baseField = rows[0].name;\n              baseItem = Object.keys(this.fieldList[rows[0].name].members)[0];\n            }\n\n            var isHeaderSelected = false;\n\n            for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n              var row = rows_2[_i];\n\n              if (row.name === baseField) {\n                this.getAggregatedHeaderData(rMembers, values[vln].name, baseItem, false, 'row', values[vln].type, this.selectedHeaders.selectedHeader, vln);\n                isHeaderSelected = true;\n                break;\n              }\n            }\n\n            if (!isHeaderSelected) {\n              for (var _a = 0, columns_1 = columns; _a < columns_1.length; _a++) {\n                var column = columns_1[_a];\n\n                if (column.name === baseField) {\n                  this.getAggregatedHeaderData(cMembers, values[vln].name, baseItem, false, 'column', values[vln].type, this.selectedHeaders.selectedHeader, vln);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n\n        case 'PercentageOfParentRowTotal':\n        case 'PercentageOfParentColumnTotal':\n          {\n            this.selectedHeaders.values.push(values[vln].name);\n            this.getAggregatedHeaderData(values[vln].type === 'PercentageOfParentRowTotal' ? rMembers : cMembers, values[vln].name, undefined, false, values[vln].type === 'PercentageOfParentRowTotal' ? 'row' : 'column', values[vln].type, this.selectedHeaders.selectedHeader, vln);\n          }\n          break;\n\n        case 'RunningTotals':\n          {\n            this.selectedHeaders.values.push(values[vln].name);\n            this.getAggregatedHeaderData(this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) ? cMembers : rMembers, values[vln].name, undefined, false, this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) ? 'column' : 'row', values[vln].type, this.selectedHeaders.selectedHeader, vln);\n          }\n          break;\n\n        case 'PercentageOfParentTotal':\n          {\n            var baseField = void 0;\n            this.selectedHeaders.values.push(values[vln].name);\n\n            if (values[vln].baseField) {\n              baseField = values[vln].baseField;\n            } else if (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) && columns.length > 0) {\n              baseField = columns[0].name;\n            } else if (rows.length > 0) {\n              baseField = rows[0].name;\n            }\n\n            var isHeaderSelected = false;\n\n            for (var len = rows.length, i = 0; i < len; i++) {\n              if (rows[i].name === baseField) {\n                this.getAggregatedHeaderData(rMembers, values[vln].name, undefined, false, 'row', values[vln].type, this.selectedHeaders.selectedHeader, vln, i);\n                isHeaderSelected = true;\n                break;\n              }\n            }\n\n            if (!isHeaderSelected) {\n              for (var len = columns.length, i = 0; i < len; i++) {\n                if (columns[i].name === baseField) {\n                  this.getAggregatedHeaderData(cMembers, values[vln].name, undefined, false, 'column', values[vln].type, this.selectedHeaders.selectedHeader, vln, i);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n      }\n    }\n  };\n\n  PivotEngine.prototype.getAggregatedHeaderData = function (headers, name, baseItem, isChildren, type, aggregateType, selectedHeaders, vln, level) {\n    for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {\n      var rln = headers_1[_i];\n\n      switch (aggregateType) {\n        case 'DifferenceFrom':\n        case 'PercentageOfDifferenceFrom':\n          {\n            var levelName = rln.valueSort.levelName.toString().split(this.valueSortSettings.headerDelimiter);\n\n            if (levelName.indexOf(baseItem) !== -1) {\n              selectedHeaders.push(this.updateSelectedHeaders(baseItem, rln.level, type, isChildren, name, aggregateType, rln.valueSort.levelName, isChildren ? [rln] : headers, vln + 1));\n              /* eslint-disable-line */\n\n              if (rln.members.length > 0) {\n                this.getAggregatedHeaderData(rln.members, name, baseItem, true, type, aggregateType, selectedHeaders[selectedHeaders.length - 1].childMembers, vln);\n                /* eslint-disable-line */\n              }\n            } else if (rln.members.length > 0) {\n              this.getAggregatedHeaderData(rln.members, name, baseItem, false, type, aggregateType, selectedHeaders, vln);\n            }\n          }\n          break;\n\n        case 'RunningTotals':\n        case 'PercentageOfParentRowTotal':\n        case 'PercentageOfParentColumnTotal':\n          {\n            if (rln.type === 'grand sum') {\n              selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, headers, vln + 1));\n              /* eslint-disable-line */\n            } else {\n              if (rln.members.length > 0) {\n                selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, rln.members, vln + 1));\n                /* eslint-disable-line */\n\n                this.getAggregatedHeaderData(rln.members, name, undefined, false, type, aggregateType, selectedHeaders, vln);\n                /* eslint-disable-line */\n              }\n            }\n          }\n          break;\n\n        case 'PercentageOfParentTotal':\n          {\n            if (rln.type !== 'grand sum') {\n              if (rln.level === level) {\n                if (rln.members.length > 0) {\n                  if (isChildren) {\n                    var aggregateHeaders = selectedHeaders[selectedHeaders.length - 1].aggregateHeaders;\n\n                    for (var _a = 0, _b = rln.members; _a < _b.length; _a++) {\n                      var member = _b[_a];\n                      aggregateHeaders.push(member);\n                    }\n                  } else {\n                    var children = extend([], rln.members, null, true);\n                    selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, children, vln + 1));\n                    /* eslint-disable-line */\n\n                    var aggregateHeaders = selectedHeaders[selectedHeaders.length - 1].aggregateHeaders;\n                    aggregateHeaders.push(rln);\n                  }\n\n                  this.getAggregatedHeaderData(rln.members, name, undefined, true, type, aggregateType, selectedHeaders, vln, level + 1);\n                  /* eslint-disable-line */\n                } else {\n                  if (!isChildren) {\n                    selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, [rln], vln + 1));\n                    /* eslint-disable-line */\n                  }\n                }\n              } else if (rln.members.length > 0) {\n                this.getAggregatedHeaderData(rln.members, name, undefined, false, type, aggregateType, selectedHeaders, vln, level);\n                /* eslint-disable-line */\n              }\n            }\n          }\n          break;\n      }\n    }\n  };\n\n  PivotEngine.prototype.updateSelectedHeaders = function (baseItem, level, type, isChildren, name, aggregateType, levelName, headers, vCount) {\n    var headerData = {\n      name: baseItem,\n      level: level,\n      axis: type,\n      isChild: isChildren,\n      value: name,\n      type: aggregateType,\n      uniqueName: levelName,\n      aggregateHeaders: headers,\n      childMembers: [],\n      valueCount: vCount\n    };\n    return headerData;\n  };\n\n  PivotEngine.prototype.applyAdvancedAggregate = function (rowheads, colheads, data) {\n    this.aggregatedValueMatrix = [];\n\n    if (this.selectedHeaders.values.length > 0) {\n      var pivotIndex = {};\n      var colIndex = [];\n      var isIndexFilled = false;\n\n      for (var rlt = data.length, rln = 0; rln < rlt; rln++) {\n        if (data[rln] !== undefined && data[rln][0] !== undefined) {\n          if (!isIndexFilled) {\n            for (var clt = data[rln].length, cln = 0; cln < clt; cln++) {\n              if (data[rln][cln].axis === 'value' && this.selectedHeaders.values.indexOf(data[rln][cln].actualText) !== -1) {\n                colIndex.push(cln);\n                isIndexFilled = true;\n              }\n            }\n          }\n\n          if (colIndex.length > 0 && data[rln][colIndex[0]].axis === 'value' && this.selectedHeaders.values.indexOf(data[rln][colIndex[0]].actualText) !== -1) {\n            for (var _i = 0, colIndex_1 = colIndex; _i < colIndex_1.length; _i++) {\n              var index = colIndex_1[_i];\n              pivotIndex[rln + ',' + index] = [rln, index];\n            }\n          }\n        }\n      }\n\n      this.updateAggregates(rowheads, colheads, data, this.selectedHeaders.selectedHeader, colIndex, pivotIndex);\n      var indexCollection = Object.keys(pivotIndex);\n\n      for (var _a = 0, indexCollection_1 = indexCollection; _a < indexCollection_1.length; _a++) {\n        var index = indexCollection_1[_a];\n        var currentSet = data[pivotIndex[index][0]][pivotIndex[index][1]]; // currentSet.formattedText = '0';\n\n        currentSet.formattedText = this.selectedHeaders.selectedHeader.length > 0 ? this.emptyCellTextContent : '#N/A';\n\n        if (!this.aggregatedValueMatrix[pivotIndex[index][0]]) {\n          this.aggregatedValueMatrix[pivotIndex[index][0]] = [];\n        }\n\n        this.aggregatedValueMatrix[pivotIndex[index][0]][pivotIndex[index][1]] = 0;\n      }\n\n      this.updatePivotValues(true);\n    } else {\n      return;\n    }\n  };\n  /* eslint-disable  */\n\n\n  PivotEngine.prototype.updateAggregates = function (rowheads, colheads, data, selectedHeaders, colIndex, pivotIndex) {\n    for (var _i = 0, selectedHeaders_1 = selectedHeaders; _i < selectedHeaders_1.length; _i++) {\n      var headers = selectedHeaders_1[_i];\n      var selectedHeaderCollection = headers.aggregateHeaders;\n      var name_2 = headers.value;\n      var valueCount = this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) ? headers.valueCount : 0;\n      var aggregateType = headers.type;\n      var uniqueName = headers.uniqueName;\n      var axis = headers.axis;\n      var isRowBaseField = axis === 'row' ? true : false;\n      var activeValues = void 0;\n      var indexCollection = [];\n      var activeColumn = [];\n      var columnHeaders = [];\n      var rowindexCollection = [];\n      var selectedRowValues = [];\n      var selectedColumnValues = [];\n\n      if (['DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentTotal', 'RunningTotals'].indexOf(headers.type) !== -1) {\n        if (isRowBaseField) {\n          if (headers.type !== 'RunningTotals') {\n            for (var rlt = rowheads.length, rln = 0; rln < rlt; rln++) {\n              if (rowheads[rln] !== undefined) {\n                if (rowheads[rln].valueSort[uniqueName]) {\n                  activeValues = rowheads[rln];\n\n                  if (this.valueAxis === 0 || this.valueAxis && data[rln + valueCount] && data[rln + valueCount][0].actualText === name_2) {\n                    selectedRowValues = data[rln + valueCount];\n                  } else {\n                    selectedRowValues = [];\n                  }\n\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          for (var len_6 = data.length, i = 0; i < len_6; i++) {\n            if (data[i] !== undefined && data[i][0] === undefined) {\n              columnHeaders.push(data[i]);\n            } else {\n              break;\n            }\n          }\n\n          var len = columnHeaders.length;\n\n          while (len--) {\n            var axisObj = columnHeaders[len][colIndex[0]];\n            var cLevelName = axisObj.actualText;\n\n            if (this.selectedHeaders.values.indexOf(cLevelName) === -1) {\n              activeColumn = columnHeaders[len];\n              len = 0;\n            }\n          }\n\n          if (headers.type !== 'RunningTotals') {\n            for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n              var isSelectedColumn = false;\n\n              if (activeColumn[cln] !== undefined && activeColumn[cln].valueSort[uniqueName]) {\n                activeValues = activeColumn[cln];\n\n                for (var len_7 = data.length, i = 0; i < len_7; i++) {\n                  var axisObj = data[i];\n\n                  if (axisObj !== undefined && axisObj[0] !== undefined && axisObj[cln].axis === 'value' && this.selectedHeaders.values.indexOf(axisObj[cln].actualText) !== -1) {\n                    isSelectedColumn = true;\n                    selectedColumnValues[i] = axisObj[cln];\n                    rowindexCollection.push(i);\n                  }\n                }\n\n                if (isSelectedColumn) {\n                  break;\n                }\n              }\n            }\n\n            if (selectedColumnValues.length === 0 && rowindexCollection.length === 0) {\n              for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                var isSelectedColumn = false;\n\n                if (activeColumn[cln] !== undefined && activeColumn[cln].valueSort.levelName.indexOf(uniqueName) === 0) {\n                  activeValues = activeColumn[cln];\n\n                  for (var lnt = data.length, j = 0; j < lnt; j++) {\n                    var axisObj = data[j];\n\n                    if (axisObj !== undefined && axisObj[0] !== undefined && axisObj[cln].axis === 'value' && this.selectedHeaders.values.indexOf(axisObj[cln].actualText) !== -1) {\n                      isSelectedColumn = true; // selectedColumnValues[i] = axisObj[cln] as IAxisSet;\n\n                      rowindexCollection.push(j);\n                    }\n                  }\n\n                  if (isSelectedColumn) {\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      switch (headers.type) {\n        case 'DifferenceFrom':\n        case 'PercentageOfDifferenceFrom':\n          {\n            var isChildren = headers.isChild;\n\n            if (isRowBaseField) {\n              if (!isChildren) {\n                for (var _a = 0, selectedHeaderCollection_1 = selectedHeaderCollection; _a < selectedHeaderCollection_1.length; _a++) {\n                  var item = selectedHeaderCollection_1[_a];\n\n                  for (var rlt = rowheads.length, rln = 0; rln < rlt; rln++) {\n                    if (rowheads[rln] !== undefined) {\n                      if (rowheads[rln].valueSort[item.valueSort.levelName] && rowheads[rln].level === activeValues.level && rowheads[rln].type !== 'grand sum') {\n                        for (var _b = 0, colIndex_2 = colIndex; _b < colIndex_2.length; _b++) {\n                          var index = colIndex_2[_b];\n                          var currentSet = data[rln + valueCount][index];\n\n                          if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                            indexCollection.push([rln + valueCount, index]);\n\n                            if (pivotIndex[rln + valueCount + ',' + index]) {\n                              delete pivotIndex[rln + valueCount + ',' + index];\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                var uniqueLevelName = uniqueName.split(this.valueSortSettings.headerDelimiter);\n\n                for (var rlt = rowheads.length, rlen = 0; rlen < rlt; rlen++) {\n                  if (rowheads[rlen] !== undefined) {\n                    var levelName = rowheads[rlen].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);\n\n                    if (levelName.indexOf(uniqueLevelName[uniqueLevelName.length - 1]) !== -1 && rowheads[rlen].level === activeValues.level) {\n                      for (var _c = 0, colIndex_3 = colIndex; _c < colIndex_3.length; _c++) {\n                        var index = colIndex_3[_c];\n                        var currentSet = data[rlen + valueCount][index];\n\n                        if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                          indexCollection.push([rlen + valueCount, index]);\n\n                          if (pivotIndex[rlen + valueCount + ',' + index]) {\n                            delete pivotIndex[rlen + valueCount + ',' + index];\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n\n              for (var _d = 0, indexCollection_2 = indexCollection; _d < indexCollection_2.length; _d++) {\n                var index = indexCollection_2[_d];\n                var currentSet = data[index[0]][index[1]]; // let cVal: number = currentSet.value - (selectedRowValues[index[1]] as IAxisSet).value;\n\n                var cVal = currentSet.actualValue - selectedRowValues[index[1]].actualValue;\n                cVal = isNaN(cVal) ? 0 : currentSet.value === 0 && selectedRowValues[index[1]].value === 0 ? 0 : cVal;\n\n                if (!this.aggregatedValueMatrix[index[0]]) {\n                  this.aggregatedValueMatrix[index[0]] = [];\n                }\n\n                if (aggregateType === 'DifferenceFrom') {\n                  this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                  currentSet.formattedText = cVal === 0 ? this.emptyCellTextContent : this.getFormattedValue(cVal, name_2).formattedText;\n                } else {\n                  // cVal = ((selectedRowValues[index[1]] as IAxisSet).value === 0 ?\n                  // 0 : (cVal / (selectedRowValues[index[1]] as IAxisSet).value));\n                  cVal = selectedRowValues[index[1]].actualValue === 0 ? 0 : cVal / selectedRowValues[index[1]].actualValue;\n                  this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                  currentSet.formattedText = currentSet.showSubTotals ? cVal !== 0 ? this.globalize.formatNumber(cVal, {\n                    format: 'P',\n                    maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)\n                  }) : this.emptyCellTextContent : currentSet.formattedText;\n                }\n              }\n            } else {\n              if (!isChildren) {\n                for (var _e = 0, selectedHeaderCollection_2 = selectedHeaderCollection; _e < selectedHeaderCollection_2.length; _e++) {\n                  var item = selectedHeaderCollection_2[_e];\n\n                  for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                    var isSelectedColumn = false;\n\n                    if (activeColumn[cln] !== undefined && activeColumn[cln].valueSort[item.valueSort.levelName] && activeColumn[cln].level === activeValues.level && activeColumn[cln].type !== 'grand sum') {\n                      for (var _f = 0, rowindexCollection_1 = rowindexCollection; _f < rowindexCollection_1.length; _f++) {\n                        var index = rowindexCollection_1[_f];\n                        var currentSet = data[index][cln];\n\n                        if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                          isSelectedColumn = true;\n                          indexCollection.push([index, cln]);\n\n                          if (pivotIndex[index + ',' + cln]) {\n                            delete pivotIndex[index + ',' + cln];\n                          }\n                        }\n                      }\n\n                      if (isSelectedColumn) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              } else {\n                var uniqueLevelName = uniqueName.split(this.valueSortSettings.headerDelimiter);\n\n                for (var clt = activeColumn.length, clen = 0; clen < clt; clen++) {\n                  var isSelectedColumn = false;\n\n                  if (activeColumn[clen] !== undefined) {\n                    var levelName = activeColumn[clen].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);\n\n                    if (levelName.indexOf(uniqueLevelName[uniqueLevelName.length - 1]) !== -1 && activeColumn[clen].level === activeValues.level) {\n                      for (var _g = 0, rowindexCollection_2 = rowindexCollection; _g < rowindexCollection_2.length; _g++) {\n                        var index = rowindexCollection_2[_g];\n                        var currentSet = data[index][clen];\n\n                        if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                          isSelectedColumn = true;\n                          indexCollection.push([index, clen]);\n\n                          if (pivotIndex[index + ',' + clen]) {\n                            delete pivotIndex[index + ',' + clen];\n                          }\n                        }\n                      }\n\n                      if (isSelectedColumn) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n\n              var selectedColumn = void 0;\n\n              if (selectedColumnValues.length === 0) {\n                selectedColumn = this.getSelectedColumn(headers.uniqueName, colheads);\n              }\n\n              for (var _h = 0, indexCollection_3 = indexCollection; _h < indexCollection_3.length; _h++) {\n                var index = indexCollection_3[_h];\n                var currentSet = data[index[0]][index[1]];\n                var selectedColumnValue = 0;\n\n                if (selectedColumnValues.length === 0) {\n                  var selectedRow = this.getSelectedRow(currentSet.rowHeaders, rowheads);\n                  selectedColumnValue = this.getAggregateValue(selectedRow.index, selectedColumn.indexObject, this.fieldList[name_2].index, headers.type);\n                } else {\n                  selectedColumnValue = selectedColumnValues[index[0]].value;\n                }\n\n                var cVal = currentSet.value - selectedColumnValue;\n                cVal = isNaN(cVal) ? 0 : cVal;\n\n                if (!this.aggregatedValueMatrix[index[0]]) {\n                  this.aggregatedValueMatrix[index[0]] = [];\n                }\n\n                if (aggregateType === 'DifferenceFrom') {\n                  currentSet.formattedText = cVal === 0 ? this.emptyCellTextContent : this.getFormattedValue(cVal, name_2).formattedText;\n                  this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                } else {\n                  cVal = selectedColumnValues[index[0]].value === 0 ? 0 : cVal / selectedColumnValues[index[0]].value;\n                  currentSet.formattedText = cVal !== 0 ? this.globalize.formatNumber(cVal, {\n                    format: 'P',\n                    maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)\n                  }) : this.emptyCellTextContent;\n                  this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                }\n              }\n            }\n\n            if (headers.childMembers.length > 0) {\n              this.updateAggregates(rowheads, colheads, data, headers.childMembers, colIndex, pivotIndex);\n            }\n          }\n          break;\n\n        case 'PercentageOfParentRowTotal':\n        case 'PercentageOfParentColumnTotal':\n        case 'PercentageOfParentTotal':\n          {\n            if (isRowBaseField) {\n              for (var _j = 0, selectedHeaderCollection_3 = selectedHeaderCollection; _j < selectedHeaderCollection_3.length; _j++) {\n                var item = selectedHeaderCollection_3[_j];\n\n                for (var rlt = rowheads.length, i = 0; i < rlt; i++) {\n                  if (rowheads[i] !== undefined) {\n                    if (rowheads[i].valueSort[item.valueSort.levelName] && rowheads[i].level === item.level) {\n                      for (var _k = 0, colIndex_4 = colIndex; _k < colIndex_4.length; _k++) {\n                        var index = colIndex_4[_k];\n                        var currentSet = data[i + valueCount][index];\n\n                        if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                          indexCollection.push([i + valueCount, index]);\n\n                          if (pivotIndex[i + valueCount + ',' + index]) {\n                            delete pivotIndex[i + valueCount + ',' + index];\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n\n              for (var _l = 0, indexCollection_4 = indexCollection; _l < indexCollection_4.length; _l++) {\n                var i = indexCollection_4[_l];\n                var currentSet = data[i[0]][i[1]]; // let cVal: number = currentSet.value / (selectedRowValues[i[1]] as IAxisSet).value;\n\n                var selectedRowValue = 0;\n\n                if (selectedRowValues.length === 0 && activeValues) {\n                  selectedRowValue = this.getAggregateValue(activeValues.index, colheads[i[1] - 1].indexObject, this.fieldList[name_2].index, headers.type);\n                } else {\n                  selectedRowValue = selectedRowValues[i[1]].actualValue;\n                }\n\n                var cVal = currentSet.value / selectedRowValue;\n                cVal = isNaN(cVal) ? 0 : cVal;\n                currentSet.formattedText = currentSet.showSubTotals ? cVal !== 0 ? this.globalize.formatNumber(cVal, {\n                  format: 'P',\n                  maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)\n                }) : this.emptyCellTextContent : currentSet.formattedText;\n\n                if (!this.aggregatedValueMatrix[i[0]]) {\n                  this.aggregatedValueMatrix[i[0]] = [];\n                }\n\n                this.aggregatedValueMatrix[i[0]][i[1]] = cVal;\n              }\n            } else {\n              for (var _m = 0, selectedHeaderCollection_4 = selectedHeaderCollection; _m < selectedHeaderCollection_4.length; _m++) {\n                var item = selectedHeaderCollection_4[_m];\n\n                for (var clt = activeColumn.length, j = 0; j < clt; j++) {\n                  var isSelectedColumn = false;\n\n                  if (activeColumn[j] !== undefined && activeColumn[j].valueSort[item.valueSort.levelName]) {\n                    for (var _o = 0, rowindexCollection_3 = rowindexCollection; _o < rowindexCollection_3.length; _o++) {\n                      var index = rowindexCollection_3[_o];\n                      var currentSet = data[index][j];\n\n                      if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                        isSelectedColumn = true;\n                        indexCollection.push([index, j]);\n\n                        if (pivotIndex[index + ',' + j]) {\n                          delete pivotIndex[index + ',' + j];\n                        }\n                      }\n                    }\n\n                    if (isSelectedColumn) {\n                      break;\n                    }\n                  }\n                }\n              }\n\n              var selectedCol = void 0;\n\n              if (selectedColumnValues.length === 0) {\n                selectedCol = this.getSelectedColumn(headers.uniqueName, colheads);\n              }\n\n              for (var _p = 0, indexCollection_5 = indexCollection; _p < indexCollection_5.length; _p++) {\n                var i = indexCollection_5[_p];\n                var currentSet = data[i[0]][i[1]];\n                var selectedColValue = 0;\n\n                if (selectedColumnValues.length === 0) {\n                  var selectedRow = this.getSelectedRow(currentSet.rowHeaders, rowheads);\n                  selectedColValue = this.getAggregateValue(selectedRow.index, selectedCol.indexObject, this.fieldList[name_2].index, headers.type);\n                } else {\n                  selectedColValue = selectedColumnValues[i[0]].value;\n                }\n\n                var val = currentSet.value / selectedColValue;\n                val = isNaN(val) ? 0 : val;\n                currentSet.formattedText = val !== 0 ? this.globalize.formatNumber(val, {\n                  format: 'P',\n                  maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText)\n                }) : this.emptyCellTextContent;\n\n                if (!this.aggregatedValueMatrix[i[0]]) {\n                  this.aggregatedValueMatrix[i[0]] = [];\n                }\n\n                this.aggregatedValueMatrix[i[0]][i[1]] = val;\n              }\n            }\n          }\n          break;\n\n        case 'RunningTotals':\n          {\n            if (isRowBaseField) {\n              for (var _q = 0, colIndex_5 = colIndex; _q < colIndex_5.length; _q++) {\n                var index = colIndex_5[_q];\n                var cVal = 0;\n\n                for (var _r = 0, selectedHeaderCollection_5 = selectedHeaderCollection; _r < selectedHeaderCollection_5.length; _r++) {\n                  var item = selectedHeaderCollection_5[_r];\n\n                  for (var rlt = rowheads.length, rlen = 0; rlen < rlt; rlen++) {\n                    if (rowheads[rlen] !== undefined) {\n                      var currentSet = data[rlen + valueCount][index];\n\n                      if (rowheads[rlen] !== undefined && rowheads[rlen].valueSort[item.valueSort.levelName] && rowheads[rlen].level === item.level && currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                        if (rowheads[rlen].type !== 'grand sum') {\n                          cVal += !currentSet.showSubTotals && !(!isNullOrUndefined(currentSet.actualValue) && isNaN(currentSet.actualValue)) ? currentSet.actualValue : currentSet.value;\n                          currentSet.formattedText = currentSet.showSubTotals ? cVal === 0 && currentSet.actualValue && currentSet.actualValue !== 0 ? '' : this.getFormattedValue(cVal, name_2).formattedText : currentSet.formattedText;\n\n                          if (!this.aggregatedValueMatrix[rlen + valueCount]) {\n                            this.aggregatedValueMatrix[rlen + valueCount] = [];\n                          }\n\n                          this.aggregatedValueMatrix[rlen + valueCount][index] = cVal;\n                        }\n\n                        if (pivotIndex[rlen + valueCount + ',' + index]) {\n                          delete pivotIndex[rlen + valueCount + ',' + index];\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              for (var rlt = rowheads.length, rln = 0; rln < rlt; rln++) {\n                if (rowheads[rln] !== undefined) {\n                  var cVal = 0;\n\n                  for (var _s = 0, selectedHeaderCollection_6 = selectedHeaderCollection; _s < selectedHeaderCollection_6.length; _s++) {\n                    var item = selectedHeaderCollection_6[_s];\n\n                    for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                      var currentSet = data[rln + valueCount][cln];\n\n                      if (activeColumn[cln] !== undefined && activeColumn[cln].valueSort[item.valueSort.levelName] && currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                        if (activeColumn[cln].type !== 'grand sum') {\n                          cVal += currentSet.value;\n                          currentSet.formattedText = this.getFormattedValue(cVal, name_2).formattedText;\n\n                          if (!this.aggregatedValueMatrix[rln + valueCount]) {\n                            this.aggregatedValueMatrix[rln + valueCount] = [];\n                          }\n\n                          this.aggregatedValueMatrix[rln + valueCount][cln] = cVal;\n                        }\n\n                        if (pivotIndex[rln + valueCount + ',' + cln]) {\n                          delete pivotIndex[rln + valueCount + ',' + cln];\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          break;\n      }\n    }\n  };\n\n  PivotEngine.prototype.getSelectedColumn = function (name, colheads) {\n    var set = {\n      axis: 'column',\n      index: [],\n      indexObject: {}\n    };\n\n    for (var _i = 0, colheads_1 = colheads; _i < colheads_1.length; _i++) {\n      var head = colheads_1[_i];\n\n      if (head && head.valueSort && head.valueSort.levelName.indexOf(name) === 0) {\n        set.index = set.index.concat(head.index).sort(function (a, b) {\n          return a - b;\n        });\n        set.indexObject = __assign({}, set.indexObject, head.indexObject);\n      }\n    }\n\n    return set;\n  };\n\n  PivotEngine.prototype.getSelectedRow = function (name, rowheads) {\n    for (var _i = 0, rowheads_1 = rowheads; _i < rowheads_1.length; _i++) {\n      var head = rowheads_1[_i];\n\n      if (head) {\n        if (head.valueSort && head.valueSort.levelName === name) {\n          return head;\n        } else if (name === '' && head.type === 'grand sum') {\n          return head;\n        }\n      }\n    }\n\n    return null;\n  };\n  /* eslint-enable */\n\n\n  PivotEngine.prototype.recursiveRowData = function (rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, vln, rTotal, cTotal) {\n    if (!isLeastNode) {\n      this.getTableData(reformAxis[tnum - vln].members, reformAxis, columns, tnum, data, vlt, rTotal, cTotal);\n    }\n\n    if (!this.pageSettings) {\n      reformAxis[tnum - vln].members = [];\n    }\n  };\n\n  PivotEngine.prototype.updateRowData = function (rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal) {\n    var mPos = this.fieldList[this.values[vln].name].index;\n    var aggregate = this.fieldList[this.values[vln].name].aggregateType;\n    var field = this.values[vln].name;\n    var gTotalIndex = [];\n    var totalValues = {};\n    var value = 0;\n    var actualValue = 0; // let isLeast: boolean = isLeastNode && (vln === vlt - 1);\n\n    switch (aggregate) {\n      case 'Index':\n        {\n          gTotalIndex = [[rows[rln], columns[cln]], [rows[rln], cTotal], [rTotal, columns[cln]], [rTotal, cTotal]];\n          var valueContent = ['cVal', 'rTotalVal', 'cTotalVal', 'gTotalVal'];\n          var i = 0;\n\n          for (var _i = 0, gTotalIndex_1 = gTotalIndex; _i < gTotalIndex_1.length; _i++) {\n            var rIndex = gTotalIndex_1[_i];\n            totalValues[valueContent[i]] = this.getAggregateValue(rIndex[0].index, rIndex[1].indexObject, mPos, aggregate);\n            i++;\n          }\n\n          var val_1 = totalValues.cVal * totalValues.gTotalVal / (totalValues.rTotalVal * totalValues.cTotalVal);\n          value = rows[rln].members.length > 0 && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.showRowSubTotals || !this.showSubTotals) ? undefined : isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val_1) ? 0 : val_1;\n          actualValue = isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val_1) ? 0 : val_1;\n        }\n        break;\n\n      case 'PercentageOfGrandTotal':\n      case 'PercentageOfColumnTotal':\n      case 'PercentageOfRowTotal':\n        {\n          gTotalIndex = [[rows[rln], columns[cln]]];\n          gTotalIndex.push(aggregate === 'PercentageOfGrandTotal' ? [rTotal, cTotal] : aggregate === 'PercentageOfColumnTotal' ? [rTotal, columns[cln]] : [rows[rln], cTotal]);\n          var valueContent = ['cVal', 'gTotalVal'];\n          var i = 0;\n\n          for (var _a = 0, gTotalIndex_2 = gTotalIndex; _a < gTotalIndex_2.length; _a++) {\n            var rIndex = gTotalIndex_2[_a];\n            totalValues[valueContent[i]] = this.getAggregateValue(rIndex[0].index, rIndex[1].indexObject, mPos, aggregate);\n            i++;\n          }\n\n          var val_2 = totalValues.cVal / totalValues.gTotalVal;\n          value = rows[rln].members.length > 0 && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.showSubTotals || !this.showRowSubTotals) ? undefined : isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val_2) ? 0 : val_2;\n          actualValue = isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : isNaN(val_2) ? 0 : val_2;\n        }\n        break;\n\n      default:\n        var val = this.getAggregateValue(rows[rln].index, columns[cln].indexObject, mPos, aggregate);\n        value = rows[rln].members.length > 0 && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.showSubTotals || !this.showRowSubTotals) ? undefined : val;\n        actualValue = val;\n        break;\n    }\n\n    var cellDetails = {\n      fieldName: this.values[vln].name,\n      row: rows[rln],\n      column: columns[cln],\n      value: value,\n      cellSets: this.getCellSet(this.rawIndexObject),\n      rowCellType: rows[rln].hasChild && rows[rln].isDrilled ? 'subTotal' : rows[rln].type === 'grand sum' ? 'grandTotal' : 'value',\n      columnCellType: columns[cln].hasChild && columns[cln].isDrilled ? 'subTotal' : columns[cln].type === 'grand sum' ? 'grandTotal' : 'value',\n      aggregateType: aggregate,\n      skipFormatting: false\n    };\n\n    if (this.getValueCellInfo) {\n      this.getValueCellInfo(cellDetails);\n    }\n\n    value = cellDetails.value;\n    var isSum = rows[rln].hasChild || columns[cln].hasChild || rows[rln].type === 'grand sum' || columns[cln].type === 'grand sum';\n    var isGrand = rows[rln].type === 'grand sum' || columns[cln].type === 'grand sum';\n    var subTotal = rows[rln].members.length > 0 && (!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals || !this.showSubTotals || !this.showRowSubTotals);\n    var formattedText = subTotal ? '' : value === undefined ? this.emptyCellTextContent : aggregate === 'Count' || aggregate === 'DistinctCount' ? value.toLocaleString() : this.getFormattedValue(value, field).formattedText;\n\n    if (!isNaN(value) && !isNullOrUndefined(value) && ['PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal'].indexOf(aggregate) >= 0) {\n      formattedText = this.globalize.formatNumber(value, {\n        format: 'P',\n        maximumFractionDigits: this.getPercentFormat(this.formatFields, cellDetails.fieldName)\n      });\n    } else if (!subTotal && isNaN(value) && !isNullOrUndefined(value) && ['PopulationStDev', 'SampleStDev', 'PopulationVar', 'SampleVar'].indexOf(aggregate) !== -1) {\n      formattedText = '#DIV/0!';\n    } //dln = data[tnum].length;\n\n\n    formattedText = cellDetails.skipFormatting ? isNullOrUndefined(value) ? this.emptyCellTextContent : value.toString() : formattedText;\n    data[tnum][dln] = this.valueContent[actCnt][dln] = {\n      axis: 'value',\n      actualText: field,\n      indexObject: this.isDrillThrough ? this.rawIndexObject : {},\n      rowHeaders: rows[rln].type === 'grand sum' ? '' : rows[rln].valueSort.levelName,\n      columnHeaders: columns[cln].type === 'grand sum' ? '' : columns[cln].valueSort.levelName,\n      formattedText: formattedText,\n      value: isNullOrUndefined(value) ? 0 : value,\n      actualValue: isNullOrUndefined(actualValue) ? 0 : actualValue,\n      rowIndex: tnum,\n      colIndex: dln,\n      isSum: isSum,\n      isGrandSum: isGrand,\n      showSubTotals: !subTotal\n    };\n    this.rawIndexObject = {};\n  };\n  /* eslint-disable , @typescript-eslint/no-explicit-any */\n\n\n  PivotEngine.prototype.getCellSet = function (rawIndexObject) {\n    var currentCellSets = [];\n    var keys = Object.keys(rawIndexObject);\n\n    for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {\n      var index = keys_3[_i];\n\n      if (this.data[parseInt(index, 10)]) {\n        currentCellSets.push(this.data[parseInt(index, 10)]);\n      }\n    }\n\n    return currentCellSets;\n  };\n\n  PivotEngine.prototype.getHeaderData = function (axis, reformAxis, data, tnum, vcnt) {\n    var rlt = axis.length;\n    var colItmLn = this.columns.length;\n    var sortText = this.valueSortSettings.headerText; //let valueLn: number = this.values.length;\n\n    for (var rln = 0; rln < rlt; rln++) {\n      if (axis[rln].members.length) {\n        this.getHeaderData(axis[rln].members, reformAxis, data, tnum, vcnt);\n      }\n\n      var isTotalHide = true;\n\n      if (!isNullOrUndefined(axis[rln].showSubTotals) && !axis[rln].showSubTotals || !this.showSubTotals || !this.showColumnSubTotals) {\n        if (!(axis[rln].members.length > 0)) {\n          reformAxis[reformAxis.length] = this.frameHeaderWithKeys(axis[rln]);\n        } else {\n          this.removeCount++;\n          isTotalHide = false;\n        }\n\n        tnum = reformAxis.length - 1;\n      } else {\n        tnum = reformAxis.length;\n        reformAxis[tnum] = this.frameHeaderWithKeys(axis[rln]);\n      } //  let rplus: number = rln + 1;\n\n\n      var lvl = axis[rln].level;\n      axis[rln].rowIndex = lvl;\n      axis[rln].colIndex = tnum * vcnt + vcnt;\n\n      if (!data[lvl]) {\n        data[lvl] = [];\n        this.headerContent[lvl] = {};\n        data[lvl][tnum * vcnt + vcnt] = this.headerContent[lvl][tnum * vcnt + vcnt] = this.frameHeaderWithKeys(axis[rln]);\n      } else {\n        data[lvl][tnum * vcnt + vcnt] = this.headerContent[lvl][tnum * vcnt + vcnt] = this.frameHeaderWithKeys(axis[rln]);\n      }\n\n      var isSingleMeasure = this.columns.length === 0 && this.values.length === 1 ? true : false;\n\n      if ((this.isMutiMeasures || this.alwaysShowValueHeader || isSingleMeasure) && !this.valueAxis && isTotalHide) {\n        for (var vln = 0; vln < vcnt; vln++) {\n          var name_3 = this.values[vln].caption ? this.values[vln].caption : this.values[vln].name;\n          /* eslint-disable */\n\n          var calObj = {\n            axis: 'column',\n            actualText: this.values[vln].name,\n            formattedText: name_3,\n            level: 0,\n            valueSort: {},\n            colIndex: tnum * vcnt + 1 + vln,\n            rowIndex: colItmLn\n          };\n          /* eslint-enable */\n\n          if (!data[colItmLn]) {\n            data[colItmLn] = [];\n            this.headerContent[colItmLn] = {};\n            data[colItmLn][tnum * vcnt + 1 + vln] = this.headerContent[colItmLn][tnum * vcnt + 1 + vln] = calObj;\n          } else {\n            data[colItmLn][tnum * vcnt + 1 + vln] = this.headerContent[colItmLn][tnum * vcnt + 1 + vln] = calObj;\n          }\n\n          var vData = data[colItmLn][tnum * vcnt + 1 + vln].valueSort;\n          vData[axis[rln].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_3] = 1;\n          vData.levelName = axis[rln].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_3;\n\n          if (vData && vData[sortText]) {\n            this.valueSortSettings.columnIndex = tnum * vcnt + 1 + vln;\n          }\n        }\n      } else if (axis[rln].valueSort && axis[rln].valueSort[sortText]) {\n        this.valueSortSettings.columnIndex = tnum * vcnt + 1;\n      }\n\n      if (!this.pageSettings) {\n        reformAxis[tnum].members = [];\n      }\n    }\n  };\n  /* eslint-disable */\n\n\n  PivotEngine.prototype.getAggregateValue = function (rowIndex, columnIndex, value, type) {\n    //rowIndex = rowIndex.sort();\n    //columnIndex = columnIndex.sort();\n    var rlt = rowIndex.length; //let clt: number = columnIndex.length;\n\n    var mirror = {};\n    var ri = 0;\n    var ci = 0;\n    var cellValue = 0;\n    var avgCnt = 0;\n    var isInit = true;\n    var isValueExist = false;\n\n    switch (type.toLowerCase()) {\n      case 'median':\n        var values = [];\n        var position = 0;\n\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined) {\n            isValueExist = true;\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n\n            if (!isNullOrUndefined(this.valueMatrix[rowIndex[ri]][value])) {\n              values.push(this.valueMatrix[rowIndex[ri]][value]);\n            }\n          }\n\n          ri++;\n        }\n\n        var len = values.length;\n\n        if (len > 0) {\n          values.sort(function (a, b) {\n            return a - b;\n          });\n\n          if (len % 2 === 0) {\n            position = len / 2 <= 1 ? 0 : len / 2 - 1;\n            cellValue = (values[position] + values[position + 1]) / 2;\n          } else {\n            position = (len + 1) / 2 <= 1 ? 0 : (len + 1) / 2 - 1;\n            cellValue = values[position];\n          }\n        }\n\n        break;\n\n      case 'count':\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined) {\n            isValueExist = true;\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n            cellValue += isNullOrUndefined(this.valueMatrix[rowIndex[ri]][value]) ? 0 : this.allowDataCompression ? this.valueMatrix[rowIndex[ri]][value] : 1;\n          }\n\n          ri++;\n        }\n\n        break;\n\n      case 'distinctcount':\n        var duplicateValues = [];\n\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined) {\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n            isValueExist = true;\n            var val_3 = this.data[rowIndex[ri]][this.fieldKeys[this.fields[value]]];\n            var currentVal = void 0; // let currentVal: number = this.valueMatrix[rowIndex[ri]][value];\n\n            if (!isNullOrUndefined(val_3)) {\n              currentVal = val_3.toString();\n\n              if (duplicateValues.length === 0 || duplicateValues.length > 0 && duplicateValues.indexOf(currentVal) === -1) {\n                cellValue += this.allowDataCompression && typeof val_3 === 'number' ? val_3 : 1;\n                duplicateValues.push(currentVal);\n              }\n            }\n          }\n\n          ri++;\n        }\n\n        break;\n\n      case 'product':\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined) {\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n            isValueExist = true;\n            var currentVal = this.valueMatrix[rowIndex[ri]][value];\n\n            if (!isNullOrUndefined(currentVal)) {\n              cellValue = isInit || isNullOrUndefined(cellValue) ? 1 : cellValue;\n              cellValue *= currentVal;\n            } else if (isInit) {\n              cellValue = currentVal;\n            }\n\n            isInit = false;\n          }\n\n          ri++;\n        }\n\n        break;\n\n      case 'populationstdev':\n      case 'samplestdev':\n      case 'populationvar':\n      case 'samplevar':\n        var i = 0;\n        var val = 0;\n        var indexVal = [];\n        var avgVal = 0;\n        var cVal = 0;\n        var avgDifferenceVal = 0;\n\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined) {\n            isValueExist = true;\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n            var currentVal = this.valueMatrix[rowIndex[ri]][value];\n\n            if (!isNullOrUndefined(currentVal)) {\n              val += currentVal;\n              indexVal.push(currentVal);\n              i++;\n            }\n          }\n\n          ri++;\n        }\n\n        if (i > 0) {\n          avgVal = val / i;\n\n          for (var _i = 0, indexVal_1 = indexVal; _i < indexVal_1.length; _i++) {\n            var index = indexVal_1[_i];\n            avgDifferenceVal += Math.pow(index - avgVal, 2);\n          }\n\n          if (['populationstdev', 'samplestdev'].indexOf(type.toLowerCase()) !== -1) {\n            cVal = Math.sqrt(avgDifferenceVal / (type.toLowerCase() === 'populationstdev' ? i : i - 1));\n          } else {\n            cVal = avgDifferenceVal / (type.toLowerCase() === 'populationvar' ? i : i - 1);\n          }\n\n          cellValue = cVal === 0 ? NaN : cVal;\n        } else {\n          cellValue = val;\n        }\n\n        break;\n\n      case 'min':\n        var isFirst = true;\n        cellValue = undefined;\n\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined && this.valueMatrix[rowIndex[ri]][value] !== undefined) {\n            isValueExist = true;\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n\n            if (isNullOrUndefined(cellValue) && isNullOrUndefined(this.valueMatrix[rowIndex[ri]][value])) {\n              cellValue = this.valueMatrix[rowIndex[ri]][value];\n            } else {\n              if (isFirst) {\n                cellValue = this.valueMatrix[rowIndex[ri]][value];\n                isFirst = false;\n              } else {\n                cellValue = this.valueMatrix[rowIndex[ri]][value] < cellValue ? this.valueMatrix[rowIndex[ri]][value] : cellValue;\n              }\n            }\n          }\n\n          ri++;\n        }\n\n        break;\n\n      case 'max':\n        var isMaxFirst = true;\n\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined && this.valueMatrix[rowIndex[ri]][value] !== undefined) {\n            isValueExist = true;\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n\n            if (isMaxFirst) {\n              cellValue = this.valueMatrix[rowIndex[ri]][value];\n              isMaxFirst = false;\n            } else {\n              cellValue = this.valueMatrix[rowIndex[ri]][value] > cellValue ? this.valueMatrix[rowIndex[ri]][value] : cellValue;\n            }\n          }\n\n          ri++;\n        }\n\n        break;\n\n      case 'calculatedfield':\n        isValueExist = true;\n        var calcField = this.calculatedFields[this.fields[value]];\n        var actualFormula = calcField.formula;\n        var aggregateField = {};\n\n        if (this.calculatedFormulas[calcField.name]) {\n          var calculatedFormulas = this.calculatedFormulas[calcField.name];\n\n          for (var len_8 = 0, lmt = calculatedFormulas.length; len_8 < lmt; len_8++) {\n            var aggregatedValue = calculatedFormulas[len_8];\n            var value_1 = aggregateField[aggregatedValue.formula];\n\n            if (value_1 === undefined) {\n              var type_1 = aggregatedValue.type;\n              value_1 = this.getAggregateValue(rowIndex, columnIndex, aggregatedValue.index, type_1);\n              aggregateField[aggregatedValue.formula] = value_1;\n            }\n\n            actualFormula = actualFormula.replace(aggregatedValue.formula, String(value_1));\n          }\n        }\n\n        cellValue = this.evaluate(actualFormula);\n        cellValue = cellValue === Infinity || cellValue === -Infinity ? Infinity : cellValue === undefined || isNaN(cellValue) ? undefined : JSON.parse(String(cellValue));\n        break;\n\n      default:\n        cellValue = undefined;\n\n        while (rowIndex[ri] !== undefined) {\n          if (columnIndex[rowIndex[ri]] !== undefined) {\n            isValueExist = true;\n            this.rawIndexObject[rowIndex[ri]] = rowIndex[ri]; //let cIndx: number = isLeastLevel ? columnIndex.splice(columnIndex.indexOf(rowIndex[ri]), 1)[0] : rowIndex[ri];\n\n            var currentVal = this.valueMatrix[rowIndex[ri]][value];\n\n            if (isNullOrUndefined(cellValue) && isNullOrUndefined(currentVal)) {\n              cellValue = currentVal;\n            } else {\n              if (isNullOrUndefined(cellValue)) {\n                cellValue = 0;\n              }\n\n              cellValue += isNullOrUndefined(currentVal) ? 0 : currentVal;\n            }\n\n            if (!isNullOrUndefined(currentVal)) {\n              avgCnt++;\n            }\n          }\n\n          ri++;\n        }\n\n        break;\n    }\n    /* if (rlt > clt) {\n         this.makeMirrorObject(rowIndex, mirror);\n         while (columnIndex[ci] !== undefined) {\n             if (mirror[columnIndex[ci]]) {\n                 let cIndx: number = isLeastLevel ? columnIndex.splice(ci, 1)[0] : columnIndex[ci];\n                 //rowIndex.splice\n                 sum += this.valueMatrix[cIndx][value];\n             }\n             ci++;\n         }\n     } else {\n         this.makeMirrorObject(columnIndex, mirror);\n         while (rowIndex[ri] !== undefined) {\n             if (mirror[rowIndex[ri]]) {\n                 let cIndx: number = isLeastLevel ? columnIndex.splice(columnIndex.indexOf(rowIndex[ri]), 1)[0] : rowIndex[ri];\n                 sum += this.valueMatrix[rowIndex[ri]][value];\n             }\n             ri++;\n         }\n     } */\n\n\n    return type && type.toLowerCase() === 'avg' && cellValue !== 0 && !isNullOrUndefined(cellValue) ? cellValue / avgCnt : isValueExist ? cellValue : undefined;\n  };\n\n  PivotEngine.prototype.evaluate = function (obj) {\n    return Function('\"use strict\";return (' + obj + ')')();\n  };\n\n  ;\n  /** hidden */\n\n  PivotEngine.prototype.getFormattedValue = function (value, fieldName) {\n    /* eslint-enable */\n    var commonValue = value === null ? this.localeObj ? this.localeObj.getConstant('null') : String(value) : value === undefined ? this.localeObj ? fieldName in this.groupingFields ? this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') : String(value) : value;\n    var formattedValue = {\n      formattedText: commonValue.toString(),\n      actualText: commonValue,\n      dateText: commonValue\n    };\n\n    if (this.formatFields[fieldName] && !isNullOrUndefined(value)) {\n      try {\n        var formatField = this.formatFields[fieldName].properties ? //eslint-disable-line\n        this.formatFields[fieldName].properties : this.formatFields[fieldName]; //eslint-disable-line\n\n        var formatSetting = extend({}, formatField, null, true);\n        delete formatSetting.name;\n\n        if (!formatSetting.minimumSignificantDigits && formatSetting.minimumSignificantDigits < 1) {\n          delete formatSetting.minimumSignificantDigits;\n        }\n\n        if (!formatSetting.maximumSignificantDigits && formatSetting.maximumSignificantDigits < 1) {\n          delete formatSetting.maximumSignificantDigits;\n        }\n\n        if (formatSetting.type) {\n          formattedValue.formattedText = this.dateFormatFunction[fieldName].exactFormat(new Date(value));\n          formattedValue.actualText = value;\n        } else {\n          delete formatSetting.type;\n\n          if (formatSetting.format && !this.formatRegex.test(formatSetting.format)) {\n            var pattern = formatSetting.format.match(/^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/);\n            var flag = true;\n\n            if (isNullOrUndefined(formatSetting.minimumFractionDigits)) {\n              delete formatSetting.minimumFractionDigits;\n            }\n\n            if (isNullOrUndefined(formatSetting.maximumFractionDigits)) {\n              delete formatSetting.maximumFractionDigits;\n            }\n\n            if (isNullOrUndefined(formatSetting.minimumIntegerDigits)) {\n              delete formatSetting.minimumIntegerDigits;\n            }\n\n            if (isNullOrUndefined(pattern)) {\n              pattern = formatSetting.format.match(/^(('[^']+'|''|[^*@0])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@,.E])*)$/);\n              delete formatSetting.useGrouping;\n              flag = false;\n            }\n\n            if (pattern && pattern.length > 5) {\n              var integerPart = pattern[6];\n\n              if (flag) {\n                formatSetting.useGrouping = integerPart.indexOf(',') !== -1;\n              }\n\n              var decimalPart = pattern[5];\n\n              if (isBlazor() && decimalPart && decimalPart.indexOf('.') !== -1 && formatSetting.maximumFractionDigits) {\n                delete formatSetting.maximumFractionDigits;\n              }\n            }\n          }\n\n          formattedValue.formattedText = this.globalize.formatNumber(!isNaN(Number(value)) ? Number(value) : value, formatSetting);\n          formattedValue.actualText = !isNaN(Number(value)) ? Number(value) : value;\n          formattedValue.dateText = !isNaN(Number(value)) ? Number(value) : value;\n        }\n\n        if (this.fieldList[fieldName].sort !== 'None' && formatSetting.type && ['date', 'dateTime', 'time'].indexOf(this.formatFields[fieldName].type) > -1) {\n          formattedValue.dateText = this.dateFormatFunction[fieldName].fullFormat(new Date(value));\n        }\n\n        if (this.fieldList[fieldName].isCustomField) {\n          formattedValue.formattedText = formattedValue.formattedText === 'NaN' ? commonValue.toString() : formattedValue.formattedText;\n          formattedValue.dateText = formattedValue.dateText === 'NaN' ? commonValue.toString() : formattedValue.dateText;\n        }\n      } catch (exception) {\n        if (!this.fieldList[fieldName].isCustomField) {\n          throw exception;\n        }\n      } finally {\n        if (this.fieldList[fieldName].isCustomField) {\n          formattedValue.formattedText = isNullOrUndefined(formattedValue.formattedText) || formattedValue.formattedText === 'NaN' ? commonValue.toString() : formattedValue.formattedText;\n          formattedValue.dateText = isNullOrUndefined(formattedValue.dateText) || formattedValue.dateText === 'NaN' ? commonValue.toString() : formattedValue.dateText;\n        }\n      }\n    }\n\n    return formattedValue;\n  };\n  /* eslint-disable */\n\n\n  PivotEngine.prototype.powerFunction = function (formula) {\n    if (formula.indexOf('^') > -1) {\n      var items_1 = [];\n\n      while (formula.indexOf('(') > -1) {\n        formula = formula.replace(/(\\([^\\(\\)]*\\))/g, function (text, item) {\n          items_1.push(item);\n          return '~' + (items_1.length - 1);\n        });\n      }\n      /* eslint-enable */\n\n\n      items_1.push(formula);\n      formula = '~' + (items_1.length - 1);\n\n      while (formula.indexOf('~') > -1) {\n        formula = formula.replace(new RegExp('~' + '(\\\\d+)', 'g'), function (text, index) {\n          return items_1[index].replace(/(\\w*)\\^(\\w*)/g, 'Math.pow' + '($1,$2)');\n        });\n      }\n    }\n\n    return formula;\n  };\n\n  return PivotEngine;\n}();\n\nexport { PivotEngine };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/base/engine.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","extend","Internationalization","isNullOrUndefined","isBlazor","DataManager","Query","PivotUtil","PivotEngine","aggregatedValueMatrix","valueContent","formatFields","dateFormatFunction","calculatedFields","calculatedFormulas","valueAxis","saveDataHeaders","columnCount","rowCount","colFirstLvl","rowFirstLvl","rowStartPos","colStartPos","enableValueSorting","headerCollection","rowHeaders","columnHeaders","rowHeadersCount","columnHeadersCount","rMembers","cMembers","groupingFields","valueMatrix","indexMatrix","memberCnt","pageInLimit","endPos","removeCount","colHdrBufferCalculated","colValuesLength","rowValuesLength","slicedHeaders","fieldFilterMem","filterPosObj","selectedHeaders","selectedHeader","values","rowGrandTotal","columnGrandTotal","removeRowGrandTotal","removeColumnGrandTotal","isValueHasAdvancedAggregate","rawIndexObject","isEditing","data","actualData","groupRawIndex","fieldKeys","allowDataCompression","dataSourceSettings","frameHeaderObjectsCollection","headerObjectsCollection","columnKeys","fieldDrillCollection","fieldMapping","formatRegex","renderEngine","dataSource","customProperties","fn","getValueCellInfo","excludeFields","fields","globalize","localeObj","undefined","fieldsType","clonedReport","enableSort","enableSorting","alwaysShowValueHeader","showHeaderWhenEmpty","showSubTotals","showRowSubTotals","showColumnSubTotals","showGrandTotals","showRowGrandTotals","showColumnGrandTotals","allowValueFilter","isValueFilterEnabled","isDrillThrough","fieldList","type","shift","keys","pageSettings","getGroupedRawData","rows","columns","filters","formats","formatSettings","groups","groupSettings","calculatedFieldSettings","getGroupData","validateFilters","isExpandAll","isValueFiltersAvail","expandAll","drilledMembers","isMutiMeasures","emptyCellTextContent","emptyCellsTextContent","valueSortSettings","sortOrder","headerDelimiter","headerText","columnIndex","valueSortData","savedFieldList","getFieldList","removeIrrelevantFields","fillFieldMembers","updateSortSettings","sortSettings","generateValueMatrix","filterMembers","columnLength","name","updateFilterMembers","generateGridData","report","pos","cnt","indexOf","splice","_i","_a","frameHeaderWithKeys","countFields","filter","item","map","hasCountField","realData","headerFields","concat","groupRawData","finalData","groupKeys","indexLength","currData","members","vPos","hPos","push","memberJoin","join","currFieldName","currValue","savedData","summType","_this","fieldkeySet","_loop_1","group","fieldName","caption","this_1","groupFields","customGroupFieldName","value","getType","rangeInterval","sort","a","b","Number","len","date","Date","toString","groupInterval","len_1","interval","isInRangeAvail","getRange","getTime","newDate","resetTime","newFieldName","setFullYear","getFullYear","month","Math","ceil","getMonth","getConstant","setMonth","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","customGroups","groupValue","len_2","cGroup","items","isDataMatch","inArray","groupName","isCompleteSet","keys_1","key","isDataSource","axisFields","gCnt","groupField","axisFields_1","axis","actualField","dataFields","caption_1","clonedFields","cloneField","getFieldByName","newField","showNoDataItems","baseField","baseItem","showFilterIcon","showSortIcon","showEditIcon","showRemoveIcon","showValueTypeIcon","allowDragAndDrop","len_3","format","startValue","endValue","cStartValue","cEndValue","framedSet","unframedSet","dataLength","framedSetLength","max","len_4","duplicateData","frameData","index","lastIndexOf","_b","keys_2","_c","axisFields_2","field","properties","len_5","customFieldName","pattern","match","parentField","replace","customGroupField","_d","axisFields_3","formatfield","cloneFormatSettings","state_1","keyPos","cValue","isRangeAvail","cDate","startDate","startingAt","endDate","endingAt","parseInt","getPercentFormat","formatField","currentField","isHavingFormat","toLowerCase","getFormattedFields","exactFormat","getDateFormat","fullFormat","isSort","isValueFilteringEnabled","getCalculatedField","lenE","dataTypes","getMappingField","isSelected","isExcelFilter","filterType","isCalculatedField","dateMember","formattedMembers","dataType","id","isCustomField","aggregateType","updateTreeViewData","updateFieldList","lnt","formula","actualFormula","_loop_2","calc","this_2","calcProperties","trim","powerFunction","formulaType","split","lmt","aggregateValue","matchStrings","selectedString","filterElements","filterSettings","filterElements_1","dataFields_1","validateValueFields","indMat","dlen","fList","kLn","kl","isDataAvail","membersCnt","fmembersCnt","dl","mkey","fKey","formattedValue","formattedText","String","actualText","getFormattedValue","ordinal","isDrilled","dateText","vMat","keyLen","flList","tkln","isNaN","sln","slt","order","source","filterRw","list","isInclude","getFilters","dln","include","ln","exclude","indexObject","ilist","rln","rlt","filterElement","isValidFilterField","allowMemberFilter","allowLabelFilter","applyLabelFilter","frameFilterList","showLabelFilter","showDateFilter","showNumberFilter","allowMemberFiltering","allowLabelFiltering","isValidFilterElement","filterTypes","dataFields_2","getLabelFilterMembers","condition","value1","value2","date1","date2","getDateFilterMembers","members_1","member","operand1","getParsedValue","operand2","validateFilterValue","excludeOperators","operator","members_2","filterValue","members_3","val","isMemberInclude","isLabelFilter","updateFilter","fln","allowFil","final","filterObj","memberObj","indx","iln","ilt","applyValueFiltering","rowData","level","valueFilter","rowFilterData","isValueFiltered","allMember","getFilteredData","rLen","measure","mPos","aggregate","getAggregateValue","cellDetails","row","column","cellSets","getCellSet","rowCellType","hasChild","columnCellType","skipFormatting","removefilteredData","valueFilteredData","validateFilteredParentData","isLevelFiltered","formatSetting","parseNumber","filteredData","valueSort","levelName","allMemberData","rows_1","rowFilteredData","index_1","index_2","_e","_f","updateFramedHeaders","framedHeaders","dataHeaders","filteredHeaders","headers","framedHeaders_1","dHeader","isHeaderAvail","validateFilteredHeaders","filterFramedHeaders","filteredHeaders_1","vHeader","isEmptyDataAvail","isEmptyData","updateGridData","frameDrillObject","getIndexedHeaders","insertAllMembersCommon","pivotValues","headerContent","rowheads","colheads","columnFilteredData","valuesCount","valueFilters","valueFields","values_1","filterSettings_1","isAvail","cLen","j","applyValueSorting","calculatePagingValues","getAggregatedHeaders","getHeaderData","insertSubTotals","getTableData","applyAdvancedAggregate","isEngineUpdated","updateHeaders","rowFlag","columnFlag","slice","updatePivotValues","slicePos","onDrill","drilledItem","headersInfo","getHeadersInfo","performDrillOperation","position","updateEngine","onSort","sortItem","performSortOperation","onFilter","filterItem","posObj","addPos","itemsObj","performFilterCommonUpdate","onAggregation","onCalcOperation","currentPosition","count","memberName","delimiter","action","sortedHeaders","updateHeadersCount","getSortedHeaders","performFilterDeletion","filterObjects","loopIn","_loop_3","engine_1","this_3","engine","matchIndexes","performFilterAddition","_loop_4","this_4","memberNameObj_1","excessHeaders","rawHeaders","headerNames_1","rawHeaders_1","header","grandHeader","pop","insertPosition","insertTotalPosition","getAxisByFieldName","fields_1","axisCount","json","executeLocal","where","isDrill","lenCnt","framedHeader","isNotDateType","childrens","stringValue","alphaNumbervalue","nullValue","charAt","isNullArgument","textArray","hText","mIndex","mType","getMember","sortByValueRow","vlen","aggreColl","rMembers_1","rMembers_2","insertAllMember","rowLength","rowCnt","rowCells","savedCell","spanCnt","colLength","indexObj","colCnt","cell","colSpan","colIndex","rowPos","rowSpan","cellType","rowIndex","isSpanned","fieldCnt","drillOption","memberString","keyInd","parentMember","valueFil","hierarchy","rlen","decisionObj","reportDataType","isNoData","isDateType","savedMembers","lt","memInd","headerValue","availData","pindx","hIndLen","filterPosition","getOrderedIndex","orderedIndex","slicedHeader","diff","summCell","lt_1","rowCurrentPage","rowSize","exactStartPos","performSlicing","columnCurrentPage","columnSize","startPos","removeChildMembers","framedMember","set","customText","reformAxis","tnum","vlt","rTotal","cTotal","actCnt","isLeastNode","hpos","actpos","vln","name_1","calObj","vData","cln","clt","updateRowData","recursiveRowData","isHeaderSelected","rows_2","getAggregatedHeaderData","columns_1","isChildren","headers_1","updateSelectedHeaders","childMembers","aggregateHeaders","children","vCount","headerData","isChild","uniqueName","valueCount","pivotIndex","isIndexFilled","colIndex_1","updateAggregates","indexCollection","indexCollection_1","currentSet","selectedHeaders_1","selectedHeaderCollection","name_2","isRowBaseField","activeValues","activeColumn","rowindexCollection","selectedRowValues","selectedColumnValues","len_6","axisObj","cLevelName","isSelectedColumn","len_7","selectedHeaderCollection_1","colIndex_2","uniqueLevelName","colIndex_3","indexCollection_2","cVal","actualValue","formatNumber","maximumFractionDigits","selectedHeaderCollection_2","rowindexCollection_1","clen","_g","rowindexCollection_2","selectedColumn","getSelectedColumn","_h","indexCollection_3","selectedColumnValue","selectedRow","getSelectedRow","_j","selectedHeaderCollection_3","_k","colIndex_4","_l","indexCollection_4","selectedRowValue","_m","selectedHeaderCollection_4","_o","rowindexCollection_3","selectedCol","_p","indexCollection_5","selectedColValue","_q","colIndex_5","_r","selectedHeaderCollection_5","_s","selectedHeaderCollection_6","colheads_1","head","rowheads_1","gTotalIndex","totalValues","gTotalIndex_1","rIndex","val_1","gTotalVal","rTotalVal","cTotalVal","gTotalIndex_2","val_2","isSum","isGrand","subTotal","toLocaleString","isGrandSum","currentCellSets","keys_3","vcnt","colItmLn","sortText","isTotalHide","lvl","isSingleMeasure","name_3","mirror","ri","ci","cellValue","avgCnt","isInit","isValueExist","duplicateValues","val_3","currentVal","indexVal","avgVal","avgDifferenceVal","indexVal_1","pow","sqrt","NaN","isFirst","isMaxFirst","calcField","aggregateField","len_8","aggregatedValue","value_1","type_1","evaluate","Infinity","JSON","parse","obj","Function","commonValue","minimumSignificantDigits","maximumSignificantDigits","test","flag","minimumFractionDigits","minimumIntegerDigits","useGrouping","integerPart","decimalPart","exception","items_1","text","RegExp"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { extend, Internationalization } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { PivotUtil } from './util';\n/**\n * PivotEngine is used to manipulate the relational or Multi-Dimensional data as pivoting values.\n */\n/** @hidden */\nvar PivotEngine = /** @class */ (function () {\n    function PivotEngine() {\n        /** @hidden */\n        this.aggregatedValueMatrix = [];\n        /** @hidden */\n        this.valueContent = [];\n        /** @hidden */\n        this.formatFields = {};\n        /* eslint-disable  */\n        /** @hidden */\n        this.dateFormatFunction = {};\n        /** @hidden */\n        this.calculatedFields = {};\n        /** @hidden */\n        this.calculatedFormulas = {};\n        /** @hidden */\n        this.valueAxis = 0;\n        /** @hidden */\n        this.saveDataHeaders = {};\n        /** @hidden */\n        this.columnCount = 0;\n        /** @hidden */\n        this.rowCount = 0;\n        /** @hidden */\n        this.colFirstLvl = 0;\n        /** @hidden */\n        this.rowFirstLvl = 0;\n        /** @hidden */\n        this.rowStartPos = 0;\n        /** @hidden */\n        this.colStartPos = 0;\n        /** @hidden */\n        this.enableValueSorting = false;\n        /** @hidden */\n        this.headerCollection = { rowHeaders: [], columnHeaders: [], rowHeadersCount: 0, columnHeadersCount: 0 };\n        /** @hidden */\n        this.rMembers = [];\n        /** @hidden */\n        this.cMembers = [];\n        /** @hidden */\n        this.groupingFields = {};\n        this.valueMatrix = [];\n        this.indexMatrix = [];\n        this.memberCnt = -1;\n        this.pageInLimit = false;\n        this.endPos = 0;\n        this.removeCount = 0;\n        this.colHdrBufferCalculated = false;\n        this.colValuesLength = 1;\n        this.rowValuesLength = 1;\n        this.slicedHeaders = [];\n        this.fieldFilterMem = {};\n        this.filterPosObj = {};\n        this.selectedHeaders = { selectedHeader: [], values: [] };\n        this.rowGrandTotal = null;\n        this.columnGrandTotal = null;\n        this.removeRowGrandTotal = false;\n        this.removeColumnGrandTotal = false;\n        this.isValueHasAdvancedAggregate = false;\n        this.rawIndexObject = {};\n        /* eslint-disable  */\n        this.isEditing = false;\n        /** @hidden */\n        this.data = [];\n        /** @hidden */\n        this.actualData = [];\n        /** @hidden */\n        this.groupRawIndex = {};\n        /** @hidden */\n        this.fieldKeys = {};\n        this.allowDataCompression = false;\n        this.dataSourceSettings = {};\n        this.frameHeaderObjectsCollection = false;\n        this.headerObjectsCollection = {};\n        this.columnKeys = {};\n        this.fieldDrillCollection = {};\n        this.fieldMapping = [];\n        this.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n        /* private makeMirrorObject(elements: number[], obj: NumberIndex): void {\n             for (let lp: number = 0, end: number = elements.length; lp < end; lp++) {\n                 obj[elements[lp]] = elements[lp];\n             }\n         } */\n    }\n    PivotEngine.prototype.renderEngine = function (dataSource, customProperties, fn) {\n        this.getValueCellInfo = fn;\n        this.formatFields = {};\n        this.dateFormatFunction = {};\n        this.calculatedFields = {};\n        this.calculatedFormulas = {};\n        this.valueAxis = 0;\n        this.saveDataHeaders = {};\n        this.columnCount = 0;\n        this.rowCount = 0;\n        this.colFirstLvl = 0;\n        this.rowFirstLvl = 0;\n        this.rowStartPos = 0;\n        this.colStartPos = 0;\n        this.excludeFields = isNullOrUndefined(dataSource.excludeFields) ? [] : dataSource.excludeFields;\n        this.enableValueSorting = false;\n        this.headerCollection = { rowHeaders: [], columnHeaders: [], rowHeadersCount: 0, columnHeadersCount: 0 };\n        this.valueMatrix = [];\n        this.indexMatrix = [];\n        this.aggregatedValueMatrix = [];\n        this.rMembers = [];\n        this.cMembers = [];\n        this.memberCnt = -1;\n        this.pageInLimit = false;\n        this.endPos = 0;\n        this.removeCount = 0;\n        this.colHdrBufferCalculated = false;\n        this.colValuesLength = 1;\n        this.rowValuesLength = 1;\n        this.slicedHeaders = [];\n        this.fieldFilterMem = {};\n        this.filterPosObj = {};\n        this.selectedHeaders = { selectedHeader: [], values: [] };\n        this.rowGrandTotal = null;\n        this.columnGrandTotal = null;\n        this.removeRowGrandTotal = false;\n        this.removeColumnGrandTotal = false;\n        this.isValueHasAdvancedAggregate = false;\n        this.rawIndexObject = {};\n        this.isEditing = false;\n        var fields;\n        this.globalize = new Internationalization();\n        this.localeObj = customProperties ? customProperties.localeObj : undefined;\n        this.fieldsType = customProperties ? customProperties.fieldsType : {};\n        this.clonedReport = customProperties ? customProperties.clonedReport : {};\n        this.enableSort = dataSource.enableSorting;\n        this.alwaysShowValueHeader = dataSource.alwaysShowValueHeader;\n        this.showHeaderWhenEmpty = isNullOrUndefined(dataSource.showHeaderWhenEmpty) ? true : dataSource.showHeaderWhenEmpty;\n        this.showSubTotals = isNullOrUndefined(dataSource.showSubTotals) ? true : dataSource.showSubTotals;\n        this.showRowSubTotals = isNullOrUndefined(dataSource.showRowSubTotals) ? true : dataSource.showRowSubTotals;\n        this.showColumnSubTotals = isNullOrUndefined(dataSource.showColumnSubTotals) ? true : dataSource.showColumnSubTotals;\n        this.showGrandTotals = isNullOrUndefined(dataSource.showGrandTotals) ? true : dataSource.showGrandTotals;\n        this.showRowGrandTotals = isNullOrUndefined(dataSource.showRowGrandTotals) ? true : dataSource.showRowGrandTotals;\n        this.showColumnGrandTotals = isNullOrUndefined(dataSource.showColumnGrandTotals) ? true : dataSource.showColumnGrandTotals;\n        this.allowValueFilter = dataSource.allowValueFilter;\n        this.isValueFilterEnabled = false;\n        this.enableValueSorting = customProperties ? customProperties.enableValueSorting : false;\n        this.isDrillThrough = customProperties ? (customProperties.isDrillThrough ? customProperties.isDrillThrough : false) : false;\n        this.valueContent = [];\n        this.dataSourceSettings = dataSource;\n        if (!(dataSource.dataSource instanceof DataManager)) {\n            this.data = (isBlazor() && !dataSource.dataSource && this.data && this.data.length > 0) ?\n                this.data : dataSource.dataSource;\n        }\n        if (this.data && this.data[0]) {\n            if (!this.fieldList) {\n                if (dataSource.type === 'CSV') {\n                    this.fields = this.data.shift();\n                }\n                else {\n                    this.fields = Object.keys(this.data[0]);\n                }\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fieldKeys[this.fields[i]] = dataSource.type === 'CSV' ? i : this.fields[i];\n                }\n            }\n            if (customProperties && customProperties.pageSettings && customProperties.pageSettings.allowDataCompression) {\n                this.actualData = this.data;\n                this.data = this.getGroupedRawData(dataSource);\n            }\n            this.rows = dataSource.rows ? dataSource.rows : [];\n            this.columns = dataSource.columns ? dataSource.columns : [];\n            this.filters = dataSource.filters ? dataSource.filters : [];\n            this.values = dataSource.values ? dataSource.values : [];\n            this.formats = dataSource.formatSettings ? dataSource.formatSettings : [];\n            this.groups = dataSource.groupSettings ? dataSource.groupSettings : [];\n            this.calculatedFieldSettings = dataSource.calculatedFieldSettings ? dataSource.calculatedFieldSettings : [];\n            this.enableSort = dataSource.enableSorting === undefined ? true : dataSource.enableSorting;\n            this.fieldMapping = dataSource.fieldMapping ? dataSource.fieldMapping : [];\n            fields = this.getGroupData(this.data);\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fieldKeys[this.fields[i]] = dataSource.type === 'CSV' ? i : this.fields[i];\n            }\n            this.validateFilters(dataSource);\n            this.isExpandAll = (this.isValueFiltersAvail && dataSource.allowValueFilter) ? true : dataSource.expandAll;\n            this.drilledMembers =\n                dataSource.drilledMembers ? (this.isValueFiltersAvail && dataSource.allowValueFilter) ? [] : dataSource.drilledMembers : [];\n            this.isMutiMeasures = this.values.length > 1 ? true : false;\n            this.valueAxis = dataSource.valueAxis === 'row' ? 1 : 0;\n            this.emptyCellTextContent = dataSource.emptyCellsTextContent ? dataSource.emptyCellsTextContent : '';\n            this.rowValuesLength = this.valueAxis === 1 ? this.values.length : 1;\n            this.colValuesLength = this.valueAxis === 0 ? this.values.length : 1;\n            this.valueSortSettings = dataSource.valueSortSettings ||\n                { sortOrder: 'None', headerDelimiter: '.', headerText: '', columnIndex: undefined };\n            this.valueSortData = [];\n            this.pageSettings = customProperties ? (customProperties.pageSettings ? customProperties.pageSettings : this.pageSettings)\n                : undefined;\n            this.allowDataCompression = this.pageSettings && this.pageSettings.allowDataCompression;\n            this.savedFieldList = customProperties ? customProperties.savedFieldList : undefined;\n            this.getFieldList(fields, this.enableSort, dataSource.allowValueFilter);\n            this.removeIrrelevantFields(dataSource, Object.keys(this.fieldList));\n            this.fillFieldMembers(this.data, this.indexMatrix);\n            this.updateSortSettings(dataSource.sortSettings, this.enableSort);\n            this.valueMatrix = this.generateValueMatrix(this.data);\n            this.filterMembers = [];\n            var columnLength = this.columns.length - 1;\n            this.columnKeys = {};\n            while (columnLength > -1) {\n                this.columnKeys[this.columns[columnLength].name] = this.columns[columnLength];\n                columnLength--;\n            }\n            this.updateFilterMembers(dataSource);\n            this.generateGridData(dataSource);\n        }\n    };\n    PivotEngine.prototype.removeIrrelevantFields = function (dataSource, fields) {\n        var report = {};\n        report[0] = dataSource.rows;\n        report[1] = dataSource.columns;\n        report[2] = dataSource.values;\n        report[3] = dataSource.filters;\n        var pos = 0;\n        while (pos < 4) {\n            if (report[pos]) {\n                for (var cnt = 0; cnt < report[pos].length; cnt++) {\n                    if ((this.excludeFields.indexOf(report[pos][cnt].name) > -1) || (!isNullOrUndefined(fields) && fields.indexOf(report[pos][cnt].name) === -1)) {\n                        report[pos].splice(cnt, 1);\n                        cnt--;\n                    }\n                }\n            }\n            pos++;\n        }\n    };\n    /* eslint-disable */\n    PivotEngine.prototype.getGroupedRawData = function (dataSourceSettings) {\n        this.data = [];\n        for (var _i = 0, _a = this.actualData; _i < _a.length; _i++) {\n            var data = _a[_i];\n            this.data[this.data.length] = this.frameHeaderWithKeys(data);\n        }\n        var countFields = dataSourceSettings.values.filter(function (item) {\n            return item.type === 'Count' || item.type === 'DistinctCount';\n        }).map(function (item) { return item.name; });\n        var hasCountField = countFields.length > 0;\n        var realData = this.data;\n        var headerFields = dataSourceSettings.rows.concat(dataSourceSettings.columns.concat(dataSourceSettings.filters)).map(function (item) {\n            return item.name;\n        });\n        var groupRawData = {};\n        var finalData = [];\n        this.groupRawIndex = {};\n        var groupKeys = {};\n        var indexLength = 0;\n        for (var i = 0; i < realData.length; i++) {\n            var currData = realData[i];\n            var members = [];\n            if (hasCountField) {\n                for (var vPos = 0; vPos < countFields.length; vPos++) {\n                    currData[this.fieldKeys[countFields[vPos]]] = isNullOrUndefined(currData[this.fieldKeys[countFields[vPos]]]) ? currData[this.fieldKeys[countFields[vPos]]] : 1;\n                }\n            }\n            for (var hPos = 0; hPos < headerFields.length; hPos++) {\n                members.push(currData[this.fieldKeys[headerFields[hPos]]]);\n            }\n            var memberJoin = members.join('-');\n            if (groupRawData[memberJoin]) {\n                for (var vPos = 0; vPos < dataSourceSettings.values.length; vPos++) {\n                    var currFieldName = dataSourceSettings.values[vPos].name;\n                    var currValue = currData[this.fieldKeys[currFieldName]];\n                    var savedData = groupRawData[memberJoin];\n                    var summType = dataSourceSettings.values[vPos].type;\n                    if (!isNullOrUndefined(currValue)) {\n                        if (typeof currValue !== 'number' || summType === 'DistinctCount') {\n                            summType = 'Count';\n                        }\n                        if (isNullOrUndefined(savedData[currFieldName])) {\n                            savedData[currFieldName] = summType === 'Product' ? 1 : ((summType === 'Min' || summType === 'Max')\n                                ? undefined : 0);\n                        }\n                        else if (typeof savedData[currFieldName] !== 'number') {\n                            savedData[currFieldName] = 1;\n                        }\n                        if (summType === 'Count') {\n                            savedData[currFieldName] += 1;\n                        }\n                        else if (summType === 'Min') {\n                            if (!isNullOrUndefined(savedData[currFieldName])) {\n                                savedData[currFieldName] = savedData[currFieldName] > currValue ?\n                                    currValue : savedData[currFieldName];\n                            }\n                        }\n                        else if (summType === 'Max') {\n                            if (!isNullOrUndefined(savedData[currFieldName])) {\n                                savedData[currFieldName] = savedData[currFieldName] < currValue ?\n                                    currValue : savedData[currFieldName];\n                            }\n                        }\n                        else if (summType === 'Product') {\n                            savedData[currFieldName] *= currValue;\n                        }\n                        else {\n                            savedData[currFieldName] += currValue;\n                        }\n                    }\n                }\n                if (this.isDrillThrough) {\n                    this.groupRawIndex[groupKeys[memberJoin]].push(i);\n                }\n            }\n            else {\n                groupRawData[memberJoin] = currData;\n                finalData.push(currData);\n                if (this.isDrillThrough) {\n                    this.groupRawIndex[indexLength] = [i];\n                    groupKeys[memberJoin] = indexLength;\n                    indexLength++;\n                }\n            }\n        }\n        return finalData;\n    };\n    PivotEngine.prototype.getGroupData = function (data) {\n        var _this = this;\n        var fieldkeySet = data[0];\n        var _loop_1 = function (group) {\n            var fieldName = group.name;\n            var caption = group.caption;\n            if (this_1.fields.indexOf(fieldName) > -1) {\n                var groupFields = {};\n                var customGroupFieldName = void 0;\n                if (group.type === 'Date' && this_1.groupingFields[fieldName]) {\n                    return { value: fieldkeySet };\n                }\n                else if (group.type === 'Number') {\n                    if (PivotUtil.getType(fieldkeySet[fieldName]) === 'number' || !this_1.groupingFields[fieldName]) {\n                        /* eslint-disable  */\n                        if (group.rangeInterval) {\n                            data.sort(function (a, b) { return (Number(a[_this.fieldKeys[fieldName]]) > Number(b[_this.fieldKeys[fieldName]]))\n                                ? 1 : ((Number(b[_this.fieldKeys[fieldName]]) > Number(a[_this.fieldKeys[fieldName]]))\n                                ? -1 : 0); });\n                        }\n                    }\n                    else {\n                        return { value: fieldkeySet };\n                    }\n                }\n                else if (group.type === 'Custom' && this_1.fields.indexOf(fieldName + '_custom_group') > -1) {\n                    return { value: fieldkeySet };\n                }\n                var len = data.length;\n                while (len--) {\n                    var item = data[len];\n                    if (item[this_1.fieldKeys[fieldName]] && group.type === 'Date') {\n                        var date = new Date(item[this_1.fieldKeys[fieldName]].toString());\n                        if (!isNullOrUndefined(date) && group.groupInterval.length > 0) {\n                            for (var i = 0, len_1 = group.groupInterval.length; i < len_1; i++) {\n                                var interval = group.groupInterval[i];\n                                var isInRangeAvail = this_1.getRange(group, date.getTime());\n                                var newDate = PivotUtil.resetTime(new Date());\n                                switch (interval) {\n                                    case 'Years':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_years';\n                                            groupFields[newFieldName] = interval;\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : new Date(newDate.setFullYear(date.getFullYear())).toString());\n                                        }\n                                        break;\n                                    case 'Quarters':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_quarters';\n                                            groupFields[newFieldName] = interval;\n                                            var month = Math.ceil((date.getMonth() + 1) / 3);\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : ((this_1.localeObj ? this_1.localeObj.getConstant('qtr') : 'Qtr') + month.toString()));\n                                        }\n                                        break;\n                                    case 'QuarterYear':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_quarterYear';\n                                            groupFields[newFieldName] = interval;\n                                            var month = Math.ceil((date.getMonth() + 1) / 3);\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined :\n                                                ((this_1.localeObj ? this_1.localeObj.getConstant('qtr') : 'Qtr') + month.toString() + ' '\n                                                    + (this_1.localeObj ? this_1.localeObj.getConstant('of') : 'of') + ' '\n                                                    + date.getFullYear().toString()));\n                                        }\n                                        break;\n                                    case 'Months':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_months';\n                                            groupFields[newFieldName] = interval;\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : new Date(newDate.setMonth(date.getMonth(), newDate.getDate())).toString());\n                                        }\n                                        break;\n                                    case 'Days':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_days';\n                                            groupFields[newFieldName] = interval;\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : new Date(newDate.setMonth(date.getMonth(), date.getDate())).toString());\n                                        }\n                                        break;\n                                    case 'Hours':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_hours';\n                                            groupFields[newFieldName] = interval;\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : new Date(newDate.setHours(date.getHours())).toString());\n                                        }\n                                        break;\n                                    case 'Minutes':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_minutes';\n                                            groupFields[newFieldName] = interval;\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : new Date(newDate.setMinutes(date.getMinutes())).toString());\n                                        }\n                                        break;\n                                    case 'Seconds':\n                                        {\n                                            var newFieldName = (i === group.groupInterval.length - 1) ? fieldName : fieldName + '_date_group_seconds';\n                                            groupFields[newFieldName] = interval;\n                                            this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                            if (this_1.fields.indexOf(newFieldName) === -1) {\n                                                this_1.fields.push(newFieldName);\n                                            }\n                                            item[this_1.fieldKeys[newFieldName]] = (isInRangeAvail ? undefined : new Date(newDate.setSeconds(date.getSeconds())).toString());\n                                        }\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    else if (item[this_1.fieldKeys[fieldName]] && group.type === 'Number') {\n                        var isInRangeAvail = this_1.getRange(group, Number(item[this_1.fieldKeys[fieldName]]));\n                        item[this_1.fieldKeys[fieldName]] = isInRangeAvail ? undefined : item[this_1.fieldKeys[fieldName]];\n                    }\n                    else if (item[this_1.fieldKeys[fieldName]] && group.type === 'Custom' && group.customGroups && group.customGroups.length > 0) {\n                        var newFieldName = fieldName + '_custom_group';\n                        var customGroups = group.customGroups;\n                        var groupValue = void 0;\n                        for (var i = 0, len_2 = customGroups.length; i < len_2; i++) {\n                            {\n                                var cGroup = customGroups[i];\n                                if (cGroup.items && cGroup.items.length > 1) {\n                                    customGroupFieldName = newFieldName;\n                                    this_1.fieldKeys[newFieldName] = this_1.dataSourceSettings.type === 'CSV' ? (this_1.fieldKeys[newFieldName] ? this_1.fieldKeys[newFieldName] : this_1.fields.length) : newFieldName;\n                                    if (this_1.fields.indexOf(newFieldName) === -1) {\n                                        this_1.fields.push(newFieldName);\n                                    }\n                                    var isDataMatch = PivotUtil.inArray(item[this_1.fieldKeys[fieldName]].toString(), cGroup.items) === -1 ? false : true;\n                                    item[this_1.fieldKeys[newFieldName]] = (isDataMatch ? (cGroup.groupName && cGroup.groupName !== '') ? cGroup.groupName :\n                                        this_1.localeObj.getConstant('group') + ' ' + i : (groupValue && groupValue !== item[this_1.fieldKeys[fieldName]].toString()) ?\n                                        groupValue : item[this_1.fieldKeys[fieldName]].toString());\n                                    groupValue = item[this_1.fieldKeys[newFieldName]];\n                                }\n                            }\n                        }\n                    }\n                    var keys = Object.keys(item);\n                    var isCompleteSet = [];\n                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                        var key = keys_1[_i];\n                        isCompleteSet.push((item[key]) ? true : false);\n                    }\n                    fieldkeySet = (((isCompleteSet.indexOf(false) === -1) && keys.length === Object.keys(data[0]).length) ? item : fieldkeySet);\n                    //this.fields = Object.keys(fieldkeySet);\n                }\n                /* eslint-enable */\n                if (group.type === 'Date') {\n                    var isDataSource = false;\n                    var axisFields = [this_1.rows, this_1.columns, this_1.values, this_1.filters];\n                    var groupKeys = Object.keys(groupFields);\n                    var gCnt = Object.keys(groupKeys).length;\n                    var groupField = void 0;\n                    for (var _a = 0, axisFields_1 = axisFields; _a < axisFields_1.length; _a++) {\n                        var axis = axisFields_1[_a];\n                        if (!isDataSource && axis) {\n                            var cnt = axis.length;\n                            var i = 0;\n                            while (i < cnt) {\n                                if (axis[i].name === fieldName) {\n                                    isDataSource = true;\n                                    var actualField = axis[i];\n                                    axis.splice(i, 1);\n                                    var dataFields = this_1.rows;\n                                    dataFields = dataFields.concat(this_1.columns, this_1.values, this_1.filters);\n                                    while (gCnt--) {\n                                        var caption_1 = actualField.caption ? actualField.caption : actualField.name;\n                                        if (this_1.clonedReport) {\n                                            var clonedFields = this_1.clonedReport.rows;\n                                            clonedFields =\n                                                clonedFields.concat(this_1.clonedReport.columns, this_1.clonedReport.values, this_1.clonedReport.filters); /* eslint-disable-line */\n                                            var cloneField = PivotUtil.getFieldByName(groupKeys[gCnt], clonedFields);\n                                            if (cloneField) {\n                                                caption_1 = cloneField.caption ? cloneField.caption : cloneField.name;\n                                            }\n                                        }\n                                        if (!PivotUtil.getFieldByName(groupKeys[gCnt], dataFields)) {\n                                            groupField = groupFields[groupKeys[gCnt]];\n                                            var newField = {\n                                                name: groupKeys[gCnt],\n                                                caption: (this_1.localeObj ? this_1.localeObj.getConstant(groupField) : groupField) + ' (' + caption_1 + ')',\n                                                type: 'Count',\n                                                showNoDataItems: actualField.showNoDataItems,\n                                                baseField: actualField.baseField,\n                                                baseItem: actualField.baseItem,\n                                                showFilterIcon: actualField.showFilterIcon,\n                                                showSortIcon: actualField.showSortIcon,\n                                                showEditIcon: actualField.showEditIcon,\n                                                showRemoveIcon: actualField.showRemoveIcon,\n                                                showSubTotals: actualField.showValueTypeIcon,\n                                                allowDragAndDrop: actualField.allowDragAndDrop\n                                            };\n                                            axis.splice(i, 0, newField);\n                                        }\n                                    }\n                                    break;\n                                }\n                                i++;\n                            }\n                            if (isDataSource) {\n                                break;\n                            }\n                        }\n                    }\n                    gCnt = Object.keys(groupKeys).length;\n                    while (gCnt--) {\n                        groupField = groupFields[groupKeys[gCnt]];\n                        for (var i = 0, len_3 = this_1.formats.length; i < len_3; i++) {\n                            if (this_1.formats[i].name === groupKeys[gCnt]) {\n                                this_1.formats.splice(i, 1);\n                                break;\n                            }\n                        }\n                        if (groupField !== 'Quarters' && groupField !== 'QuarterYear') {\n                            var formatSettings = {\n                                name: groupKeys[gCnt],\n                                type: ['Years', 'Months', 'Days'].indexOf(groupField) > -1 ? 'date' : 'time',\n                                format: ((groupField === 'Years') ? 'yyyy' : (groupField === 'Months') ? 'MMM' :\n                                    (groupField === 'Days') ? 'd-MMM' : (groupField === 'Hours') ? 'hh a' :\n                                        (groupField === 'Minutes') ? ':mm' : (groupField === 'Seconds') ? ':ss' : undefined)\n                            };\n                            this_1.formats.push(formatSettings);\n                        }\n                    }\n                }\n                else if (group.type === 'Number' && group.rangeInterval) {\n                    /* eslint-disable */\n                    var startValue = void 0;\n                    var endValue = void 0;\n                    var cStartValue = void 0;\n                    var cEndValue = void 0;\n                    var framedSet = [];\n                    var unframedSet = [];\n                    var dataLength = data.length;\n                    var cnt = 0;\n                    this_1.groupingFields[fieldName] = fieldName;\n                    while (cnt < dataLength) {\n                        unframedSet.push(Number(data[cnt][this_1.fieldKeys[fieldName]]));\n                        if (data[cnt][this_1.fieldKeys[fieldName]] && framedSet.indexOf(Number(data[cnt][this_1.fieldKeys[fieldName]])) === -1) {\n                            framedSet.push(Number(data[cnt][this_1.fieldKeys[fieldName]]));\n                        }\n                        cnt++;\n                    }\n                    var framedSetLength = Math.max.apply(Math, framedSet);\n                    for (var i = framedSet[0], len_4 = framedSetLength; i < len_4; i++) {\n                        if (unframedSet.indexOf(i) < 0) {\n                            var duplicateData = this_1.frameData(data[0]);\n                            duplicateData[this_1.fieldKeys[fieldName]] = i;\n                            var index = unframedSet.lastIndexOf(i - 1);\n                            unframedSet.splice(index + 1, 0, i);\n                            data.splice(index + 1, 0, duplicateData);\n                        }\n                    }\n                    dataLength = data.length;\n                    cnt = 0;\n                    while (cnt < dataLength) {\n                        if (data[cnt] && data[cnt][this_1.fieldKeys[fieldName]]) {\n                            cStartValue = Number(data[cnt][this_1.fieldKeys[fieldName]]);\n                            cEndValue = cStartValue + (group.rangeInterval - 1);\n                            startValue = (!startValue) ? cStartValue : startValue;\n                            endValue = ((!endValue) ? ((cEndValue > framedSetLength) ? framedSetLength : cEndValue) : ((endValue > framedSetLength) ? framedSetLength : endValue));\n                            if (cStartValue >= startValue && cStartValue <= endValue) {\n                                data[cnt][this_1.fieldKeys[fieldName]] = ((startValue === endValue) ? startValue.toString() : startValue.toString() + '-' + endValue.toString());\n                            }\n                            else if (cStartValue > endValue && cStartValue === endValue + 1) {\n                                startValue = endValue + 1;\n                                endValue = ((startValue + (group.rangeInterval - 1) > framedSetLength) ? framedSetLength : startValue + (group.rangeInterval - 1));\n                                data[cnt][this_1.fieldKeys[fieldName]] = ((startValue === endValue) ? startValue.toString() : startValue.toString() + '-' + endValue.toString());\n                            }\n                            var keys = Object.keys(data[cnt]);\n                            var isCompleteSet = [];\n                            for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {\n                                var key = keys_2[_b];\n                                isCompleteSet.push((data[cnt][key]) ? true : false);\n                            }\n                            fieldkeySet = (((isCompleteSet.indexOf(false) === -1) && keys.length === Object.keys(data[0]).length) ? data[cnt] : fieldkeySet);\n                        }\n                        cnt++;\n                    }\n                    var axisFields = [this_1.rows, this_1.columns, this_1.values, this_1.filters];\n                    for (var _c = 0, axisFields_2 = axisFields; _c < axisFields_2.length; _c++) {\n                        var fields = axisFields_2[_c];\n                        var field = PivotUtil.getFieldByName(fieldName, fields);\n                        if (field) {\n                            field = field.properties ? field.properties : field;\n                            field.type = 'Count';\n                        }\n                        /* eslint-enable */\n                    }\n                    for (var i = 0, len_5 = this_1.formats.length; i < len_5; i++) {\n                        if (this_1.formats[i].name === fieldName) {\n                            this_1.formats.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n                else if (group.type === 'Custom' && customGroupFieldName) {\n                    var customFieldName = customGroupFieldName;\n                    // this.groupingFields[customFieldName] = customFieldName;\n                    var isDataSource = false;\n                    var axisFields = [this_1.rows, this_1.columns, this_1.values, this_1.filters];\n                    var dataFields = this_1.rows;\n                    dataFields = dataFields.concat(this_1.columns, this_1.values, this_1.filters);\n                    var pattern = [];\n                    if (!caption || caption === '') {\n                        pattern = customFieldName.match(/_custom_group/g);\n                    }\n                    // let actualFieldName: string = fieldName.replace(/_custom_group/g, '');\n                    var parentField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ''), dataFields);\n                    var customGroupField = PivotUtil.getFieldByName(customFieldName, dataFields);\n                    for (var _d = 0, axisFields_3 = axisFields; _d < axisFields_3.length; _d++) {\n                        var axis = axisFields_3[_d];\n                        if (!isDataSource && axis) {\n                            var cnt = axis.length;\n                            var i = 0;\n                            while (i < cnt) {\n                                if (axis[i].name === group.name && !customGroupField) {\n                                    isDataSource = true;\n                                    var actualField = axis[i];\n                                    var newField = {\n                                        name: customFieldName,\n                                        caption: (!caption || caption === '') ? (parentField.caption ? parentField.caption : parentField.name) + (pattern.length + 1) : caption,\n                                        type: 'Count',\n                                        showNoDataItems: actualField.showNoDataItems,\n                                        baseField: actualField.baseField,\n                                        baseItem: actualField.baseItem,\n                                        showSubTotals: actualField.showValueTypeIcon,\n                                        allowDragAndDrop: actualField.allowDragAndDrop,\n                                        showFilterIcon: actualField.showFilterIcon,\n                                        showSortIcon: actualField.showSortIcon,\n                                        showRemoveIcon: actualField.showRemoveIcon,\n                                        showEditIcon: actualField.showEditIcon\n                                    };\n                                    axis.splice(i, 0, newField);\n                                    break;\n                                }\n                                else if (axis[i].name === customFieldName && customGroupField) {\n                                    var newField = {\n                                        name: customGroupField.name,\n                                        caption: (!caption || caption === '') ? customGroupField.caption : caption,\n                                        type: customGroupField.type,\n                                        showNoDataItems: customGroupField.showNoDataItems,\n                                        baseField: customGroupField.baseField,\n                                        baseItem: customGroupField.baseItem,\n                                        showRemoveIcon: customGroupField.showRemoveIcon,\n                                        showSubTotals: customGroupField.showValueTypeIcon,\n                                        allowDragAndDrop: customGroupField.allowDragAndDrop,\n                                        showFilterIcon: customGroupField.showFilterIcon,\n                                        showSortIcon: customGroupField.showSortIcon,\n                                        showEditIcon: customGroupField.showEditIcon\n                                    };\n                                    axis.splice(i, 1, newField);\n                                    break;\n                                }\n                                i++;\n                            }\n                            if (isDataSource) {\n                                break;\n                            }\n                        }\n                    }\n                    var formatfield = PivotUtil.getFieldByName(fieldName, PivotUtil.cloneFormatSettings(this_1.formats));\n                    if (formatfield) {\n                        formatfield.name = customFieldName;\n                        this_1.formats.push(formatfield);\n                    }\n                }\n                /* eslint-enable max-len */\n                this_1.groupingFields = extend(this_1.groupingFields, groupFields);\n            }\n            else {\n                return { value: fieldkeySet };\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = this.groups; _i < _a.length; _i++) {\n            var group = _a[_i];\n            var state_1 = _loop_1(group);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        //this.fields = Object.keys(fieldkeySet);\n        return fieldkeySet;\n    };\n    /* eslint-disable */\n    PivotEngine.prototype.frameData = function (data) {\n        var fields = Object.keys(data);\n        var keyPos = 0;\n        var framedSet = {};\n        while (keyPos < fields.length) {\n            framedSet[fields[keyPos]] = undefined;\n            keyPos++;\n        }\n        return framedSet;\n    };\n    /* eslint-enable */\n    PivotEngine.prototype.getRange = function (group, cValue) {\n        var isRangeAvail;\n        if (group.type === 'Date') {\n            var cDate = new Date(cValue);\n            var startDate = typeof (group.startingAt) === 'string' ? new Date(group.startingAt) : group.startingAt;\n            var endDate = typeof (group.endingAt) === 'string' ? new Date(group.endingAt) : group.endingAt;\n            if (startDate && cDate.getTime() < startDate.getTime() ||\n                endDate && cDate.getTime() > endDate.getTime()) {\n                isRangeAvail = true;\n            }\n            else {\n                isRangeAvail = false;\n            }\n        }\n        else {\n            var startValue = typeof (group.startingAt) === 'string' ? parseInt(group.startingAt, 10) : group.startingAt;\n            var endValue = typeof (group.endingAt) === 'string' ? parseInt(group.endingAt, 10) : group.endingAt;\n            if (startValue && cValue < startValue || endValue && cValue > endValue) {\n                isRangeAvail = true;\n            }\n            else {\n                isRangeAvail = false;\n            }\n        }\n        return isRangeAvail;\n    };\n    PivotEngine.prototype.getPercentFormat = function (formatField, currentField) {\n        var isHavingFormat = (!isNullOrUndefined(formatField[currentField]) && !isNullOrUndefined(this.formatFields[currentField].format)) ? (this.formatFields[currentField].format).toLowerCase().match(/p[0-9]/) : undefined; /* eslint-disable-line */\n        return !isNullOrUndefined(isHavingFormat) ? (Number((this.formatFields[currentField].format).replace(/[^0-9]/g, ''))) : 2;\n    };\n    PivotEngine.prototype.getFormattedFields = function (fields) {\n        var cnt = this.formats.length;\n        while (cnt--) {\n            this.formatFields[this.formats[cnt].name] = this.formats[cnt];\n            if (this.formats[cnt].type) {\n                this.dateFormatFunction[this.formats[cnt].name] = {\n                    exactFormat: this.globalize.getDateFormat(this.formats[cnt]),\n                    fullFormat: this.globalize.getDateFormat({\n                        format: 'yyyy/MM/dd/HH/mm/ss', type: this.formats[cnt].type\n                    })\n                };\n            }\n            // for (let len: number = 0, lnt: number = fields.length; len < lnt; len++) {\n            // if (fields[len] && fields[len].name === this.formats[cnt].name) {\n            //     this.formatFields[fields[len].name] = this.formats[cnt];\n            // }\n            // }\n        }\n    };\n    /* eslint-disable  */\n    PivotEngine.prototype.getFieldList = function (fields, isSort, isValueFilteringEnabled) {\n        var type;\n        var keys = this.fields;\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns, this.values, this.filters);\n        this.getFormattedFields(dataFields);\n        this.getCalculatedField(keys);\n        keys = this.fields;\n        var lenE = this.excludeFields.length;\n        lenE = lenE - 1;\n        while (lenE > -1) {\n            var index = this.fields.indexOf(this.excludeFields[lenE]);\n            if (index !== -1) {\n                this.fields.splice(index, 1);\n            }\n            if (this.fieldList) {\n                delete this.fieldList[this.excludeFields[lenE]];\n            }\n            lenE--;\n        }\n        var len = keys.length;\n        var dataTypes = ['string', 'number', 'datetime', 'date', 'boolean'];\n        if (this.savedFieldList) {\n            this.fieldList = this.savedFieldList;\n            while (len--) { /** while is used for better performance than for */\n                var key = keys[len];\n                var field = this.getMappingField(key);\n                if (this.fieldList[key]) {\n                    this.fieldList[key].isSelected = false;\n                    this.fieldList[key].index = len;\n                    this.fieldList[key].filter = [];\n                    this.fieldList[key].sort = isSort ? 'Ascending' : 'None';\n                    this.fieldList[key].isExcelFilter = false;\n                    this.fieldList[key].filterType = '';\n                    this.fieldList[key].showFilterIcon = (field && 'showFilterIcon' in field) ?\n                        field.showFilterIcon : true;\n                    this.fieldList[key].showRemoveIcon = (field && 'showRemoveIcon' in field) ?\n                        field.showRemoveIcon : true;\n                    this.fieldList[key].showSortIcon = (field && 'showSortIcon' in field) ?\n                        field.showSortIcon : true;\n                    this.fieldList[key].showEditIcon = (field && 'showEditIcon' in field) ?\n                        field.showEditIcon : true;\n                    this.fieldList[key].showValueTypeIcon = (field && 'showValueTypeIcon' in field) ?\n                        field.showValueTypeIcon : true;\n                    this.fieldList[key].allowDragAndDrop = (field && 'allowDragAndDrop' in field) ?\n                        field.allowDragAndDrop : true;\n                    this.fieldList[key].isCalculatedField = (field && 'isCalculatedField' in field) ?\n                        field.isCalculatedField : false;\n                    this.fieldList[key].showNoDataItems = (field && 'showNoDataItems' in field) ?\n                        field.showNoDataItems : false;\n                    this.fieldList[key].showSubTotals = (field && 'showSubTotals' in field) ?\n                        field.showSubTotals : true;\n                    if (this.isValueFiltersAvail && isValueFilteringEnabled) {\n                        this.fieldList[key].dateMember = [];\n                        this.fieldList[key].formattedMembers = {};\n                        this.fieldList[key].members = {};\n                    }\n                }\n                else {\n                    type = (field && 'dataType' in field && field.dataType && dataTypes.indexOf(field.dataType.toLowerCase()) > -1) ?\n                        field.dataType.toLowerCase() : type;\n                    this.fieldList[key] = {\n                        caption: (field && 'caption' in field && field.caption) ? field.caption : key,\n                        id: key,\n                        type: ((key.indexOf('_custom_group') !== -1) || (key.indexOf('_date_group') !== -1)) ?\n                            'string' : (type === undefined || type === 'undefined') ? 'number' : type,\n                        isSelected: false,\n                        sort: isSort ? 'Ascending' : 'None',\n                        filterType: '',\n                        index: len,\n                        filter: [],\n                        isCustomField: ((key.indexOf('_custom_group') !== -1) || (key.indexOf('_date_group') !== -1)),\n                        showRemoveIcon: (field && 'showRemoveIcon' in field) ?\n                            field.showRemoveIcon : true,\n                        showFilterIcon: (field && 'showFilterIcon' in field) ?\n                            field.showFilterIcon : true,\n                        showSortIcon: (field && 'showSortIcon' in field) ?\n                            field.showSortIcon : true,\n                        showNoDataItems: (field && 'showNoDataItems' in field) ?\n                            field.showNoDataItems : false,\n                        isCalculatedField: (field && 'isCalculatedField' in field) ?\n                            field.isCalculatedField : false,\n                        showEditIcon: (field && 'showEditIcon' in field) ?\n                            field.showEditIcon : true,\n                        showValueTypeIcon: (field && 'showValueTypeIcon' in field) ?\n                            field.showValueTypeIcon : true,\n                        allowDragAndDrop: (field && 'allowDragAndDrop' in field) ?\n                            field.allowDragAndDrop : true,\n                        showSubTotals: (field && 'showSubTotals' in field) ?\n                            field.showSubTotals : true,\n                        aggregateType: (field && 'type' in field) ? field.type :\n                            (((key.indexOf('_custom_group') !== -1) || (key.indexOf('_date_group') !== -1)) ? 'string' :\n                                (type === undefined || type === 'undefined') ? 'number' : type) === 'number' ? 'Sum' : 'Count',\n                        baseField: (field && 'baseField' in field) ?\n                            field.baseField : undefined,\n                        baseItem: (field && 'baseItem' in field) ?\n                            field.baseItem : undefined\n                    };\n                }\n            }\n        }\n        else {\n            this.fieldList = {};\n            while (len--) { /** while is used for better performance than for */\n                var key = keys[len];\n                var field = this.getMappingField(key);\n                type = (field && 'dataType' in field && field.dataType && dataTypes.indexOf(field.dataType.toLowerCase()) > -1) ?\n                    field.dataType.toLowerCase() : PivotUtil.getType(fields[this.fieldKeys[key]]);\n                this.fieldList[key] = {\n                    id: key,\n                    caption: (field && 'caption' in field && field.caption) ? field.caption : key,\n                    type: ((key.indexOf('_custom_group') !== -1) || (key.indexOf('_date_group') !== -1)) ?\n                        'string' : (type === undefined || type === 'undefined') ? 'number' : type,\n                    filterType: '',\n                    index: len,\n                    filter: [],\n                    sort: isSort ? 'Ascending' : 'None',\n                    isSelected: false,\n                    isCustomField: ((key.indexOf('_custom_group') !== -1) || (key.indexOf('_date_group') !== -1)),\n                    showFilterIcon: (field && 'showFilterIcon' in field) ?\n                        field.showFilterIcon : true,\n                    showRemoveIcon: (field && 'showRemoveIcon' in field) ?\n                        field.showRemoveIcon : true,\n                    showSortIcon: (field && 'showSortIcon' in field) ?\n                        field.showSortIcon : true,\n                    showEditIcon: (field && 'showEditIcon' in field) ?\n                        field.showEditIcon : true,\n                    showValueTypeIcon: (field && 'showValueTypeIcon' in field) ?\n                        field.showValueTypeIcon : true,\n                    allowDragAndDrop: (field && 'allowDragAndDrop' in field) ?\n                        field.allowDragAndDrop : true,\n                    showSubTotals: (field && 'showSubTotals' in field) ?\n                        field.showSubTotals : true,\n                    showNoDataItems: (field && 'showNoDataItems' in field) ?\n                        field.showNoDataItems : false,\n                    isCalculatedField: (field && 'isCalculatedField' in field) ?\n                        field.isCalculatedField : false,\n                    aggregateType: (field && 'type' in field) ? field.type :\n                        (((key.indexOf('_custom_group') !== -1) || (key.indexOf('_date_group') !== -1)) ? 'string' :\n                            (type === undefined || type === 'undefined') ? 'number' : type) === 'number' ? 'Sum' : 'Count',\n                    baseField: (field && 'baseField' in field) ?\n                        field.baseField : undefined,\n                    baseItem: (field && 'baseItem' in field) ?\n                        field.baseItem : undefined\n                };\n            }\n        }\n        this.updateTreeViewData(dataFields);\n    };\n    PivotEngine.prototype.getMappingField = function (key) {\n        var field = {};\n        if (this.fieldMapping.length > 0) {\n            for (var index = 0, cnt = this.fieldMapping.length; index < cnt; index++) {\n                if (this.fieldMapping[index].name === key) {\n                    field = this.fieldMapping[index];\n                    break;\n                }\n            }\n        }\n        return field;\n    };\n    PivotEngine.prototype.updateFieldList = function (savedFieldList) {\n        var keys = this.fields;\n        var len = keys.length;\n        while (len--) { /** while is used for better performance than for */\n            this.fieldList[keys[len]].isExcelFilter = savedFieldList[keys[len]].isExcelFilter;\n        }\n    };\n    PivotEngine.prototype.updateTreeViewData = function (fields) {\n        var cnt = fields.length;\n        var lnt = this.calculatedFieldSettings.length;\n        while (cnt--) {\n            if (this.fieldList[fields[cnt].name]) {\n                var field = this.fieldList[fields[cnt].name];\n                field.type = fields[cnt].dataType ? fields[cnt].dataType.toLowerCase() : field.type;\n                field.caption = fields[cnt].caption ? fields[cnt].caption : fields[cnt].name;\n                field.isSelected = true;\n                field.showNoDataItems = fields[cnt].showNoDataItems;\n                field.aggregateType = fields[cnt].type;\n                field.baseField = fields[cnt].baseField;\n                field.baseItem = fields[cnt].baseItem;\n                field.allowDragAndDrop = fields[cnt].allowDragAndDrop;\n                field.showFilterIcon = fields[cnt].showFilterIcon;\n                field.showSortIcon = fields[cnt].showSortIcon;\n                field.showRemoveIcon = fields[cnt].showRemoveIcon;\n                field.showValueTypeIcon = fields[cnt].showValueTypeIcon;\n                field.showEditIcon = fields[cnt].showEditIcon;\n                field.showSubTotals = fields[cnt].showSubTotals;\n            }\n        }\n        while (lnt--) {\n            if (this.fieldList[this.calculatedFieldSettings[lnt].name]) {\n                this.fieldList[this.calculatedFieldSettings[lnt].name].aggregateType = 'CalculatedField';\n                this.fieldList[this.calculatedFieldSettings[lnt].name].isCalculatedField = true;\n                this.fieldList[this.calculatedFieldSettings[lnt].name].formula = this.calculatedFieldSettings[lnt].formula;\n            }\n        }\n    };\n    PivotEngine.prototype.getCalculatedField = function (keys) {\n        for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {\n            var field = _a[_i];\n            this.calculatedFields[field.name] = extend({}, field, null, true);\n            this.calculatedFields[field.name].actualFormula = field.formula;\n        }\n        var fieldKeys = Object.keys(this.calculatedFields);\n        var _loop_2 = function (calc, cnt) {\n            var field = this_2.calculatedFields[fieldKeys[calc]];\n            var calcProperties = field.properties;\n            var actualFormula = (calcProperties ? calcProperties.formula : field.formula).trim();\n            var formula = actualFormula.replace(/\"/g, '');\n            field.formula = formula.indexOf('^') > -1 ? this_2.powerFunction(formula) : formula;\n            if (field.formula.indexOf('Math.min(') === -1 && field.formula.indexOf('min(') > -1) {\n                field.formula = field.formula.replace(/min\\(/g, 'Math.min(');\n            }\n            if (field.formula.indexOf('Math.max(') === -1 && field.formula.indexOf('max(') > -1) {\n                field.formula = field.formula.replace(/max\\(/g, 'Math.max(');\n            }\n            if (field.formula.indexOf('Math.abs(') === -1 && field.formula.indexOf('abs(') > -1) {\n                field.formula = field.formula.replace(/abs\\(/g, 'Math.abs(');\n            }\n            /* eslint-disable  */\n            field.name = calcProperties ? calcProperties.name : field.name;\n            keys = keys.filter(function (key) { return key !== field.name; });\n            keys.push(field.name);\n            var formulaType = actualFormula.split('\\\"');\n            for (var len = 0, lmt = formulaType.length; len < lmt; len++) {\n                var type = formulaType[len].trim();\n                var aggregateValue = type.split(/[ .:;?!~,`\"&|()<>{}\\[\\]\\r\\n/\\\\]+/);\n                var matchStrings = type.match(/^([^()]+)\\((.*)\\)$/);\n                var selectedString = (aggregateValue[0] === 'DistinctCount' ?\n                    'DistinctCount' : aggregateValue[0] === 'PopulationStDev' ?\n                    'PopulationStDev' : aggregateValue[0] === 'SampleStDev' ? 'SampleStDev' : aggregateValue[0] === 'PopulationVar' ?\n                    'PopulationVar' : aggregateValue[0] === 'SampleVar' ? 'SampleVar' : aggregateValue[0]);\n                if (['Sum', 'Count', 'Min', 'Max', 'Avg', 'Product', 'DistinctCount',\n                    'PopulationStDev', 'SampleStDev', 'PopulationVar', 'SampleVar', 'Median'].indexOf(selectedString) !== -1) {\n                    var index = (keys.indexOf(aggregateValue[1]) === -1 && matchStrings[2]) ? keys.indexOf(matchStrings[2]) : keys.indexOf(aggregateValue[1]);\n                    if (!this_2.calculatedFormulas[field.name]) {\n                        this_2.calculatedFormulas[field.name] = [{\n                                index: index,\n                                type: selectedString,\n                                formula: type,\n                            }];\n                    }\n                    else {\n                        this_2.calculatedFormulas[field.name].push({\n                            index: index,\n                            type: selectedString,\n                            formula: type\n                        });\n                    }\n                    /* eslint-enable */\n                }\n            }\n        };\n        var this_2 = this;\n        for (var calc = 0, cnt = fieldKeys.length; calc < cnt; calc++) {\n            _loop_2(calc, cnt);\n        }\n        this.fields = keys;\n    };\n    PivotEngine.prototype.validateFilters = function (data) {\n        this.isValueFiltersAvail = false;\n        var filterElements = data.filterSettings ? data.filterSettings : [];\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns);\n        for (var _i = 0, filterElements_1 = filterElements; _i < filterElements_1.length; _i++) {\n            var filter = filterElements_1[_i];\n            for (var _a = 0, dataFields_1 = dataFields; _a < dataFields_1.length; _a++) {\n                var field = dataFields_1[_a];\n                if (filter.name === field.name && filter.type === 'Value') {\n                    this.isValueFiltersAvail = true;\n                    break;\n                }\n            }\n            if (this.isValueFiltersAvail) {\n                break;\n            }\n        }\n    };\n    PivotEngine.prototype.validateValueFields = function () {\n        this.isValueHasAdvancedAggregate = false;\n        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n            var value = _a[_i];\n            if ((['DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentTotal', 'RunningTotals']).indexOf(value.type) !== -1) {\n                this.isValueHasAdvancedAggregate = true;\n                break;\n            }\n        }\n    };\n    PivotEngine.prototype.fillFieldMembers = function (data, indMat) {\n        var keys = this.fields;\n        var dlen = data.length;\n        var fList = this.fieldList;\n        var kLn = keys.length;\n        for (var kl = 0; kl < kLn; kl++) {\n            var key = keys[kl];\n            if (!fList[key].members || this.allowDataCompression) {\n                fList[key].members = {};\n            }\n            if (!fList[key].formattedMembers || this.allowDataCompression) {\n                fList[key].formattedMembers = {};\n            }\n            if (!fList[key].dateMember || this.allowDataCompression) {\n                fList[key].dateMember = [];\n            }\n            var members = fList[key].members;\n            var isDataAvail = Object.keys(members).length > 0 ? true : false;\n            var formattedMembers = fList[key].formattedMembers;\n            var dateMember = fList[key].dateMember;\n            var membersCnt = 0;\n            var fmembersCnt = 0;\n            //let sort: string[] = [];\n            for (var dl = 0; dl < dlen; dl++) {\n                var mkey = data[dl][this.fieldKeys[key]];\n                // if (!isNullOrUndefined(mkey)) {\n                if (!isDataAvail) {\n                    var fKey = mkey;\n                    var formattedValue = (this.pageSettings && !(this.formatFields[key] &&\n                        (['date', 'dateTime', 'time'].indexOf(this.formatFields[key].type) > -1))) ? ({\n                        formattedText: mkey === null ? (this.localeObj ? this.localeObj.getConstant('null') : String(mkey)) :\n                            mkey === undefined ? (this.localeObj ? (key in this.groupingFields) ?\n                                this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') :\n                                String(mkey)) : mkey.toString(), actualText: mkey === null ? (this.localeObj ?\n                            this.localeObj.getConstant('null') : String(mkey)) : mkey === undefined ? (this.localeObj ?\n                            (key in this.groupingFields) ? this.localeObj.getConstant('groupOutOfRange') :\n                                this.localeObj.getConstant('undefined') : String(mkey)) : mkey\n                    }) : this.getFormattedValue(mkey, key);\n                    if (formattedValue.formattedText) {\n                        fKey = formattedValue.formattedText;\n                    }\n                    /* eslint-disable */\n                    if (!members.hasOwnProperty(mkey)) {\n                        membersCnt++;\n                        members[mkey] = {\n                            index: [dl], ordinal: membersCnt,\n                            isDrilled: this.isExpandAll ? true : false\n                        };\n                        dateMember.push({ formattedText: formattedValue.formattedText, actualText: (formattedValue.dateText ? formattedValue.dateText : formattedValue.actualText) });\n                        //sort.push(mkey);\n                    }\n                    else {\n                        members[mkey].index.push(dl);\n                    }\n                    if (!formattedMembers.hasOwnProperty(fKey)) {\n                        /* eslint-enable */\n                        fmembersCnt++;\n                        formattedMembers[fKey] = {\n                            index: [dl], ordinal: fmembersCnt,\n                            isDrilled: this.isExpandAll ? true : false\n                        };\n                    }\n                    else {\n                        formattedMembers[fKey].index.push(dl);\n                    }\n                }\n                if (!(indMat[dl])) {\n                    indMat[dl] = [];\n                    indMat[dl][kl] = members[mkey].ordinal;\n                }\n                else {\n                    indMat[dl][kl] = members[mkey].ordinal;\n                }\n                // }\n            }\n            /*sort = Object.keys(members).sort();\n            let sortedMembers: Members = {};\n            for (let sln: number = 0, slt: number = sort.length; sln < slt; sln++) {\n                sortedMembers[sort[sln]] = members[sort[sln]];\n            }\n            fList[key].members = sortedMembers; */\n        }\n    };\n    /* eslint-disable , @typescript-eslint/no-explicit-any */\n    PivotEngine.prototype.generateValueMatrix = function (data) {\n        var keys = this.fields;\n        var len = data.length;\n        var vMat = [];\n        var keyLen = keys.length;\n        var flList = this.fieldList;\n        while (len--) {\n            var tkln = keyLen;\n            //if (isNullOrUndefined(vMat[len])) {\n            vMat[len] = [];\n            //}\n            while (tkln--) {\n                var key = keys[tkln];\n                vMat[len][tkln] = (flList[key].type === 'number' || isNullOrUndefined(data[len][this.fieldKeys[key]])) ?\n                    isNullOrUndefined(data[len][this.fieldKeys[key]]) ?\n                        data[len][this.fieldKeys[key]] :\n                        !isNaN(Number(data[len][this.fieldKeys[key]])) ?\n                            Number(data[len][this.fieldKeys[key]]) : undefined : 1;\n            }\n        }\n        return vMat;\n    };\n    PivotEngine.prototype.updateSortSettings = function (sortSettings, isSort) {\n        for (var sln = 0, slt = sortSettings ? sortSettings.length : 0; sln < slt && isSort; sln++) {\n            if (this.fieldList[sortSettings[sln].name]) {\n                this.fieldList[sortSettings[sln].name].sort = sortSettings[sln].order;\n            }\n        }\n    };\n    PivotEngine.prototype.updateFilterMembers = function (source) {\n        var filterRw = this.filterMembers;\n        var list = {};\n        //let eList: {[key: string] : number} = {};\n        var isInclude = this.getFilters(source, list);\n        //this.getFilterExcludeList(source.rows, flist);\n        //this.getFilterExcludeList(source.columns, flist);\n        //this.getFilterExcludeList(source.filters, flist);\n        // let filters: Iterator = isInclude ? iList : eList;\n        var dln = this.indexMatrix.length;\n        if (isInclude) {\n            var keys = list.include.index;\n            for (var ln = 0; ln < keys.length; ln++) {\n                if (list.exclude === undefined || list.exclude.indexObject[keys[ln]] === undefined) {\n                    filterRw.push(keys[ln]);\n                }\n            }\n        }\n        else {\n            for (var ln = 0; ln < dln; ln++) {\n                if (list.exclude === undefined || list.exclude.indexObject[ln] === undefined) {\n                    filterRw.push(ln);\n                }\n            }\n        }\n    };\n    PivotEngine.prototype.getFilters = function (source, ilist) {\n        var filterElements = source.filterSettings ? source.filterSettings : [];\n        var isInclude = false;\n        var filter = [];\n        /* eslint-disable */\n        for (var rln = 0, rlt = filterElements.length; rln < rlt; rln++) {\n            var filterElement = filterElements[rln].properties ?\n                filterElements[rln].properties : filterElements[rln];\n            /* eslint-enable */\n            if (this.fieldList[filterElement.name] &&\n                this.fieldList[filterElement.name].isSelected &&\n                this.isValidFilterField(filterElement, source.allowMemberFilter, source.allowLabelFilter)) {\n                this.applyLabelFilter(filterElement);\n                if (filterElement) {\n                    filter = filterElement.items;\n                }\n                if (filterElement.type && filterElement.type === 'Include') {\n                    this.frameFilterList(filter, filterElement.name, ilist, 'include', filterElement.showLabelFilter, isInclude);\n                    isInclude = true;\n                }\n                else {\n                    this.frameFilterList(filter, filterElement.name, ilist, 'exclude', filterElement.showLabelFilter);\n                }\n                if (filterElement.showLabelFilter) {\n                    filterElement.items = [];\n                    filterElement.type = filterElement.showDateFilter ? 'Date' : filterElement.showNumberFilter ? 'Number' : 'Label';\n                }\n            }\n        }\n        /* for (let cln: number = 0, clt: number = cols.length; cln < clt; cln ++) {\n             filter = cols[cln].filter ? cols[cln].filter.items : [];\n             if (filter.length && cols[cln].filter.type && cols[cln].filter.type === 'include') {\n                 //type = cols[cln].filter.type;\n                 this.frameFilterList(filter, cols[cln].name, ilist, 'include', isInclude);\n                 isInclude = true;\n             } else {\n                 this.frameFilterList(filter, cols[cln].name, ilist, 'exclude');\n             }\n         }\n         for (let vln: number = 0, vlt: number = filters.length; vln < vlt; vln ++) {\n             filter = filters[vln].filter ? filters[vln].filter.items : [];\n             if (filter.length && filters[vln].filter.type && filters[vln].filter.type === 'include') {\n                 this.frameFilterList(filter, filters[vln].name, ilist, 'include', isInclude);\n                 isInclude = true;\n             } else {\n                 this.frameFilterList(filter, filters[vln].name, ilist, 'exclude');\n             }\n         } */\n        return isInclude;\n    };\n    PivotEngine.prototype.isValidFilterField = function (filterElement, allowMemberFiltering, allowLabelFiltering) {\n        var fieldName = filterElement.name;\n        var isValidFilterElement = false;\n        var filterTypes = ['Include', 'Exclude'];\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns);\n        if (this.fieldList[fieldName].isSelected && allowMemberFiltering && filterTypes.indexOf(filterElement.type) >= 0) {\n            isValidFilterElement = true;\n            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n                var field = _a[_i];\n                if (fieldName === field.name) {\n                    isValidFilterElement = false;\n                    break;\n                }\n            }\n        }\n        else if (allowLabelFiltering) {\n            for (var _b = 0, dataFields_2 = dataFields; _b < dataFields_2.length; _b++) {\n                var field = dataFields_2[_b];\n                if (fieldName === field.name &&\n                    (['Label', 'Date', 'Number'].indexOf(filterElement.type) >= 0)) {\n                    isValidFilterElement = true;\n                    break;\n                }\n            }\n        }\n        return isValidFilterElement;\n    };\n    PivotEngine.prototype.applyLabelFilter = function (filterElement) {\n        if (['Label', 'Date', 'Number'].indexOf(filterElement.type) >= 0) {\n            var members = Object.keys(this.fieldList[filterElement.name].members);\n            filterElement.showLabelFilter = true;\n            if (filterElement.type === 'Label') {\n                filterElement.items = this.getLabelFilterMembers(members, filterElement.condition, filterElement.value1, filterElement.value2); /* eslint-disable-line */\n            }\n            else if (filterElement.type === 'Date') {\n                filterElement.showDateFilter = true;\n                var date1 = typeof (filterElement.value1) === 'string' ? new Date(filterElement.value1) : filterElement.value1;\n                var date2 = typeof (filterElement.value2) === 'string' ? new Date(filterElement.value2) : filterElement.value2;\n                filterElement.items = this.getDateFilterMembers(members, filterElement.name, filterElement.condition, date1, date2); /* eslint-disable-line */\n            }\n            else {\n                filterElement.showNumberFilter = true;\n                filterElement.items = [];\n                for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n                    var member = members_1[_i];\n                    var operand1 = this.getParsedValue(filterElement.name, filterElement.value1);\n                    var operand2 = this.getParsedValue(filterElement.name, filterElement.value2);\n                    var cValue = this.getParsedValue(filterElement.name, member);\n                    if (this.validateFilterValue(cValue, filterElement.condition, operand1, operand2)) {\n                        filterElement.items.push(member);\n                    }\n                }\n            }\n            /* eslint-enable max-len */\n            var excludeOperators = ['DoesNotBeginWith', 'DoesNotContains', 'DoesNotEndsWith', 'DoesNotEquals', 'NotBetween'];\n            filterElement.type = (filterElement.condition ? (excludeOperators.indexOf(filterElement.condition) > -1 &&\n                !filterElement.showNumberFilter) ? 'Exclude' : 'Include' : 'Exclude');\n        }\n        else {\n            filterElement.showLabelFilter = false;\n        }\n    };\n    PivotEngine.prototype.getLabelFilterMembers = function (members, operator, value1, value2) {\n        var items = [];\n        for (var _i = 0, members_2 = members; _i < members_2.length; _i++) {\n            var member = members_2[_i];\n            var filterValue = member.toLowerCase();\n            if (value1.toString()) {\n                switch (operator) {\n                    case 'Equals':\n                    case 'DoesNotEquals':\n                        if (filterValue === value1.toLowerCase()) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'BeginWith':\n                    case 'DoesNotBeginWith':\n                        if (filterValue.indexOf(value1.toLowerCase()) === 0) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'EndsWith':\n                    case 'DoesNotEndsWith':\n                        if (filterValue.match(value1.toLowerCase() + '$') !== null) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'Contains':\n                    case 'DoesNotContains':\n                        if (filterValue.indexOf(value1.toLowerCase()) > -1) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'GreaterThan':\n                        if (filterValue > value1.toLowerCase()) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'GreaterThanOrEqualTo':\n                        if (filterValue >= value1.toLowerCase()) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'LessThan':\n                        if (filterValue < value1.toLowerCase()) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'LessThanOrEqualTo':\n                        if (filterValue <= value1.toLowerCase()) {\n                            items.push(member);\n                        }\n                        break;\n                    case 'Between':\n                    case 'NotBetween':\n                        if ((filterValue >= value1.toLowerCase()) && (filterValue <= value2.toLowerCase())) {\n                            items.push(member);\n                        }\n                        break;\n                    default:\n                        if (filterValue === value1.toLowerCase()) {\n                            items.push(member);\n                        }\n                        break;\n                }\n            }\n        }\n        return items;\n    };\n    PivotEngine.prototype.getDateFilterMembers = function (members, name, operator, value1, value2) {\n        var items = [];\n        for (var _i = 0, members_3 = members; _i < members_3.length; _i++) {\n            var member = members_3[_i];\n            var filterValue = new Date(member);\n            if (value1) {\n                switch (operator) {\n                    case 'Equals':\n                    case 'DoesNotEquals':\n                        if (this.getFormattedValue(filterValue.toString(), name).formattedText === this.getFormattedValue(value1.toString(), name).formattedText) { /* eslint-disable-line */\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                    case 'After':\n                        if (filterValue.getTime() > value1.getTime()) {\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                    case 'AfterOrEqualTo':\n                        if (filterValue.getTime() >= value1.getTime()) {\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                    case 'Before':\n                        if (filterValue.getTime() < value1.getTime()) {\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                    case 'BeforeOrEqualTo':\n                        if (filterValue.getTime() <= value1.getTime()) {\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                    case 'Between':\n                    case 'NotBetween':\n                        if ((filterValue.getTime() >= value1.getTime()) &&\n                            (filterValue.getTime() <= value2.getTime())) {\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                    default:\n                        if (this.getFormattedValue(filterValue.toString(), name).formattedText === this.getFormattedValue(value1.toString(), name).formattedText) { /* eslint-disable-line */\n                            items.push(this.getFormattedValue(member, name).formattedText);\n                        }\n                        break;\n                }\n            }\n        }\n        return items;\n    };\n    /* eslint-enable max-len */\n    PivotEngine.prototype.validateFilterValue = function (val, operator, value1, value2) {\n        var isMemberInclude = false;\n        if (typeof (value1) === 'number') {\n            switch (operator) {\n                case 'Equals':\n                    if (val === value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'DoesNotEquals':\n                    if (val !== value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'GreaterThan':\n                    if (val > value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'GreaterThanOrEqualTo':\n                    if (val >= value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'LessThan':\n                    if (val < value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'LessThanOrEqualTo':\n                    if (val <= value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'Between':\n                    if ((val >= value1) && (val <= value2)) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                case 'NotBetween':\n                    if (!((val >= value1) && (val <= value2))) {\n                        isMemberInclude = true;\n                    }\n                    break;\n                default:\n                    if (val !== value1) {\n                        isMemberInclude = true;\n                    }\n                    break;\n            }\n        }\n        return isMemberInclude;\n    };\n    PivotEngine.prototype.frameFilterList = function (filter, name, list, type, isLabelFilter, isInclude) {\n        if (!list[type]) {\n            list[type] = { indexObject: {}, index: [] };\n            this.updateFilter(filter, name, list, type, isLabelFilter, isInclude);\n        }\n        else {\n            this.updateFilter(filter, name, list, type, isLabelFilter, isInclude);\n        }\n        // }\n    };\n    PivotEngine.prototype.updateFilter = function (filter, name, list, type, isLabelFilter, isInclude) {\n        var fln = 0;\n        var field = this.fieldList[name];\n        field.filter = filter;\n        field.filterType = type;\n        field.isExcelFilter = isLabelFilter;\n        var members = (this.formatFields[name] &&\n            (['date', 'dateTime', 'time'].indexOf(this.formatFields[name].type) > -1)) ?\n            field.formattedMembers : field.members;\n        var allowFil = isInclude;\n        var final = {};\n        var filterObj = {};\n        final[type] = { indexObject: {}, index: [] };\n        this.fieldFilterMem[name] = { memberObj: {} };\n        while (filter[fln]) {\n            if (members[filter[fln]]) {\n                var indx = members[filter[fln]].index;\n                if (type === 'include') {\n                    for (var iln = 0, ilt = indx.length; iln < ilt; iln++) {\n                        if (!allowFil || list[type].indexObject[indx[iln]] !== undefined) {\n                            final[type].indexObject[indx[iln]] = indx[iln];\n                            final[type].index.push(indx[iln]);\n                        }\n                    }\n                }\n                else {\n                    for (var iln = 0, ilt = indx.length; iln < ilt; iln++) {\n                        if (list[type].indexObject[indx[iln]] === undefined) {\n                            list[type].indexObject[indx[iln]] = indx[iln];\n                            list[type].index.push(indx[iln]);\n                        }\n                    }\n                    this.fieldFilterMem[name].memberObj[filter[fln]] = filter[fln];\n                }\n            }\n            fln++;\n        }\n        if (type === 'include') {\n            list[type] = final[type];\n            for (var iln = 0; iln < filter.length; iln++) {\n                if (members[filter[iln]]) {\n                    filterObj[filter[iln]] = filter[iln];\n                }\n            }\n            var items = Object.keys(members);\n            for (var iln = 0, ilt = items.length; iln < ilt; iln++) {\n                if (filterObj[items[iln]] === undefined) {\n                    this.fieldFilterMem[name].memberObj[items[iln]] = items[iln];\n                }\n            }\n        }\n    };\n    PivotEngine.prototype.applyValueFiltering = function (rowData, level, rows, columns, valueFilter, rowFilterData, type) {\n        this.isValueFiltered = false;\n        var allMember = extend({}, (type === 'row' && this.rowGrandTotal ? this.rowGrandTotal : type === 'column' && this.columnGrandTotal ? this.columnGrandTotal : rows[rows.length - 1]), null, true);\n        this.getFilteredData(rows, columns, valueFilter, rowFilterData, level, rowData.name, allMember, type);\n        if (this.isValueFiltered) {\n            if ((type === 'row' && this.rowGrandTotal === null) || (type === 'column' && this.columnGrandTotal === null)) {\n                rowFilterData.push(allMember);\n            }\n            rows = rowFilterData;\n        }\n        return rows;\n    };\n    PivotEngine.prototype.getFilteredData = function (rows, columns, filterSettings, rowFilterData, level, fieldName, allMember, type) {\n        var rLen = rows.length;\n        for (var i = 0; i < rLen; i++) {\n            if (filterSettings[fieldName]) {\n                if (rows[i].level === level) {\n                    this.isValueFiltered = true;\n                    this.fieldList[fieldName].isExcelFilter = true;\n                    var value = 0;\n                    var measure = filterSettings[fieldName].measure;\n                    var mPos = this.fieldList[measure].index;\n                    var aggregate = this.fieldList[measure].aggregateType;\n                    this.rawIndexObject = {};\n                    value = (type === 'row' ? this.getAggregateValue(rows[i].index, columns.indexObject, mPos, aggregate) :\n                        this.getAggregateValue(columns.index, rows[i].indexObject, mPos, aggregate));\n                    var cellDetails = {\n                        fieldName: measure,\n                        row: rows[i],\n                        column: columns,\n                        value: value,\n                        cellSets: this.getCellSet(this.rawIndexObject),\n                        rowCellType: (rows[i].hasChild && rows[i].isDrilled ? 'subTotal' : rows[i].type === 'grand sum' ? 'grandTotal' : 'value'),\n                        columnCellType: (columns.hasChild && columns.isDrilled ? 'subTotal' : columns.type === 'grand sum' ? 'grandTotal' : 'value'),\n                        aggregateType: aggregate,\n                        skipFormatting: false\n                    };\n                    if (this.getValueCellInfo) {\n                        this.getValueCellInfo(cellDetails);\n                    }\n                    value = cellDetails.value;\n                    this.rawIndexObject = {};\n                    var operand1 = this.getParsedValue(measure, filterSettings[fieldName].value1);\n                    var operand2 = this.getParsedValue(measure, filterSettings[fieldName].value2);\n                    if (!this.validateFilterValue(value, filterSettings[fieldName].condition, operand1, operand2) && rows[i].type !== 'grand sum') {\n                        var data = this.removefilteredData(rows[i], this.valueFilteredData);\n                        var row = data ? data : rows[i];\n                        this.validateFilteredParentData(row, this.valueFilteredData, allMember, 0, level, type);\n                    }\n                    else if (rows[i].type !== 'grand sum') {\n                        rowFilterData.push(extend({}, rows[i], null, true));\n                        rowFilterData[rowFilterData.length - 1].isLevelFiltered = true;\n                    }\n                }\n                else if (rows[i].hasChild && rows[i].members.length > 0 && rows[i].type !== 'grand sum') {\n                    rowFilterData.push(extend({}, rows[i], null, true));\n                    rowFilterData[rowFilterData.length - 1].members = [];\n                    rowFilterData[rowFilterData.length - 1].isLevelFiltered = true;\n                    this.getFilteredData(rows[i].members, columns, filterSettings, rowFilterData[rowFilterData.length - 1].members, level, fieldName, allMember, type); /* eslint-disable-line */\n                }\n            }\n        }\n    };\n    /* eslint-enable max-len */\n    PivotEngine.prototype.getParsedValue = function (measure, value) {\n        var cValue = value ? value.toString() : '';\n        if (this.formatFields[measure] && value) {\n            var formatSetting = extend({}, this.formatFields[measure], null, true);\n            delete formatSetting.name;\n            return this.globalize.parseNumber(cValue, formatSetting);\n        }\n        else {\n            return this.globalize.parseNumber(cValue, { format: 'N' });\n        }\n    };\n    PivotEngine.prototype.removefilteredData = function (row, rowFilterData) {\n        var rows = extend([], rowFilterData, null, true);\n        var filteredData;\n        for (var i = 0; i < rows.length; i++) {\n            if (row.isLevelFiltered && row.axis === rows[i].axis &&\n                row.valueSort.levelName === rows[i].valueSort.levelName &&\n                row.actualText === rows[i].actualText && row.axis === rows[i].axis &&\n                row.level === rows[i].level && row.ordinal === rows[i].ordinal) {\n                filteredData = rows[i];\n                rowFilterData.splice(i, 1);\n                break;\n            }\n            else if (rowFilterData[i].hasChild && rowFilterData[i].members.length > 0) {\n                this.removefilteredData(row, rowFilterData[i].members);\n            }\n        }\n        return filteredData;\n    };\n    PivotEngine.prototype.validateFilteredParentData = function (row, rows, allMemberData, i, level, type) {\n        if (rows.length > 0) {\n            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n                var rowFilteredData = rows_1[_i];\n                if (rowFilteredData.level === i) {\n                    if (type === 'row') {\n                        var index = row.index;\n                        for (var _a = 0, index_1 = index; _a < index_1.length; _a++) {\n                            var key = index_1[_a];\n                            if (allMemberData.index.indexOf(key) >= 0) {\n                                allMemberData.index.splice(allMemberData.index.indexOf(key), 1);\n                            }\n                            if (((row.valueSort.levelName.toString()).indexOf(rowFilteredData.valueSort.levelName.toString()) >= 0) &&\n                                rowFilteredData.level !== level && rowFilteredData.index.indexOf(key) >= 0) {\n                                rowFilteredData.index.splice(rowFilteredData.index.indexOf(key), 1);\n                            }\n                        }\n                    }\n                    else {\n                        /* eslint-disable */\n                        var index = row.indexObject;\n                        for (var _b = 0, _c = Object.keys(index); _b < _c.length; _b++) {\n                            var key = _c[_b];\n                            if (index.hasOwnProperty(key)) {\n                                delete allMemberData.indexObject[key];\n                                if (((row.valueSort.levelName.toString()).indexOf(rowFilteredData.valueSort.levelName.toString()) >= 0) &&\n                                    rowFilteredData.level !== level) {\n                                    delete rowFilteredData.indexObject[key];\n                                }\n                            }\n                        }\n                        /* eslint-enable */\n                    }\n                    if (rowFilteredData && rowFilteredData.members.length > 0 &&\n                        rowFilteredData.members[0].level === i + 1 && rowFilteredData.members[0].level !== level) {\n                        this.validateFilteredParentData(row, rowFilteredData.members, allMemberData, i + 1, level, type);\n                    }\n                }\n            }\n        }\n        else {\n            if (type === 'row') {\n                var index = row.index;\n                for (var _d = 0, index_2 = index; _d < index_2.length; _d++) {\n                    var key = index_2[_d];\n                    if (allMemberData.index.indexOf(key) >= 0) {\n                        allMemberData.index.splice(allMemberData.index.indexOf(key), 1);\n                    }\n                }\n            }\n            else {\n                /* eslint-disable */\n                var index = row.indexObject;\n                for (var _e = 0, _f = Object.keys(index); _e < _f.length; _e++) {\n                    var key = _f[_e];\n                    if (index.hasOwnProperty(key)) {\n                        delete allMemberData.indexObject[key];\n                    }\n                }\n                /* eslint-enable */\n            }\n        }\n    };\n    PivotEngine.prototype.updateFramedHeaders = function (framedHeaders, dataHeaders, filteredHeaders, headers, type) {\n        for (var _i = 0, framedHeaders_1 = framedHeaders; _i < framedHeaders_1.length; _i++) {\n            var dHeader = framedHeaders_1[_i];\n            this.isHeaderAvail = false;\n            if (this.validateFilteredHeaders(dHeader, filteredHeaders, type) || dHeader.type === 'grand sum') {\n                if (type === 'row') {\n                    this.rowCount += this.rowValuesLength;\n                }\n                else {\n                    this.columnCount += this.colValuesLength;\n                }\n                headers.push(extend({}, dHeader, null, true));\n                headers[headers.length - 1].members = [];\n                if (dHeader.hasChild && dHeader.isDrilled && dHeader.members.length > 0) {\n                    this.updateFramedHeaders(dHeader.members, dataHeaders, filteredHeaders, headers[headers.length - 1].members, type);\n                }\n            }\n        }\n        return this.filterFramedHeaders;\n    };\n    PivotEngine.prototype.validateFilteredHeaders = function (dHeader, filteredHeaders, type) {\n        for (var _i = 0, filteredHeaders_1 = filteredHeaders; _i < filteredHeaders_1.length; _i++) {\n            var vHeader = filteredHeaders_1[_i];\n            if (!this.isHeaderAvail) {\n                if (dHeader.actualText === vHeader.actualText &&\n                    dHeader.level === vHeader.level &&\n                    dHeader.valueSort.levelName === vHeader.valueSort.levelName) {\n                    if (type === 'row') {\n                        if (vHeader.index.length > 0) {\n                            this.isHeaderAvail = true;\n                            dHeader.index = vHeader.index;\n                            return true;\n                        }\n                        else {\n                            this.isHeaderAvail = false;\n                            dHeader.index = vHeader.index;\n                            return false;\n                        }\n                    }\n                    else {\n                        if (Object.keys(vHeader.indexObject).length > 0) {\n                            this.isHeaderAvail = true;\n                            dHeader.indexObject = vHeader.indexObject;\n                            return true;\n                        }\n                        else {\n                            this.isHeaderAvail = false;\n                            dHeader.indexObject = vHeader.indexObject;\n                            return false;\n                        }\n                    }\n                }\n                else if (vHeader.hasChild && vHeader.members.length > 0 && vHeader.type !== 'grand sum') {\n                    this.validateFilteredHeaders(dHeader, vHeader.members, type);\n                }\n            }\n        }\n        return this.isHeaderAvail;\n    };\n    PivotEngine.prototype.isEmptyDataAvail = function (rowHeaders, columnHeaders) {\n        this.isEmptyData = false;\n        if (rowHeaders.length > 0 && rowHeaders[rowHeaders.length - 1].type === 'grand sum' &&\n            rowHeaders[rowHeaders.length - 1].index.length === 0) {\n            this.isEmptyData = true;\n        }\n        if (columnHeaders.length > 0 && columnHeaders[columnHeaders.length - 1].type === 'grand sum' &&\n            Object.keys(columnHeaders[columnHeaders.length - 1].indexObject).length === 0) {\n            this.isEmptyData = true;\n        }\n        if (rowHeaders.length === 0 || columnHeaders.length === 0) {\n            this.isEmptyData = true;\n        }\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.updateGridData = function (dataSource) {\n        this.data = dataSource.dataSource;\n        if (this.pageSettings && this.pageSettings.allowDataCompression) {\n            this.actualData = this.data;\n            this.data = this.getGroupedRawData(dataSource);\n        }\n        this.indexMatrix = [];\n        for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {\n            var field = _a[_i];\n            this.fieldList[field].members = {};\n            this.fieldList[field].formattedMembers = {};\n            this.fieldList[field].dateMember = [];\n        }\n        this.fillFieldMembers(this.data, this.indexMatrix);\n        this.valueMatrix = this.generateValueMatrix(this.data);\n        this.filterMembers = [];\n        this.cMembers = [];\n        this.rMembers = [];\n        this.updateFilterMembers(dataSource);\n        this.isEditing = true;\n        this.isDrillThrough = true;\n        this.generateGridData(dataSource);\n        this.isEditing = false;\n    };\n    PivotEngine.prototype.generateGridData = function (dataSource, headerCollection) {\n        var columns = dataSource.columns ? dataSource.columns : [];\n        var data = this.data;\n        var rows = dataSource.rows ? dataSource.rows : [];\n        var filterSettings = dataSource.filterSettings;\n        var values = dataSource.values ? dataSource.values : [];\n        this.removeCount = 0;\n        this.isExpandAll = dataSource.expandAll;\n        this.drilledMembers = dataSource.drilledMembers ? dataSource.drilledMembers : [];\n        this.isEmptyData = false;\n        var filterMembers = [];\n        /* eslint-disable */\n        var showNoDataItems = (rows[0] && rows[0].showNoDataItems) || (columns[0] && columns[0].showNoDataItems);\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns, this.values, this.filters);\n        if (showNoDataItems) {\n            for (var ln = 0; ln < this.indexMatrix.length; ln++) {\n                filterMembers.push(ln);\n            }\n        }\n        /* eslint-enable */\n        for (var ln = 0; ln < this.filterMembers.length; ln++) {\n            this.filterPosObj[this.filterMembers[ln]] = this.filterMembers[ln];\n        }\n        //let childrens: Field = this.fieldList[rows[0].name + ''];\n        this.valueSortSettings.columnIndex = undefined;\n        this.validateValueFields();\n        this.frameDrillObject();\n        if (!this.isValueFilterEnabled || this.isEditing) {\n            if (!headerCollection) {\n                this.columnCount = 0;\n                this.rowCount = 0;\n                this.cMembers = [];\n                this.rMembers = [];\n                if (rows.length !== 0) {\n                    this.rMembers =\n                        this.getIndexedHeaders(rows, data, 0, rows[0].showNoDataItems ? filterMembers : this.filterMembers, 'row', '', this.allowValueFilter);\n                }\n                if (columns.length !== 0) {\n                    this.cMembers = this.getIndexedHeaders(columns, data, 0, columns[0].showNoDataItems ?\n                        filterMembers : this.filterMembers, 'column', '', this.allowValueFilter);\n                }\n                this.insertAllMembersCommon();\n                this.saveDataHeaders = (this.isValueFiltersAvail && dataSource.allowValueFilter) ? {\n                    rowHeaders: extend([], this.rMembers, null, true),\n                    columnHeaders: extend([], this.cMembers, null, true)\n                } : {};\n            }\n        }\n        this.pivotValues = [];\n        this.headerContent = [];\n        this.valueContent = [];\n        this.valueFilteredData = [];\n        this.filterFramedHeaders = [];\n        var rowheads = [];\n        var colheads = [];\n        var rowFilteredData = [];\n        var columnFilteredData = [];\n        var valuesCount = (this.values.length);\n        if (this.isValueFiltersAvail && dataSource.allowValueFilter && !headerCollection) {\n            this.valueFilteredData = [];\n            var rowHeaders = this.saveDataHeaders.rowHeaders;\n            var columnHeaders = this.saveDataHeaders.columnHeaders;\n            if (filterSettings.length > 0) {\n                var valueFilters = {};\n                var valueFields = {};\n                /* eslint-disable */\n                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                    var value = values_1[_i];\n                    valueFields[value.name] = value;\n                }\n                for (var _a = 0, filterSettings_1 = filterSettings; _a < filterSettings_1.length; _a++) {\n                    var filter = filterSettings_1[_a];\n                    rowHeaders = (rowFilteredData.length > 0 ? rowFilteredData : rowHeaders);\n                    columnHeaders = (columnFilteredData.length > 0 ? columnFilteredData : columnHeaders);\n                    this.valueFilteredData = [];\n                    var filterElement = filter.properties ?\n                        filter.properties : filter;\n                    /* eslint-enable */\n                    if (filterElement.type === 'Value' && this.fieldList[filter.name] && this.fieldList[filter.name].isSelected) {\n                        valueFilters[filter.name] = filter;\n                        filterElement.items = [];\n                        var isAvail = false;\n                        var rLen = rows.length;\n                        var cLen = columns.length;\n                        for (var i = 0; i < rLen; i++) {\n                            if (filterElement.name === rows[i].name && valueFields[filterElement.measure] && !isAvail) {\n                                isAvail = true;\n                                rowFilteredData = this.applyValueFiltering(rows[i], i, rowHeaders, (this.columnGrandTotal ? this.columnGrandTotal : columnHeaders[columnHeaders.length - 1]), valueFilters, this.valueFilteredData, 'row');\n                                break;\n                            }\n                        }\n                        for (var j = 0; j < cLen; j++) {\n                            if (filterElement.name === columns[j].name && valueFields[filterElement.measure] && !isAvail) {\n                                isAvail = true;\n                                columnFilteredData = this.applyValueFiltering(columns[j], j, columnHeaders, (this.rowGrandTotal ? this.rowGrandTotal : rowHeaders[rowHeaders.length - 1]), valueFilters, this.valueFilteredData, 'column');\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            rowFilteredData = (rowFilteredData.length > 0 ? rowFilteredData : rowHeaders);\n            columnFilteredData = (columnFilteredData.length > 0 ? columnFilteredData : columnHeaders);\n            this.isEmptyDataAvail(rowFilteredData, columnFilteredData);\n            var savedFieldList = extend({}, this.fieldList, null, true);\n            this.indexMatrix = [];\n            var fields = this.data[0];\n            this.getFieldList(fields, this.enableSort, dataSource.allowValueFilter);\n            this.fillFieldMembers(this.data, this.indexMatrix);\n            this.updateSortSettings(dataSource.sortSettings, this.enableSort);\n            this.valueMatrix = this.generateValueMatrix(this.data);\n            this.filterMembers = [];\n            this.updateFilterMembers(dataSource);\n            this.rMembers = rows.length !== 0 ?\n                this.getIndexedHeaders(rows, data, 0, rows[0].showNoDataItems ?\n                    filterMembers : this.filterMembers, 'row', '') : [];\n            this.cMembers = columns.length !== 0 ?\n                this.getIndexedHeaders(columns, data, 0, columns[0].showNoDataItems ?\n                    filterMembers : this.filterMembers, 'column', '') : [];\n            this.insertAllMembersCommon();\n            this.updateFieldList(savedFieldList);\n            this.rowCount = 0;\n            this.columnCount = 0;\n            this.rMembers = this.updateFramedHeaders(this.rMembers, this.rMembers, rowFilteredData, this.filterFramedHeaders, 'row');\n            this.filterFramedHeaders = [];\n            this.cMembers = this.updateFramedHeaders(this.cMembers, this.cMembers, columnFilteredData, this.filterFramedHeaders, 'column');\n            this.isValueFilterEnabled = true;\n        }\n        if (!headerCollection) {\n            this.applyValueSorting();\n        }\n        if (this.pageSettings) {\n            if (!headerCollection) {\n                this.headerCollection.rowHeaders = this.rMembers;\n                this.headerCollection.columnHeaders = this.cMembers;\n                this.headerCollection.rowHeadersCount = this.rowCount;\n                this.headerCollection.columnHeadersCount = this.columnCount;\n            }\n            else {\n                this.rMembers = headerCollection.rowHeaders;\n                this.cMembers = headerCollection.columnHeaders;\n                this.rowCount = headerCollection.rowHeadersCount;\n                this.columnCount = headerCollection.columnHeadersCount;\n            }\n            this.calculatePagingValues();\n        }\n        this.getAggregatedHeaders(rows, columns, this.rMembers, this.cMembers, values);\n        this.getHeaderData(this.cMembers, colheads, this.pivotValues, 0, this.valueAxis ? 1 : valuesCount);\n        this.insertSubTotals();\n        this.getTableData(this.rMembers, rowheads, colheads, 0, this.pivotValues, valuesCount, (this.rowGrandTotal ? this.rowGrandTotal : this.rMembers[this.rMembers.length - 1]), (this.columnGrandTotal ? this.columnGrandTotal : this.cMembers[this.cMembers.length - 1])); /* eslint-disable-line */\n        this.applyAdvancedAggregate(rowheads, colheads, this.pivotValues);\n        this.isEngineUpdated = true;\n        this.isEmptyDataAvail(this.rMembers, this.cMembers);\n        //  console.log(st1 - st2);\n    };\n    PivotEngine.prototype.updateHeaders = function (rowFlag, columnFlag) {\n        /* removing the row grant-total members */\n        rowFlag = (isNullOrUndefined(rowFlag) ? (this.showGrandTotals && this.showRowGrandTotals) ?\n            true : (this.rows.length > 0) ? false : true : rowFlag);\n        if (((this.pageSettings && (this.removeRowGrandTotal)) || (!rowFlag && !this.rowGrandTotal)) &&\n            this.rMembers[this.rMembers.length - 1].type === 'grand sum') {\n            this.rMembers = this.rMembers.slice(0, this.rMembers.length - 1);\n        }\n        /* removing the column gran-total members */\n        columnFlag = (isNullOrUndefined(columnFlag) ? (this.showGrandTotals && this.showColumnGrandTotals) ?\n            true : (this.columns.length > 0) ? false : true : columnFlag);\n        if (((this.pageSettings && (this.removeColumnGrandTotal)) || (!columnFlag && !this.columnGrandTotal)) &&\n            this.cMembers[this.cMembers.length - 1].type === 'grand sum') {\n            this.cMembers = this.cMembers.slice(0, this.cMembers.length - 1);\n        }\n    };\n    PivotEngine.prototype.updatePivotValues = function (updateHeaders) {\n        var rowFlag = (this.showGrandTotals && this.showRowGrandTotals) ? true : (this.rows.length > 0) ? false : true;\n        var columnFlag = (this.showGrandTotals && this.showColumnGrandTotals) ? true : (this.columns.length > 0) ? false : true;\n        if (updateHeaders) {\n            this.updateHeaders(rowFlag, columnFlag);\n        }\n        /* removing the row grant-totals */\n        if (((this.pageSettings && (this.removeRowGrandTotal)) ||\n            (!rowFlag && !this.rowGrandTotal)) && this.valueContent.length > 0) {\n            var slicePos = 1;\n            if (this.valueAxis && this.values.length > 0) {\n                slicePos = 1 + this.values.length;\n            }\n            if (this.pivotValues[this.pivotValues.length - slicePos] &&\n                this.pivotValues[this.pivotValues.length - slicePos][0].type === 'grand sum') {\n                this.pivotValues = this.pivotValues.slice(0, this.pivotValues.length - slicePos);\n                this.valueContent = this.valueContent.slice(0, this.valueContent.length - slicePos);\n            }\n        }\n        /* removing the column gran-totals */\n        if (((this.pageSettings && (this.removeColumnGrandTotal)) ||\n            (!columnFlag && !this.columnGrandTotal)) && this.headerContent.length > 0) {\n            var slicePos = this.values.length;\n            if (this.valueAxis && this.values.length > 0) {\n                slicePos = 1;\n            }\n            if (this.pivotValues[0][this.pivotValues[0].length - slicePos] &&\n                this.pivotValues[0][this.pivotValues[0].length - slicePos].type === 'grand sum') {\n                for (var ln = 0; ln < this.pivotValues.length; ln++) {\n                    if (this.pivotValues[ln]) {\n                        this.pivotValues[ln] = this.pivotValues[ln].slice(0, this.pivotValues[ln].length - slicePos);\n                    }\n                    if (this.headerContent[ln]) {\n                        for (var pos = this.pivotValues[ln].length; pos < (this.pivotValues[ln].length + slicePos); pos++) {\n                            delete this.headerContent[ln][pos];\n                        }\n                    }\n                }\n            }\n        }\n        this.removeRowGrandTotal = this.removeColumnGrandTotal = false;\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.onDrill = function (drilledItem) {\n        this.frameDrillObject();\n        var headersInfo = this.getHeadersInfo(drilledItem.fieldName, drilledItem.axis);\n        this.performDrillOperation(headersInfo.headers, drilledItem, headersInfo.fields, headersInfo.position, 0);\n        this.headerCollection.rowHeadersCount = this.rowCount;\n        this.headerCollection.columnHeadersCount = this.columnCount;\n        if (headersInfo.axis === 'row') {\n            this.headerCollection.rowHeaders = headersInfo.headers;\n        }\n        else {\n            this.headerCollection.columnHeaders = headersInfo.headers;\n        }\n        this.updateEngine();\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.onSort = function (sortItem) {\n        var headersInfo = this.getHeadersInfo(sortItem.name, '');\n        this.fieldList[sortItem.name].sort = sortItem.order;\n        this.performSortOperation(headersInfo.headers, sortItem, headersInfo, 0);\n        this.updateEngine();\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.onFilter = function (filterItem, dataSource) {\n        var headersInfo = this.getHeadersInfo(filterItem.name, '');\n        if (filterItem.type === 'Include' && filterItem.items.length === this.fieldList[filterItem.name].dateMember.length) {\n            this.fieldList[filterItem.name].filter = [];\n            this.fieldList[filterItem.name].filterType = '';\n        }\n        else {\n            this.fieldList[filterItem.name].filter = filterItem.items;\n            this.fieldList[filterItem.name].filterType = filterItem.type;\n        }\n        var posObj = {};\n        for (var _i = 0, _a = this.filterMembers; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            posObj[pos] = pos;\n        }\n        this.filterMembers = [];\n        this.fieldFilterMem = {};\n        this.updateFilterMembers(dataSource);\n        /* eslint-disable  */\n        var addPos = this.filterMembers.filter(function (pos) { return posObj[pos] === undefined; });\n        /* eslint-enable  */\n        var itemsObj = {};\n        for (var _b = 0, _c = filterItem.items; _b < _c.length; _b++) {\n            var item = _c[_b];\n            itemsObj[item] = item;\n        }\n        var showNoDataItems = (this.rows[0] && this.rows[0].showNoDataItems) || (this.columns[0] && this.columns[0].showNoDataItems);\n        if (showNoDataItems) {\n            var filterMembers = [];\n            this.filterPosObj = {};\n            for (var ln = 0; ln < addPos.length; ln++) {\n                this.filterPosObj[addPos[ln]] = addPos[ln];\n            }\n            for (var ln = 0; ln < this.indexMatrix.length; ln++) {\n                filterMembers.push(ln);\n            }\n            addPos = filterMembers;\n        }\n        this.performFilterCommonUpdate(filterItem, headersInfo, addPos);\n        this.frameHeaderObjectsCollection = false;\n        this.headerObjectsCollection = {};\n        this.updateEngine();\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.onAggregation = function (field) {\n        this.fieldList[field.name].aggregateType = field.type;\n        this.rMembers = this.headerCollection.rowHeaders;\n        this.cMembers = this.headerCollection.columnHeaders;\n        if (this.allowDataCompression) {\n            this.data = this.getGroupedRawData(this.dataSourceSettings);\n            this.valueMatrix = this.generateValueMatrix(this.data);\n        }\n        this.updateEngine();\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.onCalcOperation = function (field) {\n        this.rMembers = this.headerCollection.rowHeaders;\n        this.cMembers = this.headerCollection.columnHeaders;\n        this.getCalculatedField(this.fields);\n        if (this.fieldList[field.name]) {\n            this.fieldList[field.name].formula = field.formula;\n        }\n        else {\n            this.fieldList[field.name] = {\n                id: field.name,\n                caption: field.name,\n                type: 'number',\n                aggregateType: 'CalculatedField',\n                filterType: '',\n                index: this.fields.length - 1,\n                filter: [],\n                sort: this.enableSort ? 'Ascending' : 'None',\n                isSelected: true,\n                isExcelFilter: false,\n                formula: field.formula\n            };\n            if (this.valueAxis === 1) {\n                this.headerCollection.rowHeadersCount = this.rowCount = (this.rowCount / (this.values.length - 1)) * this.values.length;\n            }\n            else {\n                this.headerCollection.columnHeadersCount = this.columnCount = (this.columnCount / (this.values.length - 1)) * this.values.length;\n            }\n        }\n        this.updateEngine();\n    };\n    PivotEngine.prototype.performDrillOperation = function (headers, drilledItem, fields, position, currentPosition) {\n        var count = 0;\n        while (count < headers.length) {\n            if (position === currentPosition) {\n                if (drilledItem.memberName === headers[count].valueSort.levelName.split(this.valueSortSettings.headerDelimiter)\n                    .join(drilledItem.delimiter ? drilledItem.delimiter : '**')) {\n                    if (drilledItem.action === 'down') {\n                        headers[count].isDrilled = true;\n                        headers[count].members = this.getIndexedHeaders(fields, this.data, position + 1, headers[count].index, drilledItem.axis, drilledItem.memberName.\n                            split(drilledItem.delimiter ? drilledItem.delimiter : '**').join(this.valueSortSettings.headerDelimiter));\n                        var sortedHeaders = void 0;\n                        if (drilledItem.axis === 'row') {\n                            sortedHeaders = this.applyValueSorting(headers[count].members, this.cMembers);\n                            headers[count].members = sortedHeaders.rMembers;\n                        }\n                        else {\n                            var showSubTotals = this.showSubTotals && this.showColumnSubTotals && fields[position].showSubTotals;\n                            this.columnCount -= !showSubTotals ? this.colValuesLength : 0;\n                            sortedHeaders = this.applyValueSorting(this.rMembers, headers[count].members);\n                            headers[count].members = sortedHeaders.cMembers;\n                        }\n                    }\n                    else {\n                        headers[count].isDrilled = false;\n                        this.updateHeadersCount(headers[count].members, drilledItem.axis, position, fields, 'minus', true);\n                        headers[count].members = [];\n                    }\n                    break;\n                }\n            }\n            else if (headers[count].members.length > 0) {\n                headers[count].members = this.performDrillOperation(headers[count].members, drilledItem, fields, position, currentPosition + 1);\n            }\n            count++;\n        }\n        return headers;\n    };\n    PivotEngine.prototype.performSortOperation = function (headers, sortItem, headersInfo, currentPosition) {\n        var count = 0;\n        while (count < headers.length) {\n            if (headersInfo.position === currentPosition) {\n                headers = this.getSortedHeaders(headers, sortItem.order.toString());\n                break;\n            }\n            else if (headers[count].members.length > 0) {\n                headers[count].members = this.performSortOperation(headers[count].members, sortItem, headersInfo, currentPosition + 1);\n            }\n            count++;\n        }\n        return headers;\n    };\n    /* eslint-disable  */\n    PivotEngine.prototype.performFilterDeletion = function (headers, filterItem, headersInfo, filterObjects, currentPosition) {\n        var count = 0;\n        var loopIn = true;\n        var _loop_3 = function () {\n            if (headersInfo.position === currentPosition) {\n                var engine_1 = this_3;\n                headers = headers.filter(function (item) {\n                    return !engine_1.fieldFilterMem[filterItem.name].memberObj[item.formattedText] || item.type === 'grand sum';\n                });\n                loopIn = false;\n            }\n            else if (headers[count].members.length > 0) {\n                headers[count].members = this_3.performFilterDeletion(headers[count].members, filterItem, headersInfo, filterObjects, currentPosition + 1);\n            }\n            count++;\n        };\n        var this_3 = this;\n        while (count < headers.length && loopIn) {\n            _loop_3();\n        }\n        var engine = this;\n        return headers.filter(function (item) {\n            return item.members.length > 0 ? item.members.length > 0 : engine.matchIndexes(item.indexObject, filterObjects);\n        });\n    };\n    PivotEngine.prototype.matchIndexes = function (index, filterObjects) {\n        var keys = Object.keys(index);\n        var len = keys.length;\n        if (len === 0) {\n            return true;\n        }\n        while (len > -1) {\n            if (filterObjects[index[keys[len]]] !== undefined) {\n                return true;\n            }\n            len--;\n        }\n        return false;\n    };\n    PivotEngine.prototype.performFilterAddition = function (headers, fields, headersInfo) {\n        var count = 0;\n        var _loop_4 = function () {\n            var levelName = headers[count].valueSort.levelName;\n            if (this_4.headerObjectsCollection[levelName]) {\n                var memberNameObj_1 = {};\n                for (var _i = 0, _a = headers[count].members; _i < _a.length; _i++) {\n                    var member = _a[_i];\n                    memberNameObj_1[member.valueSort.levelName.toString()] = member.valueSort.levelName.toString();\n                }\n                var excessHeaders = this_4.headerObjectsCollection[levelName].filter(function (member) {\n                    return !memberNameObj_1[member.valueSort.levelName.toString()];\n                });\n                headers[count].members = headers[count].members.concat(excessHeaders);\n                headers[count].members = this_4.getSortedHeaders(headers[count].members, this_4.fieldList[headersInfo.fields[headers[count].members[0].level].name].sort);\n                delete this_4.headerObjectsCollection[levelName];\n            }\n            if (headers[count].members.length > 0) {\n                headers[count].members = this_4.performFilterAddition(headers[count].members, fields, headersInfo);\n            }\n            count++;\n        };\n        var this_4 = this;\n        while (count < headers.length) {\n            _loop_4();\n        }\n        return headers;\n    };\n    PivotEngine.prototype.performFilterCommonUpdate = function (filterItem, headersInfo, addPos) {\n        var rawHeaders = headersInfo.axis === 'row' ? this.rMembers : this.cMembers;\n        var filterObjects = {};\n        for (var _i = 0, _a = this.filterMembers; _i < _a.length; _i++) {\n            var item = _a[_i];\n            filterObjects[item] = item;\n        }\n        if (this.fieldFilterMem[filterItem.name]) {\n            rawHeaders = this.performFilterDeletion(headersInfo.headers, filterItem, headersInfo, filterObjects, 0);\n        }\n        if (addPos.length > 0 && headersInfo.fields.length > 0) {\n            this.frameHeaderObjectsCollection = true;\n            if (headersInfo.fields.filter(function (item) { return item.showNoDataItems; }).length > 0) {\n                for (var i = 0; i < this.data.length; i++) {\n                    addPos.push(i);\n                }\n                //addPos = (this.data as any).map((item, pos) => { return pos; });\n            }\n            /* eslint-disable */\n            this.headerObjectsCollection['parent'] = this.getIndexedHeaders(headersInfo.fields, this.data, 0, addPos, headersInfo.axis, '');\n            rawHeaders = this.performFilterAddition(rawHeaders, headersInfo.fields, headersInfo);\n            var headerNames_1 = {};\n            for (var _b = 0, rawHeaders_1 = rawHeaders; _b < rawHeaders_1.length; _b++) {\n                var header = rawHeaders_1[_b];\n                headerNames_1[header.valueSort.levelName.toString()] = header.valueSort.levelName.toString();\n            }\n            var excessHeaders = this.headerObjectsCollection['parent'].filter(function (header) {\n                return !headerNames_1[header.valueSort.levelName.toString()];\n            });\n            var grandHeader = rawHeaders.filter(function (item) { return item.type === 'grand sum'; });\n            if (grandHeader.length > 0) {\n                rawHeaders.pop();\n            }\n            /* eslint-enable */\n            rawHeaders = this.getSortedHeaders(rawHeaders.concat(excessHeaders), this.fieldList[headersInfo.fields[0].name].sort).concat(grandHeader);\n        }\n        if (headersInfo.axis === 'row') {\n            this.rowCount = 0;\n        }\n        else {\n            this.columnCount = 0;\n        }\n        this.updateHeadersCount(rawHeaders, headersInfo.axis, 0, headersInfo.fields, 'plus', false);\n        if (headersInfo.axis === 'row') {\n            if (headersInfo.position > 0) {\n                this.insertPosition(this.rows, this.data, 0, this.filterMembers, 'row', '', rawHeaders);\n            }\n            this.insertTotalPosition(rawHeaders);\n            this.rMembers = this.headerCollection.rowHeaders = rawHeaders;\n            this.headerCollection.rowHeadersCount = this.rowCount;\n        }\n        else {\n            if (headersInfo.position > 0) {\n                this.insertPosition(this.columns, this.data, 0, this.filterMembers, 'column', '', rawHeaders);\n            }\n            this.insertTotalPosition(rawHeaders);\n            this.cMembers = this.headerCollection.columnHeaders = rawHeaders;\n            this.headerCollection.columnHeadersCount = this.columnCount;\n        }\n        this.applyValueSorting();\n    };\n    /* eslint-enable  */\n    PivotEngine.prototype.getHeadersInfo = function (fieldName, axis) {\n        this.rMembers = this.headerCollection.rowHeaders;\n        this.cMembers = this.headerCollection.columnHeaders;\n        axis = axis === '' ? this.getAxisByFieldName(fieldName) : axis;\n        var headers = axis === 'row' ? this.rMembers : this.cMembers;\n        var fields = axis === 'row' ? this.rows : this.columns;\n        var position = 0;\n        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n            var field = fields_1[_i];\n            if (field.name === fieldName) {\n                break;\n            }\n            position++;\n        }\n        return { axis: axis, fields: fields, headers: headers, position: position };\n    };\n    /* eslint-disable-next-line */\n    /** @hidden */\n    PivotEngine.prototype.updateEngine = function () {\n        this.removeCount = 0;\n        this.validateValueFields();\n        this.calculatePagingValues();\n        this.pivotValues = [];\n        this.headerContent = [];\n        this.valueContent = [];\n        var rowheads = [];\n        var colheads = [];\n        var valuesCount = (this.values.length);\n        this.getAggregatedHeaders(this.rows, this.columns, this.rMembers, this.cMembers, this.values);\n        this.getHeaderData(this.cMembers, colheads, this.pivotValues, 0, this.valueAxis ? 1 : valuesCount);\n        this.insertSubTotals();\n        this.getTableData(this.rMembers, rowheads, colheads, 0, this.pivotValues, valuesCount, (this.rowGrandTotal ? this.rowGrandTotal : this.rMembers[this.rMembers.length - 1]), (this.columnGrandTotal ? this.columnGrandTotal : this.cMembers[this.cMembers.length - 1])); /* eslint-disable-line */\n        this.applyAdvancedAggregate(rowheads, colheads, this.pivotValues);\n        this.isEngineUpdated = true;\n        this.isEmptyDataAvail(this.rMembers, this.cMembers);\n    };\n    PivotEngine.prototype.getAxisByFieldName = function (fieldName) {\n        var axisCount = 0;\n        var axis = '';\n        while (axisCount < 4 && axis === '') {\n            switch (axisCount) {\n                case 0:\n                    axis = this.getFieldByName(fieldName, this.rows) ? 'row' : '';\n                    break;\n                case 1:\n                    axis = this.getFieldByName(fieldName, this.columns) ? 'column' : '';\n                    break;\n            }\n            axisCount++;\n        }\n        return axis;\n    };\n    PivotEngine.prototype.getFieldByName = function (fieldName, fields) {\n        return new DataManager({ json: fields }).executeLocal(new Query().where('name', 'equal', fieldName))[0];\n    };\n    PivotEngine.prototype.updateHeadersCount = function (headers, axis, position, fields, action, isDrill) {\n        var lenCnt = 0;\n        var field = fields[position];\n        var showSubTotals = true;\n        if (axis === 'column') {\n            // showSubTotals = this.showSubTotals && this.showColumnSubTotals && field ? field.showSubTotals : true;\n            showSubTotals = this.showSubTotals && this.showColumnSubTotals && field.showSubTotals;\n        }\n        else {\n            showSubTotals = this.showSubTotals && this.showRowSubTotals && field ? field.showSubTotals : true;\n        }\n        while (lenCnt < headers.length) {\n            if (axis === 'row') {\n                this.rowCount = this.rowCount - (action === 'plus' ? -(this.valueAxis === 1 ? this.values.length : 1) :\n                    (this.valueAxis === 1 ? this.values.length : 1));\n            }\n            else {\n                this.columnCount = this.columnCount - (action === 'plus' ? -(this.valueAxis === 1 ? 1 : this.values.length) :\n                    (this.valueAxis === 1 ? 1 : this.values.length));\n            }\n            if (headers[lenCnt].members.length > 0) {\n                this.updateHeadersCount(headers[lenCnt].members, axis, position + 1, fields, action, true);\n            }\n            lenCnt++;\n        }\n        if (axis === 'column' && !showSubTotals && isDrill) {\n            this.columnCount += action === 'plus' ? -this.colValuesLength : this.colValuesLength;\n        }\n    };\n    /* eslint-disable */\n    /** @hidden */\n    PivotEngine.prototype.frameHeaderWithKeys = function (header) {\n        var keys = Object.keys(header);\n        var keyPos = 0;\n        var framedHeader = {};\n        while (keyPos < keys.length) {\n            framedHeader[keys[keyPos]] = header[keys[keyPos]];\n            keyPos++;\n        }\n        return framedHeader;\n    };\n    PivotEngine.prototype.getSortedHeaders = function (headers, sortOrder) {\n        var isNotDateType = !(this.formatFields && this.formatFields[headers[0].valueSort.axis] &&\n            this.formatFields[headers[0].valueSort.axis].type);\n        var childrens = this.fieldList[headers[0].valueSort.axis];\n        if (isNotDateType) {\n            if (childrens && childrens.type == 'number' && headers.length > 0 && (typeof (headers[0].actualText) == 'string')) {\n                var stringValue = [];\n                var alphaNumbervalue = [];\n                var nullValue = [];\n                for (var i = 0; i < headers.length; i++) {\n                    if (isNaN(headers[i].actualText.toString().charAt(0))) {\n                        stringValue.push(headers[i]);\n                    }\n                    else if (headers[i].actualText === \"\") {\n                        nullValue.push(headers[i]);\n                    }\n                    else {\n                        alphaNumbervalue.push(headers[i]);\n                    }\n                }\n                if (stringValue.length > 0) {\n                    stringValue = childrens.sort === 'Ascending' ? (stringValue.sort(function (a, b) { return (a.actualText > b.actualText) ? 1 : ((b.actualText > a.actualText) ? -1 : 0); })) :\n                        childrens.sort === 'Descending' ? (stringValue.sort(function (a, b) { return (a.actualText < b.actualText) ? 1 : ((b.actualText < a.actualText) ? -1 : 0); })) : stringValue;\n                }\n                if (alphaNumbervalue.length > 0) {\n                    alphaNumbervalue = childrens.sort === 'Ascending' ?\n                        (alphaNumbervalue.sort(function (a, b) { return (Number(a.actualText.toString().match(/\\d+/)[0]) > Number(b.actualText.toString().match(/\\d+/)[0])) ? 1 : ((Number(b.actualText.toString().match(/\\d+/)[0]) > Number(a.actualText.toString().match(/\\d+/)[0])) ? -1 : 0); })) :\n                        childrens.sort === 'Descending' ?\n                            (alphaNumbervalue.sort(function (a, b) { return (Number(a.actualText.toString().match(/\\d+/)[0]) < Number(b.actualText.toString().match(/\\d+/)[0])) ? 1 : ((Number(b.actualText.toString().match(/\\d+/)[0]) < Number(a.actualText.toString().match(/\\d+/)[0])) ? -1 : 0); })) :\n                            alphaNumbervalue;\n                }\n                return headers = nullValue.concat(alphaNumbervalue, stringValue);\n            }\n            else {\n                return sortOrder === 'Ascending' ?\n                    (headers.sort(function (a, b) { return (a.actualText > b.actualText) ? 1 : ((b.actualText > a.actualText) ? -1 : 0); })) :\n                    sortOrder === 'Descending' ?\n                        (headers.sort(function (a, b) { return (a.actualText < b.actualText) ? 1 : ((b.actualText < a.actualText) ? -1 : 0); })) :\n                        headers;\n            }\n        }\n        else {\n            return sortOrder === 'Ascending' ?\n                (headers.sort(function (a, b) { return (a.dateText > b.dateText) ? 1 : ((b.dateText > a.dateText) ? -1 : 0); })) :\n                sortOrder === 'Descending' ?\n                    (headers.sort(function (a, b) { return (a.dateText < b.dateText) ? 1 : ((b.dateText < a.dateText) ? -1 : 0); })) :\n                    headers;\n        }\n    };\n    /** @hidden */\n    PivotEngine.prototype.applyValueSorting = function (rMembers, cMembers) {\n        /* eslint-enable */\n        var isNullArgument = false;\n        if (rMembers === undefined || cMembers === undefined) {\n            rMembers = this.rMembers;\n            cMembers = this.cMembers;\n            isNullArgument = true;\n        }\n        if (this.enableValueSorting && this.valueSortSettings.headerText &&\n            this.valueSortSettings.headerText !== '' && this.values.length > 0) {\n            var textArray = this.valueSortSettings.headerText.split(this.valueSortSettings.headerDelimiter);\n            var hText = '';\n            var mIndex = void 0;\n            var mType = void 0;\n            var caption = void 0;\n            for (var i = 0; i < this.values.length; i++) {\n                if (this.values[i].caption === textArray[textArray.length - 1]) {\n                    caption = this.values[i].name;\n                    break;\n                }\n                else {\n                    caption = textArray[textArray.length - 1];\n                }\n            }\n            if (((this.values.length === 1 && this.columns.length === 0) || this.values.length > 1) && caption && this.fieldList[caption]) {\n                for (var i = 0; i < textArray.length - 1; i++) {\n                    hText = hText === '' ? textArray[i] : (hText + this.valueSortSettings.headerDelimiter + textArray[i]);\n                }\n                mIndex = this.fieldList[caption].index;\n                mType = this.fieldList[caption].aggregateType;\n            }\n            else {\n                if (!this.alwaysShowValueHeader || textArray.length === 1) {\n                    hText = this.valueSortSettings.headerText;\n                }\n                else {\n                    for (var i = 0; i < textArray.length - 1; i++) {\n                        hText = hText === '' ? textArray[i] : (hText + this.valueSortSettings.headerDelimiter + textArray[i]);\n                    }\n                }\n                mIndex = this.fieldList[this.values[0].name].index;\n                mType = this.fieldList[this.values[0].name].aggregateType;\n            }\n            var member = void 0;\n            if (this.valueAxis === 0) {\n                member = this.getMember(cMembers, hText);\n                if (member) {\n                    rMembers = this.sortByValueRow(rMembers, member, this.valueSortSettings.sortOrder, mIndex, mType);\n                }\n            }\n            else {\n                member = this.getMember(rMembers, hText);\n                if (member) {\n                    cMembers = this.sortByValueRow(cMembers, member, this.valueSortSettings.sortOrder, mIndex, mType);\n                }\n            }\n            if (isNullArgument) {\n                this.rMembers = rMembers;\n                this.cMembers = cMembers;\n                if (this.pageSettings) {\n                    this.headerCollection.rowHeaders = this.rMembers;\n                    this.headerCollection.columnHeaders = this.cMembers;\n                }\n            }\n        }\n        return { rMembers: rMembers, cMembers: cMembers };\n    };\n    PivotEngine.prototype.getMember = function (cMembers, headerText) {\n        var vlen = cMembers.length;\n        var member;\n        for (var j = 0; j < vlen; j++) {\n            if (cMembers[j].valueSort.levelName === headerText) {\n                member = cMembers[j];\n                break;\n            }\n            else if (cMembers[j].members.length > 0) {\n                member = this.getMember(cMembers[j].members, headerText);\n            }\n            if (member) {\n                return member;\n            }\n        }\n        return member;\n    };\n    PivotEngine.prototype.sortByValueRow = function (rMembers, member, sortOrder, mIndex, mType) {\n        var aggreColl = [];\n        for (var _i = 0, rMembers_1 = rMembers; _i < rMembers_1.length; _i++) {\n            var header = rMembers_1[_i];\n            if (header.type === 'grand sum') {\n                aggreColl.push({ 'header': header });\n            }\n            else {\n                this.rawIndexObject = {};\n                var value = this.getAggregateValue(header.index, member.indexObject, mIndex, mType);\n                var cellDetails = {\n                    fieldName: this.fields[mIndex],\n                    row: header,\n                    column: member,\n                    value: value,\n                    cellSets: this.getCellSet(this.rawIndexObject),\n                    rowCellType: (header.hasChild && header.isDrilled ? 'subTotal' : header.type === 'grand sum' ? 'grandTotal' : 'value'),\n                    columnCellType: (member.hasChild && member.isDrilled ? 'subTotal' : member.type === 'grand sum' ? 'grandTotal' : 'value'),\n                    aggregateType: mType,\n                    skipFormatting: false\n                };\n                if (this.getValueCellInfo) {\n                    this.getValueCellInfo(cellDetails);\n                }\n                value = cellDetails.value;\n                this.rawIndexObject = {};\n                aggreColl.push({ 'header': header, 'value': value });\n            }\n        }\n        /* eslint-disable */\n        aggreColl.sort(function (a, b) {\n            return sortOrder === 'Descending' ?\n                ((b['value'] || b['header']['type'] === 'grand sum' ?\n                    b['value'] : 0) - (a['value'] || a['header']['type'] === 'grand sum' ? a['value'] : 0)) :\n                ((a['value'] || a['header']['type'] === 'grand sum' ?\n                    a['value'] : 0) - (b['value'] || b['header']['type'] === 'grand sum' ? b['value'] : 0));\n        });\n        rMembers = aggreColl.map(function (item) { return item['header']; });\n        for (var _a = 0, rMembers_2 = rMembers; _a < rMembers_2.length; _a++) {\n            var header = rMembers_2[_a];\n            if (header.members.length > 0) {\n                header.members = this.sortByValueRow(header.members, member, sortOrder, mIndex, mType);\n            }\n        }\n        return rMembers;\n        /* eslint-enable */\n    };\n    PivotEngine.prototype.insertAllMembersCommon = function () {\n        this.rowGrandTotal = this.columnGrandTotal = null;\n        var rowFlag = (this.showGrandTotals && this.showRowGrandTotals) ? true : (this.rows.length > 0) ? false : true;\n        var columnFlag = (this.showGrandTotals && this.showColumnGrandTotals) ? true : (this.columns.length > 0) ? false : true;\n        if (this.isValueHasAdvancedAggregate) {\n            /* inserting the row grant-total members */\n            this.insertAllMember(this.rMembers, this.filterMembers, '', 'row');\n            if (rowFlag) {\n                this.rowCount += this.rowValuesLength;\n            }\n            /* inserting the column gran-total members */\n            this.insertAllMember(this.cMembers, this.filterMembers, '', 'column');\n            if (columnFlag) {\n                this.columnCount += this.colValuesLength;\n            }\n        }\n        else {\n            if (rowFlag) {\n                /* inserting the row grant-total members */\n                this.insertAllMember(this.rMembers, this.filterMembers, '', 'row');\n                this.rowCount += this.rowValuesLength;\n            }\n            else {\n                this.rowGrandTotal = this.insertAllMember([], this.filterMembers, '', 'row')[0];\n            }\n            if (columnFlag) {\n                /* inserting the column gran-total members */\n                this.insertAllMember(this.cMembers, this.filterMembers, '', 'column');\n                this.columnCount += this.colValuesLength;\n            }\n            else {\n                this.columnGrandTotal = this.insertAllMember([], this.filterMembers, '', 'column')[0];\n            }\n        }\n    };\n    PivotEngine.prototype.insertSubTotals = function () {\n        var rowLength = this.pivotValues.length;\n        for (var rowCnt = 0; rowCnt < rowLength; rowCnt++) {\n            var rowCells = this.pivotValues[rowCnt];\n            if (rowCells) {\n                var savedCell = void 0;\n                var spanCnt = 1;\n                var colLength = rowCells.length;\n                /* eslint-disable */\n                var indexObj = void 0;\n                /* eslint-enable */\n                for (var colCnt = colLength - 1; colCnt > 0; colCnt--) {\n                    var cell = rowCells[colCnt];\n                    if (cell) {\n                        // if (cell.rowSpan > 1) {\n                        //     cell.rowSpan = 1;\n                        // }\n                        if (savedCell) {\n                            savedCell.colSpan = spanCnt;\n                            savedCell.colIndex = savedCell.colIndex - (spanCnt - 1);\n                        }\n                        indexObj = { index: cell.index, indexObject: cell.indexObject };\n                        cell.index = [];\n                        cell.indexObject = {};\n                        savedCell = extend({}, cell, null, true);\n                        cell.index = indexObj.index;\n                        cell.indexObject = indexObj.indexObject;\n                        var rowPos = rowCnt + 1;\n                        while (this.pivotValues[rowPos] && !this.pivotValues[rowPos][colCnt]) {\n                            if (!this.pivotValues[rowCnt][colCnt].isDrilled) {\n                                this.pivotValues[rowCnt][colCnt].rowSpan = (rowPos - rowCnt) + 1;\n                                savedCell.rowSpan = (rowPos - rowCnt) + 1;\n                            }\n                            var cellType = (cell.type === 'sum' || cell.type === 'grand sum') ? cell.type : 'sum';\n                            this.pivotValues[rowPos][colCnt] = this.headerContent[rowPos][colCnt] = {\n                                type: cellType, formattedText: ((cell.type === 'sum' || cell.type === 'grand sum') ? cell.formattedText :\n                                    (cell.formattedText + ' Total')),\n                                axis: 'column', level: -1, colIndex: colCnt, rowIndex: rowPos, valueSort: cell.valueSort\n                            };\n                            if (cell.valueSort && cell.valueSort[this.valueSortSettings.headerText]) {\n                                this.valueSortSettings.columnIndex = colCnt;\n                            }\n                            var isSpanned = false;\n                            if (cellType === 'grand sum') {\n                                this.pivotValues[rowCnt][colCnt].rowSpan = (rowPos - rowCnt) + 1;\n                                savedCell.rowSpan = (rowPos - rowCnt) + 1;\n                            }\n                            else if (this.pivotValues[rowCnt][colCnt].type !== 'sum' &&\n                                this.pivotValues[rowCnt][colCnt].isDrilled) {\n                                this.pivotValues[rowCnt + 1][colCnt].rowSpan = rowPos - rowCnt;\n                                isSpanned = true;\n                            }\n                            else {\n                                this.pivotValues[rowPos][colCnt].rowSpan = -1;\n                            }\n                            if (rowPos > (rowCnt + 1) && (this.pivotValues[rowCnt][colCnt].type === 'sum' ||\n                                isSpanned)) {\n                                this.pivotValues[rowPos][colCnt].rowSpan = -1;\n                            }\n                            rowPos++;\n                        }\n                        spanCnt = 1;\n                    }\n                    else {\n                        rowCells[colCnt] = this.headerContent[rowCnt][colCnt] = extend({}, savedCell, null, true);\n                        rowCells[colCnt].index = this.headerContent[rowCnt][colCnt].index = indexObj.index;\n                        rowCells[colCnt].indexObject = this.headerContent[rowCnt][colCnt].indexObject = indexObj.indexObject;\n                        spanCnt++;\n                        rowCells[colCnt].colSpan = spanCnt;\n                        rowCells[colCnt].colIndex = rowCells[colCnt].colIndex - (spanCnt - 1);\n                    }\n                    if (colCnt === 1 && savedCell) {\n                        savedCell.colSpan = spanCnt;\n                        savedCell.colIndex = savedCell.colIndex - (spanCnt - 1);\n                    }\n                }\n            }\n        }\n    };\n    PivotEngine.prototype.frameDrillObject = function () {\n        this.fieldDrillCollection = {};\n        for (var fieldCnt = 0; fieldCnt < this.drilledMembers.length; fieldCnt++) {\n            var drillOption = this.drilledMembers[fieldCnt];\n            for (var memberCnt = 0; memberCnt < drillOption.items.length; memberCnt++) {\n                var memberString = drillOption.name + this.valueSortSettings.headerDelimiter +\n                    drillOption.items[memberCnt].split(drillOption.delimiter).join(this.valueSortSettings.headerDelimiter);\n                this.fieldDrillCollection[memberString] = memberString;\n            }\n        }\n    };\n    /* eslint-disable */\n    PivotEngine.prototype.getIndexedHeaders = function (keys, data, keyInd, position, axis, parentMember, valueFil) {\n        var hierarchy = [];\n        if (keys) {\n            var rlen = keys.length;\n            var decisionObj = {};\n            var fieldName = keys[keyInd].name;\n            var field = keys[keyInd];\n            // let members: string[] = Object.keys(this.fieldList[field].members);\n            var childrens = this.fieldList[fieldName];\n            if (isNullOrUndefined(this.reportDataType)) {\n                this.reportDataType = {};\n                for (var i = 0; i < this.dataSourceSettings.rows.length; i++) {\n                    this.reportDataType[this.dataSourceSettings.rows[i].name] = this.dataSourceSettings.rows[i].dataType;\n                }\n                for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {\n                    this.reportDataType[this.dataSourceSettings.columns[i].name] = this.dataSourceSettings.columns[i].dataType;\n                }\n                for (var i = 0; i < this.dataSourceSettings.values.length; i++) {\n                    this.reportDataType[this.dataSourceSettings.values[i].name] = this.dataSourceSettings.values[i].dataType;\n                }\n            }\n            childrens.type = !isNullOrUndefined(this.reportDataType[childrens.id]) ? this.reportDataType[childrens.id] : childrens.type;\n            var isNoData = false;\n            var isDateType = (this.formatFields[fieldName] &&\n                (['date', 'dateTime', 'time'].indexOf(this.formatFields[fieldName].type) > -1));\n            var showNoDataItems = (position.length < 1 && keyInd > 0) || field.showNoDataItems;\n            var savedMembers = {};\n            if (showNoDataItems) {\n                var members = Object.keys(childrens.members);\n                for (var pos = 0, lt = members.length; pos < lt; pos++) {\n                    if (this.showHeaderWhenEmpty || (this.localeObj && members[pos] !== this.localeObj.getConstant('undefined'))) {\n                        savedMembers[members[pos]] = members[pos];\n                    }\n                }\n                if (position.length < 1) {\n                    isNoData = true;\n                    position.length = members.length;\n                }\n            }\n            for (var pos = 0, lt = position.length; pos < lt; pos++) {\n                var member = {};\n                if (!isNullOrUndefined(keys[keyInd].showSubTotals) && !keys[keyInd].showSubTotals) {\n                    member.showSubTotals = false;\n                }\n                member.hasChild = keyInd < rlen - 1;\n                member.level = keyInd;\n                member.axis = axis;\n                member.colSpan = 1;\n                var memInd = isNoData ? childrens.members[Object.keys(savedMembers)[0]].ordinal :\n                    this.indexMatrix[position[pos]][childrens.index];\n                var headerValue = isNoData ? Object.keys(savedMembers)[0] :\n                    data[position[pos]][this.fieldKeys[fieldName]];\n                if ((isNullOrUndefined(headerValue) || (this.localeObj && headerValue === this.localeObj.getConstant('undefined')))\n                    && !this.showHeaderWhenEmpty) {\n                    if (showNoDataItems && !isNoData && keyInd > 0 && pos + 1 === position.length &&\n                        Object.keys(savedMembers).length > 0) {\n                        lt = Object.keys(savedMembers).length;\n                        isNoData = true;\n                        pos = -1;\n                    }\n                    continue;\n                }\n                delete savedMembers[headerValue];\n                if (showNoDataItems && this.fieldFilterMem[fieldName] &&\n                    this.fieldFilterMem[fieldName].memberObj[headerValue] === headerValue) {\n                    continue;\n                }\n                var formattedValue = isDateType ? {\n                    actualText: headerValue,\n                    formattedText: childrens.dateMember[memInd - 1].formattedText,\n                    dateText: childrens.dateMember[memInd - 1].actualText\n                } :\n                    {\n                        formattedText: headerValue === null ? (this.localeObj ? this.localeObj.getConstant('null') : String(headerValue)) :\n                            headerValue === undefined ? (this.localeObj ? (fieldName in this.groupingFields) ?\n                                this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') :\n                                String(headerValue)) : String(headerValue), actualText: headerValue === null ? (this.localeObj ?\n                            this.localeObj.getConstant('null') : String(headerValue)) : headerValue === undefined ?\n                            (this.localeObj ? (fieldName in this.groupingFields) ?\n                                this.localeObj.getConstant('groupOutOfRange') : this.localeObj.getConstant('undefined') :\n                                String(headerValue)) : headerValue\n                    };\n                member.actualText = formattedValue.actualText;\n                member.formattedText = formattedValue.formattedText;\n                if (isDateType) {\n                    member.dateText = formattedValue.dateText;\n                }\n                var availData = showNoDataItems ? (this.filterPosObj[position[pos]] !== undefined &&\n                    !isNoData ? true : false) : true;\n                //member.name = members[memInd];\n                // member.type = member.hasChild ? 'All' : 'Single';\n                var pindx = void 0;\n                if (!(decisionObj && decisionObj[memInd])) {\n                    decisionObj[memInd] = { index: [], indexObject: {} };\n                    member.index = decisionObj[memInd].index;\n                    member.indexObject = decisionObj[memInd].indexObject;\n                    if (availData) {\n                        member.index = decisionObj[memInd].index = [position[pos]];\n                        decisionObj[memInd].indexObject[position[pos]] = position[pos];\n                        member.indexObject = decisionObj[memInd].indexObject;\n                    }\n                    member.ordinal = memInd;\n                    member.valueSort = {};\n                    member.valueSort.axis = fieldName;\n                    if (keyInd !== 0) {\n                        member.valueSort.levelName = parentMember + this.valueSortSettings.headerDelimiter + member.formattedText;\n                        member.valueSort[parentMember + this.valueSortSettings.headerDelimiter + member.formattedText] = 1;\n                    }\n                    else {\n                        member.valueSort[member.formattedText] = 1;\n                        member.valueSort.levelName = member.formattedText;\n                    }\n                    var memberString = member.valueSort.axis + this.valueSortSettings.headerDelimiter + member.valueSort.levelName;\n                    member.isDrilled = (valueFil && this.isValueFiltersAvail) ?\n                        true : (member.hasChild && this.fieldDrillCollection[memberString]) ?\n                        this.isExpandAll ? false : true : childrens.members[headerValue].isDrilled;\n                    //if (!member.members) {\n                    member.members = [];\n                    //}\n                    //let copyObj: AxisSet = Object.create(member);\n                    hierarchy.push(member);\n                }\n                else if (availData) {\n                    decisionObj[memInd].index.push(position[pos]);\n                    decisionObj[memInd].indexObject[position[pos]] = position[pos];\n                }\n                if (showNoDataItems && !isNoData && keyInd > 0 && pos + 1 === position.length &&\n                    Object.keys(savedMembers).length > 0) {\n                    isNoData = true;\n                    lt = Object.keys(savedMembers).length;\n                    pos = -1;\n                }\n            }\n            for (var iln = 0, ilt = hierarchy.length; iln < ilt; iln++) {\n                if (!this.frameHeaderObjectsCollection) {\n                    if (axis === 'row') {\n                        this.rowCount += this.rowValuesLength;\n                    }\n                    else {\n                        this.columnCount += this.colValuesLength;\n                    }\n                }\n                var level = null;\n                if (hierarchy[iln].valueSort && hierarchy[iln].valueSort.levelName) {\n                    level = hierarchy[iln].valueSort.levelName;\n                }\n                parentMember = (level || hierarchy[iln].formattedText);\n                if (!this.showHeaderWhenEmpty && rlen - 1 > keyInd && hierarchy[iln].index &&\n                    hierarchy[iln].index.length > 0) {\n                    if (showNoDataItems && keys[keyInd + 1] && keys[keyInd + 1].name &&\n                        Object.keys(this.fieldList[keys[keyInd + 1].name].members).length > 0) {\n                        hierarchy[iln].hasChild = true;\n                    }\n                    else {\n                        var hIndLen = hierarchy[iln].index.length;\n                        var count = 0;\n                        for (var len = 0; len < hIndLen; len++) {\n                            var headerValue = data[hierarchy[iln].index[len]][this.fieldKeys[keys[keyInd + 1].name]];\n                            if ((isNullOrUndefined(headerValue) || (this.localeObj &&\n                                headerValue === this.localeObj.getConstant('undefined')))) {\n                                count++;\n                            }\n                        }\n                        hierarchy[iln].hasChild = count !== hIndLen;\n                    }\n                }\n                if (rlen - 1 > keyInd && hierarchy[iln].isDrilled) {\n                    this.columnCount -= (!(this.showSubTotals && this.showColumnSubTotals && field.showSubTotals) && axis === 'column') ?\n                        this.colValuesLength : 0;\n                    var filterPosition = hierarchy[iln].index;\n                    hierarchy[iln].members = this.getIndexedHeaders(keys, data, keyInd + 1, (filterPosition === undefined ? [] : filterPosition), axis, parentMember);\n                    if (this.frameHeaderObjectsCollection) {\n                        this.headerObjectsCollection[parentMember] = hierarchy[iln].members;\n                    }\n                }\n            }\n            /* eslint-disable  */\n            if (this.enableSort) {\n                // return new DataManager(hierarchy as JSON[]).executeLocal(new Query().sortBy('actualText', childrens.sort.toLowerCase()));\n                if (isDateType) {\n                    return childrens.sort === 'Ascending' ?\n                        (hierarchy.sort(function (a, b) { return (a.dateText > b.dateText) ? 1 : ((b.dateText > a.dateText) ? -1 : 0); })) :\n                        childrens.sort === 'Descending' ?\n                            (hierarchy.sort(function (a, b) { return (a.dateText < b.dateText) ? 1 : ((b.dateText < a.dateText) ? -1 : 0); })) :\n                            hierarchy;\n                }\n                else {\n                    if (childrens.type === 'number' && hierarchy.length > 0 && (typeof (hierarchy[0].actualText) === 'string')) {\n                        var stringValue = [];\n                        var alphaNumbervalue = [];\n                        var nullValue = [];\n                        for (var i = 0; i < hierarchy.length; i++) {\n                            if (isNaN(hierarchy[i].actualText.toString().charAt(0))) {\n                                stringValue.push(hierarchy[i]);\n                            }\n                            else if (hierarchy[i].actualText === \"\") {\n                                nullValue.push(hierarchy[i]);\n                            }\n                            else {\n                                alphaNumbervalue.push(hierarchy[i]);\n                            }\n                        }\n                        if (stringValue.length > 0) {\n                            stringValue = childrens.sort === 'Ascending' ? (stringValue.sort(function (a, b) { return (a.actualText > b.actualText) ? 1 : ((b.actualText > a.actualText) ? -1 : 0); })) :\n                                childrens.sort === 'Descending' ? (stringValue.sort(function (a, b) { return (a.actualText < b.actualText) ? 1 : ((b.actualText < a.actualText) ? -1 : 0); })) : stringValue;\n                        }\n                        if (alphaNumbervalue.length > 0) {\n                            alphaNumbervalue = childrens.sort === 'Ascending' ?\n                                (alphaNumbervalue.sort(function (a, b) { return (Number(a.actualText.toString().match(/\\d+/)[0]) > Number(b.actualText.toString().match(/\\d+/)[0])) ? 1 : ((Number(b.actualText.toString().match(/\\d+/)[0]) > Number(a.actualText.toString().match(/\\d+/)[0])) ? -1 : 0); })) :\n                                childrens.sort === 'Descending' ?\n                                    (alphaNumbervalue.sort(function (a, b) { return (Number(a.actualText.toString().match(/\\d+/)[0]) < Number(b.actualText.toString().match(/\\d+/)[0])) ? 1 : ((Number(b.actualText.toString().match(/\\d+/)[0]) < Number(a.actualText.toString().match(/\\d+/)[0])) ? -1 : 0); })) :\n                                    alphaNumbervalue;\n                        }\n                        return hierarchy = nullValue.concat(alphaNumbervalue, stringValue);\n                    }\n                    else {\n                        return childrens.sort === 'Ascending' ?\n                            (hierarchy.sort(function (a, b) { return (a.actualText > b.actualText) ? 1 : ((b.actualText > a.actualText) ? -1 : 0); })) :\n                            childrens.sort === 'Descending' ?\n                                (hierarchy.sort(function (a, b) { return (a.actualText < b.actualText) ? 1 : ((b.actualText < a.actualText) ? -1 : 0); })) :\n                                hierarchy;\n                    }\n                }\n            }\n            else {\n                return hierarchy;\n            }\n            /* eslint-enable  */\n        }\n        else {\n            return hierarchy;\n        }\n    };\n    PivotEngine.prototype.getOrderedIndex = function (headers) {\n        var orderedIndex = {};\n        for (var i = 0; i < headers.length; i++) {\n            if (headers[i].type !== 'grand sum') {\n                orderedIndex[headers[i].ordinal] = i;\n            }\n        }\n        return orderedIndex;\n    };\n    /* eslint-disable , @typescript-eslint/no-explicit-any */\n    PivotEngine.prototype.insertPosition = function (keys, data, keyInd, position, axis, parentMember, slicedHeaders) {\n        var hierarchy = [];\n        var orderedIndex = this.getOrderedIndex(slicedHeaders);\n        if (keys) {\n            var decisionObj = {};\n            var field = keys[keyInd].name;\n            var childrens = this.fieldList[field];\n            for (var pos = 0, lt = position.length; pos < lt; pos++) {\n                var member = {};\n                var memInd = this.indexMatrix[position[pos]][childrens.index];\n                var slicedHeader = slicedHeaders[orderedIndex[memInd]];\n                var value = data[position[pos]][this.fieldKeys[field]];\n                value = value === null ? (this.localeObj ? this.localeObj.getConstant('null') : String(value)) : value;\n                var formattedValue = (this.formatFields[field] &&\n                    (['date', 'dateTime', 'time'].indexOf(this.formatFields[field].type) > -1)) ?\n                    this.getFormattedValue(value, field) :\n                    { formattedText: value.toString(), actualText: value.toString() };\n                if (!(slicedHeader && slicedHeader.formattedText === formattedValue.formattedText)) {\n                    continue;\n                }\n                if (!(decisionObj && decisionObj[memInd])) {\n                    decisionObj[memInd] = { index: [], indexObject: {} };\n                    slicedHeader.index = decisionObj[memInd].index = [position[pos]];\n                    decisionObj[memInd].indexObject[position[pos]] = position[pos];\n                    slicedHeader.indexObject = decisionObj[memInd].indexObject;\n                    slicedHeader.valueSort = {};\n                    slicedHeader.valueSort.axis = field;\n                    if (keyInd !== 0) {\n                        slicedHeader.valueSort.levelName = parentMember + this.valueSortSettings.headerDelimiter +\n                            slicedHeader.formattedText;\n                        slicedHeader.valueSort[parentMember + this.valueSortSettings.headerDelimiter +\n                            slicedHeader.formattedText] = 1;\n                    }\n                    else {\n                        slicedHeader.valueSort[slicedHeader.formattedText] = 1;\n                        slicedHeader.valueSort.levelName = slicedHeader.formattedText;\n                    }\n                    member.members = [];\n                    hierarchy.push(member);\n                }\n                else {\n                    decisionObj[memInd].index.push(position[pos]);\n                    decisionObj[memInd].indexObject[position[pos]] = position[pos];\n                }\n            }\n            var diff = slicedHeaders.length - hierarchy.length;\n            while (diff > 0) {\n                hierarchy.push({ members: [] });\n                diff--;\n            }\n            for (var iln = 0, ilt = hierarchy.length; iln < ilt; iln++) {\n                if (slicedHeaders[iln].members.length > 0) {\n                    var level = null;\n                    if (slicedHeaders[iln].valueSort && slicedHeaders[iln].valueSort.levelName) {\n                        level = slicedHeaders[iln].valueSort.levelName;\n                    }\n                    parentMember = (level || slicedHeaders[iln].formattedText);\n                    hierarchy[iln].members =\n                        this.insertPosition(keys, data, keyInd + 1, slicedHeaders[iln].index, axis, parentMember, slicedHeaders[iln].members);\n                }\n            }\n            return hierarchy;\n        }\n        else {\n            return hierarchy;\n        }\n    };\n    PivotEngine.prototype.insertTotalPosition = function (headers) {\n        var summCell = headers[headers.length - 1];\n        if (summCell && summCell.type === 'grand sum') {\n            summCell.index = this.filterMembers;\n            /* eslint-disable  */\n            var lt = void 0;\n            for (var ln = 0, lt_1 = this.filterMembers.length; ln < lt_1; ln++) {\n                summCell.indexObject[this.filterMembers[ln]] = this.filterMembers[ln];\n            }\n            /* eslint-enable  */\n        }\n        return headers;\n    };\n    PivotEngine.prototype.calculatePagingValues = function () {\n        if (this.pageSettings) {\n            if (this.valueAxis === 1) {\n                this.rowValuesLength = this.values.length;\n            }\n            else {\n                this.colValuesLength = this.values.length;\n            }\n            this.memberCnt = -this.rowValuesLength;\n            this.rowStartPos = ((this.pageSettings.rowCurrentPage * this.pageSettings.rowSize) -\n                (this.pageSettings.rowSize)) * this.rowValuesLength;\n            var exactStartPos = (this.rowStartPos + (this.pageSettings.rowSize * 3 * this.rowValuesLength)) > this.rowCount ?\n                (this.rowCount - (this.pageSettings.rowSize * 3 * this.rowValuesLength)) : this.rowStartPos;\n            if (exactStartPos < 0) {\n                exactStartPos = this.rowStartPos = 0;\n                this.pageSettings.rowCurrentPage = 1;\n            }\n            this.rowFirstLvl = (this.rowStartPos - exactStartPos) % this.pageSettings.rowSize;\n            this.rowStartPos = exactStartPos;\n            this.endPos = this.rowStartPos + (this.pageSettings.rowSize * 3 * this.rowValuesLength);\n            this.endPos = this.endPos > this.rowCount ? this.rowCount : this.endPos;\n            this.rMembers = this.performSlicing(this.rMembers, [], this.rowStartPos, 'row');\n            this.memberCnt = -this.colValuesLength;\n            this.pageInLimit = false;\n            this.colHdrBufferCalculated = false;\n            this.colStartPos = ((this.pageSettings.columnCurrentPage * this.pageSettings.columnSize) -\n                (this.pageSettings.columnSize)) * this.colValuesLength;\n            exactStartPos = (this.colStartPos + (this.pageSettings.columnSize * 3 * this.colValuesLength)) >\n                this.columnCount ?\n                (this.columnCount - (this.pageSettings.columnSize * 3 * this.colValuesLength)) : this.colStartPos;\n            if (exactStartPos < 0) {\n                exactStartPos = this.colStartPos = 0;\n                this.pageSettings.columnCurrentPage = 1;\n            }\n            this.colFirstLvl = (this.colStartPos - exactStartPos) % this.pageSettings.columnSize;\n            this.colStartPos = exactStartPos;\n            this.endPos = this.colStartPos + (this.pageSettings.columnSize * 3 * this.colValuesLength);\n            this.endPos = this.endPos > this.columnCount ? this.columnCount : this.endPos;\n            this.cMembers = this.performSlicing(this.cMembers, [], this.colStartPos, 'column');\n            this.memberCnt = -1;\n            this.pageInLimit = false;\n            if (this.isValueHasAdvancedAggregate) {\n                if (this.rMembers[this.rMembers.length - 1].type !== 'grand sum' &&\n                    this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1].type === 'grand sum') {\n                    this.rMembers.push(this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1]);\n                    this.removeRowGrandTotal = true;\n                }\n                if (this.cMembers[this.cMembers.length - 1].type !== 'grand sum' &&\n                    this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1].type === 'grand sum') {\n                    this.cMembers.push(this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1]);\n                    this.removeColumnGrandTotal = true;\n                }\n            }\n            else {\n                this.rowGrandTotal = this.rowGrandTotal ? this.rowGrandTotal :\n                    this.headerCollection.rowHeaders[this.headerCollection.rowHeaders.length - 1];\n                this.columnGrandTotal = this.columnGrandTotal ? this.columnGrandTotal :\n                    this.headerCollection.columnHeaders[this.headerCollection.columnHeaders.length - 1];\n            }\n        }\n    };\n    PivotEngine.prototype.performSlicing = function (headers, slicedHeaders, startPos, axis) {\n        var pos = 0;\n        while (headers[pos]) {\n            this.memberCnt += axis === 'column' ? this.colValuesLength : this.rowValuesLength;\n            if (startPos <= this.memberCnt && this.endPos >= this.memberCnt && !this.pageInLimit) {\n                if (axis === 'column') {\n                    this.colFirstLvl = this.colFirstLvl + headers[pos].level;\n                }\n                else {\n                    this.rowFirstLvl = this.rowFirstLvl + headers[pos].level;\n                }\n                this.pageInLimit = true;\n            }\n            if (this.pageInLimit) {\n                if (this.endPos <= this.memberCnt) {\n                    if (axis === 'column') {\n                        if (headers[pos].members.length === 0) {\n                            if (this.colHdrBufferCalculated) {\n                                break;\n                            }\n                            this.colHdrBufferCalculated = true;\n                            this.endPos += (headers[pos].level * this.colValuesLength);\n                        }\n                        else if (this.colHdrBufferCalculated) {\n                            break;\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            slicedHeaders.push(headers[pos].members.length > 0 ? this.removeChildMembers(headers[pos]) : headers[pos]);\n            if (headers[pos].members.length > 0) {\n                if (axis === 'column') {\n                    /* eslint-disable @typescript-eslint/no-explicit-any */\n                    this.memberCnt -= !(this.showSubTotals && this.showColumnSubTotals &&\n                        this.columnKeys[headers[pos].valueSort.axis].showSubTotals) ? this.colValuesLength : 0;\n                    /* eslint-enable @typescript-eslint/no-explicit-any */\n                }\n                slicedHeaders[slicedHeaders.length - 1].members =\n                    this.performSlicing(headers[pos].members, [], startPos, axis);\n            }\n            if (!this.pageInLimit) {\n                slicedHeaders.pop();\n            }\n            if (headers[pos].level === 0 && this.pageInLimit && this.endPos <= this.memberCnt) {\n                break;\n            }\n            pos++;\n        }\n        return slicedHeaders;\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    PivotEngine.prototype.removeChildMembers = function (member) {\n        var keys = Object.keys(member);\n        var keyPos = 0;\n        var framedMember = {};\n        /* eslint-disable @typescript-eslint/dot-notation */\n        while (keyPos < keys.length) {\n            framedMember[keys[keyPos]] = member[keys[keyPos]];\n            if (keys[keyPos] === 'members') {\n                framedMember['members'] = [];\n            }\n            keyPos++;\n        }\n        /* eslint-enable @typescript-eslint/dot-notation */\n        return framedMember;\n    };\n    PivotEngine.prototype.insertAllMember = function (set, filter, customText, axis) {\n        var len = set.length;\n        customText = ' Total';\n        set[len] = {\n            hasChild: false,\n            index: filter,\n            level: 0,\n            axis: axis,\n            isDrilled: false,\n            indexObject: {},\n            members: [],\n            formattedText: 'Grand' + customText,\n            ordinal: len,\n            type: 'grand sum',\n            valueSort: {}\n        };\n        set[len].valueSort[set[len].formattedText] = 1;\n        set[len].valueSort.levelName = set[len].formattedText;\n        for (var ln = 0, lt = filter.length; ln < lt; ln++) {\n            set[len].indexObject[filter[ln]] = filter[ln];\n        }\n        // if (axis === 'row') {\n        //     this.rowCount += this.rowValuesLength;\n        // } else {\n        //     this.columnCount += this.colValuesLength;\n        // }\n        return set;\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    PivotEngine.prototype.getTableData = function (rows, reformAxis, columns, tnum, data, vlt, rTotal, cTotal) {\n        for (var rlt = rows.length, rln = 0; rln < rlt; rln++) {\n            tnum = data.length;\n            reformAxis[tnum] = rows[rln];\n            var actCnt = tnum - Number(Object.keys(reformAxis)[0]);\n            //let rplus: number = rln + 1;\n            //let lvl: number = rows[rln].level;\n            var isLeastNode = !reformAxis[tnum].members.length;\n            rows[rln].colIndex = 0;\n            rows[rln].rowIndex = tnum;\n            if (!data[tnum]) {\n                data[tnum] = [];\n                this.valueContent[actCnt] = {};\n                //data[tnum][0] = rows[rln].name;\n                data[tnum][0] = this.valueContent[actCnt][0] = this.frameHeaderWithKeys(rows[rln]);\n            }\n            else {\n                // data[tnum][0] = rows[rln].name;\n                data[tnum][0] = this.valueContent[actCnt][0] = this.frameHeaderWithKeys(rows[rln]);\n            }\n            if (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader)) {\n                var hpos = tnum;\n                var actpos = actCnt;\n                var rowIndex = tnum;\n                if (!(rows[rln].hasChild && rows[rln].isDrilled && ((!isNullOrUndefined(rows[rln].showSubTotals) &&\n                    !rows[rln].showSubTotals) || !this.showSubTotals || !this.showRowSubTotals))) {\n                    for (var vln = 0; vln < vlt; vln++) {\n                        tnum++;\n                        actCnt++;\n                        var name_1 = this.values[vln].caption ? this.values[vln].caption : this.values[vln].name;\n                        /* eslint-disable */\n                        var calObj = {\n                            axis: 'row',\n                            actualText: this.values[vln].name,\n                            formattedText: name_1,\n                            level: 0,\n                            valueSort: {},\n                            colIndex: 0,\n                            rowIndex: tnum,\n                            type: 'value'\n                        };\n                        /* eslint-enable */\n                        if (!data[tnum]) {\n                            data[tnum] = [];\n                            this.valueContent[actCnt] = {};\n                            data[tnum][0] = this.valueContent[actCnt][0] = calObj;\n                        }\n                        var vData = data[tnum][0].valueSort;\n                        vData[data[tnum - vln - 1][0].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_1] = 1; /* eslint-disable-line */\n                        vData.levelName = data[tnum - vln - 1][0].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_1; /* eslint-disable-line */\n                        for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {\n                            //for (let vln: number = 0; (!this.valueAxis && vln < vlt); vln++) {\n                            this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);\n                            dln = data[tnum].length;\n                            data[hpos][dln - 1] = this.valueContent[actpos][dln - 1] = {\n                                axis: 'value', actualText: '', colSpan: 1,\n                                colIndex: dln, formattedText: '', hasChild: false\n                            };\n                            // }\n                        }\n                    }\n                    rowIndex = tnum;\n                }\n                else {\n                    for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {\n                        dln = data[tnum].length;\n                        data[hpos][dln] = this.valueContent[actpos][dln] = {\n                            axis: 'value', actualText: '', colSpan: 1,\n                            colIndex: dln, formattedText: '', hasChild: false\n                        };\n                    }\n                    rowIndex = tnum + vlt;\n                }\n                this.recursiveRowData(rows, reformAxis, columns, rowIndex, data, vlt, isLeastNode, rln, vlt, rTotal, cTotal);\n            }\n            else {\n                for (var cln = 0, dln = 1, clt = columns.length; cln < clt; ++cln) {\n                    for (var vln = 0; vln < vlt; vln++) {\n                        this.updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal);\n                        dln = data[tnum].length;\n                    }\n                }\n                this.recursiveRowData(rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, 0, rTotal, cTotal);\n            }\n        }\n        /* for (let rlt: number = rows.length, rln: number = 0; rln < rlt; rln++) {\n            if (!data[rln]) {\n                data[rln] = [];\n                data[rln][0] = rows[rln].name;\n            } else {\n                data[rln][0] = rows[rln].name;\n            }\n            for (let cln: number = 0, dln: number = 1, clt: number = columns.length; cln < clt; dln = ++cln) {\n                data[rln][dln] = this.getAggregateValue(rows[rln].index, columns[cln].index, 11);\n            }\n        } */\n    };\n    PivotEngine.prototype.getAggregatedHeaders = function (rows, columns, rMembers, cMembers, values) {\n        this.selectedHeaders = { selectedHeader: [], values: [] };\n        for (var vlt = values.length, vln = 0; vln < vlt; vln++) {\n            switch (values[vln].type) {\n                case 'DifferenceFrom':\n                case 'PercentageOfDifferenceFrom':\n                    {\n                        var baseField = void 0;\n                        var baseItem = void 0;\n                        this.selectedHeaders.values.push(values[vln].name);\n                        if (values[vln].baseField && values[vln].baseItem) {\n                            baseField = values[vln].baseField;\n                            baseItem = values[vln].baseItem;\n                        }\n                        else if (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) && columns.length > 0) {\n                            baseField = columns[0].name;\n                            baseItem = Object.keys(this.fieldList[columns[0].name].members)[0];\n                        }\n                        else if (rows.length > 0) {\n                            baseField = rows[0].name;\n                            baseItem = Object.keys(this.fieldList[rows[0].name].members)[0];\n                        }\n                        var isHeaderSelected = false;\n                        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n                            var row = rows_2[_i];\n                            if (row.name === baseField) {\n                                this.getAggregatedHeaderData(rMembers, values[vln].name, baseItem, false, 'row', values[vln].type, this.selectedHeaders.selectedHeader, vln);\n                                isHeaderSelected = true;\n                                break;\n                            }\n                        }\n                        if (!isHeaderSelected) {\n                            for (var _a = 0, columns_1 = columns; _a < columns_1.length; _a++) {\n                                var column = columns_1[_a];\n                                if (column.name === baseField) {\n                                    this.getAggregatedHeaderData(cMembers, values[vln].name, baseItem, false, 'column', values[vln].type, this.selectedHeaders.selectedHeader, vln);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'PercentageOfParentRowTotal':\n                case 'PercentageOfParentColumnTotal':\n                    {\n                        this.selectedHeaders.values.push(values[vln].name);\n                        this.getAggregatedHeaderData((values[vln].type === 'PercentageOfParentRowTotal' ? rMembers : cMembers), values[vln].name, undefined, false, (values[vln].type === 'PercentageOfParentRowTotal' ? 'row' : 'column'), values[vln].type, this.selectedHeaders.selectedHeader, vln);\n                    }\n                    break;\n                case 'RunningTotals':\n                    {\n                        this.selectedHeaders.values.push(values[vln].name);\n                        this.getAggregatedHeaderData((this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) ? cMembers : rMembers), values[vln].name, undefined, false, (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) ? 'column' : 'row'), values[vln].type, this.selectedHeaders.selectedHeader, vln);\n                    }\n                    break;\n                case 'PercentageOfParentTotal':\n                    {\n                        var baseField = void 0;\n                        this.selectedHeaders.values.push(values[vln].name);\n                        if (values[vln].baseField) {\n                            baseField = values[vln].baseField;\n                        }\n                        else if (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) && columns.length > 0) {\n                            baseField = columns[0].name;\n                        }\n                        else if (rows.length > 0) {\n                            baseField = rows[0].name;\n                        }\n                        var isHeaderSelected = false;\n                        for (var len = rows.length, i = 0; i < len; i++) {\n                            if (rows[i].name === baseField) {\n                                this.getAggregatedHeaderData(rMembers, values[vln].name, undefined, false, 'row', values[vln].type, this.selectedHeaders.selectedHeader, vln, i);\n                                isHeaderSelected = true;\n                                break;\n                            }\n                        }\n                        if (!isHeaderSelected) {\n                            for (var len = columns.length, i = 0; i < len; i++) {\n                                if (columns[i].name === baseField) {\n                                    this.getAggregatedHeaderData(cMembers, values[vln].name, undefined, false, 'column', values[vln].type, this.selectedHeaders.selectedHeader, vln, i);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n            }\n        }\n    };\n    PivotEngine.prototype.getAggregatedHeaderData = function (headers, name, baseItem, isChildren, type, aggregateType, selectedHeaders, vln, level) {\n        for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {\n            var rln = headers_1[_i];\n            switch (aggregateType) {\n                case 'DifferenceFrom':\n                case 'PercentageOfDifferenceFrom':\n                    {\n                        var levelName = rln.valueSort.levelName.toString().split(this.valueSortSettings.headerDelimiter);\n                        if (levelName.indexOf(baseItem) !== -1) {\n                            selectedHeaders.push(this.updateSelectedHeaders(baseItem, rln.level, type, isChildren, name, aggregateType, rln.valueSort.levelName, (isChildren ? [rln] : headers), vln + 1)); /* eslint-disable-line */\n                            if (rln.members.length > 0) {\n                                this.getAggregatedHeaderData(rln.members, name, baseItem, true, type, aggregateType, selectedHeaders[selectedHeaders.length - 1].childMembers, vln); /* eslint-disable-line */\n                            }\n                        }\n                        else if (rln.members.length > 0) {\n                            this.getAggregatedHeaderData(rln.members, name, baseItem, false, type, aggregateType, selectedHeaders, vln);\n                        }\n                    }\n                    break;\n                case 'RunningTotals':\n                case 'PercentageOfParentRowTotal':\n                case 'PercentageOfParentColumnTotal':\n                    {\n                        if (rln.type === 'grand sum') {\n                            selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, headers, vln + 1)); /* eslint-disable-line */\n                        }\n                        else {\n                            if (rln.members.length > 0) {\n                                selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, rln.members, vln + 1)); /* eslint-disable-line */\n                                this.getAggregatedHeaderData(rln.members, name, undefined, false, type, aggregateType, selectedHeaders, vln); /* eslint-disable-line */\n                            }\n                        }\n                    }\n                    break;\n                case 'PercentageOfParentTotal':\n                    {\n                        if (rln.type !== 'grand sum') {\n                            if (rln.level === level) {\n                                if (rln.members.length > 0) {\n                                    if (isChildren) {\n                                        var aggregateHeaders = selectedHeaders[selectedHeaders.length - 1].aggregateHeaders;\n                                        for (var _a = 0, _b = rln.members; _a < _b.length; _a++) {\n                                            var member = _b[_a];\n                                            aggregateHeaders.push(member);\n                                        }\n                                    }\n                                    else {\n                                        var children = extend([], rln.members, null, true);\n                                        selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, children, vln + 1)); /* eslint-disable-line */\n                                        var aggregateHeaders = selectedHeaders[selectedHeaders.length - 1].aggregateHeaders;\n                                        aggregateHeaders.push(rln);\n                                    }\n                                    this.getAggregatedHeaderData(rln.members, name, undefined, true, type, aggregateType, selectedHeaders, vln, level + 1); /* eslint-disable-line */\n                                }\n                                else {\n                                    if (!isChildren) {\n                                        selectedHeaders.push(this.updateSelectedHeaders(undefined, rln.level, type, false, name, aggregateType, rln.valueSort.levelName, [rln], vln + 1)); /* eslint-disable-line */\n                                    }\n                                }\n                            }\n                            else if (rln.members.length > 0) {\n                                this.getAggregatedHeaderData(rln.members, name, undefined, false, type, aggregateType, selectedHeaders, vln, level); /* eslint-disable-line */\n                            }\n                        }\n                    }\n                    break;\n            }\n        }\n    };\n    PivotEngine.prototype.updateSelectedHeaders = function (baseItem, level, type, isChildren, name, aggregateType, levelName, headers, vCount) {\n        var headerData = {\n            name: baseItem,\n            level: level,\n            axis: type,\n            isChild: isChildren,\n            value: name,\n            type: aggregateType,\n            uniqueName: levelName,\n            aggregateHeaders: headers,\n            childMembers: [],\n            valueCount: vCount\n        };\n        return headerData;\n    };\n    PivotEngine.prototype.applyAdvancedAggregate = function (rowheads, colheads, data) {\n        this.aggregatedValueMatrix = [];\n        if (this.selectedHeaders.values.length > 0) {\n            var pivotIndex = {};\n            var colIndex = [];\n            var isIndexFilled = false;\n            for (var rlt = data.length, rln = 0; rln < rlt; rln++) {\n                if (data[rln] !== undefined && data[rln][0] !== undefined) {\n                    if (!isIndexFilled) {\n                        for (var clt = data[rln].length, cln = 0; cln < clt; cln++) {\n                            if (data[rln][cln].axis === 'value' &&\n                                this.selectedHeaders.values.indexOf(data[rln][cln].actualText) !== -1) {\n                                colIndex.push(cln);\n                                isIndexFilled = true;\n                            }\n                        }\n                    }\n                    if (colIndex.length > 0 && data[rln][colIndex[0]].axis === 'value' &&\n                        this.selectedHeaders.values.indexOf(data[rln][colIndex[0]].actualText) !== -1) {\n                        for (var _i = 0, colIndex_1 = colIndex; _i < colIndex_1.length; _i++) {\n                            var index = colIndex_1[_i];\n                            pivotIndex[rln + ',' + index] = [rln, index];\n                        }\n                    }\n                }\n            }\n            this.updateAggregates(rowheads, colheads, data, this.selectedHeaders.selectedHeader, colIndex, pivotIndex);\n            var indexCollection = Object.keys(pivotIndex);\n            for (var _a = 0, indexCollection_1 = indexCollection; _a < indexCollection_1.length; _a++) {\n                var index = indexCollection_1[_a];\n                var currentSet = data[pivotIndex[index][0]][pivotIndex[index][1]];\n                // currentSet.formattedText = '0';\n                currentSet.formattedText = (this.selectedHeaders.selectedHeader.length > 0 ? this.emptyCellTextContent : '#N/A');\n                if (!this.aggregatedValueMatrix[pivotIndex[index][0]]) {\n                    this.aggregatedValueMatrix[pivotIndex[index][0]] = [];\n                }\n                this.aggregatedValueMatrix[pivotIndex[index][0]][pivotIndex[index][1]] = 0;\n            }\n            this.updatePivotValues(true);\n        }\n        else {\n            return;\n        }\n    };\n    /* eslint-disable  */\n    PivotEngine.prototype.updateAggregates = function (rowheads, colheads, data, selectedHeaders, colIndex, pivotIndex) {\n        for (var _i = 0, selectedHeaders_1 = selectedHeaders; _i < selectedHeaders_1.length; _i++) {\n            var headers = selectedHeaders_1[_i];\n            var selectedHeaderCollection = headers.aggregateHeaders;\n            var name_2 = headers.value;\n            var valueCount = (this.valueAxis && (this.isMutiMeasures || this.alwaysShowValueHeader) ? headers.valueCount : 0);\n            var aggregateType = headers.type;\n            var uniqueName = headers.uniqueName;\n            var axis = headers.axis;\n            var isRowBaseField = axis === 'row' ? true : false;\n            var activeValues = void 0;\n            var indexCollection = [];\n            var activeColumn = [];\n            var columnHeaders = [];\n            var rowindexCollection = [];\n            var selectedRowValues = [];\n            var selectedColumnValues = [];\n            if ((['DifferenceFrom', 'PercentageOfDifferenceFrom', 'PercentageOfParentRowTotal', 'PercentageOfParentColumnTotal', 'PercentageOfParentTotal', 'RunningTotals']).indexOf(headers.type) !== -1) {\n                if (isRowBaseField) {\n                    if (headers.type !== 'RunningTotals') {\n                        for (var rlt = rowheads.length, rln = 0; rln < rlt; rln++) {\n                            if (rowheads[rln] !== undefined) {\n                                if (rowheads[rln].valueSort[uniqueName]) {\n                                    activeValues = rowheads[rln];\n                                    if (this.valueAxis === 0 || (this.valueAxis && data[rln + valueCount] &&\n                                        data[rln + valueCount][0].actualText === name_2)) {\n                                        selectedRowValues = data[rln + valueCount];\n                                    }\n                                    else {\n                                        selectedRowValues = [];\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    for (var len_6 = data.length, i = 0; i < len_6; i++) {\n                        if (data[i] !== undefined && data[i][0] === undefined) {\n                            columnHeaders.push(data[i]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    var len = columnHeaders.length;\n                    while (len--) {\n                        var axisObj = columnHeaders[len][colIndex[0]];\n                        var cLevelName = axisObj.actualText;\n                        if (this.selectedHeaders.values.indexOf(cLevelName) === -1) {\n                            activeColumn = columnHeaders[len];\n                            len = 0;\n                        }\n                    }\n                    if (headers.type !== 'RunningTotals') {\n                        for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                            var isSelectedColumn = false;\n                            if (activeColumn[cln] !== undefined && activeColumn[cln].valueSort[uniqueName]) {\n                                activeValues = activeColumn[cln];\n                                for (var len_7 = data.length, i = 0; i < len_7; i++) {\n                                    var axisObj = data[i];\n                                    if (axisObj !== undefined && axisObj[0] !== undefined &&\n                                        axisObj[cln].axis === 'value' &&\n                                        this.selectedHeaders.values.indexOf(axisObj[cln].actualText) !== -1) {\n                                        isSelectedColumn = true;\n                                        selectedColumnValues[i] = axisObj[cln];\n                                        rowindexCollection.push(i);\n                                    }\n                                }\n                                if (isSelectedColumn) {\n                                    break;\n                                }\n                            }\n                        }\n                        if (selectedColumnValues.length === 0 && rowindexCollection.length === 0) {\n                            for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                                var isSelectedColumn = false;\n                                if (activeColumn[cln] !== undefined && activeColumn[cln].valueSort.levelName.indexOf(uniqueName) === 0) {\n                                    activeValues = activeColumn[cln];\n                                    for (var lnt = data.length, j = 0; j < lnt; j++) {\n                                        var axisObj = data[j];\n                                        if (axisObj !== undefined && axisObj[0] !== undefined &&\n                                            axisObj[cln].axis === 'value' &&\n                                            this.selectedHeaders.values.indexOf(axisObj[cln].actualText) !== -1) {\n                                            isSelectedColumn = true;\n                                            // selectedColumnValues[i] = axisObj[cln] as IAxisSet;\n                                            rowindexCollection.push(j);\n                                        }\n                                    }\n                                    if (isSelectedColumn) {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            switch (headers.type) {\n                case 'DifferenceFrom':\n                case 'PercentageOfDifferenceFrom':\n                    {\n                        var isChildren = headers.isChild;\n                        if (isRowBaseField) {\n                            if (!isChildren) {\n                                for (var _a = 0, selectedHeaderCollection_1 = selectedHeaderCollection; _a < selectedHeaderCollection_1.length; _a++) {\n                                    var item = selectedHeaderCollection_1[_a];\n                                    for (var rlt = rowheads.length, rln = 0; rln < rlt; rln++) {\n                                        if (rowheads[rln] !== undefined) {\n                                            if (rowheads[rln].valueSort[item.valueSort.levelName] &&\n                                                rowheads[rln].level === activeValues.level && rowheads[rln].type !== 'grand sum') {\n                                                for (var _b = 0, colIndex_2 = colIndex; _b < colIndex_2.length; _b++) {\n                                                    var index = colIndex_2[_b];\n                                                    var currentSet = data[rln + valueCount][index];\n                                                    if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                        indexCollection.push([rln + valueCount, index]);\n                                                        if (pivotIndex[rln + valueCount + ',' + index]) {\n                                                            delete pivotIndex[rln + valueCount + ',' + index];\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                var uniqueLevelName = uniqueName.split(this.valueSortSettings.headerDelimiter);\n                                for (var rlt = rowheads.length, rlen = 0; rlen < rlt; rlen++) {\n                                    if (rowheads[rlen] !== undefined) {\n                                        var levelName = rowheads[rlen].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);\n                                        if (levelName.indexOf(uniqueLevelName[uniqueLevelName.length - 1]) !== -1 &&\n                                            rowheads[rlen].level === activeValues.level) {\n                                            for (var _c = 0, colIndex_3 = colIndex; _c < colIndex_3.length; _c++) {\n                                                var index = colIndex_3[_c];\n                                                var currentSet = data[rlen + valueCount][index];\n                                                if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                    indexCollection.push([rlen + valueCount, index]);\n                                                    if (pivotIndex[rlen + valueCount + ',' + index]) {\n                                                        delete pivotIndex[rlen + valueCount + ',' + index];\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            for (var _d = 0, indexCollection_2 = indexCollection; _d < indexCollection_2.length; _d++) {\n                                var index = indexCollection_2[_d];\n                                var currentSet = data[index[0]][index[1]];\n                                // let cVal: number = currentSet.value - (selectedRowValues[index[1]] as IAxisSet).value;\n                                var cVal = currentSet.actualValue - selectedRowValues[index[1]].actualValue;\n                                cVal = isNaN(cVal) ? 0 : (currentSet.value === 0 && selectedRowValues[index[1]].value === 0) ? 0 : cVal;\n                                if (!this.aggregatedValueMatrix[index[0]]) {\n                                    this.aggregatedValueMatrix[index[0]] = [];\n                                }\n                                if (aggregateType === 'DifferenceFrom') {\n                                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                                    currentSet.formattedText = cVal === 0 ? this.emptyCellTextContent : this.getFormattedValue(cVal, name_2).formattedText;\n                                }\n                                else {\n                                    // cVal = ((selectedRowValues[index[1]] as IAxisSet).value === 0 ?\n                                    // 0 : (cVal / (selectedRowValues[index[1]] as IAxisSet).value));\n                                    cVal = (selectedRowValues[index[1]].actualValue === 0 ?\n                                        0 : (cVal / selectedRowValues[index[1]].actualValue));\n                                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                                    currentSet.formattedText = currentSet.showSubTotals ? (cVal !== 0 ? this.globalize.formatNumber(cVal, { format: 'P', maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText) }) : this.emptyCellTextContent) : currentSet.formattedText;\n                                }\n                            }\n                        }\n                        else {\n                            if (!isChildren) {\n                                for (var _e = 0, selectedHeaderCollection_2 = selectedHeaderCollection; _e < selectedHeaderCollection_2.length; _e++) {\n                                    var item = selectedHeaderCollection_2[_e];\n                                    for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                                        var isSelectedColumn = false;\n                                        if (activeColumn[cln] !== undefined &&\n                                            activeColumn[cln].valueSort[item.valueSort.levelName] &&\n                                            activeColumn[cln].level === activeValues.level && activeColumn[cln].type !== 'grand sum') {\n                                            for (var _f = 0, rowindexCollection_1 = rowindexCollection; _f < rowindexCollection_1.length; _f++) {\n                                                var index = rowindexCollection_1[_f];\n                                                var currentSet = data[index][cln];\n                                                if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                    isSelectedColumn = true;\n                                                    indexCollection.push([index, cln]);\n                                                    if (pivotIndex[index + ',' + cln]) {\n                                                        delete pivotIndex[index + ',' + cln];\n                                                    }\n                                                }\n                                            }\n                                            if (isSelectedColumn) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                var uniqueLevelName = uniqueName.split(this.valueSortSettings.headerDelimiter);\n                                for (var clt = activeColumn.length, clen = 0; clen < clt; clen++) {\n                                    var isSelectedColumn = false;\n                                    if (activeColumn[clen] !== undefined) {\n                                        var levelName = activeColumn[clen].valueSort.levelName.split(this.valueSortSettings.headerDelimiter);\n                                        if (levelName.indexOf(uniqueLevelName[uniqueLevelName.length - 1]) !== -1 &&\n                                            activeColumn[clen].level === activeValues.level) {\n                                            for (var _g = 0, rowindexCollection_2 = rowindexCollection; _g < rowindexCollection_2.length; _g++) {\n                                                var index = rowindexCollection_2[_g];\n                                                var currentSet = data[index][clen];\n                                                if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                    isSelectedColumn = true;\n                                                    indexCollection.push([index, clen]);\n                                                    if (pivotIndex[index + ',' + clen]) {\n                                                        delete pivotIndex[index + ',' + clen];\n                                                    }\n                                                }\n                                            }\n                                            if (isSelectedColumn) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            var selectedColumn = void 0;\n                            if (selectedColumnValues.length === 0) {\n                                selectedColumn = this.getSelectedColumn(headers.uniqueName, colheads);\n                            }\n                            for (var _h = 0, indexCollection_3 = indexCollection; _h < indexCollection_3.length; _h++) {\n                                var index = indexCollection_3[_h];\n                                var currentSet = data[index[0]][index[1]];\n                                var selectedColumnValue = 0;\n                                if (selectedColumnValues.length === 0) {\n                                    var selectedRow = this.getSelectedRow(currentSet.rowHeaders, rowheads);\n                                    selectedColumnValue = this.getAggregateValue(selectedRow.index, selectedColumn.indexObject, this.fieldList[name_2].index, headers.type);\n                                }\n                                else {\n                                    selectedColumnValue = selectedColumnValues[index[0]].value;\n                                }\n                                var cVal = currentSet.value - selectedColumnValue;\n                                cVal = isNaN(cVal) ? 0 : cVal;\n                                if (!this.aggregatedValueMatrix[index[0]]) {\n                                    this.aggregatedValueMatrix[index[0]] = [];\n                                }\n                                if (aggregateType === 'DifferenceFrom') {\n                                    currentSet.formattedText = cVal === 0 ? this.emptyCellTextContent : this.getFormattedValue(cVal, name_2).formattedText;\n                                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                                }\n                                else {\n                                    cVal = (selectedColumnValues[index[0]].value === 0 ?\n                                        0 : (cVal / selectedColumnValues[index[0]].value));\n                                    currentSet.formattedText = (cVal !== 0 ? this.globalize.formatNumber(cVal, { format: 'P', maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText) }) : this.emptyCellTextContent);\n                                    this.aggregatedValueMatrix[index[0]][index[1]] = cVal;\n                                }\n                            }\n                        }\n                        if (headers.childMembers.length > 0) {\n                            this.updateAggregates(rowheads, colheads, data, headers.childMembers, colIndex, pivotIndex);\n                        }\n                    }\n                    break;\n                case 'PercentageOfParentRowTotal':\n                case 'PercentageOfParentColumnTotal':\n                case 'PercentageOfParentTotal':\n                    {\n                        if (isRowBaseField) {\n                            for (var _j = 0, selectedHeaderCollection_3 = selectedHeaderCollection; _j < selectedHeaderCollection_3.length; _j++) {\n                                var item = selectedHeaderCollection_3[_j];\n                                for (var rlt = rowheads.length, i = 0; i < rlt; i++) {\n                                    if (rowheads[i] !== undefined) {\n                                        if (rowheads[i].valueSort[item.valueSort.levelName] &&\n                                            rowheads[i].level === item.level) {\n                                            for (var _k = 0, colIndex_4 = colIndex; _k < colIndex_4.length; _k++) {\n                                                var index = colIndex_4[_k];\n                                                var currentSet = data[i + valueCount][index];\n                                                if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                    indexCollection.push([i + valueCount, index]);\n                                                    if (pivotIndex[i + valueCount + ',' + index]) {\n                                                        delete pivotIndex[i + valueCount + ',' + index];\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            for (var _l = 0, indexCollection_4 = indexCollection; _l < indexCollection_4.length; _l++) {\n                                var i = indexCollection_4[_l];\n                                var currentSet = data[i[0]][i[1]];\n                                // let cVal: number = currentSet.value / (selectedRowValues[i[1]] as IAxisSet).value;\n                                var selectedRowValue = 0;\n                                if (selectedRowValues.length === 0 && activeValues) {\n                                    selectedRowValue = this.getAggregateValue(activeValues.index, colheads[i[1] - 1].indexObject, this.fieldList[name_2].index, headers.type);\n                                }\n                                else {\n                                    selectedRowValue = selectedRowValues[i[1]].actualValue;\n                                }\n                                var cVal = currentSet.value / selectedRowValue;\n                                cVal = isNaN(cVal) ? 0 : cVal;\n                                currentSet.formattedText = currentSet.showSubTotals ? (cVal !== 0 ? this.globalize.formatNumber(cVal, { format: 'P', maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText) }) : this.emptyCellTextContent) : currentSet.formattedText;\n                                if (!this.aggregatedValueMatrix[i[0]]) {\n                                    this.aggregatedValueMatrix[i[0]] = [];\n                                }\n                                this.aggregatedValueMatrix[i[0]][i[1]] = cVal;\n                            }\n                        }\n                        else {\n                            for (var _m = 0, selectedHeaderCollection_4 = selectedHeaderCollection; _m < selectedHeaderCollection_4.length; _m++) {\n                                var item = selectedHeaderCollection_4[_m];\n                                for (var clt = activeColumn.length, j = 0; j < clt; j++) {\n                                    var isSelectedColumn = false;\n                                    if (activeColumn[j] !== undefined &&\n                                        activeColumn[j].valueSort[item.valueSort.levelName]) {\n                                        for (var _o = 0, rowindexCollection_3 = rowindexCollection; _o < rowindexCollection_3.length; _o++) {\n                                            var index = rowindexCollection_3[_o];\n                                            var currentSet = data[index][j];\n                                            if (currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                isSelectedColumn = true;\n                                                indexCollection.push([index, j]);\n                                                if (pivotIndex[index + ',' + j]) {\n                                                    delete pivotIndex[index + ',' + j];\n                                                }\n                                            }\n                                        }\n                                        if (isSelectedColumn) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            var selectedCol = void 0;\n                            if (selectedColumnValues.length === 0) {\n                                selectedCol = this.getSelectedColumn(headers.uniqueName, colheads);\n                            }\n                            for (var _p = 0, indexCollection_5 = indexCollection; _p < indexCollection_5.length; _p++) {\n                                var i = indexCollection_5[_p];\n                                var currentSet = data[i[0]][i[1]];\n                                var selectedColValue = 0;\n                                if (selectedColumnValues.length === 0) {\n                                    var selectedRow = this.getSelectedRow(currentSet.rowHeaders, rowheads);\n                                    selectedColValue = this.getAggregateValue(selectedRow.index, selectedCol.indexObject, this.fieldList[name_2].index, headers.type);\n                                }\n                                else {\n                                    selectedColValue = selectedColumnValues[i[0]].value;\n                                }\n                                var val = currentSet.value / selectedColValue;\n                                val = isNaN(val) ? 0 : val;\n                                currentSet.formattedText = (val !== 0 ? this.globalize.formatNumber(val, { format: 'P', maximumFractionDigits: this.getPercentFormat(this.formatFields, currentSet.actualText) }) : this.emptyCellTextContent);\n                                if (!this.aggregatedValueMatrix[i[0]]) {\n                                    this.aggregatedValueMatrix[i[0]] = [];\n                                }\n                                this.aggregatedValueMatrix[i[0]][i[1]] = val;\n                            }\n                        }\n                    }\n                    break;\n                case 'RunningTotals':\n                    {\n                        if (isRowBaseField) {\n                            for (var _q = 0, colIndex_5 = colIndex; _q < colIndex_5.length; _q++) {\n                                var index = colIndex_5[_q];\n                                var cVal = 0;\n                                for (var _r = 0, selectedHeaderCollection_5 = selectedHeaderCollection; _r < selectedHeaderCollection_5.length; _r++) {\n                                    var item = selectedHeaderCollection_5[_r];\n                                    for (var rlt = rowheads.length, rlen = 0; rlen < rlt; rlen++) {\n                                        if (rowheads[rlen] !== undefined) {\n                                            var currentSet = data[rlen + valueCount][index];\n                                            if (rowheads[rlen] !== undefined && rowheads[rlen].valueSort[item.valueSort.levelName] &&\n                                                rowheads[rlen].level === item.level && currentSet.axis === 'value' &&\n                                                currentSet.actualText === name_2) {\n                                                if (rowheads[rlen].type !== 'grand sum') {\n                                                    cVal += (!currentSet.showSubTotals && !(!isNullOrUndefined(currentSet.actualValue) && isNaN(currentSet.actualValue))) ? currentSet.actualValue : currentSet.value;\n                                                    currentSet.formattedText = currentSet.showSubTotals ? (cVal === 0 && (currentSet.actualValue && currentSet.actualValue !== 0) ? '' : this.getFormattedValue(cVal, name_2).formattedText) : currentSet.formattedText;\n                                                    if (!this.aggregatedValueMatrix[rlen + valueCount]) {\n                                                        this.aggregatedValueMatrix[rlen + valueCount] = [];\n                                                    }\n                                                    this.aggregatedValueMatrix[rlen + valueCount][index] = cVal;\n                                                }\n                                                if (pivotIndex[rlen + valueCount + ',' + index]) {\n                                                    delete pivotIndex[rlen + valueCount + ',' + index];\n                                                }\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            for (var rlt = rowheads.length, rln = 0; rln < rlt; rln++) {\n                                if (rowheads[rln] !== undefined) {\n                                    var cVal = 0;\n                                    for (var _s = 0, selectedHeaderCollection_6 = selectedHeaderCollection; _s < selectedHeaderCollection_6.length; _s++) {\n                                        var item = selectedHeaderCollection_6[_s];\n                                        for (var clt = activeColumn.length, cln = 0; cln < clt; cln++) {\n                                            var currentSet = data[rln + valueCount][cln];\n                                            if (activeColumn[cln] !== undefined &&\n                                                activeColumn[cln].valueSort[item.valueSort.levelName] &&\n                                                currentSet.axis === 'value' && currentSet.actualText === name_2) {\n                                                if (activeColumn[cln].type !== 'grand sum') {\n                                                    cVal += currentSet.value;\n                                                    currentSet.formattedText = this.getFormattedValue(cVal, name_2).formattedText;\n                                                    if (!this.aggregatedValueMatrix[rln + valueCount]) {\n                                                        this.aggregatedValueMatrix[rln + valueCount] = [];\n                                                    }\n                                                    this.aggregatedValueMatrix[rln + valueCount][cln] = cVal;\n                                                }\n                                                if (pivotIndex[rln + valueCount + ',' + cln]) {\n                                                    delete pivotIndex[rln + valueCount + ',' + cln];\n                                                }\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n            }\n        }\n    };\n    PivotEngine.prototype.getSelectedColumn = function (name, colheads) {\n        var set = { axis: 'column', index: [], indexObject: {} };\n        for (var _i = 0, colheads_1 = colheads; _i < colheads_1.length; _i++) {\n            var head = colheads_1[_i];\n            if (head && head.valueSort && head.valueSort.levelName.indexOf(name) === 0) {\n                set.index = set.index.concat(head.index).sort(function (a, b) { return a - b; });\n                set.indexObject = __assign({}, set.indexObject, head.indexObject);\n            }\n        }\n        return set;\n    };\n    PivotEngine.prototype.getSelectedRow = function (name, rowheads) {\n        for (var _i = 0, rowheads_1 = rowheads; _i < rowheads_1.length; _i++) {\n            var head = rowheads_1[_i];\n            if (head) {\n                if (head.valueSort && head.valueSort.levelName === name) {\n                    return head;\n                }\n                else if (name === '' && head.type === 'grand sum') {\n                    return head;\n                }\n            }\n        }\n        return null;\n    };\n    /* eslint-enable */\n    PivotEngine.prototype.recursiveRowData = function (rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, vln, rTotal, cTotal) {\n        if (!isLeastNode) {\n            this.getTableData(reformAxis[tnum - vln].members, reformAxis, columns, tnum, data, vlt, rTotal, cTotal);\n        }\n        if (!this.pageSettings) {\n            reformAxis[tnum - vln].members = [];\n        }\n    };\n    PivotEngine.prototype.updateRowData = function (rows, columns, tnum, data, vln, rln, cln, dln, actCnt, rTotal, cTotal) {\n        var mPos = this.fieldList[this.values[vln].name].index;\n        var aggregate = this.fieldList[this.values[vln].name].aggregateType;\n        var field = this.values[vln].name;\n        var gTotalIndex = [];\n        var totalValues = {};\n        var value = 0;\n        var actualValue = 0;\n        // let isLeast: boolean = isLeastNode && (vln === vlt - 1);\n        switch (aggregate) {\n            case 'Index':\n                {\n                    gTotalIndex = [[rows[rln], columns[cln]], [rows[rln], cTotal], [rTotal, columns[cln]], [rTotal, cTotal]];\n                    var valueContent = ['cVal', 'rTotalVal', 'cTotalVal', 'gTotalVal'];\n                    var i = 0;\n                    for (var _i = 0, gTotalIndex_1 = gTotalIndex; _i < gTotalIndex_1.length; _i++) {\n                        var rIndex = gTotalIndex_1[_i];\n                        totalValues[valueContent[i]] = this.getAggregateValue((rIndex[0]).index, (rIndex[1]).indexObject, mPos, aggregate);\n                        i++;\n                    }\n                    var val_1 = ((totalValues.cVal) * (totalValues.gTotalVal)) / ((totalValues.rTotalVal) * (totalValues.cTotalVal));\n                    value = (rows[rln].members.length > 0 && ((!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals) ||\n                        !this.showRowSubTotals || !this.showSubTotals)) ? undefined :\n                        (isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : (isNaN(val_1) ? 0 : val_1));\n                    actualValue = (isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : (isNaN(val_1) ? 0 : val_1));\n                }\n                break;\n            case 'PercentageOfGrandTotal':\n            case 'PercentageOfColumnTotal':\n            case 'PercentageOfRowTotal':\n                {\n                    gTotalIndex = [[rows[rln], columns[cln]]];\n                    gTotalIndex.push((aggregate === 'PercentageOfGrandTotal' ?\n                        [rTotal, cTotal] : (aggregate === 'PercentageOfColumnTotal' ? [rTotal, columns[cln]] : [rows[rln], cTotal])));\n                    var valueContent = ['cVal', 'gTotalVal'];\n                    var i = 0;\n                    for (var _a = 0, gTotalIndex_2 = gTotalIndex; _a < gTotalIndex_2.length; _a++) {\n                        var rIndex = gTotalIndex_2[_a];\n                        totalValues[valueContent[i]] = this.getAggregateValue((rIndex[0]).index, (rIndex[1]).indexObject, mPos, aggregate);\n                        i++;\n                    }\n                    var val_2 = ((totalValues.cVal) / (totalValues.gTotalVal));\n                    value = (rows[rln].members.length > 0 && ((!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals) ||\n                        !this.showSubTotals || !this.showRowSubTotals)) ? undefined :\n                        (isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : (isNaN(val_2) ? 0 : val_2));\n                    actualValue = (isNullOrUndefined(totalValues.cVal) ? totalValues.cVal : (isNaN(val_2) ? 0 : val_2));\n                }\n                break;\n            default:\n                var val = this.getAggregateValue(rows[rln].index, columns[cln].indexObject, mPos, aggregate);\n                value = (rows[rln].members.length > 0 && ((!isNullOrUndefined(rows[rln].showSubTotals) && !rows[rln].showSubTotals) ||\n                    !this.showSubTotals || !this.showRowSubTotals)) ? undefined : val;\n                actualValue = val;\n                break;\n        }\n        var cellDetails = {\n            fieldName: this.values[vln].name,\n            row: rows[rln],\n            column: columns[cln],\n            value: value,\n            cellSets: this.getCellSet(this.rawIndexObject),\n            rowCellType: (rows[rln].hasChild && rows[rln].isDrilled ? 'subTotal' : rows[rln].type === 'grand sum' ? 'grandTotal' : 'value'),\n            columnCellType: (columns[cln].hasChild && columns[cln].isDrilled ? 'subTotal' : columns[cln].type === 'grand sum' ? 'grandTotal' : 'value'),\n            aggregateType: aggregate,\n            skipFormatting: false\n        };\n        if (this.getValueCellInfo) {\n            this.getValueCellInfo(cellDetails);\n        }\n        value = cellDetails.value;\n        var isSum = rows[rln].hasChild || columns[cln].hasChild ||\n            rows[rln].type === 'grand sum' || columns[cln].type === 'grand sum';\n        var isGrand = rows[rln].type === 'grand sum' || columns[cln].type === 'grand sum';\n        var subTotal = (rows[rln].members.length > 0 && ((!isNullOrUndefined(rows[rln].showSubTotals) &&\n            !rows[rln].showSubTotals) || !this.showSubTotals || !this.showRowSubTotals));\n        var formattedText = subTotal ?\n            '' : (value === undefined) ? this.emptyCellTextContent :\n            (aggregate === 'Count' || aggregate === 'DistinctCount') ? value.toLocaleString() :\n                this.getFormattedValue(value, field).formattedText;\n        if (!isNaN(value) && !isNullOrUndefined(value) &&\n            (['PercentageOfGrandTotal', 'PercentageOfColumnTotal', 'PercentageOfRowTotal']).indexOf(aggregate) >= 0) {\n            formattedText = this.globalize.formatNumber(value, { format: 'P', maximumFractionDigits: this.getPercentFormat(this.formatFields, cellDetails.fieldName) });\n        }\n        else if (!subTotal &&\n            isNaN(value) && !isNullOrUndefined(value) &&\n            (['PopulationStDev', 'SampleStDev', 'PopulationVar', 'SampleVar']).indexOf(aggregate) !== -1) {\n            formattedText = '#DIV/0!';\n        }\n        //dln = data[tnum].length;\n        formattedText = (cellDetails.skipFormatting ? isNullOrUndefined(value) ?\n            this.emptyCellTextContent : value.toString() : formattedText);\n        data[tnum][dln] = this.valueContent[actCnt][dln] = {\n            axis: 'value', actualText: field, indexObject: this.isDrillThrough ? this.rawIndexObject : {},\n            rowHeaders: rows[rln].type === 'grand sum' ? '' : rows[rln].valueSort.levelName,\n            columnHeaders: columns[cln].type === 'grand sum' ? '' : columns[cln].valueSort.levelName,\n            formattedText: formattedText, value: isNullOrUndefined(value) ? 0 : value,\n            actualValue: isNullOrUndefined(actualValue) ? 0 : actualValue,\n            rowIndex: tnum, colIndex: dln, isSum: isSum, isGrandSum: isGrand, showSubTotals: !subTotal\n        };\n        this.rawIndexObject = {};\n    };\n    /* eslint-disable , @typescript-eslint/no-explicit-any */\n    PivotEngine.prototype.getCellSet = function (rawIndexObject) {\n        var currentCellSets = [];\n        var keys = Object.keys(rawIndexObject);\n        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {\n            var index = keys_3[_i];\n            if (this.data[parseInt(index, 10)]) {\n                currentCellSets.push(this.data[parseInt(index, 10)]);\n            }\n        }\n        return currentCellSets;\n    };\n    PivotEngine.prototype.getHeaderData = function (axis, reformAxis, data, tnum, vcnt) {\n        var rlt = axis.length;\n        var colItmLn = this.columns.length;\n        var sortText = this.valueSortSettings.headerText;\n        //let valueLn: number = this.values.length;\n        for (var rln = 0; rln < rlt; rln++) {\n            if (axis[rln].members.length) {\n                this.getHeaderData(axis[rln].members, reformAxis, data, tnum, vcnt);\n            }\n            var isTotalHide = true;\n            if ((!isNullOrUndefined(axis[rln].showSubTotals) && !axis[rln].showSubTotals) ||\n                !this.showSubTotals || !this.showColumnSubTotals) {\n                if (!(axis[rln].members.length > 0)) {\n                    reformAxis[reformAxis.length] = this.frameHeaderWithKeys(axis[rln]);\n                }\n                else {\n                    this.removeCount++;\n                    isTotalHide = false;\n                }\n                tnum = reformAxis.length - 1;\n            }\n            else {\n                tnum = reformAxis.length;\n                reformAxis[tnum] = this.frameHeaderWithKeys(axis[rln]);\n            }\n            //  let rplus: number = rln + 1;\n            var lvl = axis[rln].level;\n            axis[rln].rowIndex = lvl;\n            axis[rln].colIndex = (tnum * vcnt) + vcnt;\n            if (!data[lvl]) {\n                data[lvl] = [];\n                this.headerContent[lvl] = {};\n                data[lvl][(tnum * vcnt) + vcnt] = this.headerContent[lvl][(tnum * vcnt) + vcnt] = this.frameHeaderWithKeys(axis[rln]);\n            }\n            else {\n                data[lvl][(tnum * vcnt) + vcnt] = this.headerContent[lvl][(tnum * vcnt) + vcnt] = this.frameHeaderWithKeys(axis[rln]);\n            }\n            var isSingleMeasure = (this.columns.length === 0 && this.values.length === 1) ? true : false;\n            if ((this.isMutiMeasures || this.alwaysShowValueHeader || isSingleMeasure) && !this.valueAxis && isTotalHide) {\n                for (var vln = 0; vln < vcnt; vln++) {\n                    var name_3 = this.values[vln].caption ? this.values[vln].caption : this.values[vln].name;\n                    /* eslint-disable */\n                    var calObj = {\n                        axis: 'column',\n                        actualText: this.values[vln].name,\n                        formattedText: name_3,\n                        level: 0,\n                        valueSort: {},\n                        colIndex: (tnum * vcnt) + 1 + vln,\n                        rowIndex: colItmLn\n                    };\n                    /* eslint-enable */\n                    if (!data[colItmLn]) {\n                        data[colItmLn] = [];\n                        this.headerContent[colItmLn] = {};\n                        data[colItmLn][(tnum * vcnt) + 1 + vln] = this.headerContent[colItmLn][(tnum * vcnt) + 1 + vln] = calObj;\n                    }\n                    else {\n                        data[colItmLn][(tnum * vcnt) + 1 + vln] = this.headerContent[colItmLn][(tnum * vcnt) + 1 + vln] = calObj;\n                    }\n                    var vData = data[colItmLn][(tnum * vcnt) + 1 + vln].valueSort;\n                    vData[axis[rln].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_3] = 1;\n                    vData.levelName = axis[rln].valueSort.levelName + this.valueSortSettings.headerDelimiter + name_3;\n                    if (vData && vData[sortText]) {\n                        this.valueSortSettings.columnIndex = (tnum * vcnt) + 1 + vln;\n                    }\n                }\n            }\n            else if (axis[rln].valueSort && axis[rln].valueSort[sortText]) {\n                this.valueSortSettings.columnIndex = (tnum * vcnt) + 1;\n            }\n            if (!this.pageSettings) {\n                reformAxis[tnum].members = [];\n            }\n        }\n    };\n    /* eslint-disable */\n    PivotEngine.prototype.getAggregateValue = function (rowIndex, columnIndex, value, type) {\n        //rowIndex = rowIndex.sort();\n        //columnIndex = columnIndex.sort();\n        var rlt = rowIndex.length;\n        //let clt: number = columnIndex.length;\n        var mirror = {};\n        var ri = 0;\n        var ci = 0;\n        var cellValue = 0;\n        var avgCnt = 0;\n        var isInit = true;\n        var isValueExist = false;\n        switch (type.toLowerCase()) {\n            case 'median':\n                var values = [];\n                var position = 0;\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined) {\n                        isValueExist = true;\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        if (!isNullOrUndefined(this.valueMatrix[rowIndex[ri]][value])) {\n                            values.push(this.valueMatrix[rowIndex[ri]][value]);\n                        }\n                    }\n                    ri++;\n                }\n                var len = values.length;\n                if (len > 0) {\n                    values.sort(function (a, b) { return a - b; });\n                    if (len % 2 === 0) {\n                        position = (len / 2) <= 1 ? 0 : ((len / 2) - 1);\n                        cellValue = (values[position] + values[position + 1]) / 2;\n                    }\n                    else {\n                        position = (len + 1) / 2 <= 1 ? 0 : (((len + 1) / 2) - 1);\n                        cellValue = values[position];\n                    }\n                }\n                break;\n            case 'count':\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined) {\n                        isValueExist = true;\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        cellValue += (isNullOrUndefined(this.valueMatrix[rowIndex[ri]][value]) ?\n                            0 : (this.allowDataCompression ? this.valueMatrix[rowIndex[ri]][value] : 1));\n                    }\n                    ri++;\n                }\n                break;\n            case 'distinctcount':\n                var duplicateValues = [];\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined) {\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        isValueExist = true;\n                        var val_3 = (this.data[rowIndex[ri]][this.fieldKeys[this.fields[value]]]);\n                        var currentVal = void 0;\n                        // let currentVal: number = this.valueMatrix[rowIndex[ri]][value];\n                        if (!isNullOrUndefined(val_3)) {\n                            currentVal = val_3.toString();\n                            if (duplicateValues.length === 0 || (duplicateValues.length > 0 && duplicateValues.indexOf(currentVal) === -1)) {\n                                cellValue += (this.allowDataCompression && typeof val_3 === 'number') ? val_3 : 1;\n                                duplicateValues.push(currentVal);\n                            }\n                        }\n                    }\n                    ri++;\n                }\n                break;\n            case 'product':\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined) {\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        isValueExist = true;\n                        var currentVal = this.valueMatrix[rowIndex[ri]][value];\n                        if (!isNullOrUndefined(currentVal)) {\n                            cellValue = ((isInit || isNullOrUndefined(cellValue)) ? 1 : cellValue);\n                            cellValue *= currentVal;\n                        }\n                        else if (isInit) {\n                            cellValue = currentVal;\n                        }\n                        isInit = false;\n                    }\n                    ri++;\n                }\n                break;\n            case 'populationstdev':\n            case 'samplestdev':\n            case 'populationvar':\n            case 'samplevar':\n                var i = 0;\n                var val = 0;\n                var indexVal = [];\n                var avgVal = 0;\n                var cVal = 0;\n                var avgDifferenceVal = 0;\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined) {\n                        isValueExist = true;\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        var currentVal = this.valueMatrix[rowIndex[ri]][value];\n                        if (!isNullOrUndefined(currentVal)) {\n                            val += currentVal;\n                            indexVal.push(currentVal);\n                            i++;\n                        }\n                    }\n                    ri++;\n                }\n                if (i > 0) {\n                    avgVal = val / i;\n                    for (var _i = 0, indexVal_1 = indexVal; _i < indexVal_1.length; _i++) {\n                        var index = indexVal_1[_i];\n                        avgDifferenceVal += Math.pow((index - avgVal), 2);\n                    }\n                    if ((['populationstdev', 'samplestdev']).indexOf(type.toLowerCase()) !== -1) {\n                        cVal = Math.sqrt(avgDifferenceVal / (type.toLowerCase() === 'populationstdev' ? i : (i - 1)));\n                    }\n                    else {\n                        cVal = avgDifferenceVal / (type.toLowerCase() === 'populationvar' ? i : (i - 1));\n                    }\n                    cellValue = (cVal === 0 ? NaN : cVal);\n                }\n                else {\n                    cellValue = val;\n                }\n                break;\n            case 'min':\n                var isFirst = true;\n                cellValue = undefined;\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined && this.valueMatrix[rowIndex[ri]][value] !== undefined) {\n                        isValueExist = true;\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        if (isNullOrUndefined(cellValue) && isNullOrUndefined(this.valueMatrix[rowIndex[ri]][value])) {\n                            cellValue = this.valueMatrix[rowIndex[ri]][value];\n                        }\n                        else {\n                            if (isFirst) {\n                                cellValue = this.valueMatrix[rowIndex[ri]][value];\n                                isFirst = false;\n                            }\n                            else {\n                                cellValue = this.valueMatrix[rowIndex[ri]][value] < cellValue ? this.valueMatrix[rowIndex[ri]][value] : cellValue;\n                            }\n                        }\n                    }\n                    ri++;\n                }\n                break;\n            case 'max':\n                var isMaxFirst = true;\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined && this.valueMatrix[rowIndex[ri]][value] !== undefined) {\n                        isValueExist = true;\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        if (isMaxFirst) {\n                            cellValue = this.valueMatrix[rowIndex[ri]][value];\n                            isMaxFirst = false;\n                        }\n                        else {\n                            cellValue = this.valueMatrix[rowIndex[ri]][value] > cellValue ? this.valueMatrix[rowIndex[ri]][value] : cellValue;\n                        }\n                    }\n                    ri++;\n                }\n                break;\n            case 'calculatedfield':\n                isValueExist = true;\n                var calcField = this.calculatedFields[this.fields[value]];\n                var actualFormula = calcField.formula;\n                var aggregateField = {};\n                if (this.calculatedFormulas[calcField.name]) {\n                    var calculatedFormulas = this.calculatedFormulas[calcField.name];\n                    for (var len_8 = 0, lmt = calculatedFormulas.length; len_8 < lmt; len_8++) {\n                        var aggregatedValue = calculatedFormulas[len_8];\n                        var value_1 = aggregateField[aggregatedValue.formula];\n                        if (value_1 === undefined) {\n                            var type_1 = aggregatedValue.type;\n                            value_1 = this.getAggregateValue(rowIndex, columnIndex, aggregatedValue.index, type_1);\n                            aggregateField[aggregatedValue.formula] = value_1;\n                        }\n                        actualFormula = (actualFormula).replace(aggregatedValue.formula, String(value_1));\n                    }\n                }\n                cellValue = this.evaluate(actualFormula);\n                cellValue = (cellValue === Infinity || cellValue === -Infinity ? Infinity : (cellValue === undefined || isNaN(cellValue)) ? undefined : JSON.parse(String(cellValue)));\n                break;\n            default:\n                cellValue = undefined;\n                while (rowIndex[ri] !== undefined) {\n                    if (columnIndex[rowIndex[ri]] !== undefined) {\n                        isValueExist = true;\n                        this.rawIndexObject[rowIndex[ri]] = rowIndex[ri];\n                        //let cIndx: number = isLeastLevel ? columnIndex.splice(columnIndex.indexOf(rowIndex[ri]), 1)[0] : rowIndex[ri];\n                        var currentVal = this.valueMatrix[rowIndex[ri]][value];\n                        if (isNullOrUndefined(cellValue) && isNullOrUndefined(currentVal)) {\n                            cellValue = currentVal;\n                        }\n                        else {\n                            if (isNullOrUndefined(cellValue)) {\n                                cellValue = 0;\n                            }\n                            cellValue += (isNullOrUndefined(currentVal) ? 0 : currentVal);\n                        }\n                        if (!isNullOrUndefined(currentVal)) {\n                            avgCnt++;\n                        }\n                    }\n                    ri++;\n                }\n                break;\n        }\n        /* if (rlt > clt) {\n             this.makeMirrorObject(rowIndex, mirror);\n             while (columnIndex[ci] !== undefined) {\n                 if (mirror[columnIndex[ci]]) {\n                     let cIndx: number = isLeastLevel ? columnIndex.splice(ci, 1)[0] : columnIndex[ci];\n                     //rowIndex.splice\n                     sum += this.valueMatrix[cIndx][value];\n                 }\n                 ci++;\n             }\n         } else {\n             this.makeMirrorObject(columnIndex, mirror);\n             while (rowIndex[ri] !== undefined) {\n                 if (mirror[rowIndex[ri]]) {\n                     let cIndx: number = isLeastLevel ? columnIndex.splice(columnIndex.indexOf(rowIndex[ri]), 1)[0] : rowIndex[ri];\n                     sum += this.valueMatrix[rowIndex[ri]][value];\n                 }\n                 ri++;\n             }\n         } */\n        return ((type && type.toLowerCase() === 'avg' && cellValue !== 0 &&\n            !isNullOrUndefined(cellValue)) ? (cellValue / avgCnt) : isValueExist ? cellValue : undefined);\n    };\n    PivotEngine.prototype.evaluate = function (obj) {\n        return Function('\"use strict\";return (' + obj + ')')();\n    };\n    ;\n    /** hidden */\n    PivotEngine.prototype.getFormattedValue = function (value, fieldName) {\n        /* eslint-enable */\n        var commonValue = value === null ? (this.localeObj ? this.localeObj.getConstant('null') :\n            String(value)) : value === undefined ?\n            (this.localeObj ? (fieldName in this.groupingFields) ? this.localeObj.getConstant('groupOutOfRange') :\n                this.localeObj.getConstant('undefined') : String(value)) : value;\n        var formattedValue = {\n            formattedText: commonValue.toString(),\n            actualText: commonValue,\n            dateText: commonValue\n        };\n        if (this.formatFields[fieldName] && !isNullOrUndefined(value)) {\n            try {\n                var formatField = (this.formatFields[fieldName].properties ? //eslint-disable-line\n                    this.formatFields[fieldName].properties : this.formatFields[fieldName]); //eslint-disable-line\n                var formatSetting = extend({}, formatField, null, true);\n                delete formatSetting.name;\n                if (!formatSetting.minimumSignificantDigits && formatSetting.minimumSignificantDigits < 1) {\n                    delete formatSetting.minimumSignificantDigits;\n                }\n                if (!formatSetting.maximumSignificantDigits && formatSetting.maximumSignificantDigits < 1) {\n                    delete formatSetting.maximumSignificantDigits;\n                }\n                if (formatSetting.type) {\n                    formattedValue.formattedText = this.dateFormatFunction[fieldName].exactFormat(new Date(value));\n                    formattedValue.actualText = value;\n                }\n                else {\n                    delete formatSetting.type;\n                    if ((formatSetting.format) && !(this.formatRegex.test(formatSetting.format))) {\n                        var pattern = formatSetting.format.match(/^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/);\n                        var flag = true;\n                        if (isNullOrUndefined(formatSetting.minimumFractionDigits)) {\n                            delete formatSetting.minimumFractionDigits;\n                        }\n                        if (isNullOrUndefined(formatSetting.maximumFractionDigits)) {\n                            delete formatSetting.maximumFractionDigits;\n                        }\n                        if (isNullOrUndefined(formatSetting.minimumIntegerDigits)) {\n                            delete formatSetting.minimumIntegerDigits;\n                        }\n                        if (isNullOrUndefined(pattern)) {\n                            pattern = formatSetting.format.match(/^(('[^']+'|''|[^*@0])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@,.E])*)$/);\n                            delete formatSetting.useGrouping;\n                            flag = false;\n                        }\n                        if (pattern && pattern.length > 5) {\n                            var integerPart = pattern[6];\n                            if (flag) {\n                                formatSetting.useGrouping = integerPart.indexOf(',') !== -1;\n                            }\n                            var decimalPart = pattern[5];\n                            if (isBlazor() && decimalPart && decimalPart.indexOf('.') !== -1 && formatSetting.maximumFractionDigits) {\n                                delete formatSetting.maximumFractionDigits;\n                            }\n                        }\n                    }\n                    formattedValue.formattedText =\n                        this.globalize.formatNumber(!isNaN(Number(value)) ? Number(value) : value, formatSetting);\n                    formattedValue.actualText = !isNaN(Number(value)) ? Number(value) : value;\n                    formattedValue.dateText = !isNaN(Number(value)) ? Number(value) : value;\n                }\n                if (this.fieldList[fieldName].sort !== 'None' && formatSetting.type &&\n                    ['date', 'dateTime', 'time'].indexOf(this.formatFields[fieldName].type) > -1) {\n                    formattedValue.dateText = this.dateFormatFunction[fieldName].fullFormat(new Date(value));\n                }\n                if (this.fieldList[fieldName].isCustomField) {\n                    formattedValue.formattedText = formattedValue.formattedText === 'NaN' ?\n                        commonValue.toString() : formattedValue.formattedText;\n                    formattedValue.dateText = formattedValue.dateText === 'NaN' ?\n                        commonValue.toString() : formattedValue.dateText;\n                }\n            }\n            catch (exception) {\n                if (!this.fieldList[fieldName].isCustomField) {\n                    throw exception;\n                }\n            }\n            finally {\n                if (this.fieldList[fieldName].isCustomField) {\n                    formattedValue.formattedText =\n                        (isNullOrUndefined(formattedValue.formattedText) || formattedValue.formattedText === 'NaN') ?\n                            commonValue.toString() : formattedValue.formattedText;\n                    formattedValue.dateText = (isNullOrUndefined(formattedValue.dateText) || formattedValue.dateText === 'NaN') ?\n                        commonValue.toString() : formattedValue.dateText;\n                }\n            }\n        }\n        return formattedValue;\n    };\n    /* eslint-disable */\n    PivotEngine.prototype.powerFunction = function (formula) {\n        if (formula.indexOf('^') > -1) {\n            var items_1 = [];\n            while (formula.indexOf('(') > -1) {\n                formula = formula.replace(/(\\([^\\(\\)]*\\))/g, function (text, item) {\n                    items_1.push(item);\n                    return ('~' + (items_1.length - 1));\n                });\n            }\n            /* eslint-enable */\n            items_1.push(formula);\n            formula = '~' + (items_1.length - 1);\n            while (formula.indexOf('~') > -1) {\n                formula = formula.replace(new RegExp('~' + '(\\\\d+)', 'g'), function (text, index) {\n                    return items_1[index].replace(/(\\w*)\\^(\\w*)/g, 'Math.pow' + '($1,$2)');\n                });\n            }\n        }\n        return formula;\n    };\n    return PivotEngine;\n}());\nexport { PivotEngine };\n"]},"metadata":{},"sourceType":"module"}