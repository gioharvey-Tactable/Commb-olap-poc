{"ast":null,"code":"import { extend, Internationalization, isNullOrUndefined, Ajax } from '@syncfusion/ej2-base';\nimport { PivotUtil } from '../util';\nimport { MDXQuery } from './mdx-query';\nimport * as cls from '../../common/base/css-constant';\n/**\n * OlapEngine is used to manipulate the olap or Multi-Dimensional data as pivoting values.\n */\n\n/** @hidden */\n\nvar OlapEngine = function () {\n  function OlapEngine() {\n    /** @hidden */\n    this.fieldList = {};\n    /** @hidden */\n\n    this.columnCount = 0;\n    /** @hidden */\n\n    this.rowCount = 0;\n    /** @hidden */\n\n    this.colFirstLvl = 0;\n    /** @hidden */\n\n    this.rowFirstLvl = 0;\n    /** @hidden */\n\n    this.pageColStartPos = 0;\n    /** @hidden */\n\n    this.enableSort = false;\n    /** @hidden */\n\n    this.enableValueSorting = false;\n    /** @hidden */\n\n    this.dataFields = {};\n    /** @hidden */\n\n    this.formatFields = {};\n    /** @hidden */\n\n    this.filterMembers = {};\n    /** @hidden */\n\n    this.drilledSets = {};\n    /** @hidden */\n\n    this.aggregatedValueMatrix = [];\n    this.mappingFields = {};\n    this.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    this.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n    /** @hidden */\n\n    this.pivotValues = [];\n    /** @hidden */\n\n    this.valueContent = [];\n    /** @hidden */\n\n    this.headerContent = [];\n    /** @hidden */\n\n    this.rowStartPos = 0;\n    /** @hidden */\n\n    this.pageRowStartPos = 0;\n    /** @hidden */\n\n    this.tupColumnInfo = [];\n    /** @hidden */\n\n    this.tupRowInfo = [];\n    /** @hidden */\n\n    this.gridJSON = '';\n    /** @hidden */\n\n    this.namedSetsPosition = {};\n    this.colDepth = 0;\n    this.totalCollection = [];\n    this.parentObjCollection = {};\n    this.curDrillEndPos = -1;\n    /* eslint-disable */\n\n    this.headerGrouping = {};\n    /* eslint-enable */\n\n    this.lastLevel = [];\n    this.showRowSubTotals = true;\n    this.showColumnSubTotals = true;\n    this.hideRowTotalsObject = {};\n    this.hideColumnTotalsObject = {};\n    this.sortObject = {};\n    this.isColDrill = false;\n  } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  OlapEngine.prototype.renderEngine = function (dataSourceSettings, customProperties) {\n    this.isEmptyData = false;\n    this.mdxQuery = '';\n    this.isMeasureAvail = false;\n    this.allowMemberFilter = false;\n    this.allowLabelFilter = false;\n    this.allowValueFilter = false;\n    this.isMondrian = false;\n    this.aggregatedValueMatrix = [];\n    this.measureReportItems = [];\n    this.calcChildMembers = [];\n    this.selectedItems = [];\n    this.savedFieldList = undefined;\n    this.savedFieldListData = undefined;\n    this.formatFields = {};\n    this.filterMembers = {};\n    this.dataFields = {};\n    this.valueAxis = '';\n    this.columnCount = 0;\n    this.rowCount = 0;\n    this.colFirstLvl = 0;\n    this.rowFirstLvl = 0;\n    this.pageColStartPos = 0;\n    this.enableValueSorting = false;\n    this.sortObject = {};\n    this.globalize = new Internationalization();\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n\n    this.locale = this.globalize.getCulture();\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n\n    this.localeObj = customProperties ? customProperties.localeObj : undefined;\n    this.enableValueSorting = customProperties ? customProperties.enableValueSorting : false;\n\n    if (dataSourceSettings.url) {\n      // this.isMondrian = (dataSourceSettings.providerType === 'mondrian');\n      this.dataSourceSettings = dataSourceSettings;\n      this.valueAxis = dataSourceSettings.valueAxis === 'row' ? 'row' : 'column';\n      this.getAxisFields();\n      this.formats = dataSourceSettings.formatSettings ? dataSourceSettings.formatSettings : [];\n      this.enableSort = dataSourceSettings.enableSorting === undefined ? true : dataSourceSettings.enableSorting;\n      this.valueSortSettings = dataSourceSettings.valueSortSettings ? dataSourceSettings.valueSortSettings : undefined;\n      this.filterSettings = dataSourceSettings.filterSettings ? dataSourceSettings.filterSettings : [];\n      this.sortSettings = dataSourceSettings.sortSettings ? dataSourceSettings.sortSettings : [];\n      this.allowMemberFilter = dataSourceSettings.allowMemberFilter ? true : false;\n      this.allowLabelFilter = dataSourceSettings.allowLabelFilter ? true : false;\n      this.allowValueFilter = dataSourceSettings.allowValueFilter ? true : false;\n      this.drilledMembers = dataSourceSettings.drilledMembers ? this.updateDrilledItems(dataSourceSettings.drilledMembers) : [];\n      this.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];\n      this.emptyCellTextContent = dataSourceSettings.emptyCellsTextContent ? dataSourceSettings.emptyCellsTextContent : '';\n      this.pageSettings = customProperties ? customProperties.pageSettings ? customProperties.pageSettings : this.pageSettings : undefined;\n      this.isPaging = this.pageSettings ? true : false;\n      this.frameSortObject();\n      this.getFormattedFields(this.formats);\n      this.savedFieldList = customProperties ? customProperties.savedFieldList : undefined;\n      this.savedFieldListData = customProperties ? customProperties.savedFieldListData : undefined;\n      this.fieldListData = [];\n      this.fieldListObj = {};\n      this.setNamedSetsPosition();\n\n      if (!(this.savedFieldList && this.savedFieldListData)) {\n        this.getFieldList(dataSourceSettings);\n      } else {\n        this.updateFieldlist(true);\n      }\n\n      this.loadCalculatedMemberElements(this.calculatedFieldSettings);\n      this.measureReportItems = []; // this.updateAllMembers(dataSourceSettings, this.filters);\n\n      this.updateFilterItems(this.filterSettings);\n      this.generateGridData(dataSourceSettings);\n    }\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  OlapEngine.prototype.generateGridData = function (dataSourceSettings, action) {\n    var refPaging = action && action === 'navPaging' && this.isPaging && this.pageSettings !== undefined ? true : false;\n\n    if (this.rows.length > 0 || this.columns.length > 0 || this.values.length > 0 || this.filters.length > 0) {\n      MDXQuery.getCellSets(dataSourceSettings, this, refPaging);\n    } else {\n      MDXQuery.getCellSets(dataSourceSettings, this, true, undefined, true);\n      this.generateEngine(undefined, undefined, {\n        dataSourceSettings: dataSourceSettings,\n        action: 'loadTableElements'\n      });\n    }\n  };\n\n  OlapEngine.prototype.generatePagingData = function (xmlDoc, request, customArgs) {\n    var xmlaCellSet = [].slice.call(xmlDoc.querySelectorAll('Axes, CellData')); // this.rowCount =\n    //     (xmlaCellSet.length > 0 && [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis1\"] Tuple')).length > 0 ?\n    //         [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis1\"] Tuple')).length : 0);\n    // this.columnCount =\n    //     (xmlaCellSet.length > 0 && [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis0\"] Tuple')).length > 0 ?\n    //         [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis0\"] Tuple')).length : 0);\n\n    var countCells = xmlaCellSet[1] ? xmlaCellSet[1].querySelectorAll('FmtValue') : null;\n\n    if (countCells && countCells.length > 0) {\n      this.columnCount = Number(countCells[0].textContent);\n      this.rowCount = Number(countCells[1].textContent);\n    }\n\n    var dataSourceSettings = customArgs.dataSourceSettings;\n    MDXQuery.getCellSets(dataSourceSettings, this, true);\n  };\n  /* eslint-disable */\n\n\n  OlapEngine.prototype.scrollPage = function (direction, newPage, prevPage) {\n    MDXQuery.getCellSets(this.dataSourceSettings, this, true);\n  };\n  /* eslint-enable */\n\n\n  OlapEngine.prototype.generateEngine = function (xmlDoc, request, customArgs) {\n    if (customArgs.action !== 'down') {\n      this.pivotValues = [];\n      this.valueContent = [];\n      this.headerContent = [];\n      this.colDepth = 0;\n      this.tupColumnInfo = [];\n      this.tupRowInfo = [];\n      this.colMeasures = {};\n      this.colMeasurePos = undefined;\n      this.rowMeasurePos = undefined;\n      this.rowStartPos = -1;\n    }\n\n    this.xmlDoc = xmlDoc ? xmlDoc.cloneNode(true) : undefined;\n    this.request = request;\n    this.customArgs = customArgs;\n    this.totalCollection = [];\n    this.parentObjCollection = {};\n    this.curDrillEndPos = -1;\n    this.onDemandDrillEngine = [];\n    this.getSubTotalsVisibility();\n    this.xmlaCellSet = xmlDoc ? xmlDoc.querySelectorAll('Axes, CellData') : undefined;\n    var columnTuples = this.xmlaCellSet && this.xmlaCellSet.length > 0 ? [].slice.call(this.xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis0\"] Tuple')) : [];\n    var rowTuples = this.xmlaCellSet && this.xmlaCellSet.length > 0 ? [].slice.call(this.xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis1\"] Tuple')) : [];\n    var valCollection = this.xmlaCellSet && this.xmlaCellSet.length > 1 ? [].slice.call(this.xmlaCellSet[1].querySelectorAll('Cell')) : [];\n\n    if (this.drilledMembers.length > 0) {\n      // let st1: number = new Date().getTime();\n      var measureInfo = this.getMeasureInfo();\n      var orderedInfo = void 0;\n      orderedInfo = this.frameMeasureOrder(measureInfo, 'column', columnTuples, valCollection, columnTuples.length);\n      columnTuples = orderedInfo.orderedHeaderTuples;\n      valCollection = orderedInfo.orderedValueTuples;\n      orderedInfo = this.frameMeasureOrder(measureInfo, 'row', rowTuples, valCollection, columnTuples.length);\n      rowTuples = orderedInfo.orderedHeaderTuples;\n      valCollection = orderedInfo.orderedValueTuples; // let st2: number = (new Date().getTime() - st1) / 1000;\n      // console.log('over-all:' + st2);\n    }\n\n    if (customArgs.action === 'down') {\n      this.updateTupCollection(customArgs.drillInfo.axis === 'row' ? rowTuples.length : columnTuples.length);\n    }\n\n    if (customArgs.action === 'down' ? customArgs.drillInfo.axis === 'column' : true) {\n      this.frameColumnHeader(columnTuples);\n\n      if (!this.isPaging) {\n        this.performColumnSorting();\n      }\n    }\n\n    if (customArgs.action === 'down' ? customArgs.drillInfo.axis === 'row' : true) {\n      this.frameRowHeader(rowTuples);\n\n      if (!this.isPaging) {\n        this.performRowSorting();\n      }\n    }\n\n    this.frameValues(valCollection, columnTuples.length);\n    this.performColumnSpanning();\n\n    if (!this.isPaging && this.enableSort) {\n      for (var i = 0; i < this.headerContent.length; i++) {\n        this.headerContent[i] = this.pivotValues[i];\n      }\n    }\n\n    this.isEngineUpdated = true;\n    this.isEmptyData = columnTuples.length === 0; //this.append(columnTuples.length);\n  };\n\n  OlapEngine.prototype.getSubTotalsVisibility = function () {\n    this.showRowSubTotals = this.dataSourceSettings.showRowSubTotals && this.dataSourceSettings.showSubTotals;\n    this.showColumnSubTotals = this.dataSourceSettings.showColumnSubTotals && this.dataSourceSettings.showSubTotals;\n    this.hideRowTotalsObject = {};\n    this.hideColumnTotalsObject = {};\n    var axisCount = 1;\n\n    do {\n      if (axisCount === 1) {\n        if (this.showColumnSubTotals) {\n          for (var cCnt = 0; cCnt < this.dataSourceSettings.columns.length; cCnt++) {\n            if (this.dataSourceSettings.columns[cCnt].showSubTotals === false) {\n              this.hideColumnTotalsObject[this.dataSourceSettings.columns[cCnt].name] = cCnt;\n            }\n          }\n        }\n      } else {\n        if (this.showRowSubTotals) {\n          for (var rCnt = 0; rCnt < this.dataSourceSettings.rows.length; rCnt++) {\n            if (this.dataSourceSettings.rows[rCnt].showSubTotals === false) {\n              this.hideRowTotalsObject[this.dataSourceSettings.rows[rCnt].name] = rCnt;\n            }\n          }\n        }\n      }\n\n      axisCount++;\n    } while (axisCount < 3);\n  };\n  /* eslint-disable  */\n\n\n  OlapEngine.prototype.frameRowHeader = function (tuples) {\n    this.headerGrouping = {};\n    this.lastLevel = [];\n    var position = this.pivotValues.length;\n    var pivotValues = [];\n    var valueContent = [];\n\n    if (this.customArgs.action !== 'down') {\n      pivotValues = this.pivotValues;\n      valueContent = this.valueContent;\n    } else {\n      position = this.customArgs.drillInfo.currentCell.rowIndex + 1;\n    }\n\n    this.rowStartPos = this.rowStartPos > 0 ? this.rowStartPos : position;\n    var tupPos = 0;\n    var lastAllStartPos;\n    var lastAllCount;\n    var prevUNArray = [];\n    var allType = {};\n    var rowMembers = [];\n    var availAllMember = false;\n    var withoutAllStartPos = -1;\n    var withoutAllEndPos = -1;\n    var minLevel = [];\n    var gTotals = [{\n      axis: 'row',\n      colIndex: 0,\n      formattedText: 'Grand Total',\n      hasChild: false,\n      level: -1,\n      rowIndex: 0,\n      index: [],\n      type: 'grand sum',\n      ordinal: 0,\n      colSpan: 1,\n      rowSpan: 1,\n      memberType: 2,\n      isDrilled: false,\n      valueSort: {\n        'Grand Total': 1,\n        levelName: 'Grand Total'\n      }\n    }];\n    var maxLevel = [];\n    var measurePos;\n    var newTupPosition = this.customArgs.drillInfo && this.customArgs.drillInfo.axis === 'row' ? this.customArgs.drillInfo.currentCell.ordinal + 1 : 0;\n\n    while (tupPos < tuples.length) {\n      var members = tuples[tupPos].querySelectorAll('Member');\n      maxLevel = this.frameTupCollection(members, maxLevel, tupPos + newTupPosition, this.tupRowInfo, this.showRowSubTotals, this.hideRowTotalsObject, 'row');\n      tupPos++;\n    }\n\n    tupPos = 0;\n    var prevTupInfo;\n    var tuplesLength = tuples.length;\n\n    if (this.customArgs.action === 'down') {\n      var ordinal = this.customArgs.drillInfo.currentCell.ordinal + 1;\n      tupPos = ordinal;\n      tuplesLength += ordinal;\n      lastAllCount = this.tupRowInfo[ordinal - 1].allCount;\n      lastAllStartPos = this.tupRowInfo[ordinal - 1].allStartPos;\n      prevTupInfo = this.tupRowInfo[ordinal - 1];\n    }\n\n    var startTupPos = tupPos;\n    var pagingAllowFlag = true;\n    var lastMesPos = 0;\n\n    while (tupPos < tuplesLength && pagingAllowFlag) {\n      var members = tuples[this.customArgs.action === 'down' ? tupPos - (this.customArgs.drillInfo.currentCell.ordinal + 1) : tupPos].querySelectorAll('Member');\n      var memPos = 0;\n      var prevParent = void 0;\n      var allCount = this.tupRowInfo[tupPos].allCount;\n      var allStartPos = this.tupRowInfo[tupPos].allStartPos;\n      var measure = this.tupRowInfo[tupPos].measure;\n      var typeColl = this.tupRowInfo[tupPos].typeCollection;\n      var drillInfo = this.tupRowInfo[tupPos].drillInfo;\n      var drillStartPos = this.tupRowInfo[tupPos].drillStartPos;\n      var startDrillUniquename = this.tupRowInfo[tupPos].startDrillUniquename;\n      var drillEndPos = this.tupRowInfo[tupPos].drillEndPos;\n      var levelColl = this.tupRowInfo[tupPos].levelCollection;\n\n      if (tupPos === 0 || tupPos === startTupPos) {\n        var firstTupMembers = this.customArgs.action === 'down' ? this.tupRowInfo[0].members : members;\n\n        while (memPos < firstTupMembers.length) {\n          if (firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '1' && Number(firstTupMembers[memPos].querySelector('LNum').textContent) === 0) {\n            minLevel[memPos] = 0;\n          } else {\n            minLevel[memPos] = Number(firstTupMembers[memPos].querySelector('LNum').textContent);\n          } // if (firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '1' &&\n          //   (this.isPaging || Number(firstTupMembers[memPos].querySelector('LNum').textContent) === 0)) {\n\n\n          if (firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '1') {\n            allType[memPos] = 0;\n            withoutAllStartPos = withoutAllStartPos === -1 ? memPos : withoutAllStartPos;\n            withoutAllEndPos = memPos;\n          } else {\n            allType[memPos] = 1;\n            availAllMember = firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '3' ? availAllMember : true;\n          }\n\n          memPos++;\n        }\n\n        measurePos = typeColl.indexOf('3');\n      }\n\n      memPos = 0;\n\n      if (tupPos === 0 && (members.length > allCount + (measure ? 1 : 0) || members.length === 1 && measure)) {\n        gTotals.pop();\n      }\n\n      if (tupPos === 0 && this.isPaging ? gTotals.length === 0 : !availAllMember || allCount === lastAllCount || allStartPos !== lastAllStartPos || members.length === 1 && measure) {\n        var attrDrill = this.checkAttributeDrill(this.tupRowInfo[tupPos].drillInfo, 'rows');\n        var drillAllow = drillStartPos > -1 ? allCount > 0 ? attrDrill || allStartPos > drillStartPos : true : true;\n        drillAllow = prevTupInfo && drillAllow && drillStartPos > -1 ? prevTupInfo.startDrillUniquename !== startDrillUniquename ? true : (withoutAllEndPos > prevTupInfo.measurePosition ? false : prevTupInfo.measureName !== this.tupRowInfo[tupPos].measureName) && (allStartPos === drillStartPos + 1 || this.tupRowInfo[tupPos].measurePosition === drillStartPos + 1) : drillAllow;\n        var withoutAllAllow = withoutAllStartPos > -1 && allCount > 0 ? attrDrill || allStartPos > withoutAllEndPos : true;\n\n        if (members.length === allCount + (measure ? 1 : 0) && measure) {\n          var levelName = 'Grand Total.' + members[measurePos].querySelector('Caption').textContent;\n          gTotals.push({\n            axis: 'row',\n            actualText: this.getUniqueName(members[measurePos].querySelector('UName').textContent),\n            colIndex: 0,\n            formattedText: typeColl[measurePos] === '3' && this.dataFields[this.getUniqueName(members[measurePos].querySelector('UName').textContent)] && this.dataFields[this.getUniqueName(members[measurePos].querySelector('UName').textContent)].caption ? this.dataFields[this.getUniqueName(members[measurePos].querySelector('UName').textContent)].caption : members[measurePos].querySelector('Caption').textContent,\n            hasChild: false,\n            level: -1,\n            rowIndex: position,\n            index: [],\n            ordinal: tupPos,\n            colSpan: 1,\n            rowSpan: 1,\n            memberType: Number(typeColl[measurePos]),\n            isDrilled: false,\n            parentUniqueName: members[measurePos].querySelector('PARENT_UNIQUE_NAME') ? members[measurePos].querySelector('PARENT_UNIQUE_NAME').textContent : undefined,\n            levelUniqueName: members[measurePos].querySelector('LName').textContent,\n            hierarchy: members[measurePos].getAttribute('Hierarchy'),\n            valueSort: {\n              levelName: levelName,\n              axis: members[measurePos].getAttribute('Hierarchy')\n            }\n          });\n          gTotals[gTotals.length - 1].valueSort['Grand Total.' + members[measurePos].querySelector('Caption').textContent] = 1;\n        } else if (!(allStartPos === 0 || measurePos === 0 && allStartPos === 1) && drillAllow && withoutAllAllow) {\n          prevTupInfo = this.tupRowInfo[tupPos];\n          var lastPos = position;\n          var lastMemPos = memPos;\n          prevParent = {};\n          var withoutAllDrilled = false;\n\n          while (memPos < members.length && pagingAllowFlag) {\n            var member = members[memPos];\n\n            if (member.querySelector('UName').textContent !== prevUNArray[memPos] && typeColl[memPos] !== '2' && ((Object.keys(prevParent).length > 0 ? prevParent.isDrilled && !this.fieldList[prevParent.hierarchy].isHierarchy : withoutAllDrilled) ? typeColl[memPos] === '3' && allType[memPos - 1] && allType[memPos + 1] !== 0 : true)) {\n              var lvl = Number(member.querySelector('LNum').textContent) - (allType[memPos] && typeColl[memPos] !== '3' ? 1 : minLevel[memPos]);\n              var isNamedSet = this.namedSetsPosition['row'][memPos] ? true : false;\n              var uniqueName = this.getUniqueName(member.querySelector('UName').textContent);\n              var depth = this.getDepth(this.tupRowInfo[tupPos], uniqueName, Number(typeColl[memPos]));\n\n              if (!(this.isPaging && pivotValues[lastMesPos][0] && this.fieldList[pivotValues[lastMesPos][0].hierarchy] && this.fieldList[pivotValues[lastMesPos][0].hierarchy].isHierarchy && pivotValues[lastMesPos][0].hasChild && !pivotValues[lastMesPos][0].isDrilled && !this.rows[memPos].isNamedSet && (this.rows[memPos].name.indexOf('[Measures]') === 0 || this.fieldList[member.getAttribute('Hierarchy')] && (this.fieldList[member.getAttribute('Hierarchy')].isHierarchy || this.fieldList[member.getAttribute('Hierarchy')].hasAllMember)) && pivotValues[lastMesPos][0].depth < depth)) {\n                pivotValues[position] = [{\n                  axis: 'row',\n                  actualText: uniqueName,\n                  colIndex: 0,\n                  formattedText: typeColl[memPos] === '3' && this.dataFields[uniqueName] && this.dataFields[uniqueName].caption ? this.dataFields[uniqueName].caption : member.querySelector('Caption').textContent,\n                  hasChild: this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && memPos < this.rows.length - 1 && !this.rows[memPos + 1].isNamedSet && this.rows[memPos + 1].name.indexOf('[Measures]') < 0 && this.fieldList[this.rows[memPos + 1].name] && this.fieldList[this.rows[memPos + 1].name].hasAllMember ? true : Number(member.querySelector('CHILDREN_CARDINALITY').textContent) > 0 ? true : false,\n                  level: lvl,\n                  depth: depth,\n                  rowIndex: position,\n                  index: [],\n                  ordinal: tupPos,\n                  type: 'header',\n                  colSpan: 1,\n                  rowSpan: 1,\n                  memberType: Number(typeColl[memPos]),\n                  isDrilled: this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && !this.isAttributeDrill(member.getAttribute('Hierarchy'), this.tupRowInfo[tupPos].drillInfo, 'rows') ? true : this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled,\n                  parentUniqueName: member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : undefined,\n                  levelUniqueName: member.querySelector('LName').textContent,\n                  hierarchy: member.getAttribute('Hierarchy'),\n                  isNamedSet: isNamedSet,\n                  valueSort: {\n                    levelName: '',\n                    axis: member.getAttribute('Hierarchy')\n                  }\n                }];\n                prevParent = typeColl[memPos] !== '3' ? pivotValues[position][0] : prevParent;\n\n                if (!prevParent) {\n                  rowMembers.push(member.querySelector('Caption').textContent);\n                }\n\n                var levelName = this.getCaptionCollectionWithMeasure(this.tupRowInfo[tupPos]);\n                pivotValues[position][0].valueSort.levelName = levelName;\n                pivotValues[position][0].valueSort[levelName] = 1;\n                valueContent[position - this.rowStartPos] = {};\n                valueContent[position - this.rowStartPos][0] = pivotValues[position][0];\n\n                if (measure && measurePos > memPos) {\n                  prevUNArray[measurePos] = '';\n                }\n\n                for (var pos = memPos + 1; pos < members.length; pos++) {\n                  prevUNArray[pos] = '';\n                }\n\n                prevUNArray[memPos] = member.querySelector('UName').textContent;\n                lastMesPos = Number(typeColl[memPos]) !== 3 ? position : lastMesPos;\n                position++;\n                lastMemPos = memPos;\n              }\n            } else if (typeColl[memPos] === '2') {\n              lastMemPos = memPos;\n            } else {\n              if (this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled && allType[memPos] === 0) {\n                withoutAllDrilled = true;\n              }\n            }\n\n            if (this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled && this.tupRowInfo[tupPos].showTotals) {\n              this.tupRowInfo[tupPos].showTotals = !this.showRowSubTotals ? false : this.hideRowTotalsObject[this.tupRowInfo[tupPos].drillInfo[memPos].hierarchy] === undefined;\n            }\n\n            memPos++;\n          }\n\n          if (lastPos < position && lastMemPos >= members.length - 1) {\n            pivotValues[position - 1][0].ordinal = tupPos;\n\n            if (pivotValues[position - 1][0].type === 'header') {\n              delete pivotValues[position - 1][0].type;\n            }\n          }\n        }\n\n        lastAllCount = allCount;\n        lastAllStartPos = allStartPos;\n      }\n\n      tupPos++;\n    }\n\n    if (gTotals.length > 1 && gTotals[0].memberType !== 3) {\n      gTotals[0].ordinal = -1;\n    } // if (!(this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals)) {\n    //     for (let totPos: number = 0; totPos < gTotals.length; totPos++) {\n    //         if (this.tupRowInfo[gTotals[totPos].ordinal]) {\n    //             this.tupRowInfo[gTotals[totPos].ordinal].showTotals = false;\n    //         }\n    //     }\n    // }\n\n\n    if (this.customArgs.action !== 'down') {\n      if (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals) {\n        for (var totPos = 0; totPos < gTotals.length; totPos++) {\n          gTotals[totPos].rowIndex = position;\n          pivotValues[position] = [gTotals[totPos]];\n          valueContent[position - this.rowStartPos] = {};\n          valueContent[position - this.rowStartPos][0] = pivotValues[position][0];\n          position++;\n        }\n      }\n    } else {\n      this.updateRowEngine(pivotValues, valueContent, tuples.length);\n      this.onDemandDrillEngine = pivotValues;\n    }\n  };\n\n  OlapEngine.prototype.getDepth = function (tupInfo, uniqueName, memberType) {\n    var memberPosition = tupInfo.uNameCollection.indexOf(uniqueName);\n    var cropUName = tupInfo.uNameCollection.substring(0, memberPosition) + (memberType === 3 ? '' : uniqueName);\n    var fieldSep = cropUName.split('::[').map(function (item) {\n      return item[0] === '[' ? item : '[' + item;\n    });\n\n    if (memberType === 3 && this.rowMeasurePos === fieldSep.length) {\n      fieldSep.push(uniqueName);\n    }\n\n    var nxtIndextCount = -1;\n\n    for (var fPos = 0; fPos < fieldSep.length; fPos++) {\n      var fieldMembers = fieldSep[fPos];\n      var membersCount = fieldMembers.split('~~').length;\n      nxtIndextCount += membersCount;\n    }\n\n    return nxtIndextCount;\n  };\n\n  OlapEngine.prototype.checkAttributeDrill = function (drillInfo, axis) {\n    var isDrill = false;\n\n    for (var i = 0; i < drillInfo.length; i++) {\n      isDrill = this.isAttributeDrill(drillInfo[i].hierarchy, drillInfo, axis);\n\n      if (isDrill) {\n        break;\n      }\n    }\n\n    return isDrill;\n  };\n\n  OlapEngine.prototype.frameTupCollection = function (members, maxLevel, tupPos, tupInfo, showSubTotals, hideTotalsObject, axis) {\n    var _a, _b;\n\n    var memPos = 0;\n    var allCount = 0;\n    var allStartPos;\n    var measure;\n    var measureName;\n    var measurePosition;\n    var typeColl = [];\n    var levelColl = [];\n    var drillState = [];\n    var uNameCollection = '';\n    var captionCollection = '';\n    var showTotals = true;\n    var hideFieldPos = -1;\n\n    while (memPos < members.length) {\n      var member = members[memPos];\n      var memberlevel = Number(member.querySelector('LNum').textContent);\n      var memberUName = member.querySelector('UName').textContent;\n      /* eslint-disable @typescript-eslint/no-explicit-any */\n\n      if (Number(member.querySelector('MEMBER_TYPE').textContent) > 3) {\n        member.querySelector('MEMBER_TYPE').textContent = memberUName.indexOf('[Measures]') === 0 ? '3' : '1';\n      }\n\n      var memberType = memberUName.indexOf('[Measures]') === 0 ? '3' : Number(member.querySelector('MEMBER_TYPE').textContent) > 3 ? '1' : member.querySelector('MEMBER_TYPE').textContent;\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n\n      var memberCaption = member.querySelector('Caption').textContent;\n\n      if (this.fieldList[memberCaption] && this.fieldList[memberCaption].type === 'CalculatedField') {\n        memberCaption = this.fieldList[memberCaption].caption;\n        member.querySelector('Caption').textContent = memberCaption;\n      }\n\n      var hierarchy = member.getAttribute('Hierarchy');\n      var parentUName = member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : '';\n\n      if (memberType === '2') {\n        if (!this.isPaging) {\n          allCount++;\n        }\n\n        allStartPos = isNullOrUndefined(allStartPos) ? memPos : allStartPos;\n      } else if (memberType === '3') {\n        measure = member;\n        measureName = memberUName;\n        measurePosition = memPos;\n\n        if (axis === 'column') {\n          this.colMeasures[memberUName] = member;\n          this.colMeasurePos = memPos;\n        } else {\n          this.rowMeasurePos = memPos;\n        }\n      } else {\n        hideFieldPos = hideTotalsObject[hierarchy];\n      }\n\n      if (memberType !== '2') {\n        if (this.headerGrouping[memPos]) {\n          if (memberlevel > this.lastLevel[memPos]) {\n            this.lastLevel[memPos] = memberlevel;\n          } else if (memberlevel < this.lastLevel[memPos]) {\n            var levelPos = this.lastLevel[memPos];\n\n            while (levelPos >= memberlevel) {\n              delete this.headerGrouping[memPos].UName[levelPos];\n              delete this.headerGrouping[memPos].Caption[levelPos];\n              levelPos--;\n            }\n\n            this.lastLevel[memPos] = memberlevel;\n          }\n\n          this.headerGrouping[memPos].UName[memberlevel] = memberUName;\n          this.headerGrouping[memPos].Caption[memberlevel] = memberCaption;\n        } else {\n          this.lastLevel[memPos] = memberlevel;\n          this.headerGrouping[memPos] = {\n            UName: (_a = {}, _a[memberlevel] = memberUName, _a),\n            Caption: (_b = {}, _b[memberlevel] = memberCaption, _b)\n          };\n        }\n\n        if (this.isPaging) {\n          var currUName = parentUName;\n\n          while (this.drilledSets[currUName]) {\n            var currCaption = this.drilledSets[currUName].querySelector('Caption').textContent;\n            var currLevel = Number(this.drilledSets[currUName].querySelector('LNum').textContent);\n            this.headerGrouping[memPos].UName[currLevel] = currUName;\n            this.headerGrouping[memPos].Caption[currLevel] = currCaption;\n            currUName = this.drilledSets[currUName].querySelector('PARENT_UNIQUE_NAME') === null ? '' : this.drilledSets[currUName].querySelector('PARENT_UNIQUE_NAME').textContent;\n          }\n        }\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n        var uNames = '';\n        var uNamesKeys = Object.keys(this.headerGrouping[memPos].UName);\n\n        for (var i = 0; i < uNamesKeys.length; i++) {\n          var j = uNamesKeys[i];\n\n          if (i === 0) {\n            uNames = this.headerGrouping[memPos].UName[j];\n          } else {\n            uNames = uNames + '~~' + this.headerGrouping[memPos].UName[j];\n          }\n        }\n\n        uNameCollection = uNameCollection === '' ? uNames : uNameCollection + '::' + uNames;\n        var captions = '';\n        var captionsKeys = Object.keys(this.headerGrouping[memPos].Caption);\n\n        for (var i = 0; i < captionsKeys.length; i++) {\n          var j = captionsKeys[i];\n\n          if (i === 0) {\n            captions = this.headerGrouping[memPos].Caption[j];\n          } else {\n            captions = captions + '~~' + this.headerGrouping[memPos].Caption[j];\n          }\n        }\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n\n        if (memPos !== measurePosition) {\n          captionCollection = captionCollection === '' ? captions : captionCollection + '::' + captions;\n        }\n      }\n\n      typeColl.push(memberType);\n      levelColl.push(memberlevel);\n\n      if (isNullOrUndefined(maxLevel[memPos]) || maxLevel[memPos] < memberlevel) {\n        maxLevel[memPos] = memberlevel;\n      }\n\n      drillState.push({\n        level: memberlevel,\n        uName: memberUName,\n        hierarchy: hierarchy,\n        isDrilled: false\n      });\n\n      if (tupInfo[tupPos - 1] && tupInfo[tupPos - 1].typeCollection[memPos] === '1' && drillState[memPos].level > tupInfo[tupPos - 1].drillInfo[memPos].level) {\n        var uCollection = uNameCollection.split(/~~|::\\[/).map(function (item) {\n          return item[0] === '[' ? item : '[' + item;\n        });\n        uCollection.pop();\n        var parentLevel = uCollection.join('~~');\n        this.setDrillInfo(parentUName, parentLevel, memPos, tupPos, tupInfo);\n      }\n\n      memPos++;\n    }\n\n    if (hideFieldPos > -1) {\n      showTotals = typeColl[hideFieldPos + 1] !== '2';\n    }\n\n    tupInfo[tupPos] = {\n      allCount: allCount,\n      allStartPos: allStartPos,\n      measure: measure,\n      measureName: measureName,\n      measurePosition: measurePosition,\n      members: members,\n      typeCollection: typeColl,\n      uNameCollection: uNameCollection,\n      captionCollection: captionCollection,\n      levelCollection: levelColl,\n      drillInfo: drillState,\n      drillStartPos: -1,\n      drillEndPos: -1,\n      showTotals: !showSubTotals && allCount > 0 && allStartPos > (measurePosition === 0 ? 1 : 0) ? false : showTotals\n    };\n    return maxLevel;\n  };\n\n  OlapEngine.prototype.getCaptionCollectionWithMeasure = function (tuple) {\n    var captionColection = tuple.captionCollection;\n\n    if (tuple.measure) {\n      var measureName = tuple.measure.querySelector('Caption').textContent;\n      var measurePosition = tuple.uNameCollection.split(/[~~,::]+/g).indexOf(tuple.measureName);\n      var captionCollectionArray = tuple.captionCollection.split(/[~~,::]+/g);\n      captionCollectionArray.splice(measurePosition, 0, measureName);\n      captionColection = captionCollectionArray.join('.');\n    } else {\n      var captionCollectionArray = tuple.captionCollection.split(/[~~,::]+/g);\n      captionColection = captionCollectionArray.join('.');\n    }\n\n    return captionColection;\n  };\n  /** hidden */\n\n\n  OlapEngine.prototype.setNamedSetsPosition = function () {\n    this.namedSetsPosition = {};\n    var axis = 0;\n\n    do {\n      var setsPositions = {};\n      var axisFields = axis ? this.dataSourceSettings.rows : this.dataSourceSettings.columns;\n\n      for (var fPos = 0; fPos < axisFields.length; fPos++) {\n        if (axisFields[fPos].isNamedSet) {\n          setsPositions[fPos] = axisFields[fPos].name;\n        }\n      }\n\n      this.namedSetsPosition[axis ? 'row' : 'column'] = setsPositions;\n      axis++;\n    } while (axis < 2);\n  };\n\n  OlapEngine.prototype.updateRowEngine = function (pivotValues, valueContent, tuplesLength) {\n    var currEngineCount = this.pivotValues.length - 1;\n    var newEngineCount = Object.keys(pivotValues).length;\n\n    while (currEngineCount > this.customArgs.drillInfo.currentCell.rowIndex) {\n      this.pivotValues[currEngineCount + newEngineCount] = this.pivotValues[currEngineCount];\n      this.pivotValues[currEngineCount + newEngineCount][0].ordinal += tuplesLength;\n      this.pivotValues[currEngineCount + newEngineCount][0].rowIndex += newEngineCount;\n      this.valueContent[currEngineCount + newEngineCount - this.rowStartPos] = this.valueContent[currEngineCount - this.rowStartPos];\n      currEngineCount--;\n    } // for (let key in pivotValues) {\n\n\n    for (var key = 0; key < pivotValues.length; key++) {\n      this.pivotValues[key] = pivotValues[key];\n      this.valueContent[Number(key) - this.rowStartPos] = valueContent[Number(key) - this.rowStartPos];\n    }\n\n    this.pivotValues[this.customArgs.drillInfo.currentCell.rowIndex][0].isDrilled = true;\n  };\n\n  OlapEngine.prototype.updateTupCollection = function (newTuplesCount) {\n    var tupCollection = this.customArgs.drillInfo.axis === 'row' ? this.tupRowInfo : this.tupColumnInfo;\n    var currTupCount = tupCollection.length - 1;\n\n    while (currTupCount > this.customArgs.drillInfo.currentCell.ordinal) {\n      tupCollection[currTupCount + newTuplesCount] = tupCollection[currTupCount];\n      currTupCount--;\n    }\n  };\n\n  OlapEngine.prototype.frameColumnHeader = function (tuples) {\n    var _this = this;\n\n    this.headerGrouping = {};\n    this.lastLevel = [];\n    var tupPos = 0;\n    var maxLevel = [];\n    var allType = [];\n    var minLevel = [];\n    var withoutAllStartPos = -1;\n    var withoutAllEndPos = -1;\n    var newTupPosition = this.customArgs.drillInfo && this.customArgs.drillInfo.axis === 'column' ? this.customArgs.drillInfo.currentCell.ordinal + 1 : 0;\n\n    while (tupPos < tuples.length) {\n      var members = tuples[tupPos].querySelectorAll('Member');\n      maxLevel = this.frameTupCollection(members, maxLevel, tupPos + newTupPosition, this.tupColumnInfo, this.showColumnSubTotals, this.hideColumnTotalsObject, 'column');\n      tupPos++;\n    }\n\n    if (tuples.length > 0) {\n      var members = tuples[0].querySelectorAll('Member');\n      var memPos = 0;\n\n      while (memPos < members.length) {\n        minLevel[memPos] = members[memPos].querySelector('MEMBER_TYPE').textContent === '1' && Number(members[memPos].querySelector('LNum').textContent) === 0 ? 0 : Number(members[memPos].querySelector('LNum').textContent);\n\n        if (members[memPos].querySelector('MEMBER_TYPE').textContent === '1' && (this.isPaging || Number(members[memPos].querySelector('LNum').textContent) === 0)) {\n          allType[memPos] = 0;\n          withoutAllStartPos = withoutAllStartPos === -1 ? memPos : withoutAllStartPos;\n          withoutAllEndPos = memPos;\n        } else {\n          allType[memPos] = 1;\n        }\n\n        memPos++;\n      }\n    }\n\n    tupPos = 0;\n    var position = 1;\n    var lastSavedInfo = {};\n    var isSubTotIncluded = true;\n    var withoutAllAvail = false;\n    var lastRealTup;\n\n    var _loop_1 = function () {\n      var members = tuples[tupPos].querySelectorAll('Member');\n      var allCount = this_1.tupColumnInfo[tupPos].allCount;\n      var allStartPos = this_1.tupColumnInfo[tupPos].allStartPos;\n      var measure = this_1.tupColumnInfo[tupPos].measure;\n      var typeColl = this_1.tupColumnInfo[tupPos].typeCollection;\n      var drillInfo = this_1.tupColumnInfo[tupPos].drillInfo;\n      var drillStartPos = this_1.tupColumnInfo[tupPos].drillStartPos;\n      var startDrillUniquename = this_1.tupColumnInfo[tupPos].startDrillUniquename;\n      var endDrillUniquename = this_1.tupColumnInfo[tupPos].endDrillUniquename;\n      var drillEndPos = this_1.tupColumnInfo[tupPos].drillEndPos;\n      var levelColl = this_1.tupColumnInfo[tupPos].levelCollection;\n      var isStartCol = typeColl[0] === '2' ? false : typeColl[0] === '3' ? typeColl[1] !== '2' : true;\n      var depth = 0;\n      /* eslint-disable */\n\n      maxLevel.map(function (item, pos) {\n        depth = depth + (allType[pos] === 0 ? item + (1 - (minLevel[pos] > 1 ? 1 : minLevel[pos])) : item === 0 ? _this.isPaging && typeColl[pos] === '2' ? 0 : 1 : item);\n      });\n      /* eslint-enable */\n\n      this_1.colDepth = this_1.colDepth > depth ? this_1.colDepth : depth;\n\n      if (tupPos === 0 && members.length > allCount + (measure ? 1 : 0)) {\n        withoutAllAvail = true;\n        isStartCol = allCount > 0 && isStartCol ? allStartPos > withoutAllStartPos : isStartCol;\n      }\n\n      if (isStartCol) {\n        if (allCount === 0) {\n          var levelComp = [-1, -1, -1];\n\n          if (this_1.tupColumnInfo[tupPos - 1] && this_1.tupColumnInfo[tupPos - 1].allCount === 0) {\n            levelComp = this_1.levelCompare(levelColl, this_1.tupColumnInfo[tupPos - 1].levelCollection);\n          } else if (withoutAllAvail && lastRealTup) {\n            levelComp = this_1.levelCompare(levelColl, lastRealTup.levelCollection);\n          }\n\n          if (this_1.tupColumnInfo[tupPos].drillStartPos < 0) {\n            if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {\n              position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);\n            }\n\n            this_1.setParentCollection(members);\n            this_1.frameCommonColumnLoop(members, tupPos, position, maxLevel, allType, minLevel);\n\n            if (!this_1.tupColumnInfo[tupPos].showTotals) {\n              position--;\n            }\n\n            if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {\n              position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);\n            }\n\n            isSubTotIncluded = false;\n\n            if (!this_1.isColDrill) {\n              position++;\n            } else {\n              this_1.isColDrill = false;\n            }\n          } else if (lastSavedInfo.drillStartPos === drillStartPos ? lastSavedInfo.startDrillUniquename !== startDrillUniquename || lastSavedInfo.allCount === allCount : true) {\n            if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {\n              position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);\n              isSubTotIncluded = true;\n            }\n\n            this_1.setParentCollection(members);\n\n            if (withoutAllAvail ? withoutAllEndPos <= drillStartPos : true) {\n              this_1.totalCollection[this_1.totalCollection.length] = {\n                allCount: allCount,\n                ordinal: tupPos,\n                members: members,\n                drillInfo: drillInfo\n              };\n              lastSavedInfo.allCount = allCount;\n              lastSavedInfo.allStartPos = allStartPos;\n              lastSavedInfo.drillStartPos = drillStartPos;\n              lastSavedInfo.startDrillUniquename = startDrillUniquename;\n              lastSavedInfo.endDrillUniquename = endDrillUniquename;\n            }\n          }\n\n          lastRealTup = this_1.tupColumnInfo[tupPos];\n        }\n      }\n\n      var attrDrill = this_1.checkAttributeDrill(this_1.tupColumnInfo[tupPos].drillInfo, 'columns');\n\n      if (allCount > 0 && (withoutAllAvail ? isStartCol && (attrDrill || withoutAllEndPos < allStartPos) : true)) {\n        if (allCount === lastSavedInfo.allCount || allStartPos !== lastSavedInfo.allStartPos) {\n          var endAllow = drillEndPos !== drillStartPos ? lastSavedInfo.endDrillUniquename === endDrillUniquename : true;\n          var allow = allStartPos !== lastSavedInfo.allStartPos ? lastSavedInfo.startDrillUniquename !== startDrillUniquename : endAllow;\n\n          if (drillStartPos > -1 ? allow : true) {\n            if (!isSubTotIncluded) {\n              position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo);\n              isSubTotIncluded = true;\n            }\n\n            this_1.setParentCollection(members);\n\n            if (withoutAllAvail && drillStartPos > -1 ? withoutAllEndPos <= drillStartPos : true) {\n              this_1.totalCollection[this_1.totalCollection.length] = {\n                allCount: allCount,\n                ordinal: tupPos,\n                members: members,\n                allStartPos: allStartPos,\n                drillInfo: drillInfo\n              };\n              lastSavedInfo.allCount = allCount;\n              lastSavedInfo.allStartPos = allStartPos;\n              lastSavedInfo.drillStartPos = drillStartPos;\n              lastSavedInfo.startDrillUniquename = startDrillUniquename;\n              lastSavedInfo.endDrillUniquename = endDrillUniquename;\n            }\n          }\n        }\n      }\n\n      tupPos++;\n    };\n\n    var this_1 = this;\n\n    while (tupPos < tuples.length) {\n      _loop_1();\n    }\n\n    if (this.totalCollection.length > 0) {\n      if (Object.keys(this.colMeasures).length > 1) {\n        this.orderTotals(position, maxLevel, allType, minLevel);\n      } else {\n        this.totalCollection = this.totalCollection.reverse();\n\n        for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {\n          var coll = _a[_i];\n          var isGrandTotal = this.tupColumnInfo[coll.ordinal].measurePosition === 0 ? this.tupColumnInfo[coll.ordinal].allStartPos === 1 : this.tupColumnInfo[coll.ordinal].allStartPos === 0;\n\n          if (isGrandTotal ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals : true) {\n            this.frameCommonColumnLoop(coll.members, coll.ordinal, position, maxLevel, minLevel, allType);\n            var attrDrill = this.checkAttributeDrill(this.tupColumnInfo[coll.ordinal].drillInfo, 'columns');\n\n            if (this.tupColumnInfo[coll.ordinal].showTotals || attrDrill) {\n              position++;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  OlapEngine.prototype.orderTotals = function (position, maxLevel, allType, minLevel) {\n    var groupColl = {};\n    var maxCnt = 1;\n\n    for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {\n      var coll = _a[_i];\n      var isGrandTotal = this.tupColumnInfo[coll.ordinal].measurePosition === 0 ? this.tupColumnInfo[coll.ordinal].allStartPos === 1 : this.tupColumnInfo[coll.ordinal].allStartPos === 0;\n\n      if (isGrandTotal ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals : true) {\n        var measureName = this.tupColumnInfo[coll.ordinal].measure.querySelector('UName').textContent;\n\n        if (groupColl[measureName]) {\n          groupColl[measureName].coll.push(coll);\n          groupColl[measureName].count++;\n          maxCnt = maxCnt < groupColl[measureName].count ? groupColl[measureName].count : maxCnt;\n        } else {\n          groupColl[measureName] = {\n            coll: [coll],\n            count: 1\n          };\n        }\n      }\n    }\n\n    var keys = Object.keys(groupColl);\n    var collLength = maxCnt - 1;\n\n    while (collLength > -1) {\n      for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {\n        var key = keys_1[_b];\n        var coll = groupColl[key].coll[collLength];\n\n        if (coll) {\n          this.frameCommonColumnLoop(coll.members, coll.ordinal, position, maxLevel, allType, minLevel);\n\n          if (this.tupColumnInfo[coll.ordinal].showTotals) {\n            position++;\n          }\n        }\n      }\n\n      collLength--;\n    }\n  };\n\n  OlapEngine.prototype.setParentCollection = function (members) {\n    var memPos = 0;\n\n    while (members.length > memPos) {\n      var member = members[memPos];\n      var memberType = Number(member.querySelector('MEMBER_TYPE').textContent) > 2 ? '3' : member.querySelector('MEMBER_TYPE').textContent;\n      var memberlevel = Number(member.querySelector('LNum').textContent);\n      var memberUName = member.querySelector('UName').textContent;\n      var parentUName = member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : '';\n      var isSameParent = true;\n      var isWithoutAllMember = false;\n\n      if (this.parentObjCollection[memPos]) {\n        var levelCollection = Object.keys(this.parentObjCollection[memPos]);\n        var parentMember = this.parentObjCollection[memPos][memberlevel - 1];\n        isSameParent = parentMember ? parentUName === parentMember.querySelector('UName').textContent : levelCollection.length === 0;\n        isWithoutAllMember = this.tupColumnInfo[0].typeCollection[memPos] === '1';\n      }\n\n      if (memberType === '2') {\n        delete this.parentObjCollection[memPos];\n      } else {\n        if (this.isPaging || isWithoutAllMember ? !isSameParent : false) {\n          delete this.parentObjCollection[memPos];\n        }\n\n        if (!this.parentObjCollection[memPos]) {\n          this.parentObjCollection[memPos] = {};\n          this.parentObjCollection[memPos][memberlevel] = member;\n        } else if (!this.parentObjCollection[memPos][memberlevel] || this.parentObjCollection[memPos][memberlevel].querySelector('UName').textContent !== memberUName) {\n          this.parentObjCollection[memPos][memberlevel] = member;\n        }\n      }\n\n      memPos++;\n    }\n  };\n\n  OlapEngine.prototype.setDrillInfo = function (pUName, parentLvlCollection, memPos, tupPos, tupInfo) {\n    tupPos--;\n\n    while (tupInfo[tupPos] && tupInfo[tupPos].drillInfo[memPos].uName === pUName) {\n      var prevUcollection = tupInfo[tupPos].uNameCollection.split(/~~|::\\[/).map(function (item) {\n        return item[0] === '[' ? item : '[' + item;\n      });\n\n      if (prevUcollection.join('~~').indexOf(parentLvlCollection) < 0) {\n        break;\n      }\n\n      tupInfo[tupPos].drillInfo[memPos].isDrilled = true;\n\n      if (this.curDrillEndPos <= memPos) {\n        tupInfo[tupPos].drillEndPos = this.curDrillEndPos = memPos;\n        tupInfo[tupPos].endDrillUniquename = pUName;\n      }\n\n      if (tupInfo[tupPos].drillStartPos > memPos || tupInfo[tupPos].drillStartPos === -1) {\n        tupInfo[tupPos].drillStartPos = memPos;\n      }\n\n      tupInfo[tupPos].startDrillUniquename = pUName;\n      tupPos--;\n    }\n  };\n\n  OlapEngine.prototype.levelCompare = function (newLevels, oldLevels) {\n    var changePos = [-1, 0];\n\n    for (var lPos = 0; lPos < oldLevels.length; lPos++) {\n      if (newLevels[lPos] !== oldLevels[lPos]) {\n        changePos = [lPos, newLevels[lPos], oldLevels[lPos] - newLevels[lPos]];\n        break;\n      }\n    }\n\n    return changePos;\n  };\n\n  OlapEngine.prototype.mergeTotCollection = function (position, allCount, maxLevel, allType, minLevel, allStartPos, drillInfo, levelComp) {\n    var prevHdrPos = isNullOrUndefined(allStartPos) ? levelComp[0] : allStartPos - (this.colMeasurePos === allStartPos - 1 ? 2 : 1);\n    var flagLevel = drillInfo[prevHdrPos] && drillInfo[prevHdrPos].level;\n    var flagLevelString = this.getLevelsAsString(prevHdrPos - 1, drillInfo);\n    var groupColl = {};\n    var maxCnt = 1;\n    var enterFlag = false;\n\n    for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {\n      var coll = _a[_i];\n\n      if (enterFlag || coll.allCount <= allCount && (flagLevel > -1 && coll.drillInfo[prevHdrPos] ? coll.drillInfo[prevHdrPos].level >= flagLevel && this.getLevelsAsString(prevHdrPos - 1, coll.drillInfo) === flagLevelString : true)) {\n        var measureName = this.tupColumnInfo[coll.ordinal].measure ? this.tupColumnInfo[coll.ordinal].measure.querySelector('UName').textContent : 'measure';\n\n        if (groupColl[measureName]) {\n          groupColl[measureName].coll.push(coll);\n          groupColl[measureName].count++;\n          maxCnt = maxCnt < groupColl[measureName].count ? groupColl[measureName].count : maxCnt;\n        } else {\n          groupColl[measureName] = {\n            coll: [coll],\n            count: 1\n          };\n        }\n\n        enterFlag = false;\n      }\n    }\n\n    var keys = Object.keys(groupColl);\n    var collLength = maxCnt - 1;\n\n    while (collLength > -1) {\n      for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {\n        var key = keys_2[_b];\n        var coll1 = groupColl[key].coll[collLength];\n\n        if (coll1) {\n          var isGrandTotal = this.tupColumnInfo[coll1.ordinal].measurePosition === 0 ? this.tupColumnInfo[coll1.ordinal].allStartPos === 1 : this.tupColumnInfo[coll1.ordinal].allStartPos === 0;\n\n          if (isGrandTotal ? this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals : true) {\n            this.frameCommonColumnLoop(coll1.members, coll1.ordinal, position, maxLevel, minLevel, allType);\n\n            if (this.tupColumnInfo[coll1.ordinal].showTotals) {\n              position++;\n            }\n          }\n\n          this.totalCollection.pop();\n        }\n      }\n\n      collLength--;\n    }\n\n    return position;\n  };\n\n  OlapEngine.prototype.getLevelsAsString = function (prevHdrPos, drillInfo) {\n    var lvlCollection = [];\n\n    for (var pos = 0; pos < prevHdrPos; pos++) {\n      lvlCollection[pos] = drillInfo[pos].level;\n    }\n\n    return lvlCollection.length > 0 ? lvlCollection.toString() : '';\n  };\n\n  OlapEngine.prototype.frameCommonColumnLoop = function (members, tupPos, position, maxLevel, minLevel, allType) {\n    var _a;\n\n    var drillMemberPosition = -1;\n\n    if (this.tupColumnInfo[tupPos].showTotals) {\n      var memberPos = 0;\n      var memberDepth = 0;\n\n      while (memberPos < members.length) {\n        memberDepth += allType[memberPos] > 0 && this.getMeasurePosition(this.tupColumnInfo[tupPos].uNameCollection, this.tupColumnInfo[tupPos].measurePosition) !== memberPos ?\n        /* eslint-disable-line */\n        maxLevel[memberPos] : maxLevel[memberPos] + (1 - minLevel[memberPos]);\n\n        if (this.tupColumnInfo[tupPos].drillInfo[memberPos].isDrilled && this.tupColumnInfo[tupPos].showTotals) {\n          this.tupColumnInfo[tupPos].showTotals = !this.showColumnSubTotals ? false : this.hideColumnTotalsObject[this.tupColumnInfo[tupPos].drillInfo[memberPos].hierarchy] === undefined;\n          memberDepth -= maxLevel[memberPos] - this.tupColumnInfo[tupPos].levelCollection[memberPos];\n          drillMemberPosition = this.tupColumnInfo[tupPos].showTotals ? -1 : memberDepth - 1;\n        }\n\n        memberPos++;\n      }\n    }\n\n    var attrDrill = this.checkAttributeDrill(this.tupColumnInfo[tupPos].drillInfo, 'columns');\n\n    if (this.tupColumnInfo[tupPos].showTotals || attrDrill) {\n      var memPos = 0;\n      var spanMemPos = 0;\n      var colMembers = {};\n\n      while (memPos < members.length) {\n        var member = members[memPos];\n        var memberType = Number(member.querySelector('MEMBER_TYPE').textContent) > 2 ? '3' : member.querySelector('MEMBER_TYPE').textContent;\n        var memDup = 0;\n\n        for (var rowDepthPos = memberType !== '2' ? allType[memPos] ? 1 : minLevel[memPos] : 1; rowDepthPos <= (memberType === '3' ? 1 : maxLevel[memPos]); rowDepthPos++) {\n          var isDrilled = false;\n\n          if (!this.pivotValues[spanMemPos]) {\n            this.pivotValues[spanMemPos] = [];\n          }\n\n          if (Number(members[memPos].querySelector('LNum').textContent) > rowDepthPos && memberType !== '2') {\n            if (!this.parentObjCollection[memPos][rowDepthPos]) {\n              this.getDrilledParent(members[memPos], rowDepthPos, this.parentObjCollection[memPos]);\n            }\n\n            if (this.parentObjCollection[memPos][rowDepthPos]) {\n              member = this.parentObjCollection[memPos][rowDepthPos];\n            }\n\n            isDrilled = true;\n          } else {\n            member = members[memPos];\n            memDup++;\n          }\n\n          if (memberType !== '2') {\n            colMembers[member.querySelector('UName').textContent] = member.querySelector('Caption').textContent;\n          }\n          /* eslint-disable */\n\n\n          var levelName = '';\n          var levelNameKeys = Object.keys(colMembers);\n\n          for (var i = 0; i < levelNameKeys.length; i++) {\n            var j = levelNameKeys[i];\n\n            if (i === 0) {\n              levelName = colMembers[j];\n            } else {\n              levelName = levelName + '.' + colMembers[j];\n            }\n          }\n\n          var isNamedSet = this.namedSetsPosition['column'][memPos] ? true : false;\n          var uName = this.getUniqueName(member.querySelector('UName').textContent);\n          var depth = this.getDepth(this.tupColumnInfo[tupPos], uName, Number(memberType));\n\n          if (!(this.isPaging && this.pivotValues[spanMemPos - 1] && this.pivotValues[spanMemPos - 1][position] && this.fieldList[this.pivotValues[spanMemPos - 1][position].hierarchy] && this.fieldList[this.pivotValues[spanMemPos - 1][position].hierarchy].isHierarchy && this.pivotValues[spanMemPos - 1][position].hasChild && !this.pivotValues[spanMemPos - 1][position].isDrilled && !this.columns[memPos].isNamedSet && this.fieldList[member.getAttribute('Hierarchy')] && (this.fieldList[member.getAttribute('Hierarchy')].isHierarchy || this.fieldList[member.getAttribute('Hierarchy')].hasAllMember) && this.pivotValues[spanMemPos - 1][position].depth < depth)) {\n            this.pivotValues[spanMemPos][position] = {\n              axis: 'column',\n              actualText: uName,\n              colIndex: position,\n              formattedText: memberType === '3' && this.dataFields[uName] && this.dataFields[uName].caption ? this.dataFields[uName].caption : member.querySelector('Caption').textContent,\n              hasChild: this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && memPos < this.columns.length - 1 && !this.columns[memPos + 1].isNamedSet && this.columns[memPos + 1].name.indexOf('[Measures]') < 0 && this.fieldList[this.columns[memPos + 1].name] && this.fieldList[this.columns[memPos + 1].name].hasAllMember ? true : Number(member.querySelector('CHILDREN_CARDINALITY').textContent) > 0 ? true : false,\n              level: memDup > 1 ? -1 : Number(member.querySelector('LNum').textContent) - (allType[memPos] && memberType !== '3' ? 1 : 0),\n              rowIndex: spanMemPos,\n              ordinal: tupPos,\n              memberType: Number(memberType),\n              depth: depth,\n              isDrilled: this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && !this.isAttributeDrill(member.getAttribute('Hierarchy'), this.tupColumnInfo[tupPos].drillInfo, 'columns') ? true : isDrilled || this.tupColumnInfo[tupPos].drillInfo[memPos].isDrilled,\n              parentUniqueName: member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : undefined,\n              levelUniqueName: member.querySelector('LName').textContent,\n              hierarchy: member.getAttribute('Hierarchy'),\n              isNamedSet: isNamedSet,\n              valueSort: (_a = {\n                levelName: levelName\n              }, _a[levelName] = 1, _a.axis = member.getAttribute('Hierarchy'), _a)\n              /* eslint-enable */\n\n            };\n\n            if (!this.headerContent[spanMemPos]) {\n              this.headerContent[spanMemPos] = {};\n            }\n\n            this.headerContent[spanMemPos][position] = this.pivotValues[spanMemPos][position];\n            spanMemPos++;\n          } else {\n            this.isColDrill = true;\n            break;\n          }\n        }\n\n        memPos++;\n      }\n    } else {\n      if (drillMemberPosition > -1) {\n        this.pivotValues[drillMemberPosition][position - 1].ordinal = tupPos;\n      } else if (this.tupColumnInfo[tupPos].allCount > 0) {\n        var memberPos = 0;\n        var memberDepth = 0;\n\n        while (memberPos < this.tupColumnInfo[tupPos].allStartPos) {\n          memberDepth += allType[memberPos] > 0 && this.getMeasurePosition(this.tupColumnInfo[tupPos].uNameCollection, this.tupColumnInfo[tupPos].measurePosition) !== memberPos ?\n          /* eslint-disable-line */\n          maxLevel[memberPos] : maxLevel[memberPos] + (1 - minLevel[memberPos]);\n          memberPos++;\n        }\n\n        if (this.tupColumnInfo[tupPos].allStartPos === this.tupColumnInfo[tupPos].measurePosition + 1) {\n          memberDepth -= maxLevel[this.tupColumnInfo[tupPos].allStartPos - 2] - this.tupColumnInfo[tupPos].levelCollection[this.tupColumnInfo[tupPos].allStartPos - 2] + 1;\n        } else {\n          memberDepth -= maxLevel[this.tupColumnInfo[tupPos].allStartPos - 1] - this.tupColumnInfo[tupPos].levelCollection[this.tupColumnInfo[tupPos].allStartPos - 1];\n        }\n\n        this.pivotValues[memberDepth - 1][position - 1].ordinal = tupPos;\n      }\n    }\n  };\n\n  OlapEngine.prototype.isAttributeDrill = function (hierarchy, drillInfo, axis) {\n    var isDrill = false;\n    var isAdjacent = this.isAdjacentToMeasure(hierarchy, axis);\n\n    if (!isAdjacent) {\n      for (var i = 0; i < this.drilledMembers.length; i++) {\n        if (this.drilledMembers[i].name === hierarchy) {\n          for (var j = 0; j < this.drilledMembers[i].items.length; j++) {\n            var drillItems = this.drilledMembers[i].items[j].split(this.drilledMembers[i].delimiter);\n            var levelName = '';\n\n            for (var k = 0; k < drillItems.length; k++) {\n              if (drillInfo[k] && drillInfo[k].uName) {\n                levelName = levelName + (levelName === '' ? '' : this.drilledMembers[i].delimiter) + drillInfo[k].uName;\n              }\n            }\n\n            if (levelName === this.drilledMembers[i].items[j]) {\n              isDrill = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return isDrill;\n  };\n\n  OlapEngine.prototype.isAdjacentToMeasure = function (hierarchy, axis) {\n    var isAdjacent = false;\n    var fields = axis === 'rows' ? this.rows : this.columns;\n\n    for (var i = 0; i < fields.length; i++) {\n      if (fields[i].name === hierarchy && fields[i + 1] && (fields[i + 1].name === '[Measures]' || fields[i + 1].isNamedSet || this.fieldList[fields[i + 1].name] && !this.fieldList[fields[i + 1].name].hasAllMember)) {\n        isAdjacent = true;\n        break;\n      }\n    }\n\n    return isAdjacent;\n  };\n\n  OlapEngine.prototype.getDrilledParent = function (childMember, parentLevel, savedCollection) {\n    var childlevel = Number(childMember.querySelector('LNum').textContent);\n    var currentChild = childMember;\n\n    for (var lvl = childlevel - 1; lvl >= parentLevel; lvl--) {\n      var currentParent = this.drilledSets[currentChild.querySelector('PARENT_UNIQUE_NAME').textContent];\n\n      if (currentParent) {\n        savedCollection[lvl] = currentParent;\n        currentChild = currentParent;\n      } else {\n        break;\n      }\n    }\n  };\n\n  OlapEngine.prototype.performRowSorting = function () {\n    var _a;\n\n    if (this.enableSort && this.tupRowInfo.length > 0) {\n      var rowCount = this.pivotValues.length;\n      var lvlGrouping = {};\n      var measureObjects = {};\n      var gSumGrouping = [];\n      var gSumFlag = false;\n      var withoutAllLastPos = this.tupRowInfo[0].typeCollection.lastIndexOf('1');\n\n      for (var rPos = this.colDepth; rPos < rowCount; rPos++) {\n        var currentCell = this.pivotValues[rPos][0];\n        var currentTuple = this.tupRowInfo[currentCell.ordinal];\n        var uniqueName = currentTuple ? currentTuple.measurePosition === 0 && currentCell.memberType === 3 ? currentTuple.measureName : currentTuple.uNameCollection : '';\n\n        if (uniqueName !== '') {\n          if (withoutAllLastPos > -1) {\n            uniqueName = this.frameUniqueName(uniqueName, currentCell, currentTuple);\n          }\n\n          var level = uniqueName.split(/~~|::\\[/).length;\n\n          if (currentCell.memberType === 3 && this.tupRowInfo[0].measurePosition > 0) {\n            var parentUName = this.getParentUname(uniqueName, currentCell, true, true);\n\n            if (measureObjects[parentUName]) {\n              measureObjects[parentUName].push(currentCell);\n            } else {\n              measureObjects[parentUName] = [currentCell];\n            }\n          } else if (lvlGrouping[level]) {\n            lvlGrouping[level][uniqueName] = [currentCell];\n          } else {\n            lvlGrouping[level] = (_a = {}, _a[uniqueName] = [currentCell], _a);\n          }\n        }\n\n        if (gSumFlag) {\n          gSumGrouping.push(currentCell);\n        }\n\n        if (currentCell.type === 'grand sum') {\n          gSumFlag = true;\n        }\n      }\n\n      var isMeasureAvail = Object.keys(measureObjects).length > 0 && this.tupRowInfo[0].measurePosition > 0;\n      var levels = Object.keys(lvlGrouping).map(function (item) {\n        return Number(item);\n      }).sort(function (a, b) {\n        return a > b ? 1 : b > a ? -1 : 0;\n      });\n      /* eslint-disable-line */\n\n      var sortLvlGrouping = {};\n\n      for (var lPos = levels.length - 1; lPos >= 0; lPos--) {\n        var parentGrouping = {};\n        var objCollection = lvlGrouping[levels[lPos]];\n        var objKeys = Object.keys(objCollection);\n\n        for (var oPos = 0; oPos < objKeys.length; oPos++) {\n          var parentUName = lPos === 0 ? 'parent' : this.getParentUname(objKeys[oPos], objCollection[objKeys[oPos]][0], isMeasureAvail, false);\n\n          if (parentGrouping[parentUName]) {\n            parentGrouping[parentUName].push(objCollection[objKeys[oPos]][0]);\n          } else {\n            parentGrouping[parentUName] = [objCollection[objKeys[oPos]]][0];\n          }\n        }\n\n        var pKeys = Object.keys(parentGrouping);\n\n        for (var kPos = 0; kPos < pKeys.length; kPos++) {\n          parentGrouping[pKeys[kPos]] = this.sortRowHeaders(parentGrouping[pKeys[kPos]]);\n        }\n\n        if (sortLvlGrouping[levels[lPos + 1]]) {\n          for (var kPos = 0; kPos < pKeys.length; kPos++) {\n            var groupSets = [];\n            var axisSets = parentGrouping[pKeys[kPos]];\n\n            for (var aPos = 0; aPos < axisSets.length; aPos++) {\n              var tupInfo = this.tupRowInfo[axisSets[aPos].ordinal];\n              var uName = tupInfo.measurePosition === 0 && axisSets[aPos].memberType === 3 ? tupInfo.measureName : tupInfo.uNameCollection;\n              groupSets.push(axisSets[aPos]);\n\n              if (withoutAllLastPos > -1) {\n                uName = this.frameUniqueName(uName, axisSets[aPos], tupInfo);\n              }\n\n              var isMembersIncluded = false;\n\n              if (isMeasureAvail) {\n                var parentUName = this.getParentUname(uName, axisSets[aPos], isMeasureAvail, true);\n\n                if (measureObjects[parentUName]) {\n                  measureObjects[parentUName] = this.sortRowHeaders(measureObjects[parentUName]);\n                  var isLastMeasure = uName.lastIndexOf('::[') === uName.indexOf('::[Measures]');\n                  var isFullLength = uName.split('::[').length - 1 === tupInfo.measurePosition;\n                  var isLastNotDrilledMember = !tupInfo.drillInfo[tupInfo.measurePosition - 1].isDrilled;\n                  var isActualLastMember = tupInfo.members.length > tupInfo.measurePosition + 1;\n\n                  if (isLastMeasure && isFullLength && isLastNotDrilledMember && isActualLastMember) {\n                    isMembersIncluded = true;\n\n                    for (var mPos = 0; mPos < measureObjects[parentUName].length; mPos++) {\n                      groupSets.push(measureObjects[parentUName][mPos]);\n                      var matchParent = uName.substring(0, uName.indexOf('::[Measures]')) + '::' + measureObjects[parentUName][mPos].actualText;\n\n                      if (sortLvlGrouping[levels[lPos + 1]][matchParent]) {\n                        groupSets = groupSets.concat(sortLvlGrouping[levels[lPos + 1]][matchParent]);\n                      }\n                    }\n                  } else {\n                    groupSets = groupSets.concat(measureObjects[parentUName]);\n                  }\n                }\n              }\n\n              if (!isMembersIncluded && sortLvlGrouping[levels[lPos + 1]][uName]) {\n                groupSets = groupSets.concat(sortLvlGrouping[levels[lPos + 1]][uName]);\n              }\n            }\n\n            parentGrouping[pKeys[kPos]] = groupSets;\n          }\n        } else if (isMeasureAvail) {\n          for (var kPos = 0; kPos < pKeys.length; kPos++) {\n            var axisSets = parentGrouping[pKeys[kPos]];\n            var groupSets = [];\n\n            for (var aPos = 0; aPos < axisSets.length; aPos++) {\n              groupSets.push(axisSets[aPos]);\n              var uName = this.tupRowInfo[axisSets[aPos].ordinal].uNameCollection;\n\n              if (withoutAllLastPos > -1) {\n                uName = this.frameUniqueName(uName, axisSets[aPos], this.tupRowInfo[axisSets[aPos].ordinal]);\n              }\n\n              var parentUName = this.getParentUname(uName, axisSets[aPos], true, true);\n\n              if (measureObjects[parentUName]) {\n                measureObjects[parentUName] = this.sortRowHeaders(measureObjects[parentUName]);\n                groupSets = groupSets.concat(measureObjects[parentUName]);\n              }\n            }\n\n            parentGrouping[pKeys[kPos]] = groupSets;\n          }\n        }\n\n        sortLvlGrouping[levels[lPos]] = parentGrouping;\n      }\n\n      var newPos = 0;\n      var totPos = 0;\n      gSumFlag = false;\n      gSumGrouping = this.sortRowHeaders(gSumGrouping);\n\n      for (var rPos = this.colDepth; rPos < rowCount; rPos++) {\n        /* eslint-disable @typescript-eslint/dot-notation */\n        var cell = gSumFlag ? gSumGrouping : sortLvlGrouping[levels[0]]['parent'];\n        /* eslint-enable @typescript-eslint/dot-notation */\n\n        var currPos = gSumFlag ? newPos - totPos : newPos;\n\n        if (cell[currPos]) {\n          this.pivotValues[rPos] = [cell[currPos]];\n          this.pivotValues[rPos][0].rowIndex = rPos;\n          this.valueContent[newPos][0] = this.pivotValues[rPos][0];\n        }\n\n        newPos++;\n\n        if (this.pivotValues[rPos][0].type === 'grand sum') {\n          gSumFlag = true;\n          totPos = newPos;\n        }\n      }\n    }\n  };\n  /* eslint-disable */\n\n\n  OlapEngine.prototype.performColumnSorting = function () {\n    if (this.enableSort) {\n      for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {\n        var temporary = [];\n        var index = 0;\n        var grandTotal = [];\n\n        for (var j = 0; j < this.pivotValues.length; j++) {\n          var header = this.pivotValues[j];\n          var key = void 0;\n          var keys = void 0;\n          var arrange = {};\n          var value = 1;\n          grandTotal[index] = [];\n          temporary[index] = [];\n          var k = 1;\n\n          for (k = k; k < header.length; k++) {\n            if (!header[k].isNamedSet) {\n              if (header[k].memberType != 2 && header[k].hierarchy != '[Measures]' && header[k].level != -1) {\n                if (isNullOrUndefined(arrange[header[k].formattedText]) || isNullOrUndefined(this.pivotValues[j - 1])) {\n                  arrange[header[k].formattedText] = arrange[header[k].formattedText] ? arrange[header[k].formattedText] : [];\n                  arrange[header[k].formattedText][header[k].colIndex] = header[k];\n                } else if (arrange[header[k].formattedText] && this.pivotValues[j - 1]) {\n                  var prevRowCell = this.pivotValues[j - 1][header[k].colIndex];\n                  var prevColValue = Number(Object.keys(arrange[header[k].formattedText])[0]);\n                  var prevColIndex = arrange[header[k].formattedText][prevColValue].colIndex;\n                  var prevColRowCell = this.pivotValues[j - 1][prevColIndex];\n\n                  if (prevRowCell.formattedText !== prevColRowCell.formattedText) {\n                    var key_1 = Object.keys(arrange);\n                    key_1 = this.sortColumnHeaders(key_1, this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k].hierarchy]);\n                    isNullOrUndefined(temporary[index]) ? temporary[index] = [] : temporary[index];\n\n                    for (var keyPos = 0; keyPos < key_1.length; keyPos++) {\n                      var length_1 = Object.keys(arrange[key_1[keyPos]]).length;\n\n                      for (var cellPos = 0; cellPos < length_1; cellPos++) {\n                        value = temporary[index].length === 0 ? 1 : 0;\n                        temporary[index][temporary[index].length + value] = arrange[key_1[keyPos]][Number(Object.keys(arrange[key_1[keyPos]])[cellPos])];\n                      }\n                    }\n\n                    arrange = {};\n                    arrange[header[k].formattedText] = [];\n                    arrange[header[k].formattedText][header[k].colIndex] = header[k];\n                  } else {\n                    arrange[header[k].formattedText][header[k].colIndex] = header[k];\n                  }\n                }\n              } else if (Object.keys(arrange).length > 0) {\n                grandTotal[index][grandTotal[index].length + value] = header[k];\n                key = Object.keys(arrange);\n                key = this.sortColumnHeaders(key, this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k].hierarchy]);\n                isNullOrUndefined(temporary[index]) ? temporary[index] = [] : temporary[index];\n\n                for (var l = 0; l < key.length; l++) {\n                  var length_2 = Object.keys(arrange[key[l]]).length;\n\n                  for (var q = 0; q < length_2; q++) {\n                    value = temporary[index].length === 0 ? 1 : 0;\n                    temporary[index][temporary[index].length + value] = arrange[key[l]][Number(Object.keys(arrange[key[l]])[q])];\n                  }\n                }\n              } else if ((header[k].level === -1 || header[k].level === 0) && Object.keys(arrange).length >= 0 && header[k].hierarchy != '[Measures]') {\n                grandTotal[index][grandTotal[index].length + value] = header[k];\n              }\n\n              if (header[k].level != -1 && Object.keys(arrange).length === 1 && header[k].hierarchy != '[Measures]' && !isNullOrUndefined(header[k + 1]) && header[k + 1].level === -1) {\n                var height = Object.keys(arrange[header[k].formattedText]).length;\n                var weight = Object.keys(arrange[header[k].formattedText]);\n\n                if (height > 1) {\n                  for (var hgt = 0; hgt < height; hgt++) {\n                    value = grandTotal[index].length === 0 ? 1 : 0;\n                    grandTotal[index][grandTotal[index].length + value] = arrange[header[k].formattedText][Number(weight[hgt])];\n                  }\n                } else {\n                  grandTotal[index][grandTotal[index].length + value] = header[k];\n                }\n              }\n\n              if (Object.keys(grandTotal[index]).length > 0) {\n                value = temporary[index].length === 0 ? 1 : 0;\n                var height1 = grandTotal[index].length;\n\n                if (height1 > 2) {\n                  for (var hgt1 = 1; hgt1 < height1; hgt1++) {\n                    value = temporary[index].length === 0 ? 1 : 0;\n                    temporary[index][temporary[index].length + value] = grandTotal[index][hgt1];\n                  }\n                } else {\n                  temporary[index][temporary[index].length + value] = grandTotal[index][1] || grandTotal[index][0];\n                }\n\n                arrange = {};\n                grandTotal[index] = [];\n              }\n            }\n          }\n\n          if (Object.keys(arrange).length > 0) {\n            grandTotal[index][grandTotal[index].length + value] = header[k];\n            keys = Object.keys(arrange);\n            var order = this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k - 1].hierarchy];\n            key = this.sortColumnHeaders(keys, order);\n            isNullOrUndefined(temporary[index]) ? temporary[index] = [] : temporary[index];\n\n            for (var len = 0; len < keys.length; len++) {\n              var leng = Object.keys(arrange[keys[len]]).length;\n\n              for (var q = 0; q < leng; q++) {\n                value = temporary[index].length === 0 ? 1 : 0;\n                temporary[index][temporary[index].length + value] = arrange[key[len]][Number(Object.keys(arrange[keys[len]])[q])];\n              }\n            }\n          }\n\n          for (var m = 1; m < temporary[index].length; m++) {\n            this.pivotValues[index][m] = temporary[index][m];\n          }\n\n          for (var n = j; n < this.pivotValues.length; n++) {\n            var pElement = extend({}, this.pivotValues[n + 1], null, true);\n            var cElement = extend({}, this.pivotValues[n], null, true);\n\n            if (Object.keys(pElement).length === Object.keys(cElement).length && Object.keys(pElement).length > 2) {\n              for (var o = 1; o < this.pivotValues[j].length; o++) {\n                if (Object.keys(pElement).length > 0 && cElement[o].colIndex != pElement[o].colIndex) {\n                  this.pivotValues[n + 1][o] = pElement[cElement[o].colIndex];\n                }\n              }\n\n              break;\n            }\n          }\n\n          index++;\n          arrange = {};\n        }\n\n        for (var i_1 = 0; i_1 < this.pivotValues.length; i_1++) {\n          var header = this.pivotValues[i_1];\n\n          for (var j = 1; j < header.length; j++) {\n            header[j].colIndex = j;\n          }\n        }\n      }\n    }\n  };\n\n  OlapEngine.prototype.frameUniqueName = function (uniqueName, currentCell, currentTuple) {\n    var hasLastMeasure = uniqueName.indexOf(currentCell.actualText.toString() + '::[Measures]') > -1;\n    uniqueName = uniqueName.substring(0, uniqueName.indexOf(currentCell.actualText.toString())) + currentCell.actualText.toString();\n    var measureAvail = uniqueName.split('::[').length <= this.getMeasurePosition(uniqueName, currentTuple.measurePosition);\n    uniqueName = uniqueName + (hasLastMeasure || measureAvail ? '::' + currentTuple.measureName : '');\n    return uniqueName;\n  };\n\n  OlapEngine.prototype.getMeasurePosition = function (uniqueName, measurePosition) {\n    var position = measurePosition;\n    var collection = uniqueName.split('::[');\n\n    for (var i = 0; i < collection.length; i++) {\n      if (collection[i] && collection[i].indexOf('Measures') > -1) {\n        position = i;\n        break;\n      }\n    }\n\n    return position;\n  };\n\n  OlapEngine.prototype.sortRowHeaders = function (headers) {\n    if (headers.length > 0 && headers[0].memberType !== 3 && !headers[0].isNamedSet) {\n      var order = this.sortObject[headers[0].hierarchy] || this.sortObject[headers[0].levelUniqueName];\n\n      if (order === 'Ascending' || order === undefined) {\n        headers === headers.sort(function (a, b) {\n          return a.formattedText > b.formattedText ? 1 : b.formattedText > a.formattedText ? -1 : 0;\n        });\n      } else if (order === 'Descending') {\n        headers === headers.sort(function (a, b) {\n          return a.formattedText < b.formattedText ? 1 : b.formattedText < a.formattedText ? -1 : 0;\n        });\n      } else {\n        headers;\n      }\n    }\n\n    return headers;\n  };\n\n  OlapEngine.prototype.sortColumnHeaders = function (keys, order) {\n    if (order === 'Ascending' || order === undefined) {\n      keys.sort(function (a, b) {\n        return a > b ? 1 : b > a ? -1 : 0;\n      });\n    } else if (order === 'Descending') {\n      keys.sort(function (a, b) {\n        return a < b ? 1 : b < a ? -1 : 0;\n      });\n    }\n\n    return keys;\n  };\n  /* eslint-enable */\n\n\n  OlapEngine.prototype.frameSortObject = function () {\n    if (this.enableSort) {\n      for (var fPos = 0; fPos < this.sortSettings.length; fPos++) {\n        this.sortObject[this.sortSettings[fPos].name] = this.sortSettings[fPos].order;\n      }\n    }\n  };\n\n  OlapEngine.prototype.getParentUname = function (uniqueNameColl, cell, isMeasureAvail, isLastMeasure) {\n    var parentString = '';\n\n    if (isMeasureAvail && !isLastMeasure) {\n      var tuple = this.tupRowInfo[cell.ordinal];\n      var sepPos = [];\n      var sepObjects = {};\n\n      for (var i = 0; i < uniqueNameColl.length; i++) {\n        if (uniqueNameColl[i] === '~' || uniqueNameColl[i] === ':') {\n          sepPos.push(i);\n          sepObjects[i] = uniqueNameColl[i] + uniqueNameColl[i];\n          i++;\n        }\n      }\n\n      if (this.getMeasurePosition(uniqueNameColl, tuple.measurePosition) >= uniqueNameColl.split('::[').length - 1) {\n        if (sepPos[sepPos.length - 2] > -1) {\n          parentString = uniqueNameColl.substring(0, sepPos[sepPos.length - 2]) + sepObjects[sepPos[sepPos.length - 1]] + tuple.measureName;\n        } else {\n          parentString = 'parent';\n        }\n      } else {\n        var lastPosition = uniqueNameColl.lastIndexOf('~~') > uniqueNameColl.lastIndexOf('::[') ? uniqueNameColl.lastIndexOf('~~') : uniqueNameColl.lastIndexOf('::[');\n        parentString = lastPosition > -1 ? uniqueNameColl.substring(0, lastPosition) : 'parent';\n      }\n    } else {\n      var lastPosition = uniqueNameColl.lastIndexOf('~~') > uniqueNameColl.lastIndexOf('::[') ? uniqueNameColl.lastIndexOf('~~') : uniqueNameColl.lastIndexOf('::[');\n      parentString = lastPosition > -1 ? uniqueNameColl.substring(0, lastPosition) : 'parent';\n    }\n\n    return parentString;\n  };\n\n  OlapEngine.prototype.performColumnSpanning = function () {\n    var spanCollection = {};\n    var rowPos = this.rowStartPos - 1;\n    var colMeasureCount = Object.keys(this.colMeasures).length;\n\n    while (rowPos > -1) {\n      spanCollection[rowPos] = {};\n      var colPos = this.pivotValues[rowPos].length - 1;\n\n      while (colPos > 0) {\n        spanCollection[rowPos][colPos] = 1;\n        var nextColCell = this.pivotValues[rowPos][colPos + 1];\n        var nextRowCell = this.pivotValues[rowPos + 1] && this.rowStartPos - rowPos > 1 ? this.pivotValues[rowPos + 1][colPos] : undefined;\n        /* eslint-disable-line */\n\n        var currCell = this.pivotValues[rowPos][colPos];\n        var colflag = false;\n        var rowflag = false;\n        var tupColInfo = this.tupColumnInfo[currCell.ordinal];\n        var isSubTot = tupColInfo.allStartPos > (tupColInfo.typeCollection[0] === '3' ? 1 : 0);\n        var attrDrill = this.checkAttributeDrill(tupColInfo.drillInfo, 'columns');\n\n        if (nextRowCell && nextColCell && (currCell.memberType === 2 || currCell.level === -1 ? nextColCell.actualText === currCell.actualText : currCell.memberType === 3 && currCell.actualText === nextColCell.actualText || nextColCell.valueSort.levelName === currCell.valueSort.levelName)) {\n          if (currCell.memberType === 2) {\n            if (isSubTot ? nextColCell.type === 'sum' : true) {\n              currCell.colSpan = nextColCell.colSpan + 1 > (tupColInfo.measurePosition > rowPos ? colMeasureCount : 0) ? 1 : nextColCell.colSpan + 1;\n            } else {\n              currCell.colSpan = 1;\n            }\n          } else {\n            currCell.colSpan = nextColCell.colSpan + 1;\n            currCell.ordinal = nextColCell.ordinal;\n          }\n\n          colflag = true;\n        }\n\n        if (currCell.memberType === 2) {\n          if (isSubTot) {\n            if (!attrDrill) {\n              currCell.type = 'sum';\n            } //currCell.formattedText = (this.pivotValues[tupColInfo.allStartPos - 1] as IAxisSet[])[colPos].formattedText + ' Total';\n\n\n            currCell.formattedText = 'Total';\n            currCell.valueSort[currCell.valueSort.levelName.toString()] = 1;\n          } else {\n            var levelName = 'Grand Total';\n\n            if (nextRowCell && colMeasureCount > 0) {\n              levelName = nextRowCell.memberType === 3 ? 'Grand Total.' + nextRowCell.formattedText : nextRowCell.valueSort.levelName;\n            }\n\n            currCell.type = 'grand sum';\n            currCell.formattedText = 'Grand Total';\n            currCell.valueSort.levelName = levelName;\n            currCell.valueSort[levelName.toString()] = 1;\n          }\n\n          currCell.hasChild = false;\n        } else if (currCell.level === -1) {\n          currCell.type = 'sum'; //currCell.formattedText = currCell.formattedText + ' Total';\n\n          currCell.formattedText = 'Total';\n          currCell.hasChild = false;\n          currCell.valueSort[currCell.valueSort.levelName.toString()] = 1;\n        }\n\n        if (nextRowCell) {\n          if (currCell.memberType === 2 && nextRowCell.memberType === 2 || nextRowCell.actualText === currCell.actualText) {\n            spanCollection[rowPos][colPos] = spanCollection[rowPos + 1] ? spanCollection[rowPos + 1][colPos] + 1 : 1;\n\n            if (rowPos === 0 || currCell.memberType === 1 && currCell.level > -1 && nextRowCell.memberType === 1 && nextRowCell.level === -1) {\n              /* eslint-disable-line */\n              currCell.rowSpan = currCell.isDrilled && (this.fieldList[currCell.hierarchy] && this.fieldList[currCell.hierarchy].isHierarchy ? currCell.hasChild : true) ? 1 : spanCollection[rowPos + 1][colPos] + 1;\n              /* eslint-disable-line */\n\n              nextRowCell.rowSpan = nextRowCell.isDrilled && (this.fieldList[nextRowCell.hierarchy] && this.fieldList[nextRowCell.hierarchy].isHierarchy ? nextRowCell.hasChild : true) && nextRowCell.level === -1 ? spanCollection[rowPos + 1][colPos] : nextRowCell.rowSpan;\n              /* eslint-disable-line */\n            } else {\n              if (currCell.memberType === 3) {\n                currCell.rowSpan = 1;\n              } else {\n                currCell.rowSpan = -1;\n              }\n            }\n\n            rowflag = true;\n          } else if (currCell.isDrilled && (this.fieldList[currCell.hierarchy] && this.fieldList[currCell.hierarchy].isHierarchy ? currCell.hasChild : true) && currCell.level === -1 && nextRowCell.memberType === 2) {\n            /* eslint-disable-line */\n            spanCollection[rowPos][colPos] = spanCollection[rowPos + 1] ? spanCollection[rowPos + 1][colPos] + 1 : 1;\n            currCell.rowSpan = -1;\n            rowflag = true;\n          } else {\n            /* eslint-disable */\n            currCell.rowSpan = rowPos === 0 ? spanCollection[rowPos][colPos] : -1;\n            nextRowCell.rowSpan = nextRowCell.level > -1 && !(nextRowCell.isDrilled && (this.fieldList[nextRowCell.hierarchy] && this.fieldList[nextRowCell.hierarchy].isHierarchy ? nextRowCell.hasChild : true)) || currCell.memberType !== 2 && nextRowCell.memberType === 2 ? spanCollection[rowPos + 1][colPos] : 1;\n            /* eslint-enable */\n          }\n        } else {\n          currCell.rowSpan = currCell.level > -1 || this.rowStartPos === 1 ? spanCollection[rowPos][colPos] : -1;\n        }\n\n        if (!colflag) {\n          currCell.colSpan = 1;\n        }\n\n        if (!rowflag) {\n          spanCollection[rowPos][colPos] = 1;\n        }\n\n        colPos--;\n      }\n\n      rowPos--;\n    }\n  };\n\n  OlapEngine.prototype.frameValues = function (tuples, colLength) {\n    var rowStartPos = this.colDepth;\n    var rowEndPos = this.pivotValues.length;\n    var startRowOrdinal = 0;\n\n    if (this.customArgs.action === 'down') {\n      var keys = Object.keys(this.onDemandDrillEngine);\n      rowStartPos = Number(keys[0]);\n      rowEndPos = Number(keys[keys.length - 1]) + 1;\n      startRowOrdinal = this.onDemandDrillEngine[rowStartPos][0].ordinal;\n    }\n\n    var valCollection = {};\n\n    for (var colPos = 0; colPos < tuples.length; colPos++) {\n      valCollection[Number(tuples[colPos].getAttribute('CellOrdinal'))] = tuples[colPos];\n    }\n\n    for (var rowPos = rowStartPos; rowPos < rowEndPos; rowPos++) {\n      var columns = this.pivotValues[rowPos];\n      var rowOrdinal = columns[0].ordinal;\n\n      for (var colPos = 1; colPos < this.pivotValues[0].length; colPos++) {\n        if (this.pivotValues[this.colDepth - 1][colPos]) {\n          var colOrdinal = this.pivotValues[this.colDepth - 1][colPos].ordinal;\n          var lastColCell = this.pivotValues[this.colDepth - 1][colPos];\n          var measure = columns[0].memberType === 3 ? columns[0].actualText.toString() : this.tupColumnInfo[lastColCell.ordinal] && this.tupColumnInfo[lastColCell.ordinal].measure ? this.tupColumnInfo[lastColCell.ordinal].measure.querySelector('UName').textContent : columns[0].actualText;\n\n          if (columns[0].type === 'header') {\n            columns[colPos] = {\n              axis: 'value',\n              actualText: this.getUniqueName(measure),\n              formattedText: '',\n              value: 0,\n              colIndex: colPos,\n              rowIndex: rowPos\n            };\n          } else {\n            var valElement = void 0;\n            var formattedText = void 0;\n            var value = '0';\n            var measureName = this.getUniqueName(measure);\n            var showTotals = true;\n            var attrDrill = this.fieldList[columns[0].hierarchy] && this.fieldList[columns[0].hierarchy].isHierarchy && columns[0].isDrilled;\n            /* eslint-disable-line */\n\n            if (this.tupRowInfo[rowOrdinal]) {\n              showTotals = this.tupRowInfo[rowOrdinal].showTotals;\n            } else {\n              showTotals = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals;\n            }\n\n            valElement = valCollection[(rowOrdinal - startRowOrdinal) * colLength + colOrdinal];\n            formattedText = !showTotals && attrDrill ? '' : !isNullOrUndefined(valElement) && !isNullOrUndefined(valElement.querySelector('FmtValue')) ? valElement.querySelector('FmtValue').textContent : this.emptyCellTextContent;\n            value = !showTotals && attrDrill ? '0' : !isNullOrUndefined(valElement) && !isNullOrUndefined(valElement.querySelector('Value')) ? valElement.querySelector('Value').textContent : null;\n            formattedText = showTotals && !isNullOrUndefined(value) ? this.getFormattedValue(Number(value), measureName, formattedText !== '' ? formattedText : value) : formattedText;\n            var isSum = (this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].allCount > 0 || this.tupColumnInfo[colOrdinal].drillStartPos > -1 : true) || (this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].allCount > 0 || this.tupRowInfo[rowOrdinal].drillStartPos > -1 : true);\n            var isGrand = (this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].measurePosition === 0 ? this.tupRowInfo[rowOrdinal].allStartPos === 1 : this.tupRowInfo[rowOrdinal].allStartPos === 0 : false) || (this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].measurePosition === 0 ? this.tupColumnInfo[colOrdinal].allStartPos === 1 : this.tupColumnInfo[colOrdinal].allStartPos === 0 : false);\n            /* eslint-disable-line */\n\n            columns[colPos] = {\n              axis: 'value',\n              actualText: measureName,\n              formattedText: formattedText,\n              colOrdinal: colOrdinal,\n              rowOrdinal: rowOrdinal,\n              columnHeaders: this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].captionCollection : '',\n              rowHeaders: this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].captionCollection : '',\n              value: !isNullOrUndefined(value) ? Number(value) : null,\n              colIndex: colPos,\n              rowIndex: rowPos,\n              isSum: isSum,\n              isGrandSum: isGrand\n            };\n          }\n\n          this.valueContent[rowPos - this.rowStartPos][colPos] = columns[colPos];\n        }\n      }\n    }\n  };\n  /* eslint-disable */\n\n  /** hidden */\n\n\n  OlapEngine.prototype.getFormattedValue = function (value, fieldName, formattedText) {\n    var formattedValue = formattedText;\n\n    if (this.formatFields[fieldName] && !isNullOrUndefined(value)) {\n      var formatField = this.formatFields[fieldName].properties ? this.formatFields[fieldName].properties : this.formatFields[fieldName];\n      var formatObj = extend({}, formatField, null, true);\n      /* eslint-enable */\n\n      delete formatObj.name;\n\n      if (!formatObj.minimumSignificantDigits && formatObj.minimumSignificantDigits < 1) {\n        delete formatObj.minimumSignificantDigits;\n      }\n\n      if (!formatObj.maximumSignificantDigits && formatObj.maximumSignificantDigits < 1) {\n        delete formatObj.maximumSignificantDigits;\n      }\n\n      if (formatObj.type) {\n        formattedValue = this.globalize.formatDate(new Date(value.toString()), formatObj);\n      } else {\n        delete formatObj.type;\n\n        if (formatObj.format && !this.formatRegex.test(formatObj.format)) {\n          var pattern = formatObj.format.match(this.customRegex);\n          var integerPart = pattern[6];\n          formatObj.useGrouping = integerPart.indexOf(',') !== -1;\n        }\n\n        formattedValue = this.globalize.formatNumber(value, formatObj);\n      }\n    }\n\n    return formattedValue;\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  OlapEngine.prototype.getMeasureInfo = function () {\n    var mAxis = 'column';\n    var mIndex;\n    var values = [];\n\n    for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n      var field = _a[_i];\n      values[values.length] = field.isCalculatedField ? this.fieldList[field.name].tag : field.name;\n    }\n\n    if (values.length > 1) {\n      if (this.isMeasureAvail) {\n        var isAvail = false;\n\n        for (var i = 0, cnt = this.rows.length; i < cnt; i++) {\n          if (this.rows[i].name.toLowerCase() === '[measures]') {\n            mAxis = 'row';\n            mIndex = i;\n            isAvail = true;\n            break;\n          }\n        }\n\n        if (!isAvail) {\n          for (var i = 0, cnt = this.columns.length; i < cnt; i++) {\n            if (this.columns[i].name.toLowerCase() === '[measures]') {\n              mAxis = 'column';\n              mIndex = i;\n              isAvail = true;\n              break;\n            }\n          }\n        }\n      } else {\n        mAxis = this.valueAxis;\n        mIndex = mAxis === 'row' ? this.rows.length - 1 : this.columns.length - 1;\n      }\n\n      return {\n        measureAxis: mAxis,\n        measureIndex: mIndex,\n        valueInfo: values\n      };\n    } else {\n      return {\n        measureAxis: mAxis,\n        measureIndex: -1,\n        valueInfo: []\n      };\n    }\n  };\n  /* eslint-disable  */\n\n\n  OlapEngine.prototype.frameMeasureOrder = function (measureInfo, axis, tuples, vTuples, cLen) {\n    var orderedTuples = [];\n    var orderedVTuples = [];\n    var orderedIndex = [];\n    var levels = {};\n    var cLevels = [];\n    var measureAxis = measureInfo.measureAxis;\n    var measureIndex = measureInfo.measureIndex;\n    var values = measureInfo.valueInfo;\n\n    if (measureAxis === axis && values.length > 0) {\n      var levelCollection = {};\n      var uniqueLevels = [];\n\n      for (var j = 0, lnt = tuples.length; j < lnt; j++) {\n        var node = tuples[j];\n        var members = [].slice.call(node.querySelectorAll('Member'));\n        var level = '';\n        var cLevel = '';\n        var i = 0;\n\n        while (i < members.length) {\n          level = level + (level !== '' ? '~~' : '') + members[i].querySelector('UName').textContent;\n\n          if (i === measureIndex && measureIndex === 0) {\n            cLevel = level;\n          } else if (i === measureIndex - 1) {\n            cLevel = level;\n          }\n\n          i++;\n        }\n\n        if (levelCollection[cLevel]) {\n          levelCollection[cLevel][levelCollection[cLevel].length] = level;\n        } else {\n          levelCollection[cLevel] = [level];\n          uniqueLevels[uniqueLevels.length] = cLevel;\n        }\n\n        levels[level] = {\n          index: j,\n          node: node\n        };\n        cLevels[cLevels.length] = level;\n      }\n\n      if (cLevels.length > 0) {\n        if (uniqueLevels.length > 0) {\n          if (measureIndex === 0) {\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n              var name_1 = values_1[_i];\n\n              for (var _a = 0, uniqueLevels_1 = uniqueLevels; _a < uniqueLevels_1.length; _a++) {\n                var key = uniqueLevels_1[_a];\n\n                if (key === name_1) {\n                  for (var _b = 0, _c = levelCollection[key]; _b < _c.length; _b++) {\n                    var level = _c[_b];\n                    orderedIndex[orderedIndex.length] = levels[level].index;\n                    orderedTuples[orderedTuples.length] = levels[level].node;\n                  }\n                }\n              }\n            }\n          } else {\n            for (var _d = 0, uniqueLevels_2 = uniqueLevels; _d < uniqueLevels_2.length; _d++) {\n              var key = uniqueLevels_2[_d];\n\n              for (var _e = 0, values_2 = values; _e < values_2.length; _e++) {\n                var name_2 = values_2[_e];\n\n                for (var _f = 0, _g = levelCollection[key]; _f < _g.length; _f++) {\n                  var level = _g[_f];\n                  var levelInfo = level.split('~~');\n\n                  if (levelInfo[measureIndex] === name_2) {\n                    orderedIndex[orderedIndex.length] = levels[level].index;\n                    orderedTuples[orderedTuples.length] = levels[level].node;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (vTuples.length > 0) {\n        var valueIndex = [];\n        var vOrdinalIndex = [];\n        var len = 0;\n        var cRow = 0;\n\n        for (var j = 0, cnt = vTuples.length; j < cnt; j++) {\n          if (len > cLen - 1) {\n            cRow++;\n            len = 0;\n\n            if (!valueIndex[cRow]) {\n              valueIndex[cRow] = [];\n            }\n\n            valueIndex[cRow][len] = j;\n            len++;\n          } else {\n            if (!valueIndex[cRow]) {\n              valueIndex[cRow] = [];\n            }\n\n            valueIndex[cRow][len] = j;\n            len++;\n          }\n\n          vOrdinalIndex[vOrdinalIndex.length] = Number(vTuples[j].getAttribute('CellOrdinal'));\n        }\n\n        if (measureAxis === 'column') {\n          if (valueIndex.length > 0 && valueIndex[0].length === orderedIndex.length) {\n            for (var i = 0, cnt = orderedIndex.length; i < cnt; i++) {\n              var j = 0;\n\n              while (j < valueIndex.length) {\n                var index = j * cLen + i;\n                var ordinalValue = vOrdinalIndex[index].toString();\n                var tuple = vTuples[Number(valueIndex[j][orderedIndex[i]])];\n                tuple.setAttribute('CellOrdinal', ordinalValue.toString());\n                orderedVTuples[index] = tuple;\n                j++;\n              }\n            }\n          }\n        } else {\n          if (valueIndex.length === orderedIndex.length) {\n            for (var i = 0, cnt = orderedIndex.length; i < cnt; i++) {\n              var j = 0;\n\n              while (j < valueIndex[orderedIndex[i]].length) {\n                var index = i * cLen + j;\n                var ordinalValue = vOrdinalIndex[index].toString();\n                var tuple = vTuples[Number(valueIndex[orderedIndex[i]][j])];\n                tuple.setAttribute('CellOrdinal', ordinalValue.toString());\n                orderedVTuples[orderedVTuples.length] = tuple;\n                j++;\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        orderedHeaderTuples: orderedTuples,\n        orderedValueTuples: orderedVTuples\n      };\n    } else {\n      return {\n        orderedHeaderTuples: tuples,\n        orderedValueTuples: vTuples\n      };\n    }\n  };\n  /* eslint-disable  */\n\n\n  OlapEngine.prototype.getDrilledSets = function (uNameCollection, currentCell, fieldPos, axis) {\n    var levels = [];\n    var memberName = currentCell.actualText.toString();\n    var tupCollection = axis === 'row' ? this.tupRowInfo : this.tupColumnInfo;\n    var currTuple = tupCollection[currentCell.ordinal];\n    var measurePos = tupCollection[0].typeCollection.indexOf('3');\n    var allStartPos = measurePos === 0 ? 1 : 0;\n    var tupPos = 0;\n    var isWithoutAllMember = tupCollection[0].typeCollection[fieldPos] === '1';\n\n    while (tupPos < tupCollection.length) {\n      if (isNullOrUndefined(tupCollection[tupPos].allStartPos) || tupCollection[tupPos].allStartPos > allStartPos) {\n        levels[levels.length] = tupCollection[tupPos].uNameCollection;\n      }\n\n      tupPos++;\n    }\n\n    var memberArray = uNameCollection.split('::[').map(function (item) {\n      return item[0] === '[' ? item : '[' + item;\n    });\n    var joinArray = [];\n\n    for (var memPos = 0; memPos <= fieldPos; memPos++) {\n      if (memberArray[memPos]) {\n        if ((isWithoutAllMember || this.isPaging) && memPos === fieldPos) {\n          var splitLevels = memberArray[memPos].split('~~');\n          var drillLevel = splitLevels.indexOf(memberName);\n          var cropLevels = [];\n\n          for (var lPos = 0; lPos <= drillLevel; lPos++) {\n            cropLevels.push(splitLevels[lPos]);\n          }\n\n          joinArray[joinArray.length] = cropLevels.length > 0 ? cropLevels.join('~~') : memberArray[memPos];\n        } else {\n          joinArray[joinArray.length] = memberArray[memPos];\n        }\n      }\n    }\n\n    uNameCollection = joinArray.join('::');\n    var childSets = [];\n    var memberObj = {};\n\n    for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {\n      var item = levels_1[_i];\n\n      if (item.indexOf(uNameCollection) === 0) {\n        childSets.push(item);\n\n        if (this.isPaging) {\n          var drillField = item.split('::[')[fieldPos];\n          drillField = drillField[0] === '[' ? drillField : '[' + drillField;\n          var drillFieldSep = drillField.split('~~');\n\n          for (var fPos = drillFieldSep.indexOf(memberName); fPos < drillFieldSep.length; fPos++) {\n            memberObj[drillFieldSep[fPos]] = drillFieldSep[fPos];\n          }\n        }\n      }\n    }\n\n    if (this.isPaging) {\n      var fieldSep = currTuple.uNameCollection.split('::[').map(function (item) {\n        return item[0] === '[' ? item : '[' + item;\n      });\n      var cropArray = [];\n\n      for (var fPos = 0; fPos < fieldSep.length; fPos++) {\n        if (fPos !== fieldPos) {\n          cropArray[fPos] = fieldSep[fPos];\n        }\n      }\n\n      var drillFieldSep = Object.keys(memberObj);\n\n      for (var fPos = 0; fPos < drillFieldSep.length; fPos++) {\n        cropArray[fieldPos] = drillFieldSep[fPos];\n        childSets.push(cropArray.join('::'));\n      }\n    }\n\n    var drillSets = {};\n\n    for (var _a = 0, childSets_1 = childSets; _a < childSets_1.length; _a++) {\n      var level = childSets_1[_a];\n      var fields = level.split('::[').map(function (item) {\n        return item[0] === '[' ? item : '[' + item;\n      });\n      var set = '';\n\n      for (var pos = 0; pos <= fieldPos; pos++) {\n        var field = fields[pos];\n\n        if (field) {\n          var members = field.split('~~');\n          set = set + (set !== '' ? '~~' : '') + members[members.length - 1];\n        }\n      }\n\n      drillSets[set] = set;\n    }\n\n    return drillSets;\n  };\n\n  OlapEngine.prototype.updateDrilledInfo = function (dataSourceSettings) {\n    this.dataSourceSettings = dataSourceSettings;\n    this.drilledMembers = dataSourceSettings.drilledMembers ? this.updateDrilledItems(dataSourceSettings.drilledMembers) : []; // MDXQuery.getCellSets(this.dataSourceSettings as IDataOptions, this);\n\n    this.generateGridData(dataSourceSettings);\n  };\n\n  OlapEngine.prototype.updateCalcFields = function (dataSourceSettings, lastcalcInfo) {\n    this.dataSourceSettings = dataSourceSettings;\n    this.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];\n    this.getAxisFields();\n    this.updateFieldlist();\n    this.loadCalculatedMemberElements(this.calculatedFieldSettings);\n\n    if (this.dataFields[lastcalcInfo.name]) {\n      this.generateGridData(dataSourceSettings);\n    } else {\n      MDXQuery.getCellSets(dataSourceSettings, this, true, undefined, true);\n    }\n  };\n\n  OlapEngine.prototype.onSort = function (dataSourceSettings) {\n    this.dataSourceSettings = dataSourceSettings;\n    this.sortSettings = dataSourceSettings.sortSettings ? dataSourceSettings.sortSettings : [];\n    this.getAxisFields();\n    this.frameSortObject();\n    this.updateFieldlist();\n\n    if (this.xmlaCellSet.length > 0 && this.xmlDoc) {\n      this.generateEngine(this.xmlDoc, this.request, this.customArgs);\n    } else {\n      this.generateGridData(dataSourceSettings);\n    }\n  };\n\n  OlapEngine.prototype.updateFieldlist = function (isInit) {\n    var i = 0;\n\n    while (i < this.savedFieldListData.length) {\n      var fieldName = this.savedFieldListData[i].id;\n      var parentID = this.savedFieldListData[i].pid; // let aggregateType: string = this.getAggregateType(fieldName);\n      // this.savedFieldListData[i].aggregateType = aggregateType;\n\n      if (this.savedFieldList[fieldName]) {\n        var sortOrder = this.enableSort ? this.sortObject[fieldName] ? this.sortObject[fieldName] : 'Ascending' : 'None';\n        this.savedFieldList[fieldName].isSelected = false;\n        this.savedFieldList[fieldName].isExcelFilter = false; // this.savedFieldList[fieldName].aggregateType = aggregateType;\n\n        this.savedFieldList[fieldName].sort = sortOrder;\n        this.savedFieldList[fieldName].allowDragAndDrop = true;\n        this.savedFieldList[fieldName].showFilterIcon = true;\n        this.savedFieldList[fieldName].showSortIcon = true;\n        this.savedFieldList[fieldName].showEditIcon = true;\n        this.savedFieldList[fieldName].showRemoveIcon = true;\n        this.savedFieldList[fieldName].showValueTypeIcon = true;\n        this.savedFieldList[fieldName].showSubTotals = true;\n        this.savedFieldListData[i].sort = sortOrder;\n        this.savedFieldListData[i].allowDragAndDrop = true;\n        this.savedFieldListData[i].showFilterIcon = true;\n        this.savedFieldListData[i].showSortIcon = true;\n        this.savedFieldListData[i].showEditIcon = true;\n        this.savedFieldListData[i].showRemoveIcon = true;\n        this.savedFieldListData[i].showValueTypeIcon = true;\n        this.savedFieldListData[i].showSubTotals = true;\n\n        if (isInit) {\n          this.savedFieldList[fieldName].filter = [];\n          this.savedFieldList[fieldName].actualFilter = [];\n        }\n      }\n\n      if (this.dataFields[fieldName] && this.savedFieldList[fieldName] && this.selectedItems.indexOf(fieldName) > -1) {\n        this.savedFieldList[fieldName].isSelected = true;\n        this.savedFieldList[fieldName].allowDragAndDrop = this.dataFields[fieldName] ? this.dataFields[fieldName].allowDragAndDrop : true;\n        this.savedFieldList[fieldName].showFilterIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showFilterIcon : true;\n        this.savedFieldList[fieldName].showSortIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showSortIcon : true;\n        this.savedFieldList[fieldName].showEditIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showEditIcon : true;\n        this.savedFieldList[fieldName].showRemoveIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showRemoveIcon : true;\n        this.savedFieldList[fieldName].showValueTypeIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showValueTypeIcon : true;\n        this.savedFieldList[fieldName].showSubTotals = this.dataFields[fieldName] ? this.dataFields[fieldName].showSubTotals : true;\n        this.savedFieldListData[i].isSelected = true;\n        this.savedFieldListData[i].allowDragAndDrop = this.dataFields[fieldName] ? this.dataFields[fieldName].allowDragAndDrop : true;\n        this.savedFieldListData[i].showFilterIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showFilterIcon : true;\n        this.savedFieldListData[i].showSortIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showSortIcon : true;\n        this.savedFieldListData[i].showEditIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showEditIcon : true;\n        this.savedFieldListData[i].showRemoveIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showRemoveIcon : true;\n        this.savedFieldListData[i].showValueTypeIcon = this.dataFields[fieldName] ? this.dataFields[fieldName].showValueTypeIcon : true;\n        this.savedFieldListData[i].showSubTotals = this.dataFields[fieldName] ? this.dataFields[fieldName].showSubTotals : true;\n      } else {\n        if (this.dataFields[parentID] && this.savedFieldList[parentID] && this.selectedItems.indexOf(parentID) > -1) {\n          this.savedFieldListData[i].isSelected = true;\n        } else {\n          this.savedFieldListData[i].isSelected = false;\n        }\n      }\n      /* eslint-enable max-len */\n\n\n      if (this.savedFieldList[fieldName] && this.savedFieldList[fieldName].isCalculatedField || fieldName.toLowerCase() === '[calculated members].[_0]') {\n        var isAvail = false;\n\n        for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {\n          var field = _a[_i];\n\n          if (fieldName === field.name) {\n            var expression = field.formula;\n            var formatString = field.formatString;\n            this.savedFieldListData[i].formula = expression;\n            this.savedFieldListData[i].formatString = formatString;\n            this.savedFieldListData[i].parentHierarchy = expression.toLowerCase().indexOf('measure') > -1 ? undefined : field.hierarchyUniqueName;\n            this.savedFieldList[fieldName].formula = expression;\n            this.savedFieldList[fieldName].formatString = formatString;\n            this.savedFieldList[fieldName].parentHierarchy = this.savedFieldListData[i].parentHierarchy;\n            isAvail = true;\n          }\n        }\n\n        if (!isAvail || fieldName.toLowerCase() === '[calculated members].[_0]' && this.calculatedFieldSettings.length === 0) {\n          this.savedFieldListData.splice(i, 1);\n          i--;\n\n          if (this.savedFieldList[fieldName]) {\n            delete this.savedFieldList[fieldName];\n          }\n        }\n      }\n\n      i++;\n    }\n\n    this.fieldList = this.savedFieldList;\n    this.fieldListData = this.savedFieldListData;\n  };\n\n  OlapEngine.prototype.updateFieldlistData = function (name, isSelect) {\n    for (var _i = 0, _a = this.fieldListData; _i < _a.length; _i++) {\n      var item = _a[_i];\n\n      if (item.id === name) {\n        item.isSelected = isSelect ? true : false;\n        break;\n      }\n    }\n  };\n\n  OlapEngine.prototype.getFormattedFields = function (formats) {\n    this.formatFields = {};\n    var cnt = formats.length;\n\n    while (cnt--) {\n      this.formatFields[formats[cnt].name] = formats[cnt];\n    }\n  };\n\n  OlapEngine.prototype.getFieldList = function (dataSourceSettings) {\n    var args = {\n      catalog: dataSourceSettings.catalog,\n      cube: dataSourceSettings.cube,\n      url: dataSourceSettings.url,\n      LCID: dataSourceSettings.localeIdentifier.toString(),\n      request: 'MDSCHEMA_HIERARCHIES'\n    };\n    this.getTreeData(args, this.getFieldListItems.bind(this), {\n      dataSourceSettings: dataSourceSettings,\n      action: 'loadFieldElements'\n    });\n  };\n\n  OlapEngine.prototype.getTreeData = function (args, successMethod, customArgs) {\n    var connectionString = this.getConnectionInfo(args.url, args.LCID);\n    var soapMessage = '<Envelope xmlns=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><Header/><Body><Discover xmlns=\\\"urn:schemas-microsoft-com:xml-analysis\\\"><RequestType>' + args.request + '</RequestType><Restrictions><RestrictionList><CATALOG_NAME>' + args.catalog + '</CATALOG_NAME><CUBE_NAME>' + args.cube + '</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>' + args.catalog + '</Catalog> <LocaleIdentifier>' + connectionString.LCID + '</LocaleIdentifier></PropertyList></Properties></Discover></Body></Envelope>';\n    this.doAjaxPost('POST', connectionString.url, soapMessage, successMethod, customArgs);\n  };\n  /* eslint-enable max-len */\n\n\n  OlapEngine.prototype.getAxisFields = function () {\n    this.rows = this.dataSourceSettings.rows ? this.dataSourceSettings.rows : [];\n    this.columns = this.dataSourceSettings.columns ? this.dataSourceSettings.columns : [];\n    this.filters = this.dataSourceSettings.filters ? this.dataSourceSettings.filters : [];\n    this.values = this.dataSourceSettings.values ? this.dataSourceSettings.values : [];\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns, this.values, this.filters);\n    var len = dataFields.length;\n\n    while (len--) {\n      this.dataFields[dataFields[len].name] = dataFields[len];\n\n      if (dataFields[len].name.toLowerCase() === '[measures]') {\n        this.isMeasureAvail = true;\n      } else {\n        this.selectedItems.push(dataFields[len].name);\n      }\n    }\n\n    this.mappingFields = {};\n\n    if (this.dataSourceSettings.fieldMapping) {\n      for (var _i = 0, _a = this.dataSourceSettings.fieldMapping; _i < _a.length; _i++) {\n        var field = _a[_i];\n        this.mappingFields[field.name] = field;\n      }\n    }\n\n    if (!this.isMeasureAvail && this.values.length > 0) {\n      var measureField = {\n        name: '[Measures]',\n        caption: 'Measures',\n        showRemoveIcon: true,\n        allowDragAndDrop: true\n      };\n\n      if (this.valueAxis === 'row') {\n        this.rows.push(measureField);\n      } else {\n        this.columns.push(measureField);\n      }\n\n      this.isMeasureAvail = true;\n    }\n  };\n\n  OlapEngine.prototype.getAggregateType = function (fieldName, aggregateType) {\n    var type;\n\n    switch (aggregateType) {\n      case '1':\n        type = 'Sum';\n        break;\n\n      case '2':\n        type = 'Count';\n        break;\n\n      case '3':\n        type = 'Min';\n        break;\n\n      case '4':\n        type = 'Max';\n        break;\n\n      case '5':\n        type = 'Avg';\n        break;\n\n      case '8':\n        type = 'DistinctCount';\n        break;\n\n      case '127':\n        type = 'CalculatedField';\n        break;\n\n      default:\n        type = undefined;\n        break;\n    } // if (this.dataFields[fieldName]) {\n    //     return this.dataFields[fieldName].type;\n    // } else {\n    //     return undefined;\n    // }\n\n\n    if (type) {\n      return type;\n    } else {\n      return undefined;\n    }\n  };\n\n  OlapEngine.prototype.getUniqueName = function (name) {\n    var uName = name;\n\n    for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {\n      var item = _a[_i];\n      var expression = item.formula;\n      var prefixName = expression.toLowerCase().indexOf('measure') > -1 ? '[Measures].' : item.hierarchyUniqueName + '.';\n      var uniqueName = prefixName + '[' + item.name + ']';\n\n      if (name === uniqueName) {\n        uName = item.name;\n        break;\n      }\n    }\n\n    return uName;\n  };\n\n  OlapEngine.prototype.updateFilterItems = function (filterItems) {\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns);\n\n    for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {\n      var filter = filterItems_1[_i];\n\n      if (filter.type === 'Include' && this.allowMemberFilter) {\n        var members = this.fieldList[filter.name].members;\n        var isMembersAvail = members && Object.keys(members).length > 0;\n        this.fieldList[filter.name].actualFilter = filter.items.slice();\n        var selectedElements = extend([], filter.items, null, true);\n\n        if (isMembersAvail) {\n          var i = 0;\n\n          while (i < selectedElements.length) {\n            var parentNodes = [];\n            parentNodes = this.getParentNode(selectedElements[i], members, parentNodes);\n\n            for (var _a = 0, parentNodes_1 = parentNodes; _a < parentNodes_1.length; _a++) {\n              var node = parentNodes_1[_a];\n              var index = PivotUtil.inArray(node, filter.items);\n\n              if (index !== -1) {\n                filter.items.splice(index, 1);\n              }\n            }\n\n            i++;\n          }\n        }\n\n        var currentItems = [];\n\n        for (var _b = 0, _c = filter.items; _b < _c.length; _b++) {\n          var selectedElement = _c[_b]; // currentItems.push(selectedElement.replace(/\\&/g, '&amp;'));\n\n          currentItems.push(selectedElement);\n\n          if (isMembersAvail) {\n            this.fieldList[filter.name].filter.push(members[selectedElement].caption);\n          } else {\n            this.fieldList[filter.name].filter.push(selectedElement);\n          }\n        }\n\n        this.filterMembers[filter.name] = currentItems;\n        this.fieldList[filter.name].isExcelFilter = false;\n      } else if ((this.allowValueFilter || this.allowLabelFilter) && ['Date', 'Label', 'Number', 'Value'].indexOf(filter.type) !== -1) {\n        for (var _d = 0, dataFields_1 = dataFields; _d < dataFields_1.length; _d++) {\n          var item = dataFields_1[_d];\n\n          if (item.name === filter.name) {\n            var filterMembers = this.filterMembers[filter.name];\n\n            if (filterMembers && typeof filterMembers[0] === 'object' && filterMembers[0].type === filter.type) {\n              filterMembers[filterMembers.length] = filter;\n            } else {\n              this.filterMembers[filter.name] = [filter];\n            }\n\n            this.fieldList[filter.name].isExcelFilter = true;\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  OlapEngine.prototype.getParentNode = function (name, members, items) {\n    if (members[name].parent && name !== members[name].parent) {\n      var parentItem = members[name].parent;\n      items.push(parentItem);\n      this.getParentNode(parentItem, members, items);\n    }\n\n    return items;\n  };\n\n  OlapEngine.prototype.updateDrilledItems = function (drilledMembers) {\n    var drilledItems = [];\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns);\n\n    for (var _i = 0, drilledMembers_1 = drilledMembers; _i < drilledMembers_1.length; _i++) {\n      var item = drilledMembers_1[_i];\n\n      for (var _a = 0, dataFields_2 = dataFields; _a < dataFields_2.length; _a++) {\n        var field = dataFields_2[_a];\n\n        if (item.name === field.name) {\n          drilledItems.push(item);\n          break;\n        }\n      }\n    }\n\n    return drilledItems;\n  }; // private updateAllMembers(dataSourceSettings: IDataOptions, slicers: IFieldOptions[]): void {\n  //     let query: string = '';\n  //     for (let field of slicers) {\n  //         let fieldList: IOlapField = this.fieldList[field.name];\n  //         if (!(fieldList && fieldList.hasAllMember && fieldList.allMember)) {\n  //             query = query + (query !== '' ? ' * ' : '') + '{' + field.name + '}';\n  //         } else {\n  //             continue;\n  //         }\n  //     }\n  //     if (query !== '') {\n  //         this.getAllMember(dataSourceSettings, query);\n  //     } else {\n  //         return;\n  //     }\n  // }\n  // private getAllMember(dataSourceSettings: IDataOptions, query: string): void {\n  //     let dimProp: string = 'DIMENSION PROPERTIES HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY';\n  //     let mdxQuery: string = 'SELECT (' + query + ')' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n  //     let xmla: string = this.getSoapMsg(dataSourceSettings, mdxQuery);\n  //     let connectionString: ConnectionInfo = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n  //     this.doAjaxPost('POST', connectionString.url, xmla, this.generateAllMembers.bind(this), \n  // { dataSourceSettings: dataSourceSettings, action: 'fetchAllMembers' });\n  // }\n\n  /**\n   * @hidden\n   */\n\n\n  OlapEngine.prototype.getDrillThroughData = function (pivotValue, maxRows) {\n    var column = this.tupColumnInfo[pivotValue.colOrdinal] && this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection && this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection !== '' ? this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection.split('::[').map(function (item) {\n      return item[0] === '[' ? item : '[' + item;\n    }) : [];\n    var row = this.tupRowInfo[pivotValue.rowOrdinal] && this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection && this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection !== '' ? this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection.split('::[').map(function (item) {\n      return item[0] === '[' ? item : '[' + item;\n    }) : [];\n    var filters;\n    var filteritems = [];\n    var filterQuery = '';\n\n    for (var i = 0; i < this.filters.length; i++) {\n      filters = this.filterMembers[this.filters[i].name];\n\n      if (filters) {\n        for (var j = 0; j < filters.length; j++) {\n          filterQuery = filterQuery + filters[j];\n          filterQuery = j < filters.length - 1 ? filterQuery + ',' : filterQuery + '';\n        }\n\n        filteritems[i] = filterQuery;\n        filterQuery = '';\n      }\n    }\n\n    for (var i = 0; i < filteritems.length; i++) {\n      filterQuery = filterQuery === '' ? '{' + filteritems[i] + '}' : filterQuery + ',' + '{' + filteritems[i] + '}';\n    }\n\n    var columnQuery = '';\n    var rowQuery = '';\n\n    for (var i = 0; i < column.length; i++) {\n      columnQuery = (columnQuery.length > 0 ? columnQuery + ',' : '') + (column[i].split('~~').length > 1 ? column[i].split('~~')[column[i].split('~~').length - 1] : column[i]);\n    }\n\n    for (var i = 0; i < row.length; i++) {\n      rowQuery = (rowQuery.length > 0 ? rowQuery + ',' : '') + (row[i].split('~~').length > 1 ? row[i].split('~~')[row[i].split('~~').length - 1] : row[i]);\n    }\n\n    var drillQuery = 'DRILLTHROUGH MAXROWS ' + maxRows + ' Select(' + (columnQuery.length > 0 ? columnQuery : '') + (columnQuery.length > 0 && rowQuery.length > 0 ? ',' : '') + (rowQuery.length > 0 ? rowQuery : '') + ') on 0 from ' + (filterQuery === '' ? '[' + this.dataSourceSettings.cube + ']' : '(SELECT (' + filterQuery + ') ON COLUMNS FROM [' + this.dataSourceSettings.cube + '])');\n    drillQuery = drillQuery.replace(/&/g, '&amp;');\n    var xmla = this.getSoapMsg(this.dataSourceSettings, drillQuery);\n    var connectionString = this.getConnectionInfo(this.dataSourceSettings.url, this.dataSourceSettings.localeIdentifier);\n    this.doAjaxPost('POST', connectionString.url, xmla, this.drillThroughSuccess.bind(this), {\n      dataSourceSettings: this.dataSourceSettings,\n      action: 'drillThrough'\n    });\n  };\n\n  OlapEngine.prototype.drillThroughSuccess = function (xmlDoc) {\n    var tag = [].slice.call(xmlDoc.querySelectorAll('row'));\n    var gridJSON = '';\n\n    if (tag.length > 0) {\n      var json = [];\n      var i = 0;\n\n      while (i < tag.length) {\n        var child = [].slice.call(tag[i].children);\n        var j = 0;\n\n        while (j < child.length) {\n          json.push('\"' + child[j].tagName + '\"' + ':' + '\"' + child[j].textContent + '\"');\n          j++;\n        }\n\n        i++;\n      }\n\n      var value = json[0];\n      var k = 0;\n\n      while (k < json.length) {\n        if (Object.keys(JSON.parse('[{' + json[k] + '}]')[0])[0] === Object.keys(JSON.parse('[{' + value + '}]')[0])[0]) {\n          gridJSON += gridJSON === '' ? '[{' + json[k] : '}, {' + json[k];\n          k++;\n          continue;\n        }\n\n        gridJSON += ',' + json[k];\n        k++;\n      }\n\n      gridJSON += '}]';\n    } else {\n      var tag_1 = [].slice.call(xmlDoc.querySelectorAll('faultstring'));\n      var i = 0;\n\n      while (i < tag_1.length) {\n        gridJSON += tag_1[i].textContent;\n        i++;\n      }\n    }\n\n    this.gridJSON = gridJSON;\n  };\n\n  OlapEngine.prototype.getFilterMembers = function (dataSourceSettings, fieldName, levelCount, isSearchFilter, loadLevelMember) {\n    // let dimProp: string = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE';\n    var levels = this.fieldList[fieldName].levels;\n    var cLevel = this.fieldList[fieldName].levelCount;\n    var filterQuery;\n\n    if (loadLevelMember) {\n      filterQuery = 'Descendants({' + levels[cLevel].id + '}, ' + levels[levelCount - 1].id + ', ' + (levelCount - cLevel === 1 ? 'SELF)' : 'SELF_AND_BEFORE)');\n    } else {\n      filterQuery = fieldName + ', Descendants({' + levels[0].id + '}, ' + levels[levelCount - 1].id + ', SELF_AND_BEFORE)';\n    }\n\n    this.fieldList[fieldName].levelCount = levelCount;\n\n    if (!isSearchFilter) {\n      this.getMembers(dataSourceSettings, fieldName, false, filterQuery, loadLevelMember);\n    }\n\n    return filterQuery;\n  };\n\n  OlapEngine.prototype.getMembers = function (dataSourceSettings, fieldName, isAllFilterData, filterParentQuery, loadLevelMember) {\n    // dimProp = \"dimension properties CHILDREN_CARDINALITY, MEMBER_TYPE\";\n    var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n    var mdxQuery;\n    var hasAllMember = this.fieldList[fieldName].hasAllMember;\n    var hierarchy = (hasAllMember ? fieldName : fieldName + '.LEVELS(0)').replace(/\\&/g, '&amp;');\n\n    if (!isAllFilterData) {\n      mdxQuery = 'SELECT ({' + (filterParentQuery ? filterParentQuery : hasAllMember ? hierarchy + ', ' + hierarchy + '.CHILDREN' : hierarchy + '.ALLMEMBERS') + '})' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n    } else {\n      mdxQuery = 'SELECT ({' + hierarchy + '.ALLMEMBERS})' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n    }\n\n    var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n    var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n\n    if (!loadLevelMember) {\n      this.fieldList[fieldName].filterMembers = [];\n      this.fieldList[fieldName].childMembers = [];\n      this.fieldList[fieldName].searchMembers = []; // this.fieldList[fieldName].isHierarchy = true;\n\n      this.fieldList[fieldName].members = {};\n      this.fieldList[fieldName].currrentMembers = {};\n    }\n\n    this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), {\n      dataSourceSettings: dataSourceSettings,\n      fieldName: fieldName,\n      loadLevelMembers: loadLevelMember,\n      action: 'fetchMembers'\n    });\n  };\n\n  OlapEngine.prototype.getChildMembers = function (dataSourceSettings, memberUQName, fieldName) {\n    // dimProp = \"dimension properties CHILDREN_CARDINALITY, MEMBER_TYPE\";\n    var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE'; // var mdxQuery = 'SELECT SUBSET({' + memberUQName + '.CHILDREN}, 0, 5000)' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n\n    var mdxQuery = 'SELECT ({' + memberUQName.replace(/\\&/g, '&amp;') + '.CHILDREN})' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n    var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n    var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n    this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), {\n      dataSourceSettings: dataSourceSettings,\n      fieldName: fieldName,\n      action: 'fetchChildMembers'\n    });\n  };\n\n  OlapEngine.prototype.getCalcChildMembers = function (dataSourceSettings, memberUQName) {\n    this.calcChildMembers = [];\n    var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n    var mdxQuery = 'SELECT ({' + memberUQName.replace(/\\&/g, '&amp;') + '.MEMBERS})' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n    var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n    var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n    this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), {\n      dataSourceSettings: dataSourceSettings,\n      action: 'fetchCalcChildMembers'\n    });\n  };\n\n  OlapEngine.prototype.getSearchMembers = function (dataSourceSettings, fieldName, searchString, maxNodeLimit, isAllFilterData, levelCount) {\n    this.fieldList[fieldName].searchMembers = [];\n    this.fieldList[fieldName].currrentMembers = {};\n\n    if (searchString !== '') {\n      // dimProp = \"dimension properties CHILDREN_CARDINALITY, MEMBER_TYPE\";\n      var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n      var hierarchy = fieldName.replace(/\\&/g, '&amp;');\n      var mdxQuery = 'WITH SET [SearchMembersSet] AS &#39;FILTER(' + (isAllFilterData ? hierarchy + '.ALLMEMBERS, ' : '{' + (levelCount > 1 ? this.getFilterMembers(dataSourceSettings, fieldName, levelCount, true) : hierarchy + ', ' + hierarchy + '.CHILDREN') + '},') + '(INSTR(1, ' + hierarchy + '.CurrentMember.member_caption, \"' + searchString + '\") > 0))&#39;' + 'SET [SearchParentsSet] AS &#39;GENERATE([SearchMembersSet], ASCENDANTS([SearchMembersSet].Current))&#39;' + 'SET [SearchSet] AS &#39;HIERARCHIZE(DISTINCT({[SearchMembersSet], [SearchParentsSet]}))&#39;' + 'SELECT SUBSET([SearchSet], 0, ' + maxNodeLimit + ')' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n      var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n      var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n      this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), {\n        dataSourceSettings: dataSourceSettings,\n        fieldName: fieldName,\n        action: 'fetchSearchMembers'\n      });\n    } else {\n      return;\n    }\n  };\n\n  OlapEngine.prototype.generateMembers = function (xmlDoc, request, customArgs) {\n    var fields = [].slice.call(xmlDoc.querySelectorAll('Axis[name=\"Axis0\"] Tuple'));\n    var fieldName = customArgs.fieldName;\n    var allMember;\n    var filterMembers = {};\n\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var field = fields_1[_i]; // let hierarchyUqName: string = fields[0].querySelector('Member HIERARCHY_UNIQUE_NAME').textContent;\n\n      var member = field.querySelector('Member');\n      var memberType = member.querySelector('MEMBER_TYPE').textContent;\n      var memberUqName = member.querySelector('UName').textContent;\n      var caption = member.querySelector('Caption').textContent;\n      var parentUqName = member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : '';\n      var nodeAttr = {\n        'data-fieldName': fieldName,\n        'data-memberId': memberUqName\n      };\n\n      if (parentUqName === '' && memberType === '1') {\n        filterMembers = {\n          hasChildren: field.querySelector('CHILDREN_CARDINALITY') ? field.querySelector('CHILDREN_CARDINALITY').textContent !== '0' ? true : false : false,\n          isSelected: false,\n          id: memberUqName,\n          tag: memberUqName,\n          name: caption,\n          caption: caption,\n          htmlAttributes: nodeAttr\n        };\n\n        if (customArgs.action === 'fetchMembers' || customArgs.action === 'fetchChildMembers') {\n          this.fieldList[fieldName].members[memberUqName] = {\n            name: memberUqName,\n            caption: caption,\n            parent: undefined,\n            isNodeExpand: false,\n            isSelected: false\n          };\n          this.fieldList[fieldName].filterMembers.push(filterMembers);\n          this.fieldList[fieldName].childMembers.push(filterMembers);\n        } else if (customArgs.action === 'fetchSearchMembers') {\n          this.fieldList[fieldName].currrentMembers[memberUqName] = {\n            name: memberUqName,\n            caption: caption,\n            parent: undefined,\n            isNodeExpand: false,\n            isSelected: false\n          };\n          this.fieldList[fieldName].searchMembers.push(filterMembers);\n          filterMembers.expanded = true;\n        } else {\n          this.calcChildMembers.push(filterMembers);\n        }\n      } else if (parentUqName !== '' && memberType === '1') {\n        if (parentUqName === allMember && memberType === '1') {\n          filterMembers = {\n            hasChildren: field.querySelector('CHILDREN_CARDINALITY') ? field.querySelector('CHILDREN_CARDINALITY').textContent !== '0' ? true : false : false,\n            id: memberUqName,\n            name: caption,\n            isSelected: false,\n            caption: caption,\n            htmlAttributes: nodeAttr,\n            tag: memberUqName\n          };\n\n          if (customArgs.action === 'fetchMembers' || customArgs.action === 'fetchChildMembers') {\n            this.fieldList[fieldName].filterMembers.push(filterMembers);\n            this.fieldList[fieldName].childMembers.push(filterMembers);\n            this.fieldList[fieldName].members[memberUqName] = {\n              name: memberUqName,\n              caption: caption,\n              parent: undefined,\n              isNodeExpand: false,\n              isSelected: false\n            };\n          } else if (customArgs.action === 'fetchSearchMembers') {\n            filterMembers.expanded = true;\n            this.fieldList[fieldName].searchMembers.push(filterMembers);\n            this.fieldList[fieldName].currrentMembers[memberUqName] = {\n              name: memberUqName,\n              caption: caption,\n              parent: undefined,\n              isNodeExpand: false,\n              isSelected: false\n            };\n          } else {\n            this.calcChildMembers.push(filterMembers);\n          }\n        } else {\n          if (customArgs.action === 'fetchMembers' && this.fieldList[fieldName].members[memberUqName]) {\n            continue;\n          }\n\n          var nodeSelect = customArgs.loadLevelMembers ? this.fieldList[fieldName].members[parentUqName].isSelected : false;\n          filterMembers = {\n            hasChildren: field.querySelector('CHILDREN_CARDINALITY') ? field.querySelector('CHILDREN_CARDINALITY').textContent !== '0' ? true : false : false,\n            htmlAttributes: nodeAttr,\n            isSelected: false,\n            id: memberUqName,\n            pid: parentUqName,\n            name: caption,\n            caption: caption,\n            tag: memberUqName\n          };\n\n          if (customArgs.action === 'fetchMembers' || customArgs.action === 'fetchChildMembers') {\n            this.fieldList[fieldName].isHierarchy = false;\n            this.fieldList[fieldName].filterMembers.push(filterMembers);\n            this.fieldList[fieldName].childMembers.push(filterMembers);\n            this.fieldList[fieldName].members[memberUqName] = {\n              name: memberUqName,\n              caption: caption,\n              parent: parentUqName,\n              isNodeExpand: false,\n              isSelected: nodeSelect\n            };\n          } else if (customArgs.action === 'fetchSearchMembers') {\n            this.fieldList[fieldName].searchMembers.push(filterMembers);\n            filterMembers.expanded = true;\n            this.fieldList[fieldName].currrentMembers[memberUqName] = {\n              name: memberUqName,\n              caption: caption,\n              parent: parentUqName,\n              isNodeExpand: false,\n              isSelected: false\n            };\n          } else {\n            this.calcChildMembers.push(filterMembers);\n          }\n        }\n      } else if (memberType === '2') {\n        allMember = memberUqName;\n      }\n    }\n  };\n  /* eslint-enable max-len */\n  // private generateAllMembers(xmlDoc: Document, request: Ajax, customArgs: FieldData): void {\n  //     let members: HTMLElement[] = [].slice.call(xmlDoc.querySelectorAll('Axis[name=\"Axis0\"] Member'));\n  //     for (let member of members) {\n  //         let caption: string = member.querySelector('Caption').textContent;\n  //         let fieldName: string = member.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n  //         this.fieldList[fieldName].allMember = caption;\n  //     }\n  // }\n\n\n  OlapEngine.prototype.getFieldListItems = function (xmlDoc, request, customArgs) {\n    var fieldDate = {};\n    var hierarchyElements = [];\n    var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n\n    for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {\n      var field = fields_2[_i];\n      var isAllMemberAvail = [].slice.call(field.querySelectorAll('ALL_MEMBER')).length > 0;\n      var dimensionName = field.querySelector('DIMENSION_UNIQUE_NAME').textContent;\n      var hierarchyName = field.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n      var isSameDim = dimensionName === hierarchyName && dimensionName.toLowerCase() !== '[measures]' && hierarchyName.toLowerCase() !== '[measures]';\n      hierarchyElements.push({\n        pid: this.isMondrian || isSameDim ? dimensionName + '~#^Dim' : dimensionName,\n        id: hierarchyName,\n        name: field.querySelector('HIERARCHY_CAPTION').textContent,\n        caption: field.querySelector('HIERARCHY_CAPTION').textContent,\n        tag: hierarchyName,\n        hasAllMember: isAllMemberAvail,\n        allMember: isAllMemberAvail ? field.querySelectorAll('ALL_MEMBER')[0].textContent : undefined,\n        // aggregateType: this.getAggregateType(field.querySelector('HIERARCHY_UNIQUE_NAME').textContent),\n        type: 'string'\n      });\n    }\n\n    fieldDate = {\n      hierarchy: hierarchyElements,\n      hierarchySuccess: xmlDoc,\n      measures: []\n    };\n    this.fieldListObj = fieldDate;\n    var args = {\n      catalog: customArgs.dataSourceSettings.catalog,\n      cube: customArgs.dataSourceSettings.cube,\n      url: customArgs.dataSourceSettings.url,\n      LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n      request: 'MDSCHEMA_DIMENSIONS'\n    };\n    this.getTreeData(args, this.loadDimensionElements.bind(this), customArgs);\n  };\n\n  OlapEngine.prototype.loadCalculatedMemberElements = function (calcMembers) {\n    if (calcMembers.length > 0) {\n      var fieldListElements = this.fieldListData; // let calcElements: IOlapField[] = [];\n\n      var calcObj = {\n        hasChildren: true,\n        isSelected: false,\n        id: '[Calculated Members].[_0]',\n        name: '[Calculated Members].[_0]',\n        caption: 'Calculated Members',\n        spriteCssClass: 'e-calcMemberGroupCDB' + ' ' + cls.ICON,\n        tag: '[Calculated Members].[_0]',\n        //aggregateType: this.getAggregateType(dimensionName),\n        type: 'string'\n      };\n\n      if (fieldListElements.length > 0 && fieldListElements[0].id.toLowerCase() === '[measures]') {\n        fieldListElements.splice(0, 0, calcObj);\n      }\n\n      for (var _i = 0, calcMembers_1 = calcMembers; _i < calcMembers_1.length; _i++) {\n        var field = calcMembers_1[_i];\n\n        if (!this.fieldList[field.name]) {\n          var expression = field.formula;\n          var prefixName = expression.toLowerCase().indexOf('measure') > -1 ? '[Measures].' : field.hierarchyUniqueName + '.';\n          var uniqueName = prefixName + '[' + field.name + ']';\n          var caption = this.dataFields[field.name] && this.dataFields[field.name].caption ? this.dataFields[field.name].caption : this.mappingFields[field.name] && this.mappingFields[field.name].caption ? this.mappingFields[field.name].caption : field.name;\n          var formatString = field.formatString;\n          var calcField = {\n            hasChildren: false,\n            isSelected: false,\n            id: field.name,\n            pid: '[Calculated Members].[_0]',\n            name: field.name,\n            caption: caption,\n            spriteCssClass: 'e-calc-member' + ' ' + (expression.toLowerCase().indexOf('measure') > -1 ? 'e-calc-measure-icon' : 'e-calc-dimension-icon') + ' ' + cls.ICON,\n            tag: uniqueName,\n            formula: expression,\n            formatString: formatString,\n            aggregateType: undefined,\n            type: 'CalculatedField',\n            filter: [],\n            dateMember: [],\n            sort: 'Ascending',\n            actualFilter: [],\n            filterMembers: [],\n            childMembers: [],\n            searchMembers: [],\n            members: {},\n            currrentMembers: {},\n            isHierarchy: true,\n            isExcelFilter: false,\n            isCalculatedField: true,\n\n            /* eslint-disable */\n            allowDragAndDrop: this.dataFields[field.name] ? this.dataFields[field.name].allowDragAndDrop : this.mappingFields[field.name] ? this.mappingFields[field.name].allowDragAndDrop : true,\n            showFilterIcon: this.dataFields[field.name] ? this.dataFields[field.name].showFilterIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showFilterIcon : true,\n            showSortIcon: this.dataFields[field.name] ? this.dataFields[field.name].showSortIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showSortIcon : true,\n            showEditIcon: this.dataFields[field.name] ? this.dataFields[field.name].showEditIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showEditIcon : true,\n            showRemoveIcon: this.dataFields[field.name] ? this.dataFields[field.name].showRemoveIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showRemoveIcon : true,\n            showValueTypeIcon: this.dataFields[field.name] ? this.dataFields[field.name].showValueTypeIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showValueTypeIcon : true,\n            showSubTotals: this.dataFields[field.name] ? this.dataFields[field.name].showSubTotals : this.mappingFields[field.name] ? this.mappingFields[field.name].showSubTotals : true,\n            fieldType: expression.toLowerCase().indexOf('measure') > -1 ? 'Measure' : 'Dimension',\n            parentHierarchy: expression.toLowerCase().indexOf('measure') > -1 ? undefined : field.hierarchyUniqueName\n            /* eslint-enable */\n\n          };\n          fieldListElements.push(calcField);\n          this.fieldList[calcField.id] = calcField;\n        }\n      }\n    } else {\n      return;\n    }\n  };\n\n  OlapEngine.prototype.loadDimensionElements = function (xmlDoc, request, customArgs) {\n    var hierarchyElements = [];\n    var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n    var measure = {};\n\n    for (var _i = 0, fields_3 = fields; _i < fields_3.length; _i++) {\n      var field = fields_3[_i];\n      var dimensionName = field.querySelector('DIMENSION_UNIQUE_NAME').textContent;\n      var defaultHierarchy = field.querySelector('DEFAULT_HIERARCHY').textContent;\n      var dimensionCaption = field.querySelector('DIMENSION_CAPTION').textContent;\n      var isSameDim = dimensionName === defaultHierarchy;\n\n      if (dimensionName.toLowerCase().indexOf('[measure') >= 0) {\n        measure = {\n          hasChildren: true,\n          isSelected: false,\n          id: dimensionName,\n          name: dimensionName,\n          caption: dimensionCaption,\n          spriteCssClass: dimensionName.toLowerCase() === '[measures]' ? 'e-measureGroupCDB-icon' + ' ' + cls.ICON : 'e-dimensionCDB-icon' + ' ' + cls.ICON,\n          tag: dimensionName,\n          // aggregateType: this.getAggregateType(dimensionName),\n          type: 'string'\n        };\n      } else if (isNullOrUndefined(fields[0].querySelector('HIERARCHY_CAPTION'))) {\n        hierarchyElements.push({\n          hasChildren: true,\n          isSelected: false,\n          id: this.isMondrian || isSameDim ? dimensionName + '~#^Dim' : dimensionName,\n          name: dimensionName,\n          caption: dimensionCaption,\n          spriteCssClass: 'e-dimensionCDB-icon' + ' ' + cls.ICON,\n          tag: dimensionName,\n          defaultHierarchy: field.querySelector('DEFAULT_HIERARCHY').textContent,\n          // aggregateType: this.getAggregateType(dimensionName),\n          type: 'string'\n        });\n      }\n    }\n\n    hierarchyElements.splice(0, 0, measure);\n    this.fieldListData = hierarchyElements; // customArgs.hierarchy = this.fieldListData;\n    // customArgs.hierarchySuccess = this.fieldListObj.hierarchySuccess;\n    // this.loadHierarchyElements(customArgs);\n\n    var args = {\n      catalog: customArgs.dataSourceSettings.catalog,\n      cube: customArgs.dataSourceSettings.cube,\n      url: customArgs.dataSourceSettings.url,\n      LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n      request: 'MDSCHEMA_SETS'\n    };\n    this.getTreeData(args, this.loadNamedSetElements.bind(this), customArgs);\n  };\n\n  OlapEngine.prototype.loadNamedSetElements = function (xmlDoc, request, customArgs) {\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns, this.filters);\n    var dimensionElements = this.fieldListData;\n    var reportElement = [];\n\n    for (var _i = 0, dataFields_3 = dataFields; _i < dataFields_3.length; _i++) {\n      var field = dataFields_3[_i];\n      reportElement.push(field.name);\n    }\n\n    var measureGroupItems = [];\n    var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n\n    for (var _a = 0, fields_4 = fields; _a < fields_4.length; _a++) {\n      var field = fields_4[_a];\n\n      if (!(measureGroupItems.indexOf(field.querySelector('DIMENSIONS').textContent.split('.')[0]) >= 0)) {\n        dimensionElements.push({\n          hasChildren: true,\n          isSelected: false,\n          pid: field.querySelector('DIMENSIONS').textContent.split('.')[0],\n          id: field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0],\n          name: field.querySelector('SET_DISPLAY_FOLDER').textContent,\n          spriteCssClass: 'e-folderCDB-icon' + ' ' + cls.ICON + ' ' + 'namedSets',\n          caption: field.querySelector('SET_DISPLAY_FOLDER').textContent,\n          // aggregateType: this.getAggregateType(field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0]),\n          type: 'string'\n        });\n        measureGroupItems.push(field.querySelector('DIMENSIONS').textContent.split('.')[0]);\n      }\n\n      var id = '[' + field.querySelector('SET_NAME').textContent.trim() + ']';\n      var fieldObj = {\n        hasChildren: true,\n        isNamedSets: true,\n        isSelected: reportElement.indexOf('[' + field.querySelector('SET_NAME').textContent + ']') >= 0,\n        pid: field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0],\n        id: id,\n        name: field.querySelector('SET_CAPTION').textContent,\n        caption: this.dataFields[id] && this.dataFields[id].caption ? this.dataFields[id].caption : this.mappingFields[id] && this.mappingFields[id].caption ? this.mappingFields[id].caption : field.querySelector('SET_CAPTION').textContent,\n        spriteCssClass: 'e-namedSetCDB-icon' + ' ' + cls.ICON,\n        tag: field.querySelector('EXPRESSION').textContent,\n        // aggregateType: this.getAggregateType(id),\n        type: 'string',\n        filter: [],\n        dateMember: [],\n        // sort: 'Ascending',\n        actualFilter: [],\n        filterMembers: [],\n        childMembers: [],\n        searchMembers: [],\n        members: {},\n        currrentMembers: {},\n        isHierarchy: true,\n        isExcelFilter: false,\n\n        /* eslint-disable */\n        allowDragAndDrop: this.dataFields[id] ? this.dataFields[id].allowDragAndDrop : this.mappingFields[id] ? this.mappingFields[id].allowDragAndDrop : true,\n        showFilterIcon: this.dataFields[id] ? this.dataFields[id].showFilterIcon : this.mappingFields[id] ? this.mappingFields[id].showFilterIcon : true,\n        showSortIcon: this.dataFields[id] ? this.dataFields[id].showSortIcon : this.mappingFields[id] ? this.mappingFields[id].showSortIcon : true,\n        showEditIcon: this.dataFields[id] ? this.dataFields[id].showEditIcon : this.mappingFields[id] ? this.mappingFields[id].showEditIcon : true,\n        showRemoveIcon: this.dataFields[id] ? this.dataFields[id].showRemoveIcon : this.mappingFields[id] ? this.mappingFields[id].showRemoveIcon : true,\n        showValueTypeIcon: this.dataFields[id] ? this.dataFields[id].showValueTypeIcon : this.mappingFields[id] ? this.mappingFields[id].showValueTypeIcon : true,\n        showSubTotals: this.dataFields[id] ? this.dataFields[id].showSubTotals : this.mappingFields[id] ? this.mappingFields[id].showSubTotals : true\n        /* eslint-enable */\n\n      };\n      dimensionElements.push(fieldObj);\n      this.fieldList[id] = fieldObj;\n    } // let args: ConnectionInfo = {\n    //     catalog: customArgs.dataSourceSettings.catalog,\n    //     cube: customArgs.dataSourceSettings.cube,\n    //     url: customArgs.dataSourceSettings.url,\n    //     LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n    //     request: 'MDSCHEMA_SETS'\n    // };\n    // this.getTreeData(args, this.loadHierarchyElements.bind(this), customArgs);\n\n\n    customArgs.hierarchy = this.fieldListData;\n    customArgs.hierarchySuccess = this.fieldListObj.hierarchySuccess;\n    this.loadHierarchyElements(customArgs);\n  };\n\n  OlapEngine.prototype.loadHierarchyElements = function (customArgs) {\n    var data = customArgs.hierarchySuccess;\n    var dimensionElements = customArgs.hierarchy;\n    var dataFields = extend([], this.rows, null, true);\n    dataFields = dataFields.concat(this.columns, this.filters);\n    var reportElement = [];\n\n    for (var _i = 0, dataFields_4 = dataFields; _i < dataFields_4.length; _i++) {\n      var field = dataFields_4[_i];\n      reportElement.push(field.name);\n    }\n\n    var fields = [].slice.call(data.querySelectorAll('row'));\n\n    for (var _a = 0, fields_5 = fields; _a < fields_5.length; _a++) {\n      var field = fields_5[_a];\n      var dimensionName = field.querySelector('DIMENSION_UNIQUE_NAME').textContent;\n      var hierarchyName = field.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n      var isAllMemberAvail = [].slice.call(field.querySelectorAll('ALL_MEMBER')).length > 0;\n      var allMember = void 0;\n\n      if (isAllMemberAvail) {\n        var stringCollection = field.querySelectorAll('ALL_MEMBER')[0].textContent.replace(/[\\[\\]\\&']+/g, '').split('.');\n        allMember = stringCollection[stringCollection.length - 1].trim();\n      } else {\n        allMember = undefined;\n      }\n\n      var hierarchyFolderName = field.querySelector('HIERARCHY_DISPLAY_FOLDER') ? field.querySelector('HIERARCHY_DISPLAY_FOLDER').textContent : '';\n      var curElement = [];\n\n      for (var _b = 0, dimensionElements_1 = dimensionElements; _b < dimensionElements_1.length; _b++) {\n        var item = dimensionElements_1[_b];\n\n        if (item.tag === dimensionName) {\n          curElement.push(item);\n        }\n      }\n\n      if (curElement.length > 0) {\n        var isSameDim = dimensionName === hierarchyName && dimensionName.toLowerCase() !== '[measures]' && hierarchyName.toLowerCase() !== '[measures]';\n\n        if (dimensionName.toLowerCase() !== '[measures]' && hierarchyName.toLowerCase() !== '[measures]') {\n          var parentID = dimensionName + (this.isMondrian || isSameDim ? '~#^Dim' : '');\n\n          if (hierarchyFolderName !== '') {\n            var folderName = dimensionName + (this.isMondrian || isSameDim ? '~#^Dim' : '') + '_' + hierarchyFolderName;\n            var curParentElement = [];\n\n            for (var _c = 0, dimensionElements_2 = dimensionElements; _c < dimensionElements_2.length; _c++) {\n              var item = dimensionElements_2[_c];\n\n              if (item.tag === folderName && item.pid === parentID) {\n                curParentElement.push(item);\n              }\n            }\n\n            if (curParentElement.length === 0) {\n              var fieldObj_1 = {\n                hasChildren: true,\n                isSelected: false,\n                pid: dimensionName + (this.isMondrian || isSameDim ? '~#^Dim' : ''),\n                id: folderName,\n                name: hierarchyFolderName,\n                spriteCssClass: 'e-folderCDB-icon' + ' ' + cls.ICON,\n                tag: folderName,\n                caption: hierarchyFolderName,\n                // aggregateType: this.getAggregateType(hierarchyFolderName),\n                type: 'string'\n              };\n              dimensionElements.push(fieldObj_1);\n            }\n\n            parentID = folderName;\n          }\n\n          var fieldObj = {\n            hasChildren: field.querySelector('HIERARCHY_ORIGIN') ? field.querySelector('HIERARCHY_ORIGIN').textContent !== '2' && field.querySelector('HIERARCHY_ORIGIN').textContent !== '6' ? true : false : true,\n            // hasChildren: true,\n            isSelected: reportElement.indexOf(hierarchyName) >= 0,\n            pid: parentID,\n            id: hierarchyName,\n            name: field.querySelector('HIERARCHY_CAPTION').textContent,\n            spriteCssClass: (field.querySelector('HIERARCHY_ORIGIN') ? field.querySelector('HIERARCHY_ORIGIN').textContent !== '2' && field.querySelector('HIERARCHY_ORIGIN').textContent !== '6' ? 'e-hierarchyCDB-icon' : 'e-attributeCDB-icon' : 'e-hierarchyCDB-icon') + ' ' + cls.ICON,\n            hasAllMember: isAllMemberAvail,\n            allMember: allMember,\n            tag: hierarchyName,\n            caption: this.dataFields[hierarchyName] && this.dataFields[hierarchyName].caption ? this.dataFields[hierarchyName].caption : this.mappingFields[hierarchyName] && this.mappingFields[hierarchyName].caption ? this.mappingFields[hierarchyName].caption : field.querySelector('HIERARCHY_CAPTION').textContent,\n            // aggregateType: this.getAggregateType(hierarchyName),\n            type: 'string',\n            filter: [],\n            dateMember: [],\n            sort: this.enableSort ? this.sortObject[hierarchyName] ? this.sortObject[hierarchyName] : 'Ascending' : 'None',\n            actualFilter: [],\n            filterMembers: [],\n            childMembers: [],\n            searchMembers: [],\n            members: {},\n            currrentMembers: {},\n            levels: [],\n            levelCount: 1,\n            isHierarchy: field.querySelector('HIERARCHY_ORIGIN') ? field.querySelector('HIERARCHY_ORIGIN').textContent !== '2' && field.querySelector('HIERARCHY_ORIGIN').textContent !== '6' ? false : true : false,\n            isExcelFilter: false,\n\n            /* eslint-disable */\n            allowDragAndDrop: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].allowDragAndDrop : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].allowDragAndDrop : true,\n            showFilterIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showFilterIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showFilterIcon : true,\n            showSortIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showSortIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showSortIcon : true,\n            showEditIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showEditIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showEditIcon : true,\n            showRemoveIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showRemoveIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showRemoveIcon : true,\n            showValueTypeIcon: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showValueTypeIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showValueTypeIcon : true,\n            showSubTotals: this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showSubTotals : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showSubTotals : true\n            /* eslint-enable */\n\n          };\n          dimensionElements.push(fieldObj);\n          this.fieldList[hierarchyName] = fieldObj;\n        }\n      }\n    }\n\n    var args = {\n      catalog: customArgs.dataSourceSettings.catalog,\n      cube: customArgs.dataSourceSettings.cube,\n      url: customArgs.dataSourceSettings.url,\n      LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n      request: 'MDSCHEMA_LEVELS'\n    };\n    this.getTreeData(args, this.loadLevelElements.bind(this), customArgs);\n  };\n\n  OlapEngine.prototype.loadLevelElements = function (xmlDoc, request, customArgs) {\n    var newDataSource = [];\n    var dimensionElements = this.fieldListData;\n    newDataSource = [];\n    var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n\n    for (var _i = 0, fields_6 = fields; _i < fields_6.length; _i++) {\n      var field = fields_6[_i];\n\n      if (parseInt(field.querySelector('LEVEL_TYPE').textContent, 10) !== 1 && field.querySelector('HIERARCHY_UNIQUE_NAME').textContent.toLowerCase() !== '[measures]') {\n        var dimensionName = field.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n        var levelName = field.querySelector('LEVEL_UNIQUE_NAME').textContent;\n        var levelCaption = field.querySelector('LEVEL_CAPTION').textContent;\n        var levelObj = {\n          hasChildren: false,\n          isChecked: false,\n          isSelected: this.fieldList[dimensionName].isSelected,\n          pid: dimensionName,\n          id: levelName,\n          name: levelCaption,\n          tag: levelName,\n          spriteCssClass: 'e-level-members e-hierarchy-level-' + parseInt(field.querySelector('LEVEL_NUMBER').textContent, 10) + '-icon' + ' ' + cls.ICON,\n          caption: levelCaption,\n          // aggregateType: this.getAggregateType(levelName),\n          type: 'string'\n        };\n        newDataSource.push(levelObj);\n\n        if (this.fieldList[dimensionName] && this.fieldList[dimensionName].spriteCssClass && this.fieldList[dimensionName].spriteCssClass.indexOf('e-attributeCDB-icon') === -1) {\n          this.fieldList[dimensionName].levels.push(levelObj);\n          this.fieldList[dimensionName].isHierarchy = false;\n        } else {\n          this.fieldList[dimensionName].isHierarchy = true;\n        }\n      }\n    }\n\n    this.fieldListData = dimensionElements = dimensionElements.concat(newDataSource);\n    var args = {\n      catalog: customArgs.dataSourceSettings.catalog,\n      cube: customArgs.dataSourceSettings.cube,\n      url: customArgs.dataSourceSettings.url,\n      LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n      request: 'MDSCHEMA_MEASURES'\n    };\n    this.getTreeData(args, this.loadMeasureElements.bind(this), customArgs);\n  };\n\n  OlapEngine.prototype.loadMeasureElements = function (xmlDoc, request, customArgs) {\n    var dimensionElements = this.fieldListData;\n    var measureGroupItems = [];\n    var caption;\n    var dataFields = extend([], this.values, null, true);\n    var reportElement = [];\n\n    for (var _i = 0, dataFields_5 = dataFields; _i < dataFields_5.length; _i++) {\n      var field = dataFields_5[_i];\n      reportElement.push(field.name);\n    }\n\n    if (this.locale !== 'en-US') {\n      var args = {\n        catalog: customArgs.dataSourceSettings.catalog,\n        cube: customArgs.dataSourceSettings.cube,\n        url: customArgs.dataSourceSettings.url,\n        LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n        request: 'MDSCHEMA_MEASUREGROUPS'\n      };\n      this.getTreeData(args, this.loadMeasureGroups.bind(this), customArgs);\n    }\n\n    var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n\n    for (var _a = 0, fields_7 = fields; _a < fields_7.length; _a++) {\n      var field = fields_7[_a];\n      var measureGRPName = isNullOrUndefined(field.querySelector('MEASUREGROUP_NAME')) ? '' : field.querySelector('MEASUREGROUP_NAME').textContent;\n      var measureName = field.querySelector('MEASURE_UNIQUE_NAME').textContent;\n      var formatString = field.querySelector('DEFAULT_FORMAT_STRING') ? field.querySelector('DEFAULT_FORMAT_STRING').textContent : '#,#';\n      var aggregateType = field.querySelector('MEASURE_AGGREGATOR') ? field.querySelector('MEASURE_AGGREGATOR').textContent : '1';\n\n      if (!(measureGroupItems.indexOf(measureGRPName) >= 0)) {\n        if (this.locale !== 'en-US') {\n          var measureInfo = [];\n\n          for (var _b = 0, _c = this.fieldListObj.measuresGroups; _b < _c.length; _b++) {\n            var item = _c[_b];\n\n            if (item.querySelector('MEASUREGROUP_NAME').textContent === measureGRPName) {\n              measureInfo.push(item);\n            }\n          }\n\n          caption = measureInfo.length > 0 ? measureInfo[0].querySelector('MEASUREGROUP_CAPTION').textContent : measureGRPName;\n        } else {\n          caption = measureGRPName;\n        }\n\n        if (measureGRPName !== '') {\n          dimensionElements.push({\n            hasChildren: true,\n            isChecked: false,\n            isSelected: false,\n            pid: '[Measures]',\n            id: measureGRPName,\n            name: caption,\n            spriteCssClass: 'e-measureCDB e-folderCDB-icon' + ' ' + cls.ICON,\n            tag: measureGRPName,\n            caption: caption,\n            aggregateType: this.getAggregateType(measureGRPName, aggregateType),\n            type: 'string'\n          });\n          measureGroupItems.push(measureGRPName);\n        }\n      }\n\n      var fieldObj = {\n        hasChildren: false,\n        isSelected: reportElement.indexOf(measureName) >= 0,\n        pid: measureGRPName === '' ? '[Measures]' : measureGRPName,\n        id: measureName,\n        name: field.querySelector('MEASURE_CAPTION').textContent,\n        spriteCssClass: 'e-measure-icon' + ' ' + cls.ICON,\n        tag: measureName,\n        caption: this.dataFields[measureName] && this.dataFields[measureName].caption ? this.dataFields[measureName].caption : this.mappingFields[measureName] && this.mappingFields[measureName].caption ? this.mappingFields[measureName].caption : field.querySelector('MEASURE_CAPTION').textContent,\n        aggregateType: this.getAggregateType(measureName, aggregateType),\n        type: 'number',\n        filter: [],\n        // sort: 'Ascending',\n        actualFilter: [],\n        filterMembers: [],\n        childMembers: [],\n        searchMembers: [],\n        members: {},\n        currrentMembers: {},\n\n        /* eslint-disable */\n        formatString: formatString,\n        allowDragAndDrop: this.dataFields[measureName] ? this.dataFields[measureName].allowDragAndDrop : this.mappingFields[measureName] ? this.mappingFields[measureName].allowDragAndDrop : true,\n        showFilterIcon: this.dataFields[measureName] ? this.dataFields[measureName].showFilterIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showFilterIcon : true,\n        showSortIcon: this.dataFields[measureName] ? this.dataFields[measureName].showSortIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showSortIcon : true,\n        showEditIcon: this.dataFields[measureName] ? this.dataFields[measureName].showEditIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showEditIcon : true,\n        showRemoveIcon: this.dataFields[measureName] ? this.dataFields[measureName].showRemoveIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showRemoveIcon : true,\n        showValueTypeIcon: this.dataFields[measureName] ? this.dataFields[measureName].showValueTypeIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showValueTypeIcon : true,\n        showSubTotals: this.dataFields[measureName] ? this.dataFields[measureName].showSubTotals : this.mappingFields[measureName] ? this.mappingFields[measureName].showSubTotals : true\n        /* eslint-enable */\n\n      };\n      dimensionElements.push(fieldObj);\n      this.fieldList[measureName] = fieldObj;\n\n      if (reportElement.indexOf(measureName) >= 0) {\n        reportElement.splice(reportElement.indexOf(measureName), 1);\n      }\n    }\n\n    this.measureReportItems = reportElement; // let args: ConnectionInfo = {\n    //     catalog: customArgs.dataSourceSettings.catalog,\n    //     cube: customArgs.dataSourceSettings.cube,\n    //     url: customArgs.dataSourceSettings.url,\n    //     LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n    //     request: 'MDSCHEMA_KPIS'\n    // };\n    // customArgs.reportElement = this.measureReportItems;\n    // this.getTreeData(args, this.loadKPIElements.bind(this), customArgs);\n  };\n\n  OlapEngine.prototype.loadMeasureGroups = function (xmlDoc, request, customArgs) {\n    if (isNullOrUndefined(this.fieldListObj)) {\n      this.fieldListObj = {};\n    }\n\n    this.fieldListObj.measuresGroups = [].slice.call(xmlDoc.querySelectorAll('row'));\n  }; // private loadKPIElements(xmlDoc: Document, request: Ajax, customArgs: FieldData): void {\n  //     let dimensionElements: IOlapField[] = this.fieldListData;\n  //     let parser = new DOMParser();\n  //     let measureGroupItems: string[] = [];\n  //     let fields: HTMLElement[] = [].slice.call(xmlDoc.querySelectorAll('row'));\n  //     dimensionElements.splice(1, 0, {\n  //         hasChildren: true,\n  //         isChecked: false,\n  //         id: 'folderStruct',\n  //         name: 'KPI',\n  //         spriteCssClass: 'kpiCDB e-kpiCDB-icon' + ' ' +  cls.ICON,\n  //         tag: '',\n  //         caption: 'KPI',\n  //         aggregateType: this.getAggregateType('folderStruct'),\n  //         type: 'string'\n  //     });\n  //     for (let field of fields) {\n  //         let kpiName: string = field.querySelector('KPI_CAPTION').textContent;\n  //         let kpiGoal: string = field.querySelector('KPI_GOAL').textContent;\n  //         let kpiStatus: string = field.querySelector('KPI_STATUS').textContent;\n  //         let kpiTrend: string = field.querySelector('KPI_TREND').textContent;\n  //         let kpiValue: string = field.querySelector('KPI_VALUE').textContent;\n  //         if (!(measureGroupItems.indexOf(field.querySelector('KPI_NAME').textContent) >= 0)) {\n  //             dimensionElements.push({\n  //                 hasChildren: true,\n  //                 isChecked: false,\n  //                 pid: 'folderStruct',\n  //                 id: kpiName,\n  //                 name: kpiName,\n  //                 spriteCssClass: 'e-folderCDB-icon' + ' ' +  cls.ICON,\n  //                 tag: kpiName,\n  //                 caption: kpiName,\n  //                 aggregateType: this.getAggregateType(kpiName),\n  //                 type: 'string'\n  //             });\n  //             measureGroupItems.push(kpiName);\n  //         }\n  //         let kpiCollection: { [key: string]: string } = {\n  //             'kpiGoal': kpiGoal,\n  //             'kpiStatus': kpiStatus,\n  //             'kpiTrend': kpiTrend,\n  //             'kpiValue': kpiValue\n  //         };\n  //         let i: number = 0;\n  //         for (let kpi of Object.keys(kpiCollection)) {\n  //             let id: string = kpiCollection[kpi];\n  //             let name: string = (kpi).split('kpi')[1];\n  //             let cssClass: string = 'e-' + kpi + '-icon';\n  //             let fieldObj: IOlapField = {\n  //                 hasChildren: true,\n  //                 isSelected: (customArgs.reportElement.indexOf(id) >= 0),\n  //                 id: id,\n  //                 pid: kpiName,\n  //                 name: name,\n  //                 spriteCssClass: cssClass + ' ' +  cls.ICON,\n  //                 tag: id,\n  //                 caption: name,\n  //                 aggregateType: this.getAggregateType(id),\n  //                 type: 'number',\n  //                 filter: [],\n  //                 sort: 'Ascending',\n  //                 filterMembers: [],\n  //                 searchMembers: [],\n  //                 members: {},\n  //                 currrentMembers: {}\n  //             };\n  //             dimensionElements.push(fieldObj);\n  //             this.fieldList[id] = fieldObj;\n  //         }\n  //     }\n  // }\n\n\n  OlapEngine.prototype.doAjaxPost = function (type, url, data, success, customArgs) {\n    var ajax = new Ajax({\n      mode: false,\n      contentType: 'text/xml',\n      url: url,\n      data: data,\n      dataType: 'xml',\n      type: type,\n      beforeSend: this.beforeSend.bind(this),\n      onSuccess: function (args, request) {\n        var parser = new DOMParser(); // parsing string type result as XML\n\n        var xmlDoc = parser.parseFromString(args, 'text/xml');\n        success(xmlDoc, request, customArgs);\n      },\n      onFailure: function (e) {\n        return e;\n      }\n    });\n    ajax.send();\n  };\n\n  OlapEngine.prototype.beforeSend = function (args) {\n    if (this.dataSourceSettings.authentication.userName && this.dataSourceSettings.authentication.password) {\n      /* eslint-disable */\n      args.httpRequest.setRequestHeader(\"Authorization\", \"Basic \" + btoa(this.dataSourceSettings.authentication.userName + \":\" + this.dataSourceSettings.authentication.password));\n    }\n  };\n\n  OlapEngine.prototype.getSoapMsg = function (dataSourceSettings, query) {\n    var xmlMsg = '';\n    var sourceInfo = '';\n    var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n\n    if (this.isMondrian) {\n      sourceInfo = '';\n      xmlMsg = '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"><SOAP-ENV:Body><Execute xmlns=\\\"urn:schemas-microsoft-com:xml-analysis\\\"><Command><Statement><![CDATA[' + query + ']]></Statement></Command><Properties><PropertyList><DataSourceInfo>' + sourceInfo + '</DataSourceInfo><Catalog>' + dataSourceSettings.catalog + '</Catalog><AxisFormat>TupleFormat</AxisFormat><Content>Data</Content><Format>Multidimensional</Format></PropertyList></Properties></Execute></SOAP-ENV:Body></SOAP-ENV:Envelope>';\n    } else {\n      xmlMsg = '<Envelope xmlns=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"> <Header></Header> <Body> <Execute xmlns=\\\"urn:schemas-microsoft-com:xml-analysis\\\"> <Command> <Statement> ' + query + ' </Statement> </Command> <Properties> <PropertyList> <Catalog>' + dataSourceSettings.catalog + '</Catalog> <LocaleIdentifier>' + connectionString.LCID + '</LocaleIdentifier></PropertyList> </Properties> </Execute> </Body> </Envelope>';\n    }\n\n    return xmlMsg;\n  };\n\n  OlapEngine.prototype.getConnectionInfo = function (connectionString, locale) {\n    var connectionInfo = {\n      url: '',\n      LCID: !isNullOrUndefined(locale) ? locale.toString() : '1033'\n    };\n\n    if (connectionString !== '') {\n      /* eslint-enable */\n      for (var _i = 0, _a = connectionString.split(';'); _i < _a.length; _i++) {\n        var obj = _a[_i];\n\n        if (obj.toLowerCase().indexOf('locale') < 0 && connectionInfo.url.length === 0) {\n          connectionInfo.url = obj;\n        } else if (obj.toLowerCase().indexOf('locale') >= 0) {\n          connectionInfo.LCID = obj.replace(/ /g, '').split('=')[1];\n        }\n      }\n    }\n\n    return connectionInfo;\n  };\n\n  OlapEngine.prototype.getMDXQuery = function (dataSourceSettings) {\n    MDXQuery.getCellSets(dataSourceSettings, this, true, undefined, true);\n    return this.mdxQuery;\n  };\n\n  return OlapEngine;\n}();\n\nexport { OlapEngine }; ///////////////////////////////////////////////////////////////////////////////////////////////////////////////","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/base/olap/engine.js"],"names":["extend","Internationalization","isNullOrUndefined","Ajax","PivotUtil","MDXQuery","cls","OlapEngine","fieldList","columnCount","rowCount","colFirstLvl","rowFirstLvl","pageColStartPos","enableSort","enableValueSorting","dataFields","formatFields","filterMembers","drilledSets","aggregatedValueMatrix","mappingFields","customRegex","formatRegex","pivotValues","valueContent","headerContent","rowStartPos","pageRowStartPos","tupColumnInfo","tupRowInfo","gridJSON","namedSetsPosition","colDepth","totalCollection","parentObjCollection","curDrillEndPos","headerGrouping","lastLevel","showRowSubTotals","showColumnSubTotals","hideRowTotalsObject","hideColumnTotalsObject","sortObject","isColDrill","prototype","renderEngine","dataSourceSettings","customProperties","isEmptyData","mdxQuery","isMeasureAvail","allowMemberFilter","allowLabelFilter","allowValueFilter","isMondrian","measureReportItems","calcChildMembers","selectedItems","savedFieldList","undefined","savedFieldListData","valueAxis","globalize","locale","getCulture","localeObj","url","getAxisFields","formats","formatSettings","enableSorting","valueSortSettings","filterSettings","sortSettings","drilledMembers","updateDrilledItems","calculatedFieldSettings","emptyCellTextContent","emptyCellsTextContent","pageSettings","isPaging","frameSortObject","getFormattedFields","fieldListData","fieldListObj","setNamedSetsPosition","getFieldList","updateFieldlist","loadCalculatedMemberElements","updateFilterItems","generateGridData","action","refPaging","rows","length","columns","values","filters","getCellSets","generateEngine","generatePagingData","xmlDoc","request","customArgs","xmlaCellSet","slice","call","querySelectorAll","countCells","Number","textContent","scrollPage","direction","newPage","prevPage","colMeasures","colMeasurePos","rowMeasurePos","cloneNode","onDemandDrillEngine","getSubTotalsVisibility","columnTuples","rowTuples","valCollection","measureInfo","getMeasureInfo","orderedInfo","frameMeasureOrder","orderedHeaderTuples","orderedValueTuples","updateTupCollection","drillInfo","axis","frameColumnHeader","performColumnSorting","frameRowHeader","performRowSorting","frameValues","performColumnSpanning","i","isEngineUpdated","showSubTotals","axisCount","cCnt","name","rCnt","tuples","position","currentCell","rowIndex","tupPos","lastAllStartPos","lastAllCount","prevUNArray","allType","rowMembers","availAllMember","withoutAllStartPos","withoutAllEndPos","minLevel","gTotals","colIndex","formattedText","hasChild","level","index","type","ordinal","colSpan","rowSpan","memberType","isDrilled","valueSort","levelName","maxLevel","measurePos","newTupPosition","members","frameTupCollection","prevTupInfo","tuplesLength","allCount","allStartPos","startTupPos","pagingAllowFlag","lastMesPos","memPos","prevParent","measure","typeColl","typeCollection","drillStartPos","startDrillUniquename","drillEndPos","levelColl","levelCollection","firstTupMembers","querySelector","indexOf","pop","attrDrill","checkAttributeDrill","drillAllow","measurePosition","measureName","withoutAllAllow","push","actualText","getUniqueName","caption","parentUniqueName","levelUniqueName","hierarchy","getAttribute","lastPos","lastMemPos","withoutAllDrilled","member","Object","keys","isHierarchy","lvl","isNamedSet","uniqueName","depth","getDepth","hasAllMember","isAttributeDrill","getCaptionCollectionWithMeasure","pos","showTotals","showGrandTotals","showRowGrandTotals","totPos","updateRowEngine","tupInfo","memberPosition","uNameCollection","cropUName","substring","fieldSep","split","map","item","nxtIndextCount","fPos","fieldMembers","membersCount","isDrill","hideTotalsObject","_a","_b","drillState","captionCollection","hideFieldPos","memberlevel","memberUName","memberCaption","parentUName","levelPos","UName","Caption","currUName","currCaption","currLevel","uNames","uNamesKeys","j","captions","captionsKeys","uName","uCollection","parentLevel","join","setDrillInfo","tuple","captionColection","captionCollectionArray","splice","setsPositions","axisFields","currEngineCount","newEngineCount","key","newTuplesCount","tupCollection","currTupCount","_this","lastSavedInfo","isSubTotIncluded","withoutAllAvail","lastRealTup","_loop_1","this_1","endDrillUniquename","isStartCol","levelComp","levelCompare","mergeTotCollection","setParentCollection","frameCommonColumnLoop","endAllow","allow","orderTotals","reverse","_i","coll","isGrandTotal","showColumnGrandTotals","groupColl","maxCnt","count","collLength","keys_1","isSameParent","isWithoutAllMember","parentMember","pUName","parentLvlCollection","prevUcollection","newLevels","oldLevels","changePos","lPos","prevHdrPos","flagLevel","flagLevelString","getLevelsAsString","enterFlag","keys_2","coll1","lvlCollection","toString","drillMemberPosition","memberPos","memberDepth","getMeasurePosition","spanMemPos","colMembers","memDup","rowDepthPos","getDrilledParent","levelNameKeys","isAdjacent","isAdjacentToMeasure","items","drillItems","delimiter","k","fields","childMember","savedCollection","childlevel","currentChild","currentParent","lvlGrouping","measureObjects","gSumGrouping","gSumFlag","withoutAllLastPos","lastIndexOf","rPos","currentTuple","frameUniqueName","getParentUname","levels","sort","a","b","sortLvlGrouping","parentGrouping","objCollection","objKeys","oPos","pKeys","kPos","sortRowHeaders","groupSets","axisSets","aPos","isMembersIncluded","isLastMeasure","isFullLength","isLastNotDrilledMember","isActualLastMember","mPos","matchParent","concat","newPos","cell","currPos","temporary","grandTotal","header","arrange","value","prevRowCell","prevColValue","prevColIndex","prevColRowCell","key_1","sortColumnHeaders","keyPos","length_1","cellPos","l","length_2","q","height","weight","hgt","height1","hgt1","order","len","leng","m","n","pElement","cElement","o","i_1","hasLastMeasure","measureAvail","collection","headers","uniqueNameColl","parentString","sepPos","sepObjects","lastPosition","spanCollection","rowPos","colMeasureCount","colPos","nextColCell","nextRowCell","currCell","colflag","rowflag","tupColInfo","isSubTot","colLength","rowEndPos","startRowOrdinal","rowOrdinal","colOrdinal","lastColCell","valElement","getFormattedValue","isSum","isGrand","columnHeaders","rowHeaders","isGrandSum","fieldName","formattedValue","formatField","properties","formatObj","minimumSignificantDigits","maximumSignificantDigits","formatDate","Date","format","test","pattern","match","integerPart","useGrouping","formatNumber","mAxis","mIndex","field","isCalculatedField","tag","isAvail","cnt","toLowerCase","measureAxis","measureIndex","valueInfo","vTuples","cLen","orderedTuples","orderedVTuples","orderedIndex","cLevels","uniqueLevels","lnt","node","cLevel","values_1","name_1","uniqueLevels_1","_c","_d","uniqueLevels_2","_e","values_2","name_2","_f","_g","levelInfo","valueIndex","vOrdinalIndex","cRow","ordinalValue","setAttribute","getDrilledSets","fieldPos","memberName","currTuple","memberArray","joinArray","splitLevels","drillLevel","cropLevels","childSets","memberObj","levels_1","drillField","drillFieldSep","cropArray","drillSets","childSets_1","set","updateDrilledInfo","updateCalcFields","lastcalcInfo","onSort","isInit","id","parentID","pid","sortOrder","isSelected","isExcelFilter","allowDragAndDrop","showFilterIcon","showSortIcon","showEditIcon","showRemoveIcon","showValueTypeIcon","filter","actualFilter","expression","formula","formatString","parentHierarchy","hierarchyUniqueName","updateFieldlistData","isSelect","args","catalog","cube","LCID","localeIdentifier","getTreeData","getFieldListItems","bind","successMethod","connectionString","getConnectionInfo","soapMessage","doAjaxPost","fieldMapping","measureField","getAggregateType","aggregateType","prefixName","filterItems","filterItems_1","isMembersAvail","selectedElements","parentNodes","getParentNode","parentNodes_1","inArray","currentItems","selectedElement","dataFields_1","parent","parentItem","drilledItems","drilledMembers_1","dataFields_2","getDrillThroughData","pivotValue","maxRows","column","row","filteritems","filterQuery","columnQuery","rowQuery","drillQuery","replace","xmla","getSoapMsg","drillThroughSuccess","json","child","children","tagName","JSON","parse","tag_1","getFilterMembers","levelCount","isSearchFilter","loadLevelMember","getMembers","isAllFilterData","filterParentQuery","dimProp","childMembers","searchMembers","currrentMembers","generateMembers","loadLevelMembers","getChildMembers","memberUQName","getCalcChildMembers","getSearchMembers","searchString","maxNodeLimit","allMember","fields_1","memberUqName","parentUqName","nodeAttr","hasChildren","htmlAttributes","isNodeExpand","expanded","nodeSelect","fieldDate","hierarchyElements","fields_2","isAllMemberAvail","dimensionName","hierarchyName","isSameDim","hierarchySuccess","measures","loadDimensionElements","calcMembers","fieldListElements","calcObj","spriteCssClass","ICON","calcMembers_1","calcField","dateMember","fieldType","fields_3","defaultHierarchy","dimensionCaption","loadNamedSetElements","dimensionElements","reportElement","dataFields_3","measureGroupItems","fields_4","trim","fieldObj","isNamedSets","loadHierarchyElements","data","dataFields_4","fields_5","stringCollection","hierarchyFolderName","curElement","dimensionElements_1","folderName","curParentElement","dimensionElements_2","fieldObj_1","loadLevelElements","newDataSource","fields_6","parseInt","levelCaption","levelObj","isChecked","loadMeasureElements","dataFields_5","loadMeasureGroups","fields_7","measureGRPName","measuresGroups","success","ajax","mode","contentType","dataType","beforeSend","onSuccess","parser","DOMParser","parseFromString","onFailure","e","send","authentication","userName","password","httpRequest","setRequestHeader","btoa","query","xmlMsg","sourceInfo","connectionInfo","obj","getMDXQuery"],"mappings":"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","sourcesContent":["import { extend, Internationalization, isNullOrUndefined, Ajax } from '@syncfusion/ej2-base';\nimport { PivotUtil } from '../util';\nimport { MDXQuery } from './mdx-query';\nimport * as cls from '../../common/base/css-constant';\n/**\n * OlapEngine is used to manipulate the olap or Multi-Dimensional data as pivoting values.\n */\n/** @hidden */\nvar OlapEngine = /** @class */ (function () {\n    function OlapEngine() {\n        /** @hidden */\n        this.fieldList = {};\n        /** @hidden */\n        this.columnCount = 0;\n        /** @hidden */\n        this.rowCount = 0;\n        /** @hidden */\n        this.colFirstLvl = 0;\n        /** @hidden */\n        this.rowFirstLvl = 0;\n        /** @hidden */\n        this.pageColStartPos = 0;\n        /** @hidden */\n        this.enableSort = false;\n        /** @hidden */\n        this.enableValueSorting = false;\n        /** @hidden */\n        this.dataFields = {};\n        /** @hidden */\n        this.formatFields = {};\n        /** @hidden */\n        this.filterMembers = {};\n        /** @hidden */\n        this.drilledSets = {};\n        /** @hidden */\n        this.aggregatedValueMatrix = [];\n        this.mappingFields = {};\n        this.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n        this.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n        /** @hidden */\n        this.pivotValues = [];\n        /** @hidden */\n        this.valueContent = [];\n        /** @hidden */\n        this.headerContent = [];\n        /** @hidden */\n        this.rowStartPos = 0;\n        /** @hidden */\n        this.pageRowStartPos = 0;\n        /** @hidden */\n        this.tupColumnInfo = [];\n        /** @hidden */\n        this.tupRowInfo = [];\n        /** @hidden */\n        this.gridJSON = '';\n        /** @hidden */\n        this.namedSetsPosition = {};\n        this.colDepth = 0;\n        this.totalCollection = [];\n        this.parentObjCollection = {};\n        this.curDrillEndPos = -1;\n        /* eslint-disable */\n        this.headerGrouping = {};\n        /* eslint-enable */\n        this.lastLevel = [];\n        this.showRowSubTotals = true;\n        this.showColumnSubTotals = true;\n        this.hideRowTotalsObject = {};\n        this.hideColumnTotalsObject = {};\n        this.sortObject = {};\n        this.isColDrill = false;\n    }\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    OlapEngine.prototype.renderEngine = function (dataSourceSettings, customProperties) {\n        this.isEmptyData = false;\n        this.mdxQuery = '';\n        this.isMeasureAvail = false;\n        this.allowMemberFilter = false;\n        this.allowLabelFilter = false;\n        this.allowValueFilter = false;\n        this.isMondrian = false;\n        this.aggregatedValueMatrix = [];\n        this.measureReportItems = [];\n        this.calcChildMembers = [];\n        this.selectedItems = [];\n        this.savedFieldList = undefined;\n        this.savedFieldListData = undefined;\n        this.formatFields = {};\n        this.filterMembers = {};\n        this.dataFields = {};\n        this.valueAxis = '';\n        this.columnCount = 0;\n        this.rowCount = 0;\n        this.colFirstLvl = 0;\n        this.rowFirstLvl = 0;\n        this.pageColStartPos = 0;\n        this.enableValueSorting = false;\n        this.sortObject = {};\n        this.globalize = new Internationalization();\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        this.locale = this.globalize.getCulture();\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n        this.localeObj = customProperties ? customProperties.localeObj : undefined;\n        this.enableValueSorting = customProperties ? customProperties.enableValueSorting : false;\n        if (dataSourceSettings.url) {\n            // this.isMondrian = (dataSourceSettings.providerType === 'mondrian');\n            this.dataSourceSettings = dataSourceSettings;\n            this.valueAxis = dataSourceSettings.valueAxis === 'row' ? 'row' : 'column';\n            this.getAxisFields();\n            this.formats = dataSourceSettings.formatSettings ? dataSourceSettings.formatSettings : [];\n            this.enableSort = dataSourceSettings.enableSorting === undefined ? true : dataSourceSettings.enableSorting;\n            this.valueSortSettings = dataSourceSettings.valueSortSettings ? dataSourceSettings.valueSortSettings : undefined;\n            this.filterSettings = dataSourceSettings.filterSettings ? dataSourceSettings.filterSettings : [];\n            this.sortSettings = dataSourceSettings.sortSettings ? dataSourceSettings.sortSettings : [];\n            this.allowMemberFilter = dataSourceSettings.allowMemberFilter ? true : false;\n            this.allowLabelFilter = dataSourceSettings.allowLabelFilter ? true : false;\n            this.allowValueFilter = dataSourceSettings.allowValueFilter ? true : false;\n            this.drilledMembers = dataSourceSettings.drilledMembers ? this.updateDrilledItems(dataSourceSettings.drilledMembers) : [];\n            this.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];\n            this.emptyCellTextContent = dataSourceSettings.emptyCellsTextContent ? dataSourceSettings.emptyCellsTextContent : '';\n            this.pageSettings = customProperties ? (customProperties.pageSettings ? customProperties.pageSettings : this.pageSettings)\n                : undefined;\n            this.isPaging = this.pageSettings ? true : false;\n            this.frameSortObject();\n            this.getFormattedFields(this.formats);\n            this.savedFieldList = customProperties ? customProperties.savedFieldList : undefined;\n            this.savedFieldListData = customProperties ? customProperties.savedFieldListData : undefined;\n            this.fieldListData = [];\n            this.fieldListObj = {};\n            this.setNamedSetsPosition();\n            if (!(this.savedFieldList && this.savedFieldListData)) {\n                this.getFieldList(dataSourceSettings);\n            }\n            else {\n                this.updateFieldlist(true);\n            }\n            this.loadCalculatedMemberElements(this.calculatedFieldSettings);\n            this.measureReportItems = [];\n            // this.updateAllMembers(dataSourceSettings, this.filters);\n            this.updateFilterItems(this.filterSettings);\n            this.generateGridData(dataSourceSettings);\n        }\n    };\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    OlapEngine.prototype.generateGridData = function (dataSourceSettings, action) {\n        var refPaging = (action && action === 'navPaging' &&\n            this.isPaging && this.pageSettings !== undefined ? true : false);\n        if (this.rows.length > 0 || this.columns.length > 0 || this.values.length > 0 || this.filters.length > 0) {\n            MDXQuery.getCellSets(dataSourceSettings, this, refPaging);\n        }\n        else {\n            MDXQuery.getCellSets(dataSourceSettings, this, true, undefined, true);\n            this.generateEngine(undefined, undefined, { dataSourceSettings: dataSourceSettings, action: 'loadTableElements' });\n        }\n    };\n    OlapEngine.prototype.generatePagingData = function (xmlDoc, request, customArgs) {\n        var xmlaCellSet = [].slice.call(xmlDoc.querySelectorAll('Axes, CellData'));\n        // this.rowCount =\n        //     (xmlaCellSet.length > 0 && [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis1\"] Tuple')).length > 0 ?\n        //         [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis1\"] Tuple')).length : 0);\n        // this.columnCount =\n        //     (xmlaCellSet.length > 0 && [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis0\"] Tuple')).length > 0 ?\n        //         [].slice.call(xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis0\"] Tuple')).length : 0);\n        var countCells = xmlaCellSet[1] ? xmlaCellSet[1].querySelectorAll('FmtValue') : null;\n        if (countCells && countCells.length > 0) {\n            this.columnCount = Number(countCells[0].textContent);\n            this.rowCount = Number(countCells[1].textContent);\n        }\n        var dataSourceSettings = customArgs.dataSourceSettings;\n        MDXQuery.getCellSets(dataSourceSettings, this, true);\n    };\n    /* eslint-disable */\n    OlapEngine.prototype.scrollPage = function (direction, newPage, prevPage) {\n        MDXQuery.getCellSets(this.dataSourceSettings, this, true);\n    };\n    /* eslint-enable */\n    OlapEngine.prototype.generateEngine = function (xmlDoc, request, customArgs) {\n        if (customArgs.action !== 'down') {\n            this.pivotValues = [];\n            this.valueContent = [];\n            this.headerContent = [];\n            this.colDepth = 0;\n            this.tupColumnInfo = [];\n            this.tupRowInfo = [];\n            this.colMeasures = {};\n            this.colMeasurePos = undefined;\n            this.rowMeasurePos = undefined;\n            this.rowStartPos = -1;\n        }\n        this.xmlDoc = xmlDoc ? xmlDoc.cloneNode(true) : undefined;\n        this.request = request;\n        this.customArgs = customArgs;\n        this.totalCollection = [];\n        this.parentObjCollection = {};\n        this.curDrillEndPos = -1;\n        this.onDemandDrillEngine = [];\n        this.getSubTotalsVisibility();\n        this.xmlaCellSet = xmlDoc ? xmlDoc.querySelectorAll('Axes, CellData') : undefined;\n        var columnTuples = this.xmlaCellSet && this.xmlaCellSet.length > 0 ?\n            [].slice.call(this.xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis0\"] Tuple')) : [];\n        var rowTuples = this.xmlaCellSet && this.xmlaCellSet.length > 0 ?\n            [].slice.call(this.xmlaCellSet[0].querySelectorAll('Axis[name|=\"Axis1\"] Tuple')) : [];\n        var valCollection = this.xmlaCellSet && this.xmlaCellSet.length > 1 ?\n            [].slice.call(this.xmlaCellSet[1].querySelectorAll('Cell')) : [];\n        if (this.drilledMembers.length > 0) {\n            // let st1: number = new Date().getTime();\n            var measureInfo = this.getMeasureInfo();\n            var orderedInfo = void 0;\n            orderedInfo = this.frameMeasureOrder(measureInfo, 'column', columnTuples, valCollection, columnTuples.length);\n            columnTuples = orderedInfo.orderedHeaderTuples;\n            valCollection = orderedInfo.orderedValueTuples;\n            orderedInfo = this.frameMeasureOrder(measureInfo, 'row', rowTuples, valCollection, columnTuples.length);\n            rowTuples = orderedInfo.orderedHeaderTuples;\n            valCollection = orderedInfo.orderedValueTuples;\n            // let st2: number = (new Date().getTime() - st1) / 1000;\n            // console.log('over-all:' + st2);\n        }\n        if (customArgs.action === 'down') {\n            this.updateTupCollection(customArgs.drillInfo.axis === 'row' ? rowTuples.length : columnTuples.length);\n        }\n        if (customArgs.action === 'down' ? customArgs.drillInfo.axis === 'column' : true) {\n            this.frameColumnHeader(columnTuples);\n            if (!this.isPaging) {\n                this.performColumnSorting();\n            }\n        }\n        if (customArgs.action === 'down' ? customArgs.drillInfo.axis === 'row' : true) {\n            this.frameRowHeader(rowTuples);\n            if (!this.isPaging) {\n                this.performRowSorting();\n            }\n        }\n        this.frameValues(valCollection, columnTuples.length);\n        this.performColumnSpanning();\n        if (!this.isPaging && this.enableSort) {\n            for (var i = 0; i < this.headerContent.length; i++) {\n                this.headerContent[i] = this.pivotValues[i];\n            }\n        }\n        this.isEngineUpdated = true;\n        this.isEmptyData = columnTuples.length === 0;\n        //this.append(columnTuples.length);\n    };\n    OlapEngine.prototype.getSubTotalsVisibility = function () {\n        this.showRowSubTotals = this.dataSourceSettings.showRowSubTotals && this.dataSourceSettings.showSubTotals;\n        this.showColumnSubTotals = this.dataSourceSettings.showColumnSubTotals && this.dataSourceSettings.showSubTotals;\n        this.hideRowTotalsObject = {};\n        this.hideColumnTotalsObject = {};\n        var axisCount = 1;\n        do {\n            if (axisCount === 1) {\n                if (this.showColumnSubTotals) {\n                    for (var cCnt = 0; cCnt < this.dataSourceSettings.columns.length; cCnt++) {\n                        if (this.dataSourceSettings.columns[cCnt].showSubTotals === false) {\n                            this.hideColumnTotalsObject[this.dataSourceSettings.columns[cCnt].name] = cCnt;\n                        }\n                    }\n                }\n            }\n            else {\n                if (this.showRowSubTotals) {\n                    for (var rCnt = 0; rCnt < this.dataSourceSettings.rows.length; rCnt++) {\n                        if (this.dataSourceSettings.rows[rCnt].showSubTotals === false) {\n                            this.hideRowTotalsObject[this.dataSourceSettings.rows[rCnt].name] = rCnt;\n                        }\n                    }\n                }\n            }\n            axisCount++;\n        } while (axisCount < 3);\n    };\n    /* eslint-disable  */\n    OlapEngine.prototype.frameRowHeader = function (tuples) {\n        this.headerGrouping = {};\n        this.lastLevel = [];\n        var position = this.pivotValues.length;\n        var pivotValues = [];\n        var valueContent = [];\n        if (this.customArgs.action !== 'down') {\n            pivotValues = this.pivotValues;\n            valueContent = this.valueContent;\n        }\n        else {\n            position = this.customArgs.drillInfo.currentCell.rowIndex + 1;\n        }\n        this.rowStartPos = this.rowStartPos > 0 ? this.rowStartPos : position;\n        var tupPos = 0;\n        var lastAllStartPos;\n        var lastAllCount;\n        var prevUNArray = [];\n        var allType = {};\n        var rowMembers = [];\n        var availAllMember = false;\n        var withoutAllStartPos = -1;\n        var withoutAllEndPos = -1;\n        var minLevel = [];\n        var gTotals = [{\n                axis: 'row',\n                colIndex: 0,\n                formattedText: 'Grand Total',\n                hasChild: false,\n                level: -1,\n                rowIndex: 0,\n                index: [],\n                type: 'grand sum',\n                ordinal: 0,\n                colSpan: 1,\n                rowSpan: 1,\n                memberType: 2,\n                isDrilled: false,\n                valueSort: { 'Grand Total': 1, levelName: 'Grand Total' }\n            }];\n        var maxLevel = [];\n        var measurePos;\n        var newTupPosition = (this.customArgs.drillInfo && this.customArgs.drillInfo.axis === 'row') ?\n            (this.customArgs.drillInfo.currentCell.ordinal + 1) : 0;\n        while (tupPos < tuples.length) {\n            var members = tuples[tupPos].querySelectorAll('Member');\n            maxLevel = this.frameTupCollection(members, maxLevel, (tupPos + newTupPosition), this.tupRowInfo, this.showRowSubTotals, this.hideRowTotalsObject, 'row');\n            tupPos++;\n        }\n        tupPos = 0;\n        var prevTupInfo;\n        var tuplesLength = tuples.length;\n        if (this.customArgs.action === 'down') {\n            var ordinal = this.customArgs.drillInfo.currentCell.ordinal + 1;\n            tupPos = ordinal;\n            tuplesLength += ordinal;\n            lastAllCount = this.tupRowInfo[ordinal - 1].allCount;\n            lastAllStartPos = this.tupRowInfo[ordinal - 1].allStartPos;\n            prevTupInfo = this.tupRowInfo[ordinal - 1];\n        }\n        var startTupPos = tupPos;\n        var pagingAllowFlag = true;\n        var lastMesPos = 0;\n        while (tupPos < tuplesLength && pagingAllowFlag) {\n            var members = tuples[this.customArgs.action === 'down' ?\n                (tupPos - (this.customArgs.drillInfo.currentCell.ordinal + 1)) : tupPos].querySelectorAll('Member');\n            var memPos = 0;\n            var prevParent = void 0;\n            var allCount = this.tupRowInfo[tupPos].allCount;\n            var allStartPos = this.tupRowInfo[tupPos].allStartPos;\n            var measure = this.tupRowInfo[tupPos].measure;\n            var typeColl = this.tupRowInfo[tupPos].typeCollection;\n            var drillInfo = this.tupRowInfo[tupPos].drillInfo;\n            var drillStartPos = this.tupRowInfo[tupPos].drillStartPos;\n            var startDrillUniquename = this.tupRowInfo[tupPos].startDrillUniquename;\n            var drillEndPos = this.tupRowInfo[tupPos].drillEndPos;\n            var levelColl = this.tupRowInfo[tupPos].levelCollection;\n            if (tupPos === 0 || tupPos === startTupPos) {\n                var firstTupMembers = this.customArgs.action === 'down' ? this.tupRowInfo[0].members : members;\n                while (memPos < firstTupMembers.length) {\n                    if (firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '1' &&\n                        Number(firstTupMembers[memPos].querySelector('LNum').textContent) === 0) {\n                        minLevel[memPos] = 0;\n                    }\n                    else {\n                        minLevel[memPos] = Number(firstTupMembers[memPos].querySelector('LNum').textContent);\n                    }\n                    // if (firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '1' &&\n                    //   (this.isPaging || Number(firstTupMembers[memPos].querySelector('LNum').textContent) === 0)) {\n                    if (firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '1') {\n                        allType[memPos] = 0;\n                        withoutAllStartPos = withoutAllStartPos === -1 ? memPos : withoutAllStartPos;\n                        withoutAllEndPos = memPos;\n                    }\n                    else {\n                        allType[memPos] = 1;\n                        availAllMember = firstTupMembers[memPos].querySelector('MEMBER_TYPE').textContent === '3' ? availAllMember : true;\n                    }\n                    memPos++;\n                }\n                measurePos = typeColl.indexOf('3');\n            }\n            memPos = 0;\n            if (tupPos === 0 && (members.length > (allCount + (measure ? 1 : 0)) || (members.length === 1 && measure))) {\n                gTotals.pop();\n            }\n            if ((tupPos === 0 && this.isPaging) ? gTotals.length === 0 :\n                (!availAllMember || allCount === lastAllCount || allStartPos !== lastAllStartPos || (members.length === 1 && measure))) {\n                var attrDrill = this.checkAttributeDrill(this.tupRowInfo[tupPos].drillInfo, 'rows');\n                var drillAllow = drillStartPos > -1 ? (allCount > 0 ? (attrDrill || allStartPos > drillStartPos) : true) : true;\n                drillAllow = (prevTupInfo && drillAllow && drillStartPos > -1) ?\n                    (prevTupInfo.startDrillUniquename !== startDrillUniquename ? true :\n                        ((withoutAllEndPos > prevTupInfo.measurePosition ? false :\n                            prevTupInfo.measureName !== this.tupRowInfo[tupPos].measureName) &&\n                            (allStartPos === (drillStartPos + 1) || this.tupRowInfo[tupPos].measurePosition === (drillStartPos + 1))))\n                    : drillAllow;\n                var withoutAllAllow = (withoutAllStartPos > -1 && allCount > 0) ? (attrDrill || allStartPos > withoutAllEndPos) : true;\n                if (members.length === allCount + (measure ? 1 : 0) && measure) {\n                    var levelName = 'Grand Total.' + members[measurePos].querySelector('Caption').textContent;\n                    gTotals.push({\n                        axis: 'row',\n                        actualText: this.getUniqueName(members[measurePos].querySelector('UName').textContent),\n                        colIndex: 0,\n                        formattedText: (typeColl[measurePos] === '3' &&\n                            this.dataFields[this.getUniqueName(members[measurePos].querySelector('UName').textContent)] &&\n                            this.dataFields[this.getUniqueName(members[measurePos].querySelector('UName').textContent)].caption) ?\n                            this.dataFields[this.getUniqueName(members[measurePos].querySelector('UName').textContent)].caption :\n                            members[measurePos].querySelector('Caption').textContent,\n                        hasChild: false,\n                        level: -1,\n                        rowIndex: position,\n                        index: [],\n                        ordinal: tupPos,\n                        colSpan: 1,\n                        rowSpan: 1,\n                        memberType: Number(typeColl[measurePos]),\n                        isDrilled: false,\n                        parentUniqueName: members[measurePos].querySelector('PARENT_UNIQUE_NAME') ?\n                            members[measurePos].querySelector('PARENT_UNIQUE_NAME').textContent : undefined,\n                        levelUniqueName: members[measurePos].querySelector('LName').textContent,\n                        hierarchy: members[measurePos].getAttribute('Hierarchy'),\n                        valueSort: { levelName: levelName, axis: members[measurePos].getAttribute('Hierarchy') }\n                    });\n                    gTotals[gTotals.length - 1].valueSort['Grand Total.' + members[measurePos].querySelector('Caption').textContent] = 1;\n                }\n                else if (!(allStartPos === 0 || (measurePos === 0 && allStartPos === 1)) && drillAllow && withoutAllAllow) {\n                    prevTupInfo = this.tupRowInfo[tupPos];\n                    var lastPos = position;\n                    var lastMemPos = memPos;\n                    prevParent = {};\n                    var withoutAllDrilled = false;\n                    while (memPos < members.length && pagingAllowFlag) {\n                        var member = members[memPos];\n                        if (member.querySelector('UName').textContent !== prevUNArray[memPos] && typeColl[memPos] !== '2'\n                            && ((Object.keys(prevParent).length > 0 ? (prevParent.isDrilled && !this.fieldList[prevParent.hierarchy].isHierarchy) : withoutAllDrilled) ?\n                                (typeColl[memPos] === '3' && (allType[memPos - 1] && allType[memPos + 1] !== 0)) : true)) {\n                            var lvl = Number(member.querySelector('LNum').textContent) -\n                                ((allType[memPos] && typeColl[memPos] !== '3') ? 1 : minLevel[memPos]);\n                            var isNamedSet = this.namedSetsPosition['row'][memPos] ? true : false;\n                            var uniqueName = this.getUniqueName(member.querySelector('UName').textContent);\n                            var depth = this.getDepth(this.tupRowInfo[tupPos], uniqueName, Number(typeColl[memPos]));\n                            if (!(this.isPaging && pivotValues[lastMesPos][0] && this.fieldList[pivotValues[lastMesPos][0].hierarchy] && this.fieldList[pivotValues[lastMesPos][0].hierarchy].isHierarchy &&\n                                pivotValues[lastMesPos][0].hasChild && !pivotValues[lastMesPos][0].isDrilled && !this.rows[memPos].isNamedSet && (this.rows[memPos].name.indexOf('[Measures]') === 0 || (this.fieldList[member.getAttribute('Hierarchy')] && (this.fieldList[member.getAttribute('Hierarchy')].isHierarchy || this.fieldList[member.getAttribute('Hierarchy')].hasAllMember))) &&\n                                pivotValues[lastMesPos][0].depth < depth)) {\n                                pivotValues[position] = [{\n                                        axis: 'row',\n                                        actualText: uniqueName,\n                                        colIndex: 0,\n                                        formattedText: (typeColl[memPos] === '3' && this.dataFields[uniqueName] &&\n                                            this.dataFields[uniqueName].caption) ? this.dataFields[uniqueName].caption :\n                                            member.querySelector('Caption').textContent,\n                                        hasChild: (this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && memPos < this.rows.length - 1 && !this.rows[memPos + 1].isNamedSet && this.rows[memPos + 1].name.indexOf('[Measures]') < 0 && this.fieldList[this.rows[memPos + 1].name] && this.fieldList[this.rows[memPos + 1].name].hasAllMember) ? true : Number(member.querySelector('CHILDREN_CARDINALITY').textContent) > 0 ? true : false,\n                                        level: lvl,\n                                        depth: depth,\n                                        rowIndex: position,\n                                        index: [],\n                                        ordinal: tupPos,\n                                        type: 'header',\n                                        colSpan: 1,\n                                        rowSpan: 1,\n                                        memberType: Number(typeColl[memPos]),\n                                        isDrilled: (this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && !this.isAttributeDrill(member.getAttribute('Hierarchy'), this.tupRowInfo[tupPos].drillInfo, 'rows')) ? true : this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled,\n                                        parentUniqueName: member.querySelector('PARENT_UNIQUE_NAME') ?\n                                            member.querySelector('PARENT_UNIQUE_NAME').textContent : undefined,\n                                        levelUniqueName: member.querySelector('LName').textContent,\n                                        hierarchy: member.getAttribute('Hierarchy'),\n                                        isNamedSet: isNamedSet,\n                                        valueSort: { levelName: '', axis: member.getAttribute('Hierarchy') }\n                                    }];\n                                prevParent = typeColl[memPos] !== '3' ? pivotValues[position][0] : prevParent;\n                                if (!prevParent) {\n                                    rowMembers.push(member.querySelector('Caption').textContent);\n                                }\n                                var levelName = this.getCaptionCollectionWithMeasure(this.tupRowInfo[tupPos]);\n                                pivotValues[position][0].valueSort.levelName = levelName;\n                                pivotValues[position][0].valueSort[levelName] = 1;\n                                valueContent[position - this.rowStartPos] = {};\n                                valueContent[position - this.rowStartPos][0] = pivotValues[position][0];\n                                if (measure && measurePos > memPos) {\n                                    prevUNArray[measurePos] = '';\n                                }\n                                for (var pos = memPos + 1; pos < members.length; pos++) {\n                                    prevUNArray[pos] = '';\n                                }\n                                prevUNArray[memPos] = member.querySelector('UName').textContent;\n                                lastMesPos = Number(typeColl[memPos]) !== 3 ? position : lastMesPos;\n                                position++;\n                                lastMemPos = memPos;\n                            }\n                        }\n                        else if (typeColl[memPos] === '2') {\n                            lastMemPos = memPos;\n                        }\n                        else {\n                            if (this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled && allType[memPos] === 0) {\n                                withoutAllDrilled = true;\n                            }\n                        }\n                        if (this.tupRowInfo[tupPos].drillInfo[memPos].isDrilled && this.tupRowInfo[tupPos].showTotals) {\n                            this.tupRowInfo[tupPos].showTotals = !this.showRowSubTotals ? false :\n                                this.hideRowTotalsObject[this.tupRowInfo[tupPos].drillInfo[memPos].hierarchy] === undefined;\n                        }\n                        memPos++;\n                    }\n                    if (lastPos < position && lastMemPos >= (members.length - 1)) {\n                        pivotValues[position - 1][0].ordinal = tupPos;\n                        if (pivotValues[position - 1][0].type === 'header') {\n                            delete pivotValues[position - 1][0].type;\n                        }\n                    }\n                }\n                lastAllCount = allCount;\n                lastAllStartPos = allStartPos;\n            }\n            tupPos++;\n        }\n        if (gTotals.length > 1 && gTotals[0].memberType !== 3) {\n            gTotals[0].ordinal = -1;\n        }\n        // if (!(this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals)) {\n        //     for (let totPos: number = 0; totPos < gTotals.length; totPos++) {\n        //         if (this.tupRowInfo[gTotals[totPos].ordinal]) {\n        //             this.tupRowInfo[gTotals[totPos].ordinal].showTotals = false;\n        //         }\n        //     }\n        // }\n        if (this.customArgs.action !== 'down') {\n            if (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals) {\n                for (var totPos = 0; totPos < gTotals.length; totPos++) {\n                    gTotals[totPos].rowIndex = position;\n                    pivotValues[position] = [gTotals[totPos]];\n                    valueContent[position - this.rowStartPos] = {};\n                    valueContent[position - this.rowStartPos][0] = pivotValues[position][0];\n                    position++;\n                }\n            }\n        }\n        else {\n            this.updateRowEngine(pivotValues, valueContent, tuples.length);\n            this.onDemandDrillEngine = pivotValues;\n        }\n    };\n    OlapEngine.prototype.getDepth = function (tupInfo, uniqueName, memberType) {\n        var memberPosition = tupInfo.uNameCollection.indexOf(uniqueName);\n        var cropUName = tupInfo.uNameCollection.substring(0, memberPosition) +\n            (memberType === 3 ? '' : uniqueName);\n        var fieldSep = cropUName.split('::[').map(function (item) {\n            return item[0] === '[' ? item : ('[' + item);\n        });\n        if (memberType === 3 && this.rowMeasurePos === fieldSep.length) {\n            fieldSep.push(uniqueName);\n        }\n        var nxtIndextCount = -1;\n        for (var fPos = 0; fPos < fieldSep.length; fPos++) {\n            var fieldMembers = fieldSep[fPos];\n            var membersCount = fieldMembers.split('~~').length;\n            nxtIndextCount += membersCount;\n        }\n        return nxtIndextCount;\n    };\n    OlapEngine.prototype.checkAttributeDrill = function (drillInfo, axis) {\n        var isDrill = false;\n        for (var i = 0; i < drillInfo.length; i++) {\n            isDrill = this.isAttributeDrill(drillInfo[i].hierarchy, drillInfo, axis);\n            if (isDrill) {\n                break;\n            }\n        }\n        return isDrill;\n    };\n    OlapEngine.prototype.frameTupCollection = function (members, maxLevel, tupPos, tupInfo, showSubTotals, hideTotalsObject, axis) {\n        var _a, _b;\n        var memPos = 0;\n        var allCount = 0;\n        var allStartPos;\n        var measure;\n        var measureName;\n        var measurePosition;\n        var typeColl = [];\n        var levelColl = [];\n        var drillState = [];\n        var uNameCollection = '';\n        var captionCollection = '';\n        var showTotals = true;\n        var hideFieldPos = -1;\n        while (memPos < members.length) {\n            var member = members[memPos];\n            var memberlevel = Number(member.querySelector('LNum').textContent);\n            var memberUName = member.querySelector('UName').textContent;\n            /* eslint-disable @typescript-eslint/no-explicit-any */\n            if (Number(member.querySelector('MEMBER_TYPE').textContent) > 3) {\n                member.querySelector('MEMBER_TYPE').textContent = memberUName.indexOf('[Measures]') === 0 ? '3' : '1';\n            }\n            var memberType = memberUName.indexOf('[Measures]') === 0 ? '3' :\n                (Number(member.querySelector('MEMBER_TYPE').textContent) > 3 ? '1' : member.querySelector('MEMBER_TYPE').textContent);\n            /* eslint-enable @typescript-eslint/no-explicit-any */\n            var memberCaption = member.querySelector('Caption').textContent;\n            if (this.fieldList[memberCaption] && this.fieldList[memberCaption].type === 'CalculatedField') {\n                memberCaption = this.fieldList[memberCaption].caption;\n                member.querySelector('Caption').textContent = memberCaption;\n            }\n            var hierarchy = member.getAttribute('Hierarchy');\n            var parentUName = member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : '';\n            if (memberType === '2') {\n                if (!this.isPaging) {\n                    allCount++;\n                }\n                allStartPos = isNullOrUndefined(allStartPos) ? memPos : allStartPos;\n            }\n            else if (memberType === '3') {\n                measure = member;\n                measureName = memberUName;\n                measurePosition = memPos;\n                if (axis === 'column') {\n                    this.colMeasures[memberUName] = member;\n                    this.colMeasurePos = memPos;\n                }\n                else {\n                    this.rowMeasurePos = memPos;\n                }\n            }\n            else {\n                hideFieldPos = hideTotalsObject[hierarchy];\n            }\n            if (memberType !== '2') {\n                if (this.headerGrouping[memPos]) {\n                    if (memberlevel > this.lastLevel[memPos]) {\n                        this.lastLevel[memPos] = memberlevel;\n                    }\n                    else if (memberlevel < this.lastLevel[memPos]) {\n                        var levelPos = this.lastLevel[memPos];\n                        while (levelPos >= memberlevel) {\n                            delete this.headerGrouping[memPos].UName[levelPos];\n                            delete this.headerGrouping[memPos].Caption[levelPos];\n                            levelPos--;\n                        }\n                        this.lastLevel[memPos] = memberlevel;\n                    }\n                    this.headerGrouping[memPos].UName[memberlevel] = memberUName;\n                    this.headerGrouping[memPos].Caption[memberlevel] = memberCaption;\n                }\n                else {\n                    this.lastLevel[memPos] = memberlevel;\n                    this.headerGrouping[memPos] = { UName: (_a = {}, _a[memberlevel] = memberUName, _a), Caption: (_b = {}, _b[memberlevel] = memberCaption, _b) };\n                }\n                if (this.isPaging) {\n                    var currUName = parentUName;\n                    while (this.drilledSets[currUName]) {\n                        var currCaption = this.drilledSets[currUName].querySelector('Caption').textContent;\n                        var currLevel = Number(this.drilledSets[currUName].querySelector('LNum').textContent);\n                        this.headerGrouping[memPos].UName[currLevel] = currUName;\n                        this.headerGrouping[memPos].Caption[currLevel] = currCaption;\n                        currUName = this.drilledSets[currUName].querySelector('PARENT_UNIQUE_NAME') === null ? '' :\n                            this.drilledSets[currUName].querySelector('PARENT_UNIQUE_NAME').textContent;\n                    }\n                }\n                /* eslint-disable @typescript-eslint/no-explicit-any */\n                var uNames = '';\n                var uNamesKeys = Object.keys(this.headerGrouping[memPos].UName);\n                for (var i = 0; i < uNamesKeys.length; i++) {\n                    var j = uNamesKeys[i];\n                    if (i === 0) {\n                        uNames = this.headerGrouping[memPos].UName[j];\n                    }\n                    else {\n                        uNames = uNames + '~~' + this.headerGrouping[memPos].UName[j];\n                    }\n                }\n                uNameCollection = uNameCollection === '' ? uNames :\n                    (uNameCollection + '::' + uNames);\n                var captions = '';\n                var captionsKeys = Object.keys(this.headerGrouping[memPos].Caption);\n                for (var i = 0; i < captionsKeys.length; i++) {\n                    var j = captionsKeys[i];\n                    if (i === 0) {\n                        captions = this.headerGrouping[memPos].Caption[j];\n                    }\n                    else {\n                        captions = captions + '~~' + this.headerGrouping[memPos].Caption[j];\n                    }\n                }\n                /* eslint-enable @typescript-eslint/no-explicit-any */\n                if (memPos !== measurePosition) {\n                    captionCollection = captionCollection === '' ? captions :\n                        (captionCollection + '::' + captions);\n                }\n            }\n            typeColl.push(memberType);\n            levelColl.push(memberlevel);\n            if (isNullOrUndefined(maxLevel[memPos]) || maxLevel[memPos] < memberlevel) {\n                maxLevel[memPos] = memberlevel;\n            }\n            drillState.push({ level: memberlevel, uName: memberUName, hierarchy: hierarchy, isDrilled: false });\n            if (tupInfo[tupPos - 1] && tupInfo[tupPos - 1].typeCollection[memPos] === '1' &&\n                drillState[memPos].level > tupInfo[tupPos - 1].drillInfo[memPos].level) {\n                var uCollection = uNameCollection.split(/~~|::\\[/).map(function (item) {\n                    return item[0] === '[' ? item : ('[' + item);\n                });\n                uCollection.pop();\n                var parentLevel = uCollection.join('~~');\n                this.setDrillInfo(parentUName, parentLevel, memPos, tupPos, tupInfo);\n            }\n            memPos++;\n        }\n        if (hideFieldPos > -1) {\n            showTotals = typeColl[hideFieldPos + 1] !== '2';\n        }\n        tupInfo[tupPos] = {\n            allCount: allCount,\n            allStartPos: allStartPos,\n            measure: measure,\n            measureName: measureName,\n            measurePosition: measurePosition,\n            members: members,\n            typeCollection: typeColl,\n            uNameCollection: uNameCollection,\n            captionCollection: captionCollection,\n            levelCollection: levelColl,\n            drillInfo: drillState,\n            drillStartPos: -1,\n            drillEndPos: -1,\n            showTotals: (!showSubTotals && allCount > 0 && allStartPos > (measurePosition === 0 ? 1 : 0)) ? false : showTotals\n        };\n        return maxLevel;\n    };\n    OlapEngine.prototype.getCaptionCollectionWithMeasure = function (tuple) {\n        var captionColection = tuple.captionCollection;\n        if (tuple.measure) {\n            var measureName = tuple.measure.querySelector('Caption').textContent;\n            var measurePosition = tuple.uNameCollection.split(/[~~,::]+/g).indexOf(tuple.measureName);\n            var captionCollectionArray = tuple.captionCollection.split(/[~~,::]+/g);\n            captionCollectionArray.splice(measurePosition, 0, measureName);\n            captionColection = captionCollectionArray.join('.');\n        }\n        else {\n            var captionCollectionArray = tuple.captionCollection.split(/[~~,::]+/g);\n            captionColection = captionCollectionArray.join('.');\n        }\n        return captionColection;\n    };\n    /** hidden */\n    OlapEngine.prototype.setNamedSetsPosition = function () {\n        this.namedSetsPosition = {};\n        var axis = 0;\n        do {\n            var setsPositions = {};\n            var axisFields = axis ? this.dataSourceSettings.rows : this.dataSourceSettings.columns;\n            for (var fPos = 0; fPos < axisFields.length; fPos++) {\n                if (axisFields[fPos].isNamedSet) {\n                    setsPositions[fPos] = axisFields[fPos].name;\n                }\n            }\n            this.namedSetsPosition[axis ? 'row' : 'column'] = setsPositions;\n            axis++;\n        } while (axis < 2);\n    };\n    OlapEngine.prototype.updateRowEngine = function (pivotValues, valueContent, tuplesLength) {\n        var currEngineCount = this.pivotValues.length - 1;\n        var newEngineCount = Object.keys(pivotValues).length;\n        while (currEngineCount > this.customArgs.drillInfo.currentCell.rowIndex) {\n            this.pivotValues[currEngineCount + newEngineCount] = this.pivotValues[currEngineCount];\n            this.pivotValues[currEngineCount + newEngineCount][0].ordinal += tuplesLength;\n            this.pivotValues[currEngineCount + newEngineCount][0].rowIndex += newEngineCount;\n            this.valueContent[(currEngineCount + newEngineCount) - this.rowStartPos] = this.valueContent[currEngineCount - this.rowStartPos];\n            currEngineCount--;\n        }\n        // for (let key in pivotValues) {\n        for (var key = 0; key < pivotValues.length; key++) {\n            this.pivotValues[key] = pivotValues[key];\n            this.valueContent[Number(key) - this.rowStartPos] = valueContent[Number(key) - this.rowStartPos];\n        }\n        this.pivotValues[this.customArgs.drillInfo.currentCell.rowIndex][0].isDrilled = true;\n    };\n    OlapEngine.prototype.updateTupCollection = function (newTuplesCount) {\n        var tupCollection = this.customArgs.drillInfo.axis === 'row' ? this.tupRowInfo : this.tupColumnInfo;\n        var currTupCount = tupCollection.length - 1;\n        while (currTupCount > this.customArgs.drillInfo.currentCell.ordinal) {\n            tupCollection[currTupCount + newTuplesCount] = tupCollection[currTupCount];\n            currTupCount--;\n        }\n    };\n    OlapEngine.prototype.frameColumnHeader = function (tuples) {\n        var _this = this;\n        this.headerGrouping = {};\n        this.lastLevel = [];\n        var tupPos = 0;\n        var maxLevel = [];\n        var allType = [];\n        var minLevel = [];\n        var withoutAllStartPos = -1;\n        var withoutAllEndPos = -1;\n        var newTupPosition = (this.customArgs.drillInfo && this.customArgs.drillInfo.axis === 'column') ?\n            (this.customArgs.drillInfo.currentCell.ordinal + 1) : 0;\n        while (tupPos < tuples.length) {\n            var members = tuples[tupPos].querySelectorAll('Member');\n            maxLevel = this.frameTupCollection(members, maxLevel, (tupPos + newTupPosition), this.tupColumnInfo, this.showColumnSubTotals, this.hideColumnTotalsObject, 'column');\n            tupPos++;\n        }\n        if (tuples.length > 0) {\n            var members = tuples[0].querySelectorAll('Member');\n            var memPos = 0;\n            while (memPos < members.length) {\n                minLevel[memPos] = (members[memPos].querySelector('MEMBER_TYPE').textContent === '1' &&\n                    Number(members[memPos].querySelector('LNum').textContent) === 0) ? 0 :\n                    Number(members[memPos].querySelector('LNum').textContent);\n                if (members[memPos].querySelector('MEMBER_TYPE').textContent === '1' &&\n                    (this.isPaging || Number(members[memPos].querySelector('LNum').textContent) === 0)) {\n                    allType[memPos] = 0;\n                    withoutAllStartPos = withoutAllStartPos === -1 ? memPos : withoutAllStartPos;\n                    withoutAllEndPos = memPos;\n                }\n                else {\n                    allType[memPos] = 1;\n                }\n                memPos++;\n            }\n        }\n        tupPos = 0;\n        var position = 1;\n        var lastSavedInfo = {};\n        var isSubTotIncluded = true;\n        var withoutAllAvail = false;\n        var lastRealTup;\n        var _loop_1 = function () {\n            var members = tuples[tupPos].querySelectorAll('Member');\n            var allCount = this_1.tupColumnInfo[tupPos].allCount;\n            var allStartPos = this_1.tupColumnInfo[tupPos].allStartPos;\n            var measure = this_1.tupColumnInfo[tupPos].measure;\n            var typeColl = this_1.tupColumnInfo[tupPos].typeCollection;\n            var drillInfo = this_1.tupColumnInfo[tupPos].drillInfo;\n            var drillStartPos = this_1.tupColumnInfo[tupPos].drillStartPos;\n            var startDrillUniquename = this_1.tupColumnInfo[tupPos].startDrillUniquename;\n            var endDrillUniquename = this_1.tupColumnInfo[tupPos].endDrillUniquename;\n            var drillEndPos = this_1.tupColumnInfo[tupPos].drillEndPos;\n            var levelColl = this_1.tupColumnInfo[tupPos].levelCollection;\n            var isStartCol = typeColl[0] === '2' ? false : (typeColl[0] === '3' ? typeColl[1] !== '2' : true);\n            var depth = 0;\n            /* eslint-disable */\n            maxLevel.map(function (item, pos) { depth = depth + (allType[pos] === 0 ? (item + (1 - (minLevel[pos] > 1 ? 1 : minLevel[pos]))) : (item === 0 ? ((_this.isPaging && typeColl[pos] === '2') ? 0 : 1) : item)); });\n            /* eslint-enable */\n            this_1.colDepth = this_1.colDepth > depth ? this_1.colDepth : depth;\n            if (tupPos === 0 && members.length > (allCount + (measure ? 1 : 0))) {\n                withoutAllAvail = true;\n                isStartCol = (allCount > 0 && isStartCol) ? (allStartPos > withoutAllStartPos) : isStartCol;\n            }\n            if (isStartCol) {\n                if (allCount === 0) {\n                    var levelComp = [-1, -1, -1];\n                    if (this_1.tupColumnInfo[tupPos - 1] && this_1.tupColumnInfo[tupPos - 1].allCount === 0) {\n                        levelComp = this_1.levelCompare(levelColl, this_1.tupColumnInfo[tupPos - 1].levelCollection);\n                    }\n                    else if (withoutAllAvail && lastRealTup) {\n                        levelComp = this_1.levelCompare(levelColl, lastRealTup.levelCollection);\n                    }\n                    if (this_1.tupColumnInfo[tupPos].drillStartPos < 0) {\n                        if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {\n                            position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);\n                        }\n                        this_1.setParentCollection(members);\n                        this_1.frameCommonColumnLoop(members, tupPos, position, maxLevel, allType, minLevel);\n                        if (!this_1.tupColumnInfo[tupPos].showTotals) {\n                            position--;\n                        }\n                        if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {\n                            position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);\n                        }\n                        isSubTotIncluded = false;\n                        if (!this_1.isColDrill) {\n                            position++;\n                        }\n                        else {\n                            this_1.isColDrill = false;\n                        }\n                    }\n                    else if (lastSavedInfo.drillStartPos === drillStartPos ?\n                        (lastSavedInfo.startDrillUniquename !== startDrillUniquename ||\n                            lastSavedInfo.allCount === allCount) : true) {\n                        if (!isSubTotIncluded && levelComp[0] > -1 && levelComp[2] > -1) {\n                            position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo, levelComp);\n                            isSubTotIncluded = true;\n                        }\n                        this_1.setParentCollection(members);\n                        if (withoutAllAvail ? (withoutAllEndPos <= drillStartPos) : true) {\n                            this_1.totalCollection[this_1.totalCollection.length] =\n                                ({ allCount: allCount, ordinal: tupPos, members: members, drillInfo: drillInfo });\n                            lastSavedInfo.allCount = allCount;\n                            lastSavedInfo.allStartPos = allStartPos;\n                            lastSavedInfo.drillStartPos = drillStartPos;\n                            lastSavedInfo.startDrillUniquename = startDrillUniquename;\n                            lastSavedInfo.endDrillUniquename = endDrillUniquename;\n                        }\n                    }\n                    lastRealTup = this_1.tupColumnInfo[tupPos];\n                }\n            }\n            var attrDrill = this_1.checkAttributeDrill(this_1.tupColumnInfo[tupPos].drillInfo, 'columns');\n            if (allCount > 0 && (withoutAllAvail ? (isStartCol && (attrDrill || withoutAllEndPos < allStartPos)) : true)) {\n                if (allCount === lastSavedInfo.allCount || allStartPos !== lastSavedInfo.allStartPos) {\n                    var endAllow = drillEndPos !== drillStartPos ?\n                        (lastSavedInfo.endDrillUniquename === endDrillUniquename) : true;\n                    var allow = allStartPos !== lastSavedInfo.allStartPos ?\n                        (lastSavedInfo.startDrillUniquename !== startDrillUniquename) : endAllow;\n                    if (drillStartPos > -1 ? (allow) : true) {\n                        if (!isSubTotIncluded) {\n                            position = this_1.mergeTotCollection(position, allCount, maxLevel, minLevel, allType, allStartPos, drillInfo);\n                            isSubTotIncluded = true;\n                        }\n                        this_1.setParentCollection(members);\n                        if ((withoutAllAvail && drillStartPos > -1) ? (withoutAllEndPos <= drillStartPos) : true) {\n                            this_1.totalCollection[this_1.totalCollection.length] =\n                                ({\n                                    allCount: allCount, ordinal: tupPos, members: members, allStartPos: allStartPos, drillInfo: drillInfo\n                                });\n                            lastSavedInfo.allCount = allCount;\n                            lastSavedInfo.allStartPos = allStartPos;\n                            lastSavedInfo.drillStartPos = drillStartPos;\n                            lastSavedInfo.startDrillUniquename = startDrillUniquename;\n                            lastSavedInfo.endDrillUniquename = endDrillUniquename;\n                        }\n                    }\n                }\n            }\n            tupPos++;\n        };\n        var this_1 = this;\n        while (tupPos < tuples.length) {\n            _loop_1();\n        }\n        if (this.totalCollection.length > 0) {\n            if (Object.keys(this.colMeasures).length > 1) {\n                this.orderTotals(position, maxLevel, allType, minLevel);\n            }\n            else {\n                this.totalCollection = this.totalCollection.reverse();\n                for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {\n                    var coll = _a[_i];\n                    var isGrandTotal = this.tupColumnInfo[coll.ordinal].measurePosition === 0 ?\n                        this.tupColumnInfo[coll.ordinal].allStartPos === 1 : this.tupColumnInfo[coll.ordinal].allStartPos === 0;\n                    if (isGrandTotal ? (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals) : true) {\n                        this.frameCommonColumnLoop(coll.members, coll.ordinal, position, maxLevel, minLevel, allType);\n                        var attrDrill = this.checkAttributeDrill(this.tupColumnInfo[coll.ordinal].drillInfo, 'columns');\n                        if (this.tupColumnInfo[coll.ordinal].showTotals || attrDrill) {\n                            position++;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    OlapEngine.prototype.orderTotals = function (position, maxLevel, allType, minLevel) {\n        var groupColl = {};\n        var maxCnt = 1;\n        for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {\n            var coll = _a[_i];\n            var isGrandTotal = this.tupColumnInfo[coll.ordinal].measurePosition === 0 ?\n                this.tupColumnInfo[coll.ordinal].allStartPos === 1 : this.tupColumnInfo[coll.ordinal].allStartPos === 0;\n            if (isGrandTotal ? (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals) : true) {\n                var measureName = this.tupColumnInfo[coll.ordinal].measure.querySelector('UName').textContent;\n                if (groupColl[measureName]) {\n                    groupColl[measureName].coll.push(coll);\n                    groupColl[measureName].count++;\n                    maxCnt = maxCnt < groupColl[measureName].count ? groupColl[measureName].count : maxCnt;\n                }\n                else {\n                    groupColl[measureName] = { coll: [coll], count: 1 };\n                }\n            }\n        }\n        var keys = Object.keys(groupColl);\n        var collLength = maxCnt - 1;\n        while (collLength > -1) {\n            for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {\n                var key = keys_1[_b];\n                var coll = groupColl[key].coll[collLength];\n                if (coll) {\n                    this.frameCommonColumnLoop(coll.members, coll.ordinal, position, maxLevel, allType, minLevel);\n                    if (this.tupColumnInfo[coll.ordinal].showTotals) {\n                        position++;\n                    }\n                }\n            }\n            collLength--;\n        }\n    };\n    OlapEngine.prototype.setParentCollection = function (members) {\n        var memPos = 0;\n        while (members.length > memPos) {\n            var member = members[memPos];\n            var memberType = Number(member.querySelector('MEMBER_TYPE').textContent) > 2 ? '3' :\n                member.querySelector('MEMBER_TYPE').textContent;\n            var memberlevel = Number(member.querySelector('LNum').textContent);\n            var memberUName = member.querySelector('UName').textContent;\n            var parentUName = member.querySelector('PARENT_UNIQUE_NAME') ?\n                member.querySelector('PARENT_UNIQUE_NAME').textContent : '';\n            var isSameParent = true;\n            var isWithoutAllMember = false;\n            if (this.parentObjCollection[memPos]) {\n                var levelCollection = Object.keys(this.parentObjCollection[memPos]);\n                var parentMember = this.parentObjCollection[memPos][memberlevel - 1];\n                isSameParent = parentMember ? parentUName === parentMember.querySelector('UName').textContent :\n                    levelCollection.length === 0;\n                isWithoutAllMember = this.tupColumnInfo[0].typeCollection[memPos] === '1';\n            }\n            if (memberType === '2') {\n                delete this.parentObjCollection[memPos];\n            }\n            else {\n                if ((this.isPaging || isWithoutAllMember) ? !isSameParent : false) {\n                    delete this.parentObjCollection[memPos];\n                }\n                if (!this.parentObjCollection[memPos]) {\n                    this.parentObjCollection[memPos] = {};\n                    this.parentObjCollection[memPos][memberlevel] = member;\n                }\n                else if (!this.parentObjCollection[memPos][memberlevel] ||\n                    this.parentObjCollection[memPos][memberlevel].querySelector('UName').textContent !== memberUName) {\n                    this.parentObjCollection[memPos][memberlevel] = member;\n                }\n            }\n            memPos++;\n        }\n    };\n    OlapEngine.prototype.setDrillInfo = function (pUName, parentLvlCollection, memPos, tupPos, tupInfo) {\n        tupPos--;\n        while (tupInfo[tupPos] && tupInfo[tupPos].drillInfo[memPos].uName === pUName) {\n            var prevUcollection = tupInfo[tupPos].uNameCollection.split(/~~|::\\[/).map(function (item) {\n                return item[0] === '[' ? item : ('[' + item);\n            });\n            if (prevUcollection.join('~~').indexOf(parentLvlCollection) < 0) {\n                break;\n            }\n            tupInfo[tupPos].drillInfo[memPos].isDrilled = true;\n            if (this.curDrillEndPos <= memPos) {\n                tupInfo[tupPos].drillEndPos = this.curDrillEndPos = memPos;\n                tupInfo[tupPos].endDrillUniquename = pUName;\n            }\n            if (tupInfo[tupPos].drillStartPos > memPos || tupInfo[tupPos].drillStartPos === -1) {\n                tupInfo[tupPos].drillStartPos = memPos;\n            }\n            tupInfo[tupPos].startDrillUniquename = pUName;\n            tupPos--;\n        }\n    };\n    OlapEngine.prototype.levelCompare = function (newLevels, oldLevels) {\n        var changePos = [-1, 0];\n        for (var lPos = 0; lPos < oldLevels.length; lPos++) {\n            if (newLevels[lPos] !== oldLevels[lPos]) {\n                changePos = [lPos, newLevels[lPos], (oldLevels[lPos] - newLevels[lPos])];\n                break;\n            }\n        }\n        return changePos;\n    };\n    OlapEngine.prototype.mergeTotCollection = function (position, allCount, maxLevel, allType, minLevel, allStartPos, drillInfo, levelComp) {\n        var prevHdrPos = isNullOrUndefined(allStartPos) ? levelComp[0] : (allStartPos - ((this.colMeasurePos === (allStartPos - 1)) ? 2 : 1));\n        var flagLevel = drillInfo[prevHdrPos] && drillInfo[prevHdrPos].level;\n        var flagLevelString = this.getLevelsAsString(prevHdrPos - 1, drillInfo);\n        var groupColl = {};\n        var maxCnt = 1;\n        var enterFlag = false;\n        for (var _i = 0, _a = this.totalCollection; _i < _a.length; _i++) {\n            var coll = _a[_i];\n            if (enterFlag || (coll.allCount <= allCount &&\n                ((flagLevel > -1 && coll.drillInfo[prevHdrPos]) ? ((coll.drillInfo[prevHdrPos].level >= flagLevel) &&\n                    (this.getLevelsAsString(prevHdrPos - 1, coll.drillInfo)) === flagLevelString) : true))) {\n                var measureName = this.tupColumnInfo[coll.ordinal].measure ? this.tupColumnInfo[coll.ordinal].measure.querySelector('UName').textContent : 'measure';\n                if (groupColl[measureName]) {\n                    groupColl[measureName].coll.push(coll);\n                    groupColl[measureName].count++;\n                    maxCnt = maxCnt < groupColl[measureName].count ? groupColl[measureName].count : maxCnt;\n                }\n                else {\n                    groupColl[measureName] = { coll: [coll], count: 1 };\n                }\n                enterFlag = false;\n            }\n        }\n        var keys = Object.keys(groupColl);\n        var collLength = maxCnt - 1;\n        while (collLength > -1) {\n            for (var _b = 0, keys_2 = keys; _b < keys_2.length; _b++) {\n                var key = keys_2[_b];\n                var coll1 = groupColl[key].coll[collLength];\n                if (coll1) {\n                    var isGrandTotal = this.tupColumnInfo[coll1.ordinal].measurePosition === 0 ?\n                        this.tupColumnInfo[coll1.ordinal].allStartPos === 1 : this.tupColumnInfo[coll1.ordinal].allStartPos === 0;\n                    if (isGrandTotal ? (this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showColumnGrandTotals) : true) {\n                        this.frameCommonColumnLoop(coll1.members, coll1.ordinal, position, maxLevel, minLevel, allType);\n                        if (this.tupColumnInfo[coll1.ordinal].showTotals) {\n                            position++;\n                        }\n                    }\n                    this.totalCollection.pop();\n                }\n            }\n            collLength--;\n        }\n        return position;\n    };\n    OlapEngine.prototype.getLevelsAsString = function (prevHdrPos, drillInfo) {\n        var lvlCollection = [];\n        for (var pos = 0; pos < prevHdrPos; pos++) {\n            lvlCollection[pos] = drillInfo[pos].level;\n        }\n        return lvlCollection.length > 0 ? lvlCollection.toString() : '';\n    };\n    OlapEngine.prototype.frameCommonColumnLoop = function (members, tupPos, position, maxLevel, minLevel, allType) {\n        var _a;\n        var drillMemberPosition = -1;\n        if (this.tupColumnInfo[tupPos].showTotals) {\n            var memberPos = 0;\n            var memberDepth = 0;\n            while (memberPos < members.length) {\n                memberDepth += (allType[memberPos] > 0 && this.getMeasurePosition(this.tupColumnInfo[tupPos].uNameCollection, this.tupColumnInfo[tupPos].measurePosition) !== memberPos) ? /* eslint-disable-line */\n                    maxLevel[memberPos] :\n                    (maxLevel[memberPos] + (1 - minLevel[memberPos]));\n                if (this.tupColumnInfo[tupPos].drillInfo[memberPos].isDrilled && this.tupColumnInfo[tupPos].showTotals) {\n                    this.tupColumnInfo[tupPos].showTotals = !this.showColumnSubTotals ? false :\n                        this.hideColumnTotalsObject[this.tupColumnInfo[tupPos].drillInfo[memberPos].hierarchy] === undefined;\n                    memberDepth -= maxLevel[memberPos] -\n                        this.tupColumnInfo[tupPos].levelCollection[memberPos];\n                    drillMemberPosition = this.tupColumnInfo[tupPos].showTotals ? -1 : (memberDepth - 1);\n                }\n                memberPos++;\n            }\n        }\n        var attrDrill = this.checkAttributeDrill(this.tupColumnInfo[tupPos].drillInfo, 'columns');\n        if (this.tupColumnInfo[tupPos].showTotals || attrDrill) {\n            var memPos = 0;\n            var spanMemPos = 0;\n            var colMembers = {};\n            while (memPos < members.length) {\n                var member = members[memPos];\n                var memberType = Number(member.querySelector('MEMBER_TYPE').textContent) > 2 ? '3' :\n                    member.querySelector('MEMBER_TYPE').textContent;\n                var memDup = 0;\n                for (var rowDepthPos = memberType !== '2' ? (allType[memPos] ? 1 : minLevel[memPos]) : 1; rowDepthPos <= (memberType === '3' ? 1 : maxLevel[memPos]); rowDepthPos++) {\n                    var isDrilled = false;\n                    if (!this.pivotValues[spanMemPos]) {\n                        this.pivotValues[spanMemPos] = [];\n                    }\n                    if (Number(members[memPos].querySelector('LNum').textContent) > rowDepthPos && memberType !== '2') {\n                        if (!this.parentObjCollection[memPos][rowDepthPos]) {\n                            this.getDrilledParent(members[memPos], rowDepthPos, this.parentObjCollection[memPos]);\n                        }\n                        if (this.parentObjCollection[memPos][rowDepthPos]) {\n                            member = this.parentObjCollection[memPos][rowDepthPos];\n                        }\n                        isDrilled = true;\n                    }\n                    else {\n                        member = members[memPos];\n                        memDup++;\n                    }\n                    if (memberType !== '2') {\n                        colMembers[member.querySelector('UName').textContent] = member.querySelector('Caption').textContent;\n                    }\n                    /* eslint-disable */\n                    var levelName = '';\n                    var levelNameKeys = Object.keys(colMembers);\n                    for (var i = 0; i < levelNameKeys.length; i++) {\n                        var j = levelNameKeys[i];\n                        if (i === 0) {\n                            levelName = colMembers[j];\n                        }\n                        else {\n                            levelName = levelName + '.' + colMembers[j];\n                        }\n                    }\n                    var isNamedSet = this.namedSetsPosition['column'][memPos] ? true : false;\n                    var uName = this.getUniqueName(member.querySelector('UName').textContent);\n                    var depth = this.getDepth(this.tupColumnInfo[tupPos], uName, Number(memberType));\n                    if (!(this.isPaging && this.pivotValues[spanMemPos - 1] && this.pivotValues[spanMemPos - 1][position] && this.fieldList[this.pivotValues[spanMemPos - 1][position].hierarchy] && this.fieldList[this.pivotValues[spanMemPos - 1][position].hierarchy].isHierarchy &&\n                        this.pivotValues[spanMemPos - 1][position].hasChild && !this.pivotValues[spanMemPos - 1][position].isDrilled && !this.columns[memPos].isNamedSet && this.fieldList[member.getAttribute('Hierarchy')] && (this.fieldList[member.getAttribute('Hierarchy')].isHierarchy || this.fieldList[member.getAttribute('Hierarchy')].hasAllMember) &&\n                        this.pivotValues[spanMemPos - 1][position].depth < depth)) {\n                        this.pivotValues[spanMemPos][position] = {\n                            axis: 'column',\n                            actualText: uName,\n                            colIndex: position,\n                            formattedText: (memberType === '3' && this.dataFields[uName] &&\n                                this.dataFields[uName].caption) ? this.dataFields[uName].caption :\n                                member.querySelector('Caption').textContent,\n                            hasChild: (this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && memPos < this.columns.length - 1 && !this.columns[memPos + 1].isNamedSet && this.columns[memPos + 1].name.indexOf('[Measures]') < 0 && this.fieldList[this.columns[memPos + 1].name] && this.fieldList[this.columns[memPos + 1].name].hasAllMember) ? true : Number(member.querySelector('CHILDREN_CARDINALITY').textContent) > 0 ? true : false,\n                            level: memDup > 1 ? -1 : (Number(member.querySelector('LNum').textContent) - ((allType[memPos] && memberType !== '3') ? 1 : 0)),\n                            rowIndex: spanMemPos,\n                            ordinal: tupPos,\n                            memberType: Number(memberType),\n                            depth: depth,\n                            isDrilled: (this.fieldList[member.getAttribute('Hierarchy')] && this.fieldList[member.getAttribute('Hierarchy')].isHierarchy && !this.isAttributeDrill(member.getAttribute('Hierarchy'), this.tupColumnInfo[tupPos].drillInfo, 'columns')) ? true : (isDrilled || this.tupColumnInfo[tupPos].drillInfo[memPos].isDrilled),\n                            parentUniqueName: member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : undefined,\n                            levelUniqueName: member.querySelector('LName').textContent,\n                            hierarchy: member.getAttribute('Hierarchy'),\n                            isNamedSet: isNamedSet,\n                            valueSort: (_a = { levelName: levelName }, _a[levelName] = 1, _a.axis = member.getAttribute('Hierarchy'), _a)\n                            /* eslint-enable */\n                        };\n                        if (!this.headerContent[spanMemPos]) {\n                            this.headerContent[spanMemPos] = {};\n                        }\n                        this.headerContent[spanMemPos][position] = this.pivotValues[spanMemPos][position];\n                        spanMemPos++;\n                    }\n                    else {\n                        this.isColDrill = true;\n                        break;\n                    }\n                }\n                memPos++;\n            }\n        }\n        else {\n            if (drillMemberPosition > -1) {\n                this.pivotValues[drillMemberPosition][position - 1].ordinal = tupPos;\n            }\n            else if (this.tupColumnInfo[tupPos].allCount > 0) {\n                var memberPos = 0;\n                var memberDepth = 0;\n                while (memberPos < this.tupColumnInfo[tupPos].allStartPos) {\n                    memberDepth += (allType[memberPos] > 0 && this.getMeasurePosition(this.tupColumnInfo[tupPos].uNameCollection, this.tupColumnInfo[tupPos].measurePosition) !== memberPos) ? /* eslint-disable-line */\n                        maxLevel[memberPos] :\n                        (maxLevel[memberPos] + (1 - minLevel[memberPos]));\n                    memberPos++;\n                }\n                if (this.tupColumnInfo[tupPos].allStartPos === (this.tupColumnInfo[tupPos].measurePosition + 1)) {\n                    memberDepth -= maxLevel[this.tupColumnInfo[tupPos].allStartPos - 2] -\n                        this.tupColumnInfo[tupPos].levelCollection[this.tupColumnInfo[tupPos].allStartPos - 2] + 1;\n                }\n                else {\n                    memberDepth -= maxLevel[this.tupColumnInfo[tupPos].allStartPos - 1] -\n                        this.tupColumnInfo[tupPos].levelCollection[this.tupColumnInfo[tupPos].allStartPos - 1];\n                }\n                this.pivotValues[memberDepth - 1][position - 1].ordinal = tupPos;\n            }\n        }\n    };\n    OlapEngine.prototype.isAttributeDrill = function (hierarchy, drillInfo, axis) {\n        var isDrill = false;\n        var isAdjacent = this.isAdjacentToMeasure(hierarchy, axis);\n        if (!isAdjacent) {\n            for (var i = 0; i < this.drilledMembers.length; i++) {\n                if (this.drilledMembers[i].name === hierarchy) {\n                    for (var j = 0; j < this.drilledMembers[i].items.length; j++) {\n                        var drillItems = this.drilledMembers[i].items[j].split(this.drilledMembers[i].delimiter);\n                        var levelName = '';\n                        for (var k = 0; k < drillItems.length; k++) {\n                            if (drillInfo[k] && drillInfo[k].uName) {\n                                levelName = levelName + (levelName === '' ? '' : this.drilledMembers[i].delimiter) + drillInfo[k].uName;\n                            }\n                        }\n                        if (levelName === this.drilledMembers[i].items[j]) {\n                            isDrill = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return isDrill;\n    };\n    OlapEngine.prototype.isAdjacentToMeasure = function (hierarchy, axis) {\n        var isAdjacent = false;\n        var fields = axis === 'rows' ? this.rows : this.columns;\n        for (var i = 0; i < fields.length; i++) {\n            if (fields[i].name === hierarchy && fields[i + 1] && (fields[i + 1].name === '[Measures]' || fields[i + 1].isNamedSet || (this.fieldList[fields[i + 1].name] && !this.fieldList[fields[i + 1].name].hasAllMember))) {\n                isAdjacent = true;\n                break;\n            }\n        }\n        return isAdjacent;\n    };\n    OlapEngine.prototype.getDrilledParent = function (childMember, parentLevel, savedCollection) {\n        var childlevel = Number(childMember.querySelector('LNum').textContent);\n        var currentChild = childMember;\n        for (var lvl = childlevel - 1; lvl >= parentLevel; lvl--) {\n            var currentParent = this.drilledSets[currentChild.querySelector('PARENT_UNIQUE_NAME').textContent];\n            if (currentParent) {\n                savedCollection[lvl] = currentParent;\n                currentChild = currentParent;\n            }\n            else {\n                break;\n            }\n        }\n    };\n    OlapEngine.prototype.performRowSorting = function () {\n        var _a;\n        if (this.enableSort && this.tupRowInfo.length > 0) {\n            var rowCount = this.pivotValues.length;\n            var lvlGrouping = {};\n            var measureObjects = {};\n            var gSumGrouping = [];\n            var gSumFlag = false;\n            var withoutAllLastPos = this.tupRowInfo[0].typeCollection.lastIndexOf('1');\n            for (var rPos = this.colDepth; rPos < rowCount; rPos++) {\n                var currentCell = this.pivotValues[rPos][0];\n                var currentTuple = this.tupRowInfo[currentCell.ordinal];\n                var uniqueName = currentTuple ? (currentTuple.measurePosition === 0 && currentCell.memberType === 3 ?\n                    currentTuple.measureName : currentTuple.uNameCollection) : '';\n                if (uniqueName !== '') {\n                    if (withoutAllLastPos > -1) {\n                        uniqueName = this.frameUniqueName(uniqueName, currentCell, currentTuple);\n                    }\n                    var level = uniqueName.split(/~~|::\\[/).length;\n                    if (currentCell.memberType === 3 && this.tupRowInfo[0].measurePosition > 0) {\n                        var parentUName = this.getParentUname(uniqueName, currentCell, true, true);\n                        if (measureObjects[parentUName]) {\n                            measureObjects[parentUName].push(currentCell);\n                        }\n                        else {\n                            measureObjects[parentUName] = [currentCell];\n                        }\n                    }\n                    else if (lvlGrouping[level]) {\n                        lvlGrouping[level][uniqueName] = [currentCell];\n                    }\n                    else {\n                        lvlGrouping[level] = (_a = {}, _a[uniqueName] = [currentCell], _a);\n                    }\n                }\n                if (gSumFlag) {\n                    gSumGrouping.push(currentCell);\n                }\n                if (currentCell.type === 'grand sum') {\n                    gSumFlag = true;\n                }\n            }\n            var isMeasureAvail = Object.keys(measureObjects).length > 0 && this.tupRowInfo[0].measurePosition > 0;\n            var levels = Object.keys(lvlGrouping).map(function (item) {\n                return Number(item);\n            }).sort(function (a, b) { return (a > b) ? 1 : ((b > a) ? -1 : 0); }); /* eslint-disable-line */\n            var sortLvlGrouping = {};\n            for (var lPos = levels.length - 1; lPos >= 0; lPos--) {\n                var parentGrouping = {};\n                var objCollection = lvlGrouping[levels[lPos]];\n                var objKeys = Object.keys(objCollection);\n                for (var oPos = 0; oPos < objKeys.length; oPos++) {\n                    var parentUName = lPos === 0 ? 'parent' :\n                        this.getParentUname(objKeys[oPos], objCollection[objKeys[oPos]][0], isMeasureAvail, false);\n                    if (parentGrouping[parentUName]) {\n                        parentGrouping[parentUName].push(objCollection[objKeys[oPos]][0]);\n                    }\n                    else {\n                        parentGrouping[parentUName] = [objCollection[objKeys[oPos]]][0];\n                    }\n                }\n                var pKeys = Object.keys(parentGrouping);\n                for (var kPos = 0; kPos < pKeys.length; kPos++) {\n                    parentGrouping[pKeys[kPos]] = this.sortRowHeaders(parentGrouping[pKeys[kPos]]);\n                }\n                if (sortLvlGrouping[levels[lPos + 1]]) {\n                    for (var kPos = 0; kPos < pKeys.length; kPos++) {\n                        var groupSets = [];\n                        var axisSets = parentGrouping[pKeys[kPos]];\n                        for (var aPos = 0; aPos < axisSets.length; aPos++) {\n                            var tupInfo = this.tupRowInfo[axisSets[aPos].ordinal];\n                            var uName = (tupInfo.measurePosition === 0 && axisSets[aPos].memberType === 3) ?\n                                tupInfo.measureName : tupInfo.uNameCollection;\n                            groupSets.push(axisSets[aPos]);\n                            if (withoutAllLastPos > -1) {\n                                uName = this.frameUniqueName(uName, axisSets[aPos], tupInfo);\n                            }\n                            var isMembersIncluded = false;\n                            if (isMeasureAvail) {\n                                var parentUName = this.getParentUname(uName, axisSets[aPos], isMeasureAvail, true);\n                                if (measureObjects[parentUName]) {\n                                    measureObjects[parentUName] = this.sortRowHeaders(measureObjects[parentUName]);\n                                    var isLastMeasure = uName.lastIndexOf('::[') === uName.indexOf('::[Measures]');\n                                    var isFullLength = uName.split('::[').length - 1 === tupInfo.measurePosition;\n                                    var isLastNotDrilledMember = !tupInfo.drillInfo[tupInfo.measurePosition - 1].isDrilled;\n                                    var isActualLastMember = tupInfo.members.length > (tupInfo.measurePosition + 1);\n                                    if (isLastMeasure && isFullLength && isLastNotDrilledMember && isActualLastMember) {\n                                        isMembersIncluded = true;\n                                        for (var mPos = 0; mPos < measureObjects[parentUName].length; mPos++) {\n                                            groupSets.push(measureObjects[parentUName][mPos]);\n                                            var matchParent = (uName.substring(0, uName.indexOf('::[Measures]')) + '::' + measureObjects[parentUName][mPos].actualText);\n                                            if (sortLvlGrouping[levels[lPos + 1]][matchParent]) {\n                                                groupSets = groupSets.concat(sortLvlGrouping[levels[lPos + 1]][matchParent]);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        groupSets = groupSets.concat(measureObjects[parentUName]);\n                                    }\n                                }\n                            }\n                            if (!isMembersIncluded &&\n                                sortLvlGrouping[levels[lPos + 1]][uName]) {\n                                groupSets = groupSets.concat(sortLvlGrouping[levels[lPos + 1]][uName]);\n                            }\n                        }\n                        parentGrouping[pKeys[kPos]] = groupSets;\n                    }\n                }\n                else if (isMeasureAvail) {\n                    for (var kPos = 0; kPos < pKeys.length; kPos++) {\n                        var axisSets = parentGrouping[pKeys[kPos]];\n                        var groupSets = [];\n                        for (var aPos = 0; aPos < axisSets.length; aPos++) {\n                            groupSets.push(axisSets[aPos]);\n                            var uName = this.tupRowInfo[axisSets[aPos].ordinal].uNameCollection;\n                            if (withoutAllLastPos > -1) {\n                                uName = this.frameUniqueName(uName, axisSets[aPos], this.tupRowInfo[axisSets[aPos].ordinal]);\n                            }\n                            var parentUName = this.getParentUname(uName, axisSets[aPos], true, true);\n                            if (measureObjects[parentUName]) {\n                                measureObjects[parentUName] = this.sortRowHeaders(measureObjects[parentUName]);\n                                groupSets = groupSets.concat(measureObjects[parentUName]);\n                            }\n                        }\n                        parentGrouping[pKeys[kPos]] = groupSets;\n                    }\n                }\n                sortLvlGrouping[levels[lPos]] = parentGrouping;\n            }\n            var newPos = 0;\n            var totPos = 0;\n            gSumFlag = false;\n            gSumGrouping = this.sortRowHeaders(gSumGrouping);\n            for (var rPos = this.colDepth; rPos < rowCount; rPos++) {\n                /* eslint-disable @typescript-eslint/dot-notation */\n                var cell = gSumFlag ? gSumGrouping : sortLvlGrouping[levels[0]]['parent'];\n                /* eslint-enable @typescript-eslint/dot-notation */\n                var currPos = gSumFlag ? (newPos - totPos) : newPos;\n                if (cell[currPos]) {\n                    this.pivotValues[rPos] = [cell[currPos]];\n                    this.pivotValues[rPos][0].rowIndex = rPos;\n                    this.valueContent[newPos][0] = this.pivotValues[rPos][0];\n                }\n                newPos++;\n                if (this.pivotValues[rPos][0].type === 'grand sum') {\n                    gSumFlag = true;\n                    totPos = newPos;\n                }\n            }\n        }\n    };\n    /* eslint-disable */\n    OlapEngine.prototype.performColumnSorting = function () {\n        if (this.enableSort) {\n            for (var i = 0; i < this.dataSourceSettings.columns.length; i++) {\n                var temporary = [];\n                var index = 0;\n                var grandTotal = [];\n                for (var j = 0; j < this.pivotValues.length; j++) {\n                    var header = this.pivotValues[j];\n                    var key = void 0;\n                    var keys = void 0;\n                    var arrange = {};\n                    var value = 1;\n                    grandTotal[index] = [];\n                    temporary[index] = [];\n                    var k = 1;\n                    for (k = k; k < header.length; k++) {\n                        if (!header[k].isNamedSet) {\n                            if (header[k].memberType != 2 && header[k].hierarchy\n                                != '[Measures]' && header[k].level != -1) {\n                                if (isNullOrUndefined(arrange[header[k].formattedText]) || isNullOrUndefined(this.pivotValues[j - 1])) {\n                                    arrange[header[k].formattedText] = arrange[header[k].formattedText] ? arrange[header[k].formattedText] : [];\n                                    arrange[header[k].formattedText][header[k].colIndex] = header[k];\n                                }\n                                else if (arrange[header[k].formattedText] && this.pivotValues[j - 1]) {\n                                    var prevRowCell = this.pivotValues[j - 1][header[k].colIndex];\n                                    var prevColValue = Number(Object.keys(arrange[header[k].formattedText])[0]);\n                                    var prevColIndex = ((arrange[header[k].formattedText])[prevColValue]).colIndex;\n                                    var prevColRowCell = this.pivotValues[j - 1][prevColIndex];\n                                    if (prevRowCell.formattedText !== prevColRowCell.formattedText) {\n                                        var key_1 = Object.keys(arrange);\n                                        key_1 = this.sortColumnHeaders(key_1, this.sortObject[header[k - 1].levelUniqueName] ||\n                                            this.sortObject[header[k].hierarchy]);\n                                        isNullOrUndefined(temporary[index]) ? temporary[index] = [] : temporary[index];\n                                        for (var keyPos = 0; keyPos < key_1.length; keyPos++) {\n                                            var length_1 = Object.keys(arrange[key_1[keyPos]]).length;\n                                            for (var cellPos = 0; cellPos < length_1; cellPos++) {\n                                                value = temporary[index].length === 0 ? 1 : 0;\n                                                temporary[index][temporary[index].length + value] =\n                                                    arrange[key_1[keyPos]][Number(Object.keys(arrange[key_1[keyPos]])[cellPos])];\n                                            }\n                                        }\n                                        arrange = {};\n                                        arrange[header[k].formattedText] = [];\n                                        arrange[header[k].formattedText][header[k].colIndex] = header[k];\n                                    }\n                                    else {\n                                        arrange[header[k].formattedText][header[k].colIndex] = header[k];\n                                    }\n                                }\n                            }\n                            else if (Object.keys(arrange).length > 0) {\n                                grandTotal[index][grandTotal[index].length + value] = header[k];\n                                key = Object.keys(arrange);\n                                key = this.sortColumnHeaders(key, this.sortObject[header[k - 1].levelUniqueName] ||\n                                    this.sortObject[header[k].hierarchy]);\n                                isNullOrUndefined(temporary[index]) ? temporary[index] = [] : temporary[index];\n                                for (var l = 0; l < key.length; l++) {\n                                    var length_2 = Object.keys(arrange[key[l]]).length;\n                                    for (var q = 0; q < length_2; q++) {\n                                        value = temporary[index].length === 0 ? 1 : 0;\n                                        temporary[index][temporary[index].length + value] =\n                                            arrange[key[l]][Number(Object.keys(arrange[key[l]])[q])];\n                                    }\n                                }\n                            }\n                            else if ((header[k].level === -1 || header[k].level === 0) &&\n                                Object.keys(arrange).length >= 0 && header[k].hierarchy != '[Measures]') {\n                                grandTotal[index][grandTotal[index].length + value] = header[k];\n                            }\n                            if (header[k].level != -1 && Object.keys(arrange).length === 1 &&\n                                header[k].hierarchy != '[Measures]' && !isNullOrUndefined(header[k + 1]) &&\n                                header[k + 1].level === -1) {\n                                var height = Object.keys(arrange[header[k].formattedText]).length;\n                                var weight = Object.keys(arrange[header[k].formattedText]);\n                                if (height > 1) {\n                                    for (var hgt = 0; hgt < height; hgt++) {\n                                        value = grandTotal[index].length === 0 ? 1 : 0;\n                                        grandTotal[index][grandTotal[index].length + value] =\n                                            arrange[header[k].formattedText][Number(weight[hgt])];\n                                    }\n                                }\n                                else {\n                                    grandTotal[index][grandTotal[index].length + value] = header[k];\n                                }\n                            }\n                            if (Object.keys(grandTotal[index]).length > 0) {\n                                value = temporary[index].length === 0 ? 1 : 0;\n                                var height1 = grandTotal[index].length;\n                                if (height1 > 2) {\n                                    for (var hgt1 = 1; hgt1 < height1; hgt1++) {\n                                        value = temporary[index].length === 0 ? 1 : 0;\n                                        temporary[index][temporary[index].length + value] =\n                                            grandTotal[index][hgt1];\n                                    }\n                                }\n                                else {\n                                    temporary[index][temporary[index].length + value] =\n                                        grandTotal[index][1] || grandTotal[index][0];\n                                }\n                                arrange = {};\n                                grandTotal[index] = [];\n                            }\n                        }\n                    }\n                    if (Object.keys(arrange).length > 0) {\n                        grandTotal[index][grandTotal[index].length + value] = header[k];\n                        keys = Object.keys(arrange);\n                        var order = this.sortObject[header[k - 1].levelUniqueName] || this.sortObject[header[k - 1].hierarchy];\n                        key = this.sortColumnHeaders(keys, order);\n                        isNullOrUndefined(temporary[index]) ? temporary[index] = [] : temporary[index];\n                        for (var len = 0; len < keys.length; len++) {\n                            var leng = Object.keys(arrange[keys[len]]).length;\n                            for (var q = 0; q < leng; q++) {\n                                value = temporary[index].length === 0 ? 1 : 0;\n                                temporary[index][temporary[index].length + value] =\n                                    arrange[key[len]][Number(Object.keys(arrange[keys[len]])[q])];\n                            }\n                        }\n                    }\n                    for (var m = 1; m < temporary[index].length; m++) {\n                        this.pivotValues[index][m] = temporary[index][m];\n                    }\n                    for (var n = j; n < this.pivotValues.length; n++) {\n                        var pElement = extend({}, this.pivotValues[n + 1], null, true);\n                        var cElement = extend({}, this.pivotValues[n], null, true);\n                        if (Object.keys(pElement).length === Object.keys(cElement).length && Object.keys(pElement).length > 2) {\n                            for (var o = 1; o < this.pivotValues[j].length; o++) {\n                                if (Object.keys(pElement).length > 0 && cElement[o].colIndex\n                                    != pElement[o].colIndex) {\n                                    this.pivotValues[n + 1][o] = pElement[cElement[o].colIndex];\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    index++;\n                    arrange = {};\n                }\n                for (var i_1 = 0; i_1 < this.pivotValues.length; i_1++) {\n                    var header = this.pivotValues[i_1];\n                    for (var j = 1; j < header.length; j++) {\n                        header[j].colIndex = j;\n                    }\n                }\n            }\n        }\n    };\n    OlapEngine.prototype.frameUniqueName = function (uniqueName, currentCell, currentTuple) {\n        var hasLastMeasure = uniqueName.indexOf(currentCell.actualText.toString() + '::[Measures]') > -1;\n        uniqueName = uniqueName.substring(0, uniqueName.indexOf(currentCell.actualText.toString())) +\n            currentCell.actualText.toString();\n        var measureAvail = uniqueName.split('::[').length <= this.getMeasurePosition(uniqueName, currentTuple.measurePosition);\n        uniqueName = uniqueName + ((hasLastMeasure || measureAvail) ? ('::' + currentTuple.measureName) : '');\n        return uniqueName;\n    };\n    OlapEngine.prototype.getMeasurePosition = function (uniqueName, measurePosition) {\n        var position = measurePosition;\n        var collection = uniqueName.split('::[');\n        for (var i = 0; i < collection.length; i++) {\n            if (collection[i] && collection[i].indexOf('Measures') > -1) {\n                position = i;\n                break;\n            }\n        }\n        return position;\n    };\n    OlapEngine.prototype.sortRowHeaders = function (headers) {\n        if (headers.length > 0 && headers[0].memberType !== 3 && !headers[0].isNamedSet) {\n            var order = (this.sortObject[headers[0].hierarchy] || this.sortObject[headers[0].levelUniqueName]);\n            if (order === 'Ascending' || order === undefined) {\n                headers === headers.sort(function (a, b) { return (a.formattedText > b.formattedText) ? 1 :\n                    ((b.formattedText > a.formattedText) ? -1 : 0); });\n            }\n            else if (order === 'Descending') {\n                headers === headers.sort(function (a, b) { return (a.formattedText < b.formattedText) ? 1 :\n                    ((b.formattedText < a.formattedText) ? -1 : 0); });\n            }\n            else {\n                headers;\n            }\n        }\n        return headers;\n    };\n    OlapEngine.prototype.sortColumnHeaders = function (keys, order) {\n        if (order === 'Ascending' || order === undefined) {\n            keys.sort(function (a, b) { return (a > b) ? 1 : ((b > a) ? -1 : 0); });\n        }\n        else if (order === 'Descending') {\n            keys.sort(function (a, b) { return (a < b) ? 1 : ((b < a) ? -1 : 0); });\n        }\n        return keys;\n    };\n    /* eslint-enable */\n    OlapEngine.prototype.frameSortObject = function () {\n        if (this.enableSort) {\n            for (var fPos = 0; fPos < this.sortSettings.length; fPos++) {\n                this.sortObject[this.sortSettings[fPos].name] = this.sortSettings[fPos].order;\n            }\n        }\n    };\n    OlapEngine.prototype.getParentUname = function (uniqueNameColl, cell, isMeasureAvail, isLastMeasure) {\n        var parentString = '';\n        if (isMeasureAvail && !isLastMeasure) {\n            var tuple = this.tupRowInfo[cell.ordinal];\n            var sepPos = [];\n            var sepObjects = {};\n            for (var i = 0; i < uniqueNameColl.length; i++) {\n                if (uniqueNameColl[i] === '~' || uniqueNameColl[i] === ':') {\n                    sepPos.push(i);\n                    sepObjects[i] = uniqueNameColl[i] + uniqueNameColl[i];\n                    i++;\n                }\n            }\n            if (this.getMeasurePosition(uniqueNameColl, tuple.measurePosition) >= (uniqueNameColl.split('::[').length - 1)) {\n                if (sepPos[sepPos.length - 2] > -1) {\n                    parentString = uniqueNameColl.substring(0, sepPos[sepPos.length - 2]) + sepObjects[sepPos[sepPos.length - 1]] +\n                        tuple.measureName;\n                }\n                else {\n                    parentString = 'parent';\n                }\n            }\n            else {\n                var lastPosition = uniqueNameColl.lastIndexOf('~~') > uniqueNameColl.lastIndexOf('::[') ?\n                    uniqueNameColl.lastIndexOf('~~') : uniqueNameColl.lastIndexOf('::[');\n                parentString = lastPosition > -1 ? uniqueNameColl.substring(0, lastPosition) : 'parent';\n            }\n        }\n        else {\n            var lastPosition = uniqueNameColl.lastIndexOf('~~') > uniqueNameColl.lastIndexOf('::[') ?\n                uniqueNameColl.lastIndexOf('~~') : uniqueNameColl.lastIndexOf('::[');\n            parentString = lastPosition > -1 ? uniqueNameColl.substring(0, lastPosition) : 'parent';\n        }\n        return parentString;\n    };\n    OlapEngine.prototype.performColumnSpanning = function () {\n        var spanCollection = {};\n        var rowPos = this.rowStartPos - 1;\n        var colMeasureCount = Object.keys(this.colMeasures).length;\n        while (rowPos > -1) {\n            spanCollection[rowPos] = {};\n            var colPos = this.pivotValues[rowPos].length - 1;\n            while (colPos > 0) {\n                spanCollection[rowPos][colPos] = 1;\n                var nextColCell = this.pivotValues[rowPos][colPos + 1];\n                var nextRowCell = (this.pivotValues[rowPos + 1] && this.rowStartPos - rowPos > 1) ? this.pivotValues[rowPos + 1][colPos] : undefined; /* eslint-disable-line */\n                var currCell = this.pivotValues[rowPos][colPos];\n                var colflag = false;\n                var rowflag = false;\n                var tupColInfo = this.tupColumnInfo[currCell.ordinal];\n                var isSubTot = tupColInfo.allStartPos > (tupColInfo.typeCollection[0] === '3' ? 1 : 0);\n                var attrDrill = this.checkAttributeDrill(tupColInfo.drillInfo, 'columns');\n                if (nextRowCell && nextColCell && ((currCell.memberType === 2 || currCell.level === -1) ?\n                    (nextColCell.actualText === currCell.actualText) :\n                    ((currCell.memberType === 3 && currCell.actualText === nextColCell.actualText) ||\n                        nextColCell.valueSort.levelName === currCell.valueSort.levelName))) {\n                    if (currCell.memberType === 2) {\n                        if (isSubTot ? nextColCell.type === 'sum' : true) {\n                            currCell.colSpan = (nextColCell.colSpan + 1) >\n                                (tupColInfo.measurePosition > rowPos ? colMeasureCount : 0) ? 1 : (nextColCell.colSpan + 1);\n                        }\n                        else {\n                            currCell.colSpan = 1;\n                        }\n                    }\n                    else {\n                        currCell.colSpan = nextColCell.colSpan + 1;\n                        currCell.ordinal = nextColCell.ordinal;\n                    }\n                    colflag = true;\n                }\n                if (currCell.memberType === 2) {\n                    if (isSubTot) {\n                        if (!attrDrill) {\n                            currCell.type = 'sum';\n                        }\n                        //currCell.formattedText = (this.pivotValues[tupColInfo.allStartPos - 1] as IAxisSet[])[colPos].formattedText + ' Total';\n                        currCell.formattedText = 'Total';\n                        currCell.valueSort[currCell.valueSort.levelName.toString()] = 1;\n                    }\n                    else {\n                        var levelName = 'Grand Total';\n                        if (nextRowCell && colMeasureCount > 0) {\n                            levelName = nextRowCell.memberType === 3 ? ('Grand Total.' + nextRowCell.formattedText) :\n                                nextRowCell.valueSort.levelName;\n                        }\n                        currCell.type = 'grand sum';\n                        currCell.formattedText = 'Grand Total';\n                        currCell.valueSort.levelName = levelName;\n                        currCell.valueSort[levelName.toString()] = 1;\n                    }\n                    currCell.hasChild = false;\n                }\n                else if (currCell.level === -1) {\n                    currCell.type = 'sum';\n                    //currCell.formattedText = currCell.formattedText + ' Total';\n                    currCell.formattedText = 'Total';\n                    currCell.hasChild = false;\n                    currCell.valueSort[currCell.valueSort.levelName.toString()] = 1;\n                }\n                if (nextRowCell) {\n                    if ((currCell.memberType === 2 && nextRowCell.memberType === 2) || nextRowCell.actualText === currCell.actualText) {\n                        spanCollection[rowPos][colPos] = spanCollection[rowPos + 1] ? (spanCollection[rowPos + 1][colPos] + 1) : 1;\n                        if (rowPos === 0 || (currCell.memberType === 1 && currCell.level > -1 && nextRowCell.memberType === 1 && nextRowCell.level === -1)) { /* eslint-disable-line */\n                            currCell.rowSpan = (currCell.isDrilled && ((this.fieldList[currCell.hierarchy] && this.fieldList[currCell.hierarchy].isHierarchy) ? currCell.hasChild : true)) ? 1 : (spanCollection[rowPos + 1][colPos] + 1); /* eslint-disable-line */\n                            nextRowCell.rowSpan = (nextRowCell.isDrilled && ((this.fieldList[nextRowCell.hierarchy] && this.fieldList[nextRowCell.hierarchy].isHierarchy) ? nextRowCell.hasChild : true) && nextRowCell.level === -1) ? spanCollection[rowPos + 1][colPos] : nextRowCell.rowSpan; /* eslint-disable-line */\n                        }\n                        else {\n                            if (currCell.memberType === 3) {\n                                currCell.rowSpan = 1;\n                            }\n                            else {\n                                currCell.rowSpan = -1;\n                            }\n                        }\n                        rowflag = true;\n                    }\n                    else if (currCell.isDrilled && ((this.fieldList[currCell.hierarchy] && this.fieldList[currCell.hierarchy].isHierarchy) ? currCell.hasChild : true) && currCell.level === -1 && nextRowCell.memberType === 2) { /* eslint-disable-line */\n                        spanCollection[rowPos][colPos] = spanCollection[rowPos + 1] ? (spanCollection[rowPos + 1][colPos] + 1) : 1;\n                        currCell.rowSpan = -1;\n                        rowflag = true;\n                    }\n                    else {\n                        /* eslint-disable */\n                        currCell.rowSpan = rowPos === 0 ? spanCollection[rowPos][colPos] : -1;\n                        nextRowCell.rowSpan = ((nextRowCell.level > -1 && !(nextRowCell.isDrilled && ((this.fieldList[nextRowCell.hierarchy] && this.fieldList[nextRowCell.hierarchy].isHierarchy) ? nextRowCell.hasChild : true))) || (currCell.memberType !== 2 && nextRowCell.memberType === 2)) ? spanCollection[rowPos + 1][colPos] : 1;\n                        /* eslint-enable */\n                    }\n                }\n                else {\n                    currCell.rowSpan = (currCell.level > -1 || this.rowStartPos === 1) ? spanCollection[rowPos][colPos] : -1;\n                }\n                if (!colflag) {\n                    currCell.colSpan = 1;\n                }\n                if (!rowflag) {\n                    spanCollection[rowPos][colPos] = 1;\n                }\n                colPos--;\n            }\n            rowPos--;\n        }\n    };\n    OlapEngine.prototype.frameValues = function (tuples, colLength) {\n        var rowStartPos = this.colDepth;\n        var rowEndPos = this.pivotValues.length;\n        var startRowOrdinal = 0;\n        if (this.customArgs.action === 'down') {\n            var keys = Object.keys(this.onDemandDrillEngine);\n            rowStartPos = Number(keys[0]);\n            rowEndPos = Number(keys[keys.length - 1]) + 1;\n            startRowOrdinal = this.onDemandDrillEngine[rowStartPos][0].ordinal;\n        }\n        var valCollection = {};\n        for (var colPos = 0; colPos < tuples.length; colPos++) {\n            valCollection[Number(tuples[colPos].getAttribute('CellOrdinal'))] = tuples[colPos];\n        }\n        for (var rowPos = rowStartPos; rowPos < rowEndPos; rowPos++) {\n            var columns = this.pivotValues[rowPos];\n            var rowOrdinal = columns[0].ordinal;\n            for (var colPos = 1; colPos < this.pivotValues[0].length; colPos++) {\n                if (this.pivotValues[this.colDepth - 1][colPos]) {\n                    var colOrdinal = this.pivotValues[this.colDepth - 1][colPos].ordinal;\n                    var lastColCell = this.pivotValues[this.colDepth - 1][colPos];\n                    var measure = columns[0].memberType === 3 ? columns[0].actualText.toString() :\n                        ((this.tupColumnInfo[lastColCell.ordinal] && this.tupColumnInfo[lastColCell.ordinal].measure) ?\n                            this.tupColumnInfo[lastColCell.ordinal].measure.querySelector('UName').textContent :\n                            columns[0].actualText);\n                    if (columns[0].type === 'header') {\n                        columns[colPos] = {\n                            axis: 'value',\n                            actualText: this.getUniqueName(measure),\n                            formattedText: '',\n                            value: 0,\n                            colIndex: colPos,\n                            rowIndex: rowPos\n                        };\n                    }\n                    else {\n                        var valElement = void 0;\n                        var formattedText = void 0;\n                        var value = '0';\n                        var measureName = this.getUniqueName(measure);\n                        var showTotals = true;\n                        var attrDrill = (this.fieldList[columns[0].hierarchy] && this.fieldList[columns[0].hierarchy].isHierarchy && columns[0].isDrilled); /* eslint-disable-line */\n                        if (this.tupRowInfo[rowOrdinal]) {\n                            showTotals = this.tupRowInfo[rowOrdinal].showTotals;\n                        }\n                        else {\n                            showTotals = this.dataSourceSettings.showGrandTotals && this.dataSourceSettings.showRowGrandTotals;\n                        }\n                        valElement = valCollection[(rowOrdinal - startRowOrdinal) * colLength + colOrdinal];\n                        formattedText = (!showTotals && attrDrill) ? '' :\n                            ((!isNullOrUndefined(valElement) && !isNullOrUndefined(valElement.querySelector('FmtValue'))) ?\n                                valElement.querySelector('FmtValue').textContent : this.emptyCellTextContent);\n                        value = (!showTotals && attrDrill) ? '0' :\n                            ((!isNullOrUndefined(valElement) && !isNullOrUndefined(valElement.querySelector('Value'))) ?\n                                valElement.querySelector('Value').textContent : null);\n                        formattedText = showTotals && !isNullOrUndefined(value) ?\n                            this.getFormattedValue(Number(value), measureName, (formattedText !== '' ? formattedText : value)) :\n                            formattedText;\n                        var isSum = (this.tupColumnInfo[colOrdinal] ? (this.tupColumnInfo[colOrdinal].allCount > 0 ||\n                            this.tupColumnInfo[colOrdinal].drillStartPos > -1) : true) ||\n                            (this.tupRowInfo[rowOrdinal] ? (this.tupRowInfo[rowOrdinal].allCount > 0 ||\n                                this.tupRowInfo[rowOrdinal].drillStartPos > -1) : true);\n                        var isGrand = (this.tupRowInfo[rowOrdinal] ? (this.tupRowInfo[rowOrdinal].measurePosition === 0 ? this.tupRowInfo[rowOrdinal].allStartPos === 1 : this.tupRowInfo[rowOrdinal].allStartPos === 0) : false) || /* eslint-disable-line */\n                            (this.tupColumnInfo[colOrdinal] ? (this.tupColumnInfo[colOrdinal].measurePosition === 0 ? this.tupColumnInfo[colOrdinal].allStartPos === 1 : this.tupColumnInfo[colOrdinal].allStartPos === 0) : false); /* eslint-disable-line */\n                        columns[colPos] = {\n                            axis: 'value',\n                            actualText: measureName,\n                            formattedText: formattedText,\n                            colOrdinal: colOrdinal,\n                            rowOrdinal: rowOrdinal,\n                            columnHeaders: this.tupColumnInfo[colOrdinal] ? this.tupColumnInfo[colOrdinal].captionCollection : '',\n                            rowHeaders: this.tupRowInfo[rowOrdinal] ? this.tupRowInfo[rowOrdinal].captionCollection : '',\n                            value: !isNullOrUndefined(value) ? Number(value) : null,\n                            colIndex: colPos,\n                            rowIndex: rowPos,\n                            isSum: isSum,\n                            isGrandSum: isGrand\n                        };\n                    }\n                    this.valueContent[rowPos - this.rowStartPos][colPos] = columns[colPos];\n                }\n            }\n        }\n    };\n    /* eslint-disable */\n    /** hidden */\n    OlapEngine.prototype.getFormattedValue = function (value, fieldName, formattedText) {\n        var formattedValue = formattedText;\n        if (this.formatFields[fieldName] && !isNullOrUndefined(value)) {\n            var formatField = (this.formatFields[fieldName].properties ?\n                this.formatFields[fieldName].properties : this.formatFields[fieldName]);\n            var formatObj = extend({}, formatField, null, true);\n            /* eslint-enable */\n            delete formatObj.name;\n            if (!formatObj.minimumSignificantDigits && formatObj.minimumSignificantDigits < 1) {\n                delete formatObj.minimumSignificantDigits;\n            }\n            if (!formatObj.maximumSignificantDigits && formatObj.maximumSignificantDigits < 1) {\n                delete formatObj.maximumSignificantDigits;\n            }\n            if (formatObj.type) {\n                formattedValue = this.globalize.formatDate(new Date(value.toString()), formatObj);\n            }\n            else {\n                delete formatObj.type;\n                if ((formatObj.format) && !(this.formatRegex.test(formatObj.format))) {\n                    var pattern = formatObj.format.match(this.customRegex);\n                    var integerPart = pattern[6];\n                    formatObj.useGrouping = integerPart.indexOf(',') !== -1;\n                }\n                formattedValue = this.globalize.formatNumber(value, formatObj);\n            }\n        }\n        return formattedValue;\n    };\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    OlapEngine.prototype.getMeasureInfo = function () {\n        var mAxis = 'column';\n        var mIndex;\n        var values = [];\n        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n            var field = _a[_i];\n            values[values.length] = (field.isCalculatedField ? this.fieldList[field.name].tag : field.name);\n        }\n        if (values.length > 1) {\n            if (this.isMeasureAvail) {\n                var isAvail = false;\n                for (var i = 0, cnt = this.rows.length; i < cnt; i++) {\n                    if (this.rows[i].name.toLowerCase() === '[measures]') {\n                        mAxis = 'row';\n                        mIndex = i;\n                        isAvail = true;\n                        break;\n                    }\n                }\n                if (!isAvail) {\n                    for (var i = 0, cnt = this.columns.length; i < cnt; i++) {\n                        if (this.columns[i].name.toLowerCase() === '[measures]') {\n                            mAxis = 'column';\n                            mIndex = i;\n                            isAvail = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                mAxis = this.valueAxis;\n                mIndex = mAxis === 'row' ? this.rows.length - 1 : this.columns.length - 1;\n            }\n            return { measureAxis: mAxis, measureIndex: mIndex, valueInfo: values };\n        }\n        else {\n            return { measureAxis: mAxis, measureIndex: -1, valueInfo: [] };\n        }\n    };\n    /* eslint-disable  */\n    OlapEngine.prototype.frameMeasureOrder = function (measureInfo, axis, tuples, vTuples, cLen) {\n        var orderedTuples = [];\n        var orderedVTuples = [];\n        var orderedIndex = [];\n        var levels = {};\n        var cLevels = [];\n        var measureAxis = measureInfo.measureAxis;\n        var measureIndex = measureInfo.measureIndex;\n        var values = measureInfo.valueInfo;\n        if (measureAxis === axis && values.length > 0) {\n            var levelCollection = {};\n            var uniqueLevels = [];\n            for (var j = 0, lnt = tuples.length; j < lnt; j++) {\n                var node = tuples[j];\n                var members = [].slice.call(node.querySelectorAll('Member'));\n                var level = '';\n                var cLevel = '';\n                var i = 0;\n                while (i < members.length) {\n                    level = level + (level !== '' ? '~~' : '') + members[i].querySelector('UName').textContent;\n                    if (i === measureIndex && measureIndex === 0) {\n                        cLevel = level;\n                    }\n                    else if (i === (measureIndex - 1)) {\n                        cLevel = level;\n                    }\n                    i++;\n                }\n                if (levelCollection[cLevel]) {\n                    levelCollection[cLevel][levelCollection[cLevel].length] = level;\n                }\n                else {\n                    levelCollection[cLevel] = [level];\n                    uniqueLevels[uniqueLevels.length] = cLevel;\n                }\n                levels[level] = { index: j, node: node };\n                cLevels[cLevels.length] = level;\n            }\n            if (cLevels.length > 0) {\n                if (uniqueLevels.length > 0) {\n                    if (measureIndex === 0) {\n                        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                            var name_1 = values_1[_i];\n                            for (var _a = 0, uniqueLevels_1 = uniqueLevels; _a < uniqueLevels_1.length; _a++) {\n                                var key = uniqueLevels_1[_a];\n                                if (key === name_1) {\n                                    for (var _b = 0, _c = levelCollection[key]; _b < _c.length; _b++) {\n                                        var level = _c[_b];\n                                        orderedIndex[orderedIndex.length] = levels[level].index;\n                                        orderedTuples[orderedTuples.length] = levels[level].node;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        for (var _d = 0, uniqueLevels_2 = uniqueLevels; _d < uniqueLevels_2.length; _d++) {\n                            var key = uniqueLevels_2[_d];\n                            for (var _e = 0, values_2 = values; _e < values_2.length; _e++) {\n                                var name_2 = values_2[_e];\n                                for (var _f = 0, _g = levelCollection[key]; _f < _g.length; _f++) {\n                                    var level = _g[_f];\n                                    var levelInfo = level.split('~~');\n                                    if (levelInfo[measureIndex] === name_2) {\n                                        orderedIndex[orderedIndex.length] = levels[level].index;\n                                        orderedTuples[orderedTuples.length] = levels[level].node;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (vTuples.length > 0) {\n                var valueIndex = [];\n                var vOrdinalIndex = [];\n                var len = 0;\n                var cRow = 0;\n                for (var j = 0, cnt = vTuples.length; j < cnt; j++) {\n                    if (len > (cLen - 1)) {\n                        cRow++;\n                        len = 0;\n                        if (!valueIndex[cRow]) {\n                            valueIndex[cRow] = [];\n                        }\n                        valueIndex[cRow][len] = j;\n                        len++;\n                    }\n                    else {\n                        if (!valueIndex[cRow]) {\n                            valueIndex[cRow] = [];\n                        }\n                        valueIndex[cRow][len] = j;\n                        len++;\n                    }\n                    vOrdinalIndex[vOrdinalIndex.length] = Number(vTuples[j].getAttribute('CellOrdinal'));\n                }\n                if (measureAxis === 'column') {\n                    if (valueIndex.length > 0 && valueIndex[0].length === orderedIndex.length) {\n                        for (var i = 0, cnt = orderedIndex.length; i < cnt; i++) {\n                            var j = 0;\n                            while (j < valueIndex.length) {\n                                var index = (j * cLen) + i;\n                                var ordinalValue = vOrdinalIndex[index].toString();\n                                var tuple = vTuples[Number(valueIndex[j][orderedIndex[i]])];\n                                tuple.setAttribute('CellOrdinal', ordinalValue.toString());\n                                orderedVTuples[index] = tuple;\n                                j++;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (valueIndex.length === orderedIndex.length) {\n                        for (var i = 0, cnt = orderedIndex.length; i < cnt; i++) {\n                            var j = 0;\n                            while (j < valueIndex[orderedIndex[i]].length) {\n                                var index = (i * cLen) + j;\n                                var ordinalValue = vOrdinalIndex[index].toString();\n                                var tuple = vTuples[Number(valueIndex[orderedIndex[i]][j])];\n                                tuple.setAttribute('CellOrdinal', ordinalValue.toString());\n                                orderedVTuples[orderedVTuples.length] = tuple;\n                                j++;\n                            }\n                        }\n                    }\n                }\n            }\n            return { orderedHeaderTuples: orderedTuples, orderedValueTuples: orderedVTuples };\n        }\n        else {\n            return { orderedHeaderTuples: tuples, orderedValueTuples: vTuples };\n        }\n    };\n    /* eslint-disable  */\n    OlapEngine.prototype.getDrilledSets = function (uNameCollection, currentCell, fieldPos, axis) {\n        var levels = [];\n        var memberName = currentCell.actualText.toString();\n        var tupCollection = axis === 'row' ? this.tupRowInfo : this.tupColumnInfo;\n        var currTuple = tupCollection[currentCell.ordinal];\n        var measurePos = tupCollection[0].typeCollection.indexOf('3');\n        var allStartPos = measurePos === 0 ? 1 : 0;\n        var tupPos = 0;\n        var isWithoutAllMember = tupCollection[0].typeCollection[fieldPos] === '1';\n        while (tupPos < tupCollection.length) {\n            if (isNullOrUndefined(tupCollection[tupPos].allStartPos) || tupCollection[tupPos].allStartPos > allStartPos) {\n                levels[levels.length] = tupCollection[tupPos].uNameCollection;\n            }\n            tupPos++;\n        }\n        var memberArray = uNameCollection.split('::[').map(function (item) {\n            return item[0] === '[' ? item : ('[' + item);\n        });\n        var joinArray = [];\n        for (var memPos = 0; memPos <= fieldPos; memPos++) {\n            if (memberArray[memPos]) {\n                if ((isWithoutAllMember || this.isPaging) && memPos === fieldPos) {\n                    var splitLevels = memberArray[memPos].split('~~');\n                    var drillLevel = splitLevels.indexOf(memberName);\n                    var cropLevels = [];\n                    for (var lPos = 0; lPos <= drillLevel; lPos++) {\n                        cropLevels.push(splitLevels[lPos]);\n                    }\n                    joinArray[joinArray.length] = cropLevels.length > 0 ? cropLevels.join('~~') : memberArray[memPos];\n                }\n                else {\n                    joinArray[joinArray.length] = memberArray[memPos];\n                }\n            }\n        }\n        uNameCollection = joinArray.join('::');\n        var childSets = [];\n        var memberObj = {};\n        for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {\n            var item = levels_1[_i];\n            if (item.indexOf(uNameCollection) === 0) {\n                childSets.push(item);\n                if (this.isPaging) {\n                    var drillField = item.split('::[')[fieldPos];\n                    drillField = drillField[0] === '[' ? drillField : ('[' + drillField);\n                    var drillFieldSep = drillField.split('~~');\n                    for (var fPos = drillFieldSep.indexOf(memberName); fPos < drillFieldSep.length; fPos++) {\n                        memberObj[drillFieldSep[fPos]] = drillFieldSep[fPos];\n                    }\n                }\n            }\n        }\n        if (this.isPaging) {\n            var fieldSep = currTuple.uNameCollection.split('::[').map(function (item) {\n                return item[0] === '[' ? item : ('[' + item);\n            });\n            var cropArray = [];\n            for (var fPos = 0; fPos < fieldSep.length; fPos++) {\n                if (fPos !== fieldPos) {\n                    cropArray[fPos] = fieldSep[fPos];\n                }\n            }\n            var drillFieldSep = Object.keys(memberObj);\n            for (var fPos = 0; fPos < drillFieldSep.length; fPos++) {\n                cropArray[fieldPos] = drillFieldSep[fPos];\n                childSets.push(cropArray.join('::'));\n            }\n        }\n        var drillSets = {};\n        for (var _a = 0, childSets_1 = childSets; _a < childSets_1.length; _a++) {\n            var level = childSets_1[_a];\n            var fields = level.split('::[').map(function (item) {\n                return item[0] === '[' ? item : ('[' + item);\n            });\n            var set = '';\n            for (var pos = 0; pos <= fieldPos; pos++) {\n                var field = fields[pos];\n                if (field) {\n                    var members = field.split('~~');\n                    set = set + (set !== '' ? '~~' : '') + members[members.length - 1];\n                }\n            }\n            drillSets[set] = set;\n        }\n        return drillSets;\n    };\n    OlapEngine.prototype.updateDrilledInfo = function (dataSourceSettings) {\n        this.dataSourceSettings = dataSourceSettings;\n        this.drilledMembers = dataSourceSettings.drilledMembers ? this.updateDrilledItems(dataSourceSettings.drilledMembers) : [];\n        // MDXQuery.getCellSets(this.dataSourceSettings as IDataOptions, this);\n        this.generateGridData(dataSourceSettings);\n    };\n    OlapEngine.prototype.updateCalcFields = function (dataSourceSettings, lastcalcInfo) {\n        this.dataSourceSettings = dataSourceSettings;\n        this.calculatedFieldSettings = dataSourceSettings.calculatedFieldSettings ? dataSourceSettings.calculatedFieldSettings : [];\n        this.getAxisFields();\n        this.updateFieldlist();\n        this.loadCalculatedMemberElements(this.calculatedFieldSettings);\n        if (this.dataFields[lastcalcInfo.name]) {\n            this.generateGridData(dataSourceSettings);\n        }\n        else {\n            MDXQuery.getCellSets(dataSourceSettings, this, true, undefined, true);\n        }\n    };\n    OlapEngine.prototype.onSort = function (dataSourceSettings) {\n        this.dataSourceSettings = dataSourceSettings;\n        this.sortSettings = dataSourceSettings.sortSettings ? dataSourceSettings.sortSettings : [];\n        this.getAxisFields();\n        this.frameSortObject();\n        this.updateFieldlist();\n        if (this.xmlaCellSet.length > 0 && this.xmlDoc) {\n            this.generateEngine(this.xmlDoc, this.request, this.customArgs);\n        }\n        else {\n            this.generateGridData(dataSourceSettings);\n        }\n    };\n    OlapEngine.prototype.updateFieldlist = function (isInit) {\n        var i = 0;\n        while (i < this.savedFieldListData.length) {\n            var fieldName = this.savedFieldListData[i].id;\n            var parentID = this.savedFieldListData[i].pid;\n            // let aggregateType: string = this.getAggregateType(fieldName);\n            // this.savedFieldListData[i].aggregateType = aggregateType;\n            if (this.savedFieldList[fieldName]) {\n                var sortOrder = (this.enableSort ? this.sortObject[fieldName] ? this.sortObject[fieldName] : 'Ascending' : 'None');\n                this.savedFieldList[fieldName].isSelected = false;\n                this.savedFieldList[fieldName].isExcelFilter = false;\n                // this.savedFieldList[fieldName].aggregateType = aggregateType;\n                this.savedFieldList[fieldName].sort = sortOrder;\n                this.savedFieldList[fieldName].allowDragAndDrop = true;\n                this.savedFieldList[fieldName].showFilterIcon = true;\n                this.savedFieldList[fieldName].showSortIcon = true;\n                this.savedFieldList[fieldName].showEditIcon = true;\n                this.savedFieldList[fieldName].showRemoveIcon = true;\n                this.savedFieldList[fieldName].showValueTypeIcon = true;\n                this.savedFieldList[fieldName].showSubTotals = true;\n                this.savedFieldListData[i].sort = sortOrder;\n                this.savedFieldListData[i].allowDragAndDrop = true;\n                this.savedFieldListData[i].showFilterIcon = true;\n                this.savedFieldListData[i].showSortIcon = true;\n                this.savedFieldListData[i].showEditIcon = true;\n                this.savedFieldListData[i].showRemoveIcon = true;\n                this.savedFieldListData[i].showValueTypeIcon = true;\n                this.savedFieldListData[i].showSubTotals = true;\n                if (isInit) {\n                    this.savedFieldList[fieldName].filter = [];\n                    this.savedFieldList[fieldName].actualFilter = [];\n                }\n            }\n            if (this.dataFields[fieldName] && this.savedFieldList[fieldName] && this.selectedItems.indexOf(fieldName) > -1) {\n                this.savedFieldList[fieldName].isSelected = true;\n                this.savedFieldList[fieldName].allowDragAndDrop = (this.dataFields[fieldName] ? this.dataFields[fieldName].allowDragAndDrop : true);\n                this.savedFieldList[fieldName].showFilterIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showFilterIcon : true);\n                this.savedFieldList[fieldName].showSortIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showSortIcon : true);\n                this.savedFieldList[fieldName].showEditIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showEditIcon : true);\n                this.savedFieldList[fieldName].showRemoveIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showRemoveIcon : true);\n                this.savedFieldList[fieldName].showValueTypeIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showValueTypeIcon : true);\n                this.savedFieldList[fieldName].showSubTotals = (this.dataFields[fieldName] ? this.dataFields[fieldName].showSubTotals : true);\n                this.savedFieldListData[i].isSelected = true;\n                this.savedFieldListData[i].allowDragAndDrop = (this.dataFields[fieldName] ? this.dataFields[fieldName].allowDragAndDrop : true);\n                this.savedFieldListData[i].showFilterIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showFilterIcon : true);\n                this.savedFieldListData[i].showSortIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showSortIcon : true);\n                this.savedFieldListData[i].showEditIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showEditIcon : true);\n                this.savedFieldListData[i].showRemoveIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showRemoveIcon : true);\n                this.savedFieldListData[i].showValueTypeIcon = (this.dataFields[fieldName] ? this.dataFields[fieldName].showValueTypeIcon : true);\n                this.savedFieldListData[i].showSubTotals = (this.dataFields[fieldName] ? this.dataFields[fieldName].showSubTotals : true);\n            }\n            else {\n                if (this.dataFields[parentID] && this.savedFieldList[parentID] && this.selectedItems.indexOf(parentID) > -1) {\n                    this.savedFieldListData[i].isSelected = true;\n                }\n                else {\n                    this.savedFieldListData[i].isSelected = false;\n                }\n            }\n            /* eslint-enable max-len */\n            if ((this.savedFieldList[fieldName] && this.savedFieldList[fieldName].isCalculatedField) ||\n                fieldName.toLowerCase() === '[calculated members].[_0]') {\n                var isAvail = false;\n                for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {\n                    var field = _a[_i];\n                    if (fieldName === field.name) {\n                        var expression = field.formula;\n                        var formatString = field.formatString;\n                        this.savedFieldListData[i].formula = expression;\n                        this.savedFieldListData[i].formatString = formatString;\n                        this.savedFieldListData[i].parentHierarchy = (expression.toLowerCase().indexOf('measure') > -1 ?\n                            undefined : field.hierarchyUniqueName);\n                        this.savedFieldList[fieldName].formula = expression;\n                        this.savedFieldList[fieldName].formatString = formatString;\n                        this.savedFieldList[fieldName].parentHierarchy = this.savedFieldListData[i].parentHierarchy;\n                        isAvail = true;\n                    }\n                }\n                if (!isAvail || (fieldName.toLowerCase() === '[calculated members].[_0]' &&\n                    this.calculatedFieldSettings.length === 0)) {\n                    this.savedFieldListData.splice(i, 1);\n                    i--;\n                    if (this.savedFieldList[fieldName]) {\n                        delete this.savedFieldList[fieldName];\n                    }\n                }\n            }\n            i++;\n        }\n        this.fieldList = this.savedFieldList;\n        this.fieldListData = this.savedFieldListData;\n    };\n    OlapEngine.prototype.updateFieldlistData = function (name, isSelect) {\n        for (var _i = 0, _a = this.fieldListData; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.id === name) {\n                item.isSelected = isSelect ? true : false;\n                break;\n            }\n        }\n    };\n    OlapEngine.prototype.getFormattedFields = function (formats) {\n        this.formatFields = {};\n        var cnt = formats.length;\n        while (cnt--) {\n            this.formatFields[formats[cnt].name] = formats[cnt];\n        }\n    };\n    OlapEngine.prototype.getFieldList = function (dataSourceSettings) {\n        var args = {\n            catalog: dataSourceSettings.catalog,\n            cube: dataSourceSettings.cube,\n            url: dataSourceSettings.url,\n            LCID: dataSourceSettings.localeIdentifier.toString(),\n            request: 'MDSCHEMA_HIERARCHIES'\n        };\n        this.getTreeData(args, this.getFieldListItems.bind(this), { dataSourceSettings: dataSourceSettings, action: 'loadFieldElements' });\n    };\n    OlapEngine.prototype.getTreeData = function (args, successMethod, customArgs) {\n        var connectionString = this.getConnectionInfo(args.url, args.LCID);\n        var soapMessage = '<Envelope xmlns=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><Header/><Body><Discover xmlns=\\\"urn:schemas-microsoft-com:xml-analysis\\\"><RequestType>' +\n            args.request + '</RequestType><Restrictions><RestrictionList><CATALOG_NAME>' + args.catalog +\n            '</CATALOG_NAME><CUBE_NAME>' + args.cube + '</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>' + args.catalog +\n            '</Catalog> <LocaleIdentifier>' + connectionString.LCID + '</LocaleIdentifier></PropertyList></Properties></Discover></Body></Envelope>';\n        this.doAjaxPost('POST', connectionString.url, soapMessage, successMethod, customArgs);\n    };\n    /* eslint-enable max-len */\n    OlapEngine.prototype.getAxisFields = function () {\n        this.rows = this.dataSourceSettings.rows ? this.dataSourceSettings.rows : [];\n        this.columns = this.dataSourceSettings.columns ? this.dataSourceSettings.columns : [];\n        this.filters = this.dataSourceSettings.filters ? this.dataSourceSettings.filters : [];\n        this.values = this.dataSourceSettings.values ? this.dataSourceSettings.values : [];\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns, this.values, this.filters);\n        var len = dataFields.length;\n        while (len--) {\n            this.dataFields[dataFields[len].name] = dataFields[len];\n            if (dataFields[len].name.toLowerCase() === '[measures]') {\n                this.isMeasureAvail = true;\n            }\n            else {\n                this.selectedItems.push(dataFields[len].name);\n            }\n        }\n        this.mappingFields = {};\n        if (this.dataSourceSettings.fieldMapping) {\n            for (var _i = 0, _a = this.dataSourceSettings.fieldMapping; _i < _a.length; _i++) {\n                var field = _a[_i];\n                this.mappingFields[field.name] = field;\n            }\n        }\n        if (!this.isMeasureAvail && this.values.length > 0) {\n            var measureField = {\n                name: '[Measures]', caption: 'Measures', showRemoveIcon: true, allowDragAndDrop: true\n            };\n            if (this.valueAxis === 'row') {\n                this.rows.push(measureField);\n            }\n            else {\n                this.columns.push(measureField);\n            }\n            this.isMeasureAvail = true;\n        }\n    };\n    OlapEngine.prototype.getAggregateType = function (fieldName, aggregateType) {\n        var type;\n        switch (aggregateType) {\n            case '1':\n                type = 'Sum';\n                break;\n            case '2':\n                type = 'Count';\n                break;\n            case '3':\n                type = 'Min';\n                break;\n            case '4':\n                type = 'Max';\n                break;\n            case '5':\n                type = 'Avg';\n                break;\n            case '8':\n                type = 'DistinctCount';\n                break;\n            case '127':\n                type = 'CalculatedField';\n                break;\n            default:\n                type = undefined;\n                break;\n        }\n        // if (this.dataFields[fieldName]) {\n        //     return this.dataFields[fieldName].type;\n        // } else {\n        //     return undefined;\n        // }\n        if (type) {\n            return type;\n        }\n        else {\n            return undefined;\n        }\n    };\n    OlapEngine.prototype.getUniqueName = function (name) {\n        var uName = name;\n        for (var _i = 0, _a = this.calculatedFieldSettings; _i < _a.length; _i++) {\n            var item = _a[_i];\n            var expression = item.formula;\n            var prefixName = (expression.toLowerCase().indexOf('measure') > -1 ? '[Measures].' : item.hierarchyUniqueName + '.');\n            var uniqueName = prefixName + '[' + item.name + ']';\n            if (name === uniqueName) {\n                uName = item.name;\n                break;\n            }\n        }\n        return uName;\n    };\n    OlapEngine.prototype.updateFilterItems = function (filterItems) {\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns);\n        for (var _i = 0, filterItems_1 = filterItems; _i < filterItems_1.length; _i++) {\n            var filter = filterItems_1[_i];\n            if (filter.type === 'Include' && this.allowMemberFilter) {\n                var members = this.fieldList[filter.name].members;\n                var isMembersAvail = (members && Object.keys(members).length > 0);\n                this.fieldList[filter.name].actualFilter = filter.items.slice();\n                var selectedElements = extend([], filter.items, null, true);\n                if (isMembersAvail) {\n                    var i = 0;\n                    while (i < selectedElements.length) {\n                        var parentNodes = [];\n                        parentNodes = this.getParentNode(selectedElements[i], members, parentNodes);\n                        for (var _a = 0, parentNodes_1 = parentNodes; _a < parentNodes_1.length; _a++) {\n                            var node = parentNodes_1[_a];\n                            var index = PivotUtil.inArray(node, filter.items);\n                            if (index !== -1) {\n                                filter.items.splice(index, 1);\n                            }\n                        }\n                        i++;\n                    }\n                }\n                var currentItems = [];\n                for (var _b = 0, _c = filter.items; _b < _c.length; _b++) {\n                    var selectedElement = _c[_b];\n                    // currentItems.push(selectedElement.replace(/\\&/g, '&amp;'));\n                    currentItems.push(selectedElement);\n                    if (isMembersAvail) {\n                        this.fieldList[filter.name].filter.push(members[selectedElement].caption);\n                    }\n                    else {\n                        this.fieldList[filter.name].filter.push(selectedElement);\n                    }\n                }\n                this.filterMembers[filter.name] = currentItems;\n                this.fieldList[filter.name].isExcelFilter = false;\n            }\n            else if ((this.allowValueFilter || this.allowLabelFilter) &&\n                ['Date', 'Label', 'Number', 'Value'].indexOf(filter.type) !== -1) {\n                for (var _d = 0, dataFields_1 = dataFields; _d < dataFields_1.length; _d++) {\n                    var item = dataFields_1[_d];\n                    if (item.name === filter.name) {\n                        var filterMembers = this.filterMembers[filter.name];\n                        if (filterMembers && (typeof filterMembers[0] === 'object' && filterMembers[0].type === filter.type)) {\n                            filterMembers[filterMembers.length] = filter;\n                        }\n                        else {\n                            this.filterMembers[filter.name] = [filter];\n                        }\n                        this.fieldList[filter.name].isExcelFilter = true;\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    OlapEngine.prototype.getParentNode = function (name, members, items) {\n        if (members[name].parent && name !== members[name].parent) {\n            var parentItem = members[name].parent;\n            items.push(parentItem);\n            this.getParentNode(parentItem, members, items);\n        }\n        return items;\n    };\n    OlapEngine.prototype.updateDrilledItems = function (drilledMembers) {\n        var drilledItems = [];\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns);\n        for (var _i = 0, drilledMembers_1 = drilledMembers; _i < drilledMembers_1.length; _i++) {\n            var item = drilledMembers_1[_i];\n            for (var _a = 0, dataFields_2 = dataFields; _a < dataFields_2.length; _a++) {\n                var field = dataFields_2[_a];\n                if (item.name === field.name) {\n                    drilledItems.push(item);\n                    break;\n                }\n            }\n        }\n        return drilledItems;\n    };\n    // private updateAllMembers(dataSourceSettings: IDataOptions, slicers: IFieldOptions[]): void {\n    //     let query: string = '';\n    //     for (let field of slicers) {\n    //         let fieldList: IOlapField = this.fieldList[field.name];\n    //         if (!(fieldList && fieldList.hasAllMember && fieldList.allMember)) {\n    //             query = query + (query !== '' ? ' * ' : '') + '{' + field.name + '}';\n    //         } else {\n    //             continue;\n    //         }\n    //     }\n    //     if (query !== '') {\n    //         this.getAllMember(dataSourceSettings, query);\n    //     } else {\n    //         return;\n    //     }\n    // }\n    // private getAllMember(dataSourceSettings: IDataOptions, query: string): void {\n    //     let dimProp: string = 'DIMENSION PROPERTIES HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY';\n    //     let mdxQuery: string = 'SELECT (' + query + ')' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n    //     let xmla: string = this.getSoapMsg(dataSourceSettings, mdxQuery);\n    //     let connectionString: ConnectionInfo = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n    //     this.doAjaxPost('POST', connectionString.url, xmla, this.generateAllMembers.bind(this), \n    // { dataSourceSettings: dataSourceSettings, action: 'fetchAllMembers' });\n    // }\n    /**\n     * @hidden\n     */\n    OlapEngine.prototype.getDrillThroughData = function (pivotValue, maxRows) {\n        var column = this.tupColumnInfo[pivotValue.colOrdinal] &&\n            this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection &&\n            this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection !== '' ?\n            this.tupColumnInfo[pivotValue.colOrdinal].uNameCollection.split('::[').map(function (item) {\n                return item[0] === '[' ? item : ('[' + item);\n            }) : [];\n        var row = this.tupRowInfo[pivotValue.rowOrdinal] &&\n            this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection &&\n            this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection !== '' ?\n            this.tupRowInfo[pivotValue.rowOrdinal].uNameCollection.split('::[').map(function (item) {\n                return item[0] === '[' ? item : ('[' + item);\n            }) : [];\n        var filters;\n        var filteritems = [];\n        var filterQuery = '';\n        for (var i = 0; i < this.filters.length; i++) {\n            filters = this.filterMembers[this.filters[i].name];\n            if (filters) {\n                for (var j = 0; j < filters.length; j++) {\n                    filterQuery = filterQuery + filters[j];\n                    filterQuery = j < filters.length - 1 ? filterQuery + ',' : filterQuery + '';\n                }\n                filteritems[i] = filterQuery;\n                filterQuery = '';\n            }\n        }\n        for (var i = 0; i < filteritems.length; i++) {\n            filterQuery = filterQuery === '' ? '{' + filteritems[i] + '}' : (filterQuery + ',' + '{' + filteritems[i] + '}');\n        }\n        var columnQuery = '';\n        var rowQuery = '';\n        for (var i = 0; i < column.length; i++) {\n            columnQuery = (columnQuery.length > 0 ? (columnQuery + ',') : '') + (column[i].split('~~').length > 1 ?\n                column[i].split('~~')[column[i].split('~~').length - 1] : column[i]);\n        }\n        for (var i = 0; i < row.length; i++) {\n            rowQuery = (rowQuery.length > 0 ? (rowQuery + ',') : '') + (row[i].split('~~').length > 1 ?\n                row[i].split('~~')[row[i].split('~~').length - 1] : row[i]);\n        }\n        var drillQuery = 'DRILLTHROUGH MAXROWS ' + maxRows + ' Select(' + (columnQuery.length > 0 ? columnQuery : '') +\n            (columnQuery.length > 0 && rowQuery.length > 0 ? ',' : '') + (rowQuery.length > 0 ? rowQuery : '') + ') on 0 from ' +\n            (filterQuery === '' ? '[' + this.dataSourceSettings.cube + ']' : '(SELECT (' + filterQuery + ') ON COLUMNS FROM [' +\n                this.dataSourceSettings.cube + '])');\n        drillQuery = drillQuery.replace(/&/g, '&amp;');\n        var xmla = this.getSoapMsg(this.dataSourceSettings, drillQuery);\n        var connectionString = this.getConnectionInfo(this.dataSourceSettings.url, this.dataSourceSettings.localeIdentifier);\n        this.doAjaxPost('POST', connectionString.url, xmla, this.drillThroughSuccess.bind(this), { dataSourceSettings: this.dataSourceSettings, action: 'drillThrough' });\n    };\n    OlapEngine.prototype.drillThroughSuccess = function (xmlDoc) {\n        var tag = [].slice.call(xmlDoc.querySelectorAll('row'));\n        var gridJSON = '';\n        if (tag.length > 0) {\n            var json = [];\n            var i = 0;\n            while (i < tag.length) {\n                var child = [].slice.call(tag[i].children);\n                var j = 0;\n                while (j < child.length) {\n                    json.push('\"' + child[j].tagName + '\"' + ':' + '\"' + child[j].textContent + '\"');\n                    j++;\n                }\n                i++;\n            }\n            var value = json[0];\n            var k = 0;\n            while (k < json.length) {\n                if (Object.keys(JSON.parse('[{' + json[k] + '}]')[0])[0] === Object.keys(JSON.parse('[{' + value + '}]')[0])[0]) {\n                    gridJSON += gridJSON === '' ? '[{' + json[k] : '}, {' + json[k];\n                    k++;\n                    continue;\n                }\n                gridJSON += ',' + json[k];\n                k++;\n            }\n            gridJSON += '}]';\n        }\n        else {\n            var tag_1 = [].slice.call(xmlDoc.querySelectorAll('faultstring'));\n            var i = 0;\n            while (i < tag_1.length) {\n                gridJSON += tag_1[i].textContent;\n                i++;\n            }\n        }\n        this.gridJSON = gridJSON;\n    };\n    OlapEngine.prototype.getFilterMembers = function (dataSourceSettings, fieldName, levelCount, isSearchFilter, loadLevelMember) {\n        // let dimProp: string = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE';\n        var levels = this.fieldList[fieldName].levels;\n        var cLevel = this.fieldList[fieldName].levelCount;\n        var filterQuery;\n        if (loadLevelMember) {\n            filterQuery = 'Descendants({' + levels[cLevel].id + '}, ' +\n                levels[levelCount - 1].id + ', ' + ((levelCount - cLevel) === 1 ? 'SELF)' : 'SELF_AND_BEFORE)');\n        }\n        else {\n            filterQuery = fieldName + ', Descendants({' + levels[0].id + '}, ' + levels[levelCount - 1].id + ', SELF_AND_BEFORE)';\n        }\n        this.fieldList[fieldName].levelCount = levelCount;\n        if (!isSearchFilter) {\n            this.getMembers(dataSourceSettings, fieldName, false, filterQuery, loadLevelMember);\n        }\n        return filterQuery;\n    };\n    OlapEngine.prototype.getMembers = function (dataSourceSettings, fieldName, isAllFilterData, filterParentQuery, loadLevelMember) {\n        // dimProp = \"dimension properties CHILDREN_CARDINALITY, MEMBER_TYPE\";\n        var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n        var mdxQuery;\n        var hasAllMember = this.fieldList[fieldName].hasAllMember;\n        var hierarchy = (hasAllMember ? fieldName : fieldName + '.LEVELS(0)').replace(/\\&/g, '&amp;');\n        if (!isAllFilterData) {\n            mdxQuery = 'SELECT ({' + (filterParentQuery ?\n                filterParentQuery : (hasAllMember ? hierarchy + ', ' + hierarchy + '.CHILDREN' : hierarchy + '.ALLMEMBERS')) + '})' +\n                dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n        }\n        else {\n            mdxQuery = 'SELECT ({' + hierarchy + '.ALLMEMBERS})' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n        }\n        var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n        var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n        if (!loadLevelMember) {\n            this.fieldList[fieldName].filterMembers = [];\n            this.fieldList[fieldName].childMembers = [];\n            this.fieldList[fieldName].searchMembers = [];\n            // this.fieldList[fieldName].isHierarchy = true;\n            this.fieldList[fieldName].members = {};\n            this.fieldList[fieldName].currrentMembers = {};\n        }\n        this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), { dataSourceSettings: dataSourceSettings, fieldName: fieldName, loadLevelMembers: loadLevelMember, action: 'fetchMembers' });\n    };\n    OlapEngine.prototype.getChildMembers = function (dataSourceSettings, memberUQName, fieldName) {\n        // dimProp = \"dimension properties CHILDREN_CARDINALITY, MEMBER_TYPE\";\n        var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n        // var mdxQuery = 'SELECT SUBSET({' + memberUQName + '.CHILDREN}, 0, 5000)' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n        var mdxQuery = 'SELECT ({' + memberUQName.replace(/\\&/g, '&amp;') + '.CHILDREN})' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n        var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n        var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n        this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), { dataSourceSettings: dataSourceSettings, fieldName: fieldName, action: 'fetchChildMembers' });\n    };\n    OlapEngine.prototype.getCalcChildMembers = function (dataSourceSettings, memberUQName) {\n        this.calcChildMembers = [];\n        var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n        var mdxQuery = 'SELECT ({' + memberUQName.replace(/\\&/g, '&amp;') + '.MEMBERS})' +\n            dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n        var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n        var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n        this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), { dataSourceSettings: dataSourceSettings, action: 'fetchCalcChildMembers' });\n    };\n    OlapEngine.prototype.getSearchMembers = function (dataSourceSettings, fieldName, searchString, maxNodeLimit, isAllFilterData, levelCount) {\n        this.fieldList[fieldName].searchMembers = [];\n        this.fieldList[fieldName].currrentMembers = {};\n        if (searchString !== '') {\n            // dimProp = \"dimension properties CHILDREN_CARDINALITY, MEMBER_TYPE\";\n            var dimProp = 'DIMENSION PROPERTIES PARENT_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, CHILDREN_CARDINALITY, MEMBER_TYPE, MEMBER_VALUE';\n            var hierarchy = fieldName.replace(/\\&/g, '&amp;');\n            var mdxQuery = 'WITH SET [SearchMembersSet] AS &#39;FILTER(' + (isAllFilterData ? hierarchy + '.ALLMEMBERS, ' :\n                '{' + (levelCount > 1 ? this.getFilterMembers(dataSourceSettings, fieldName, levelCount, true) :\n                    hierarchy + ', ' + hierarchy + '.CHILDREN') + '},') +\n                '(INSTR(1, ' + hierarchy + '.CurrentMember.member_caption, \"' + searchString + '\") > 0))&#39;' +\n                'SET [SearchParentsSet] AS &#39;GENERATE([SearchMembersSet], ASCENDANTS([SearchMembersSet].Current))&#39;' +\n                'SET [SearchSet] AS &#39;HIERARCHIZE(DISTINCT({[SearchMembersSet], [SearchParentsSet]}))&#39;' +\n                'SELECT SUBSET([SearchSet], 0, ' + maxNodeLimit + ')' + dimProp + ' ON 0 FROM [' + dataSourceSettings.cube + ']';\n            var xmla = this.getSoapMsg(dataSourceSettings, mdxQuery);\n            var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n            this.doAjaxPost('POST', connectionString.url, xmla, this.generateMembers.bind(this), { dataSourceSettings: dataSourceSettings, fieldName: fieldName, action: 'fetchSearchMembers' });\n        }\n        else {\n            return;\n        }\n    };\n    OlapEngine.prototype.generateMembers = function (xmlDoc, request, customArgs) {\n        var fields = [].slice.call(xmlDoc.querySelectorAll('Axis[name=\"Axis0\"] Tuple'));\n        var fieldName = customArgs.fieldName;\n        var allMember;\n        var filterMembers = {};\n        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n            var field = fields_1[_i];\n            // let hierarchyUqName: string = fields[0].querySelector('Member HIERARCHY_UNIQUE_NAME').textContent;\n            var member = field.querySelector('Member');\n            var memberType = member.querySelector('MEMBER_TYPE').textContent;\n            var memberUqName = member.querySelector('UName').textContent;\n            var caption = member.querySelector('Caption').textContent;\n            var parentUqName = member.querySelector('PARENT_UNIQUE_NAME') ? member.querySelector('PARENT_UNIQUE_NAME').textContent : '';\n            var nodeAttr = { 'data-fieldName': fieldName, 'data-memberId': memberUqName };\n            if (parentUqName === '' && memberType === '1') {\n                filterMembers = {\n                    hasChildren: (field.querySelector('CHILDREN_CARDINALITY') ? (field.querySelector('CHILDREN_CARDINALITY').textContent !== '0') ? true : false : false),\n                    isSelected: false,\n                    id: memberUqName,\n                    tag: memberUqName,\n                    name: caption,\n                    caption: caption,\n                    htmlAttributes: nodeAttr\n                };\n                if (customArgs.action === 'fetchMembers' || customArgs.action === 'fetchChildMembers') {\n                    this.fieldList[fieldName].members[memberUqName] =\n                        { name: memberUqName, caption: caption, parent: undefined, isNodeExpand: false, isSelected: false };\n                    this.fieldList[fieldName].filterMembers.push(filterMembers);\n                    this.fieldList[fieldName].childMembers.push(filterMembers);\n                }\n                else if (customArgs.action === 'fetchSearchMembers') {\n                    this.fieldList[fieldName].currrentMembers[memberUqName] =\n                        { name: memberUqName, caption: caption, parent: undefined, isNodeExpand: false, isSelected: false };\n                    this.fieldList[fieldName].searchMembers.push(filterMembers);\n                    filterMembers.expanded = true;\n                }\n                else {\n                    this.calcChildMembers.push(filterMembers);\n                }\n            }\n            else if (parentUqName !== '' && memberType === '1') {\n                if (parentUqName === allMember && memberType === '1') {\n                    filterMembers = {\n                        hasChildren: (field.querySelector('CHILDREN_CARDINALITY') ? (field.querySelector('CHILDREN_CARDINALITY').textContent !== '0') ? true : false : false),\n                        id: memberUqName,\n                        name: caption,\n                        isSelected: false,\n                        caption: caption,\n                        htmlAttributes: nodeAttr,\n                        tag: memberUqName\n                    };\n                    if (customArgs.action === 'fetchMembers' || customArgs.action === 'fetchChildMembers') {\n                        this.fieldList[fieldName].filterMembers.push(filterMembers);\n                        this.fieldList[fieldName].childMembers.push(filterMembers);\n                        this.fieldList[fieldName].members[memberUqName] =\n                            { name: memberUqName, caption: caption, parent: undefined, isNodeExpand: false, isSelected: false };\n                    }\n                    else if (customArgs.action === 'fetchSearchMembers') {\n                        filterMembers.expanded = true;\n                        this.fieldList[fieldName].searchMembers.push(filterMembers);\n                        this.fieldList[fieldName].currrentMembers[memberUqName] =\n                            { name: memberUqName, caption: caption, parent: undefined, isNodeExpand: false, isSelected: false };\n                    }\n                    else {\n                        this.calcChildMembers.push(filterMembers);\n                    }\n                }\n                else {\n                    if (customArgs.action === 'fetchMembers' && this.fieldList[fieldName].members[memberUqName]) {\n                        continue;\n                    }\n                    var nodeSelect = (customArgs.loadLevelMembers ? this.fieldList[fieldName].members[parentUqName].isSelected : false);\n                    filterMembers = {\n                        hasChildren: (field.querySelector('CHILDREN_CARDINALITY') ? (field.querySelector('CHILDREN_CARDINALITY').textContent !== '0') ? true : false : false),\n                        htmlAttributes: nodeAttr,\n                        isSelected: false,\n                        id: memberUqName,\n                        pid: parentUqName,\n                        name: caption,\n                        caption: caption,\n                        tag: memberUqName\n                    };\n                    if (customArgs.action === 'fetchMembers' || customArgs.action === 'fetchChildMembers') {\n                        this.fieldList[fieldName].isHierarchy = false;\n                        this.fieldList[fieldName].filterMembers.push(filterMembers);\n                        this.fieldList[fieldName].childMembers.push(filterMembers);\n                        this.fieldList[fieldName].members[memberUqName] =\n                            { name: memberUqName, caption: caption, parent: parentUqName, isNodeExpand: false, isSelected: nodeSelect };\n                    }\n                    else if (customArgs.action === 'fetchSearchMembers') {\n                        this.fieldList[fieldName].searchMembers.push(filterMembers);\n                        filterMembers.expanded = true;\n                        this.fieldList[fieldName].currrentMembers[memberUqName] =\n                            { name: memberUqName, caption: caption, parent: parentUqName, isNodeExpand: false, isSelected: false };\n                    }\n                    else {\n                        this.calcChildMembers.push(filterMembers);\n                    }\n                }\n            }\n            else if (memberType === '2') {\n                allMember = memberUqName;\n            }\n        }\n    };\n    /* eslint-enable max-len */\n    // private generateAllMembers(xmlDoc: Document, request: Ajax, customArgs: FieldData): void {\n    //     let members: HTMLElement[] = [].slice.call(xmlDoc.querySelectorAll('Axis[name=\"Axis0\"] Member'));\n    //     for (let member of members) {\n    //         let caption: string = member.querySelector('Caption').textContent;\n    //         let fieldName: string = member.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n    //         this.fieldList[fieldName].allMember = caption;\n    //     }\n    // }\n    OlapEngine.prototype.getFieldListItems = function (xmlDoc, request, customArgs) {\n        var fieldDate = {};\n        var hierarchyElements = [];\n        var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n        for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {\n            var field = fields_2[_i];\n            var isAllMemberAvail = [].slice.call(field.querySelectorAll('ALL_MEMBER')).length > 0;\n            var dimensionName = field.querySelector('DIMENSION_UNIQUE_NAME').textContent;\n            var hierarchyName = field.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n            var isSameDim = dimensionName === hierarchyName && dimensionName.toLowerCase() !== '[measures]' && hierarchyName.toLowerCase() !== '[measures]';\n            hierarchyElements.push({\n                pid: ((this.isMondrian || isSameDim) ? dimensionName + '~#^Dim' : dimensionName),\n                id: hierarchyName,\n                name: field.querySelector('HIERARCHY_CAPTION').textContent,\n                caption: field.querySelector('HIERARCHY_CAPTION').textContent,\n                tag: hierarchyName,\n                hasAllMember: isAllMemberAvail,\n                allMember: (isAllMemberAvail ? field.querySelectorAll('ALL_MEMBER')[0].textContent : undefined),\n                // aggregateType: this.getAggregateType(field.querySelector('HIERARCHY_UNIQUE_NAME').textContent),\n                type: 'string'\n            });\n        }\n        fieldDate = {\n            hierarchy: hierarchyElements,\n            hierarchySuccess: xmlDoc,\n            measures: []\n        };\n        this.fieldListObj = fieldDate;\n        var args = {\n            catalog: customArgs.dataSourceSettings.catalog,\n            cube: customArgs.dataSourceSettings.cube,\n            url: customArgs.dataSourceSettings.url,\n            LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n            request: 'MDSCHEMA_DIMENSIONS'\n        };\n        this.getTreeData(args, this.loadDimensionElements.bind(this), customArgs);\n    };\n    OlapEngine.prototype.loadCalculatedMemberElements = function (calcMembers) {\n        if (calcMembers.length > 0) {\n            var fieldListElements = this.fieldListData;\n            // let calcElements: IOlapField[] = [];\n            var calcObj = {\n                hasChildren: true,\n                isSelected: false,\n                id: '[Calculated Members].[_0]',\n                name: '[Calculated Members].[_0]',\n                caption: 'Calculated Members',\n                spriteCssClass: 'e-calcMemberGroupCDB' + ' ' + cls.ICON,\n                tag: '[Calculated Members].[_0]',\n                //aggregateType: this.getAggregateType(dimensionName),\n                type: 'string'\n            };\n            if (fieldListElements.length > 0 && fieldListElements[0].id.toLowerCase() === '[measures]') {\n                fieldListElements.splice(0, 0, calcObj);\n            }\n            for (var _i = 0, calcMembers_1 = calcMembers; _i < calcMembers_1.length; _i++) {\n                var field = calcMembers_1[_i];\n                if (!this.fieldList[field.name]) {\n                    var expression = field.formula;\n                    var prefixName = (expression.toLowerCase().indexOf('measure') > -1 ? '[Measures].' :\n                        field.hierarchyUniqueName + '.');\n                    var uniqueName = prefixName + '[' + field.name + ']';\n                    var caption = (this.dataFields[field.name] && this.dataFields[field.name].caption ?\n                        this.dataFields[field.name].caption :\n                        this.mappingFields[field.name] && this.mappingFields[field.name].caption ?\n                            this.mappingFields[field.name].caption : field.name);\n                    var formatString = field.formatString;\n                    var calcField = {\n                        hasChildren: false,\n                        isSelected: false,\n                        id: field.name,\n                        pid: '[Calculated Members].[_0]',\n                        name: field.name,\n                        caption: caption,\n                        spriteCssClass: 'e-calc-member' + ' ' + (expression.toLowerCase().indexOf('measure') > -1 ?\n                            'e-calc-measure-icon' : 'e-calc-dimension-icon') + ' ' + cls.ICON,\n                        tag: uniqueName,\n                        formula: expression,\n                        formatString: formatString,\n                        aggregateType: undefined,\n                        type: 'CalculatedField',\n                        filter: [],\n                        dateMember: [],\n                        sort: 'Ascending',\n                        actualFilter: [],\n                        filterMembers: [],\n                        childMembers: [],\n                        searchMembers: [],\n                        members: {},\n                        currrentMembers: {},\n                        isHierarchy: true,\n                        isExcelFilter: false,\n                        isCalculatedField: true,\n                        /* eslint-disable */\n                        allowDragAndDrop: (this.dataFields[field.name] ? this.dataFields[field.name].allowDragAndDrop : this.mappingFields[field.name] ? this.mappingFields[field.name].allowDragAndDrop : true),\n                        showFilterIcon: (this.dataFields[field.name] ? this.dataFields[field.name].showFilterIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showFilterIcon : true),\n                        showSortIcon: (this.dataFields[field.name] ? this.dataFields[field.name].showSortIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showSortIcon : true),\n                        showEditIcon: (this.dataFields[field.name] ? this.dataFields[field.name].showEditIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showEditIcon : true),\n                        showRemoveIcon: (this.dataFields[field.name] ? this.dataFields[field.name].showRemoveIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showRemoveIcon : true),\n                        showValueTypeIcon: (this.dataFields[field.name] ? this.dataFields[field.name].showValueTypeIcon : this.mappingFields[field.name] ? this.mappingFields[field.name].showValueTypeIcon : true),\n                        showSubTotals: (this.dataFields[field.name] ? this.dataFields[field.name].showSubTotals : this.mappingFields[field.name] ? this.mappingFields[field.name].showSubTotals : true),\n                        fieldType: (expression.toLowerCase().indexOf('measure') > -1 ? 'Measure' : 'Dimension'),\n                        parentHierarchy: (expression.toLowerCase().indexOf('measure') > -1 ? undefined : field.hierarchyUniqueName)\n                        /* eslint-enable */\n                    };\n                    fieldListElements.push(calcField);\n                    this.fieldList[calcField.id] = calcField;\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    OlapEngine.prototype.loadDimensionElements = function (xmlDoc, request, customArgs) {\n        var hierarchyElements = [];\n        var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n        var measure = {};\n        for (var _i = 0, fields_3 = fields; _i < fields_3.length; _i++) {\n            var field = fields_3[_i];\n            var dimensionName = field.querySelector('DIMENSION_UNIQUE_NAME').textContent;\n            var defaultHierarchy = field.querySelector('DEFAULT_HIERARCHY').textContent;\n            var dimensionCaption = field.querySelector('DIMENSION_CAPTION').textContent;\n            var isSameDim = dimensionName === defaultHierarchy;\n            if (dimensionName.toLowerCase().indexOf('[measure') >= 0) {\n                measure = {\n                    hasChildren: true,\n                    isSelected: false,\n                    id: dimensionName,\n                    name: dimensionName,\n                    caption: dimensionCaption,\n                    spriteCssClass: dimensionName.toLowerCase() === '[measures]' ? 'e-measureGroupCDB-icon' + ' ' + cls.ICON : 'e-dimensionCDB-icon' + ' ' + cls.ICON,\n                    tag: dimensionName,\n                    // aggregateType: this.getAggregateType(dimensionName),\n                    type: 'string'\n                };\n            }\n            else if (isNullOrUndefined(fields[0].querySelector('HIERARCHY_CAPTION'))) {\n                hierarchyElements.push({\n                    hasChildren: true,\n                    isSelected: false,\n                    id: ((this.isMondrian || isSameDim) ? dimensionName + '~#^Dim' : dimensionName),\n                    name: dimensionName,\n                    caption: dimensionCaption,\n                    spriteCssClass: 'e-dimensionCDB-icon' + ' ' + cls.ICON,\n                    tag: dimensionName,\n                    defaultHierarchy: field.querySelector('DEFAULT_HIERARCHY').textContent,\n                    // aggregateType: this.getAggregateType(dimensionName),\n                    type: 'string'\n                });\n            }\n        }\n        hierarchyElements.splice(0, 0, measure);\n        this.fieldListData = hierarchyElements;\n        // customArgs.hierarchy = this.fieldListData;\n        // customArgs.hierarchySuccess = this.fieldListObj.hierarchySuccess;\n        // this.loadHierarchyElements(customArgs);\n        var args = {\n            catalog: customArgs.dataSourceSettings.catalog,\n            cube: customArgs.dataSourceSettings.cube,\n            url: customArgs.dataSourceSettings.url,\n            LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n            request: 'MDSCHEMA_SETS'\n        };\n        this.getTreeData(args, this.loadNamedSetElements.bind(this), customArgs);\n    };\n    OlapEngine.prototype.loadNamedSetElements = function (xmlDoc, request, customArgs) {\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns, this.filters);\n        var dimensionElements = this.fieldListData;\n        var reportElement = [];\n        for (var _i = 0, dataFields_3 = dataFields; _i < dataFields_3.length; _i++) {\n            var field = dataFields_3[_i];\n            reportElement.push(field.name);\n        }\n        var measureGroupItems = [];\n        var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n        for (var _a = 0, fields_4 = fields; _a < fields_4.length; _a++) {\n            var field = fields_4[_a];\n            if (!(measureGroupItems.indexOf(field.querySelector('DIMENSIONS').textContent.split('.')[0]) >= 0)) {\n                dimensionElements.push({\n                    hasChildren: true,\n                    isSelected: false,\n                    pid: field.querySelector('DIMENSIONS').textContent.split('.')[0],\n                    id: field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0],\n                    name: field.querySelector('SET_DISPLAY_FOLDER').textContent,\n                    spriteCssClass: 'e-folderCDB-icon' + ' ' + cls.ICON + ' ' + 'namedSets',\n                    caption: field.querySelector('SET_DISPLAY_FOLDER').textContent,\n                    // aggregateType: this.getAggregateType(field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0]),\n                    type: 'string'\n                });\n                measureGroupItems.push(field.querySelector('DIMENSIONS').textContent.split('.')[0]);\n            }\n            var id = '[' + field.querySelector('SET_NAME').textContent.trim() + ']';\n            var fieldObj = {\n                hasChildren: true,\n                isNamedSets: true,\n                isSelected: (reportElement.indexOf('[' + field.querySelector('SET_NAME').textContent + ']') >= 0),\n                pid: field.querySelector('SET_DISPLAY_FOLDER').textContent + '_' + field.querySelector('DIMENSIONS').textContent.split('.')[0],\n                id: id,\n                name: field.querySelector('SET_CAPTION').textContent,\n                caption: this.dataFields[id] && this.dataFields[id].caption ? this.dataFields[id].caption : this.mappingFields[id] && this.mappingFields[id].caption ? this.mappingFields[id].caption : field.querySelector('SET_CAPTION').textContent,\n                spriteCssClass: 'e-namedSetCDB-icon' + ' ' + cls.ICON,\n                tag: field.querySelector('EXPRESSION').textContent,\n                // aggregateType: this.getAggregateType(id),\n                type: 'string',\n                filter: [],\n                dateMember: [],\n                // sort: 'Ascending',\n                actualFilter: [],\n                filterMembers: [],\n                childMembers: [],\n                searchMembers: [],\n                members: {},\n                currrentMembers: {},\n                isHierarchy: true,\n                isExcelFilter: false,\n                /* eslint-disable */\n                allowDragAndDrop: (this.dataFields[id] ? this.dataFields[id].allowDragAndDrop : this.mappingFields[id] ? this.mappingFields[id].allowDragAndDrop : true),\n                showFilterIcon: (this.dataFields[id] ? this.dataFields[id].showFilterIcon : this.mappingFields[id] ? this.mappingFields[id].showFilterIcon : true),\n                showSortIcon: (this.dataFields[id] ? this.dataFields[id].showSortIcon : this.mappingFields[id] ? this.mappingFields[id].showSortIcon : true),\n                showEditIcon: (this.dataFields[id] ? this.dataFields[id].showEditIcon : this.mappingFields[id] ? this.mappingFields[id].showEditIcon : true),\n                showRemoveIcon: (this.dataFields[id] ? this.dataFields[id].showRemoveIcon : this.mappingFields[id] ? this.mappingFields[id].showRemoveIcon : true),\n                showValueTypeIcon: (this.dataFields[id] ? this.dataFields[id].showValueTypeIcon : this.mappingFields[id] ? this.mappingFields[id].showValueTypeIcon : true),\n                showSubTotals: (this.dataFields[id] ? this.dataFields[id].showSubTotals : this.mappingFields[id] ? this.mappingFields[id].showSubTotals : true)\n                /* eslint-enable */\n            };\n            dimensionElements.push(fieldObj);\n            this.fieldList[id] = fieldObj;\n        }\n        // let args: ConnectionInfo = {\n        //     catalog: customArgs.dataSourceSettings.catalog,\n        //     cube: customArgs.dataSourceSettings.cube,\n        //     url: customArgs.dataSourceSettings.url,\n        //     LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n        //     request: 'MDSCHEMA_SETS'\n        // };\n        // this.getTreeData(args, this.loadHierarchyElements.bind(this), customArgs);\n        customArgs.hierarchy = this.fieldListData;\n        customArgs.hierarchySuccess = this.fieldListObj.hierarchySuccess;\n        this.loadHierarchyElements(customArgs);\n    };\n    OlapEngine.prototype.loadHierarchyElements = function (customArgs) {\n        var data = customArgs.hierarchySuccess;\n        var dimensionElements = customArgs.hierarchy;\n        var dataFields = extend([], this.rows, null, true);\n        dataFields = dataFields.concat(this.columns, this.filters);\n        var reportElement = [];\n        for (var _i = 0, dataFields_4 = dataFields; _i < dataFields_4.length; _i++) {\n            var field = dataFields_4[_i];\n            reportElement.push(field.name);\n        }\n        var fields = [].slice.call(data.querySelectorAll('row'));\n        for (var _a = 0, fields_5 = fields; _a < fields_5.length; _a++) {\n            var field = fields_5[_a];\n            var dimensionName = field.querySelector('DIMENSION_UNIQUE_NAME').textContent;\n            var hierarchyName = field.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n            var isAllMemberAvail = [].slice.call(field.querySelectorAll('ALL_MEMBER')).length > 0;\n            var allMember = void 0;\n            if (isAllMemberAvail) {\n                var stringCollection = field.querySelectorAll('ALL_MEMBER')[0].textContent.replace(/[\\[\\]\\&']+/g, '').split('.');\n                allMember = stringCollection[stringCollection.length - 1].trim();\n            }\n            else {\n                allMember = undefined;\n            }\n            var hierarchyFolderName = ((field.querySelector('HIERARCHY_DISPLAY_FOLDER')) ? (field.querySelector('HIERARCHY_DISPLAY_FOLDER').textContent) : '');\n            var curElement = [];\n            for (var _b = 0, dimensionElements_1 = dimensionElements; _b < dimensionElements_1.length; _b++) {\n                var item = dimensionElements_1[_b];\n                if (item.tag === dimensionName) {\n                    curElement.push(item);\n                }\n            }\n            if (curElement.length > 0) {\n                var isSameDim = dimensionName === hierarchyName && dimensionName.toLowerCase() !== '[measures]' && hierarchyName.toLowerCase() !== '[measures]';\n                if (dimensionName.toLowerCase() !== '[measures]' && hierarchyName.toLowerCase() !== '[measures]') {\n                    var parentID = dimensionName + ((this.isMondrian || isSameDim) ? '~#^Dim' : '');\n                    if (hierarchyFolderName !== '') {\n                        var folderName = dimensionName + ((this.isMondrian || isSameDim) ? '~#^Dim' : '') + '_' + hierarchyFolderName;\n                        var curParentElement = [];\n                        for (var _c = 0, dimensionElements_2 = dimensionElements; _c < dimensionElements_2.length; _c++) {\n                            var item = dimensionElements_2[_c];\n                            if (item.tag === folderName && item.pid === parentID) {\n                                curParentElement.push(item);\n                            }\n                        }\n                        if (curParentElement.length === 0) {\n                            var fieldObj_1 = {\n                                hasChildren: true,\n                                isSelected: false,\n                                pid: dimensionName + ((this.isMondrian || isSameDim) ? '~#^Dim' : ''),\n                                id: folderName,\n                                name: hierarchyFolderName,\n                                spriteCssClass: 'e-folderCDB-icon' + ' ' + cls.ICON,\n                                tag: folderName,\n                                caption: hierarchyFolderName,\n                                // aggregateType: this.getAggregateType(hierarchyFolderName),\n                                type: 'string'\n                            };\n                            dimensionElements.push(fieldObj_1);\n                        }\n                        parentID = folderName;\n                    }\n                    var fieldObj = {\n                        hasChildren: (field.querySelector('HIERARCHY_ORIGIN') ? ((field.querySelector('HIERARCHY_ORIGIN').textContent !== '2') && field.querySelector('HIERARCHY_ORIGIN').textContent !== '6') ? true : false : true),\n                        // hasChildren: true,\n                        isSelected: (reportElement.indexOf(hierarchyName) >= 0),\n                        pid: parentID,\n                        id: hierarchyName,\n                        name: field.querySelector('HIERARCHY_CAPTION').textContent,\n                        spriteCssClass: (field.querySelector('HIERARCHY_ORIGIN') ? ((field.querySelector('HIERARCHY_ORIGIN').textContent !== '2') && field.querySelector('HIERARCHY_ORIGIN').textContent !== '6') ? 'e-hierarchyCDB-icon' : 'e-attributeCDB-icon' : 'e-hierarchyCDB-icon') + ' ' + cls.ICON,\n                        hasAllMember: isAllMemberAvail,\n                        allMember: allMember,\n                        tag: hierarchyName,\n                        caption: this.dataFields[hierarchyName] && this.dataFields[hierarchyName].caption ? this.dataFields[hierarchyName].caption : this.mappingFields[hierarchyName] && this.mappingFields[hierarchyName].caption ? this.mappingFields[hierarchyName].caption : field.querySelector('HIERARCHY_CAPTION').textContent,\n                        // aggregateType: this.getAggregateType(hierarchyName),\n                        type: 'string',\n                        filter: [],\n                        dateMember: [],\n                        sort: (this.enableSort ? this.sortObject[hierarchyName] ? this.sortObject[hierarchyName] : 'Ascending' : 'None'),\n                        actualFilter: [],\n                        filterMembers: [],\n                        childMembers: [],\n                        searchMembers: [],\n                        members: {},\n                        currrentMembers: {},\n                        levels: [],\n                        levelCount: 1,\n                        isHierarchy: (field.querySelector('HIERARCHY_ORIGIN') ? ((field.querySelector('HIERARCHY_ORIGIN').textContent !== '2') && field.querySelector('HIERARCHY_ORIGIN').textContent !== '6') ? false : true : false),\n                        isExcelFilter: false,\n                        /* eslint-disable */\n                        allowDragAndDrop: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].allowDragAndDrop : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].allowDragAndDrop : true),\n                        showFilterIcon: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showFilterIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showFilterIcon : true),\n                        showSortIcon: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showSortIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showSortIcon : true),\n                        showEditIcon: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showEditIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showEditIcon : true),\n                        showRemoveIcon: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showRemoveIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showRemoveIcon : true),\n                        showValueTypeIcon: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showValueTypeIcon : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showValueTypeIcon : true),\n                        showSubTotals: (this.dataFields[hierarchyName] ? this.dataFields[hierarchyName].showSubTotals : this.mappingFields[hierarchyName] ? this.mappingFields[hierarchyName].showSubTotals : true)\n                        /* eslint-enable */\n                    };\n                    dimensionElements.push(fieldObj);\n                    this.fieldList[hierarchyName] = fieldObj;\n                }\n            }\n        }\n        var args = {\n            catalog: customArgs.dataSourceSettings.catalog,\n            cube: customArgs.dataSourceSettings.cube,\n            url: customArgs.dataSourceSettings.url,\n            LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n            request: 'MDSCHEMA_LEVELS'\n        };\n        this.getTreeData(args, this.loadLevelElements.bind(this), customArgs);\n    };\n    OlapEngine.prototype.loadLevelElements = function (xmlDoc, request, customArgs) {\n        var newDataSource = [];\n        var dimensionElements = this.fieldListData;\n        newDataSource = [];\n        var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n        for (var _i = 0, fields_6 = fields; _i < fields_6.length; _i++) {\n            var field = fields_6[_i];\n            if (parseInt(field.querySelector('LEVEL_TYPE').textContent, 10) !== 1 && field.querySelector('HIERARCHY_UNIQUE_NAME').textContent.toLowerCase() !== '[measures]') {\n                var dimensionName = field.querySelector('HIERARCHY_UNIQUE_NAME').textContent;\n                var levelName = field.querySelector('LEVEL_UNIQUE_NAME').textContent;\n                var levelCaption = field.querySelector('LEVEL_CAPTION').textContent;\n                var levelObj = {\n                    hasChildren: false,\n                    isChecked: false,\n                    isSelected: this.fieldList[dimensionName].isSelected,\n                    pid: dimensionName,\n                    id: levelName,\n                    name: levelCaption,\n                    tag: levelName,\n                    spriteCssClass: 'e-level-members e-hierarchy-level-' + parseInt(field.querySelector('LEVEL_NUMBER').textContent, 10) + '-icon' + ' ' + cls.ICON,\n                    caption: levelCaption,\n                    // aggregateType: this.getAggregateType(levelName),\n                    type: 'string'\n                };\n                newDataSource.push(levelObj);\n                if (this.fieldList[dimensionName] && this.fieldList[dimensionName].spriteCssClass &&\n                    this.fieldList[dimensionName].spriteCssClass.indexOf('e-attributeCDB-icon') === -1) {\n                    this.fieldList[dimensionName].levels.push(levelObj);\n                    this.fieldList[dimensionName].isHierarchy = false;\n                }\n                else {\n                    this.fieldList[dimensionName].isHierarchy = true;\n                }\n            }\n        }\n        this.fieldListData = dimensionElements = dimensionElements.concat(newDataSource);\n        var args = {\n            catalog: customArgs.dataSourceSettings.catalog,\n            cube: customArgs.dataSourceSettings.cube,\n            url: customArgs.dataSourceSettings.url,\n            LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n            request: 'MDSCHEMA_MEASURES'\n        };\n        this.getTreeData(args, this.loadMeasureElements.bind(this), customArgs);\n    };\n    OlapEngine.prototype.loadMeasureElements = function (xmlDoc, request, customArgs) {\n        var dimensionElements = this.fieldListData;\n        var measureGroupItems = [];\n        var caption;\n        var dataFields = extend([], this.values, null, true);\n        var reportElement = [];\n        for (var _i = 0, dataFields_5 = dataFields; _i < dataFields_5.length; _i++) {\n            var field = dataFields_5[_i];\n            reportElement.push(field.name);\n        }\n        if (this.locale !== 'en-US') {\n            var args = {\n                catalog: customArgs.dataSourceSettings.catalog,\n                cube: customArgs.dataSourceSettings.cube,\n                url: customArgs.dataSourceSettings.url,\n                LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n                request: 'MDSCHEMA_MEASUREGROUPS'\n            };\n            this.getTreeData(args, this.loadMeasureGroups.bind(this), customArgs);\n        }\n        var fields = [].slice.call(xmlDoc.querySelectorAll('row'));\n        for (var _a = 0, fields_7 = fields; _a < fields_7.length; _a++) {\n            var field = fields_7[_a];\n            var measureGRPName = isNullOrUndefined(field.querySelector('MEASUREGROUP_NAME')) ? '' : field.querySelector('MEASUREGROUP_NAME').textContent;\n            var measureName = field.querySelector('MEASURE_UNIQUE_NAME').textContent;\n            var formatString = field.querySelector('DEFAULT_FORMAT_STRING') ?\n                field.querySelector('DEFAULT_FORMAT_STRING').textContent : '#,#';\n            var aggregateType = field.querySelector('MEASURE_AGGREGATOR') ?\n                field.querySelector('MEASURE_AGGREGATOR').textContent : '1';\n            if (!(measureGroupItems.indexOf(measureGRPName) >= 0)) {\n                if (this.locale !== 'en-US') {\n                    var measureInfo = [];\n                    for (var _b = 0, _c = this.fieldListObj.measuresGroups; _b < _c.length; _b++) {\n                        var item = _c[_b];\n                        if (item.querySelector('MEASUREGROUP_NAME').textContent === measureGRPName) {\n                            measureInfo.push(item);\n                        }\n                    }\n                    caption = measureInfo.length > 0 ? measureInfo[0].querySelector('MEASUREGROUP_CAPTION').textContent : measureGRPName;\n                }\n                else {\n                    caption = measureGRPName;\n                }\n                if (measureGRPName !== '') {\n                    dimensionElements.push({\n                        hasChildren: true,\n                        isChecked: false,\n                        isSelected: false,\n                        pid: '[Measures]',\n                        id: measureGRPName,\n                        name: caption,\n                        spriteCssClass: 'e-measureCDB e-folderCDB-icon' + ' ' + cls.ICON,\n                        tag: measureGRPName,\n                        caption: caption,\n                        aggregateType: this.getAggregateType(measureGRPName, aggregateType),\n                        type: 'string'\n                    });\n                    measureGroupItems.push(measureGRPName);\n                }\n            }\n            var fieldObj = {\n                hasChildren: false,\n                isSelected: (reportElement.indexOf(measureName) >= 0),\n                pid: measureGRPName === '' ? '[Measures]' : measureGRPName,\n                id: measureName,\n                name: field.querySelector('MEASURE_CAPTION').textContent,\n                spriteCssClass: 'e-measure-icon' + ' ' + cls.ICON,\n                tag: measureName,\n                caption: this.dataFields[measureName] && this.dataFields[measureName].caption ? this.dataFields[measureName].caption : this.mappingFields[measureName] && this.mappingFields[measureName].caption ? this.mappingFields[measureName].caption : field.querySelector('MEASURE_CAPTION').textContent,\n                aggregateType: this.getAggregateType(measureName, aggregateType),\n                type: 'number',\n                filter: [],\n                // sort: 'Ascending',\n                actualFilter: [],\n                filterMembers: [],\n                childMembers: [],\n                searchMembers: [],\n                members: {},\n                currrentMembers: {},\n                /* eslint-disable */\n                formatString: formatString,\n                allowDragAndDrop: (this.dataFields[measureName] ? this.dataFields[measureName].allowDragAndDrop : this.mappingFields[measureName] ? this.mappingFields[measureName].allowDragAndDrop : true),\n                showFilterIcon: (this.dataFields[measureName] ? this.dataFields[measureName].showFilterIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showFilterIcon : true),\n                showSortIcon: (this.dataFields[measureName] ? this.dataFields[measureName].showSortIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showSortIcon : true),\n                showEditIcon: (this.dataFields[measureName] ? this.dataFields[measureName].showEditIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showEditIcon : true),\n                showRemoveIcon: (this.dataFields[measureName] ? this.dataFields[measureName].showRemoveIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showRemoveIcon : true),\n                showValueTypeIcon: (this.dataFields[measureName] ? this.dataFields[measureName].showValueTypeIcon : this.mappingFields[measureName] ? this.mappingFields[measureName].showValueTypeIcon : true),\n                showSubTotals: (this.dataFields[measureName] ? this.dataFields[measureName].showSubTotals : this.mappingFields[measureName] ? this.mappingFields[measureName].showSubTotals : true)\n                /* eslint-enable */\n            };\n            dimensionElements.push(fieldObj);\n            this.fieldList[measureName] = fieldObj;\n            if ((reportElement.indexOf(measureName) >= 0)) {\n                reportElement.splice(reportElement.indexOf(measureName), 1);\n            }\n        }\n        this.measureReportItems = reportElement;\n        // let args: ConnectionInfo = {\n        //     catalog: customArgs.dataSourceSettings.catalog,\n        //     cube: customArgs.dataSourceSettings.cube,\n        //     url: customArgs.dataSourceSettings.url,\n        //     LCID: customArgs.dataSourceSettings.localeIdentifier.toString(),\n        //     request: 'MDSCHEMA_KPIS'\n        // };\n        // customArgs.reportElement = this.measureReportItems;\n        // this.getTreeData(args, this.loadKPIElements.bind(this), customArgs);\n    };\n    OlapEngine.prototype.loadMeasureGroups = function (xmlDoc, request, customArgs) {\n        if (isNullOrUndefined(this.fieldListObj)) {\n            this.fieldListObj = {};\n        }\n        this.fieldListObj.measuresGroups = [].slice.call(xmlDoc.querySelectorAll('row'));\n    };\n    // private loadKPIElements(xmlDoc: Document, request: Ajax, customArgs: FieldData): void {\n    //     let dimensionElements: IOlapField[] = this.fieldListData;\n    //     let parser = new DOMParser();\n    //     let measureGroupItems: string[] = [];\n    //     let fields: HTMLElement[] = [].slice.call(xmlDoc.querySelectorAll('row'));\n    //     dimensionElements.splice(1, 0, {\n    //         hasChildren: true,\n    //         isChecked: false,\n    //         id: 'folderStruct',\n    //         name: 'KPI',\n    //         spriteCssClass: 'kpiCDB e-kpiCDB-icon' + ' ' +  cls.ICON,\n    //         tag: '',\n    //         caption: 'KPI',\n    //         aggregateType: this.getAggregateType('folderStruct'),\n    //         type: 'string'\n    //     });\n    //     for (let field of fields) {\n    //         let kpiName: string = field.querySelector('KPI_CAPTION').textContent;\n    //         let kpiGoal: string = field.querySelector('KPI_GOAL').textContent;\n    //         let kpiStatus: string = field.querySelector('KPI_STATUS').textContent;\n    //         let kpiTrend: string = field.querySelector('KPI_TREND').textContent;\n    //         let kpiValue: string = field.querySelector('KPI_VALUE').textContent;\n    //         if (!(measureGroupItems.indexOf(field.querySelector('KPI_NAME').textContent) >= 0)) {\n    //             dimensionElements.push({\n    //                 hasChildren: true,\n    //                 isChecked: false,\n    //                 pid: 'folderStruct',\n    //                 id: kpiName,\n    //                 name: kpiName,\n    //                 spriteCssClass: 'e-folderCDB-icon' + ' ' +  cls.ICON,\n    //                 tag: kpiName,\n    //                 caption: kpiName,\n    //                 aggregateType: this.getAggregateType(kpiName),\n    //                 type: 'string'\n    //             });\n    //             measureGroupItems.push(kpiName);\n    //         }\n    //         let kpiCollection: { [key: string]: string } = {\n    //             'kpiGoal': kpiGoal,\n    //             'kpiStatus': kpiStatus,\n    //             'kpiTrend': kpiTrend,\n    //             'kpiValue': kpiValue\n    //         };\n    //         let i: number = 0;\n    //         for (let kpi of Object.keys(kpiCollection)) {\n    //             let id: string = kpiCollection[kpi];\n    //             let name: string = (kpi).split('kpi')[1];\n    //             let cssClass: string = 'e-' + kpi + '-icon';\n    //             let fieldObj: IOlapField = {\n    //                 hasChildren: true,\n    //                 isSelected: (customArgs.reportElement.indexOf(id) >= 0),\n    //                 id: id,\n    //                 pid: kpiName,\n    //                 name: name,\n    //                 spriteCssClass: cssClass + ' ' +  cls.ICON,\n    //                 tag: id,\n    //                 caption: name,\n    //                 aggregateType: this.getAggregateType(id),\n    //                 type: 'number',\n    //                 filter: [],\n    //                 sort: 'Ascending',\n    //                 filterMembers: [],\n    //                 searchMembers: [],\n    //                 members: {},\n    //                 currrentMembers: {}\n    //             };\n    //             dimensionElements.push(fieldObj);\n    //             this.fieldList[id] = fieldObj;\n    //         }\n    //     }\n    // }\n    OlapEngine.prototype.doAjaxPost = function (type, url, data, success, customArgs) {\n        var ajax = new Ajax({\n            mode: false,\n            contentType: 'text/xml',\n            url: url,\n            data: data,\n            dataType: 'xml',\n            type: type,\n            beforeSend: this.beforeSend.bind(this),\n            onSuccess: function (args, request) {\n                var parser = new DOMParser();\n                // parsing string type result as XML\n                var xmlDoc = parser.parseFromString(args, 'text/xml');\n                success(xmlDoc, request, customArgs);\n            },\n            onFailure: function (e) {\n                return e;\n            }\n        });\n        ajax.send();\n    };\n    OlapEngine.prototype.beforeSend = function (args) {\n        if (this.dataSourceSettings.authentication.userName && this.dataSourceSettings.authentication.password) {\n            /* eslint-disable */\n            args.httpRequest.setRequestHeader(\"Authorization\", \"Basic \" + btoa(this.dataSourceSettings.authentication.userName + \":\" +\n                this.dataSourceSettings.authentication.password));\n        }\n    };\n    OlapEngine.prototype.getSoapMsg = function (dataSourceSettings, query) {\n        var xmlMsg = '';\n        var sourceInfo = '';\n        var connectionString = this.getConnectionInfo(dataSourceSettings.url, dataSourceSettings.localeIdentifier);\n        if (this.isMondrian) {\n            sourceInfo = '';\n            xmlMsg = '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"><SOAP-ENV:Body><Execute xmlns=\\\"urn:schemas-microsoft-com:xml-analysis\\\"><Command><Statement><![CDATA[' +\n                query + ']]></Statement></Command><Properties><PropertyList><DataSourceInfo>' + sourceInfo +\n                '</DataSourceInfo><Catalog>' + dataSourceSettings.catalog + '</Catalog><AxisFormat>TupleFormat</AxisFormat><Content>Data</Content><Format>Multidimensional</Format></PropertyList></Properties></Execute></SOAP-ENV:Body></SOAP-ENV:Envelope>';\n        }\n        else {\n            xmlMsg = '<Envelope xmlns=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"> <Header></Header> <Body> <Execute xmlns=\\\"urn:schemas-microsoft-com:xml-analysis\\\"> <Command> <Statement> ' +\n                query + ' </Statement> </Command> <Properties> <PropertyList> <Catalog>' + dataSourceSettings.catalog +\n                '</Catalog> <LocaleIdentifier>' + connectionString.LCID + '</LocaleIdentifier></PropertyList> </Properties> </Execute> </Body> </Envelope>';\n        }\n        return xmlMsg;\n    };\n    OlapEngine.prototype.getConnectionInfo = function (connectionString, locale) {\n        var connectionInfo = { url: '', LCID: !isNullOrUndefined(locale) ? locale.toString() : '1033' };\n        if (connectionString !== '') {\n            /* eslint-enable */\n            for (var _i = 0, _a = connectionString.split(';'); _i < _a.length; _i++) {\n                var obj = _a[_i];\n                if (obj.toLowerCase().indexOf('locale') < 0 && connectionInfo.url.length === 0) {\n                    connectionInfo.url = obj;\n                }\n                else if (obj.toLowerCase().indexOf('locale') >= 0) {\n                    connectionInfo.LCID = obj.replace(/ /g, '').split('=')[1];\n                }\n            }\n        }\n        return connectionInfo;\n    };\n    OlapEngine.prototype.getMDXQuery = function (dataSourceSettings) {\n        MDXQuery.getCellSets(dataSourceSettings, this, true, undefined, true);\n        return this.mdxQuery;\n    };\n    return OlapEngine;\n}());\nexport { OlapEngine };\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n"]},"metadata":{},"sourceType":"module"}