{"ast":null,"code":"var _jsxFileName = \"/workspace/Commb-olap-poc/commb-olap-js/src/index.js\";\nimport { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\nimport { PivotViewComponent, Inject, FieldList, CalculatedField, GroupingBar, Toolbar, PDFExport, ExcelExport, ConditionalFormatting } from '@syncfusion/ej2-react-pivotview';\nimport { SampleBase } from './sample-base';\n/**\r\n * PivotView ToolBar Sample Olap.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dataSourceSettings = {\n  catalog: 'Adventure Works DW 2008 SE',\n  cube: 'Adventure Works',\n  providerType: 'SSAS',\n  url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\n  enableSorting: true,\n  columns: [{\n    name: '[Product].[Product Categories]',\n    caption: 'Product Categories'\n  }, {\n    name: '[Measures]',\n    caption: 'Measures'\n  }],\n  valueSortSettings: {\n    headerDelimiter: ' - '\n  },\n  values: [{\n    name: '[Measures].[Customer Count]',\n    caption: 'Customer Count'\n  }, {\n    name: '[Measures].[Internet Sales Amount]',\n    caption: 'Internet Sales Amount'\n  }],\n  rows: [{\n    name: '[Customer].[Customer Geography]',\n    caption: 'Customer Geography'\n  }],\n  filters: [{\n    name: '[Date].[Fiscal]',\n    caption: 'Date Fiscal'\n  }],\n  filterSettings: [{\n    name: '[Date].[Fiscal]',\n    items: ['[Date].[Fiscal].[Fiscal Quarter].&[2002]&[4]', '[Date].[Fiscal].[Fiscal Year].&[2005]'],\n    levelCount: 3\n  }]\n};\nexport class OlapSample extends SampleBase {\n  constructor() {\n    super(...arguments);\n    this.toolbarOptions = ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load', 'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'];\n  }\n\n  fetchReport(args) {\n    let reportsCollection = [];\n    let reeportsList = [];\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      reportsCollection = JSON.parse(localStorage.pivotviewReports);\n    }\n\n    reportsCollection.map(function (item) {\n      reeportsList.push(item.reportName);\n    });\n    args.reportName = reeportsList;\n  }\n\n  saveReport(args) {\n    let report = [];\n    let isSave = false;\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      report = JSON.parse(localStorage.pivotviewReports);\n    }\n\n    if (args.report && args.reportName && args.reportName !== '') {\n      report.map(function (item) {\n        if (args.reportName === item.reportName) {\n          item.report = args.report;\n          isSave = true;\n        }\n      });\n\n      if (!isSave) {\n        report.push(args);\n      }\n\n      localStorage.pivotviewReports = JSON.stringify(report);\n    }\n  }\n\n  removeReport(args) {\n    let reportsCollection = [];\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      reportsCollection = JSON.parse(localStorage.pivotviewReports);\n    }\n\n    for (let i = 0; i < reportsCollection.length; i++) {\n      if (reportsCollection[i].reportName === args.reportName) {\n        reportsCollection.splice(i, 1);\n      }\n    }\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n    }\n  }\n\n  loadReport(args) {\n    let reportsCollection = [];\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      reportsCollection = JSON.parse(localStorage.pivotviewReports);\n    }\n\n    reportsCollection.map(function (item) {\n      if (args.reportName === item.reportName) {\n        args.report = item.report;\n      }\n    });\n\n    if (args.report) {\n      this.pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\n    }\n  }\n\n  renameReport(args) {\n    let reportsCollection = [];\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      reportsCollection = JSON.parse(localStorage.pivotviewReports);\n    }\n\n    if (args.isReportExists) {\n      for (let i = 0; i < reportsCollection.length; i++) {\n        if (reportsCollection[i].reportName === args.rename) {\n          reportsCollection.splice(i, 1);\n        }\n      }\n    }\n\n    reportsCollection.map(function (item) {\n      if (args.reportName === item.reportName) {\n        item.reportName = args.rename;\n      }\n    });\n\n    if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n      localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n    }\n  }\n\n  beforeToolbarRender(args) {\n    args.customToolbar.splice(6, 0, {\n      type: 'Separator'\n    });\n    args.customToolbar.splice(9, 0, {\n      type: 'Separator'\n    });\n  }\n\n  newReport() {\n    this.pivotObj.setProperties({\n      dataSourceSettings: {\n        columns: [],\n        rows: [],\n        values: [],\n        filters: []\n      }\n    }, false);\n  }\n\n  chartOnLoad(args) {\n    let selectedTheme = location.hash.split(\"/\")[1];\n    selectedTheme = selectedTheme ? selectedTheme : \"Material\";\n    args.chart.theme = selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-pane\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        id: \"pivot-table-section\",\n        style: {\n          overflow: 'initial'\n        },\n        children: /*#__PURE__*/_jsxDEV(PivotViewComponent, {\n          id: \"PivotView\",\n          ref: scope => {\n            this.pivotObj = scope;\n          },\n          dataSourceSettings: dataSourceSettings,\n          width: '100%',\n          height: '500',\n          showFieldList: true,\n          showGroupingBar: true,\n          gridSettings: {\n            columnWidth: 140\n          },\n          allowExcelExport: true,\n          allowConditionalFormatting: true,\n          allowPdfExport: true,\n          showToolbar: true,\n          allowCalculatedField: true,\n          displayOption: {\n            view: 'Both'\n          },\n          toolbar: this.toolbarOptions,\n          newReport: this.newReport.bind(this),\n          renameReport: this.renameReport.bind(this),\n          removeReport: this.removeReport.bind(this),\n          loadReport: this.loadReport.bind(this),\n          fetchReport: this.fetchReport.bind(this),\n          saveReport: this.saveReport.bind(this),\n          toolbarRender: this.beforeToolbarRender.bind(this),\n          chartSettings: {\n            title: 'Sales Analysis',\n            load: this.chartOnLoad.bind(this)\n          },\n          children: /*#__PURE__*/_jsxDEV(Inject, {\n            services: [FieldList, GroupingBar, CalculatedField, Toolbar, PDFExport, ExcelExport, ConditionalFormatting]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nrender( /*#__PURE__*/_jsxDEV(OlapSample, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 137,\n  columnNumber: 8\n}, this), document.getElementById('sample'));","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/src/index.js"],"names":["render","React","PivotViewComponent","Inject","FieldList","CalculatedField","GroupingBar","Toolbar","PDFExport","ExcelExport","ConditionalFormatting","SampleBase","dataSourceSettings","catalog","cube","providerType","url","enableSorting","columns","name","caption","valueSortSettings","headerDelimiter","values","rows","filters","filterSettings","items","levelCount","OlapSample","constructor","arguments","toolbarOptions","fetchReport","args","reportsCollection","reeportsList","localStorage","pivotviewReports","JSON","parse","map","item","push","reportName","saveReport","report","isSave","stringify","removeReport","i","length","splice","loadReport","pivotObj","renameReport","isReportExists","rename","beforeToolbarRender","customToolbar","type","newReport","setProperties","chartOnLoad","selectedTheme","location","hash","split","chart","theme","charAt","toUpperCase","slice","overflow","scope","columnWidth","view","bind","title","load","document","getElementById"],"mappings":"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","sourcesContent":["import { render } from 'react-dom';\r\nimport './index.css';\r\nimport * as React from 'react';\r\nimport { PivotViewComponent, Inject, FieldList, CalculatedField, GroupingBar, Toolbar, PDFExport, ExcelExport, ConditionalFormatting } from '@syncfusion/ej2-react-pivotview';\r\nimport { SampleBase } from './sample-base';\r\n\r\n/**\r\n * PivotView ToolBar Sample Olap.\r\n */\r\nlet dataSourceSettings = {\r\n    catalog: 'Adventure Works DW 2008 SE',\r\n    cube: 'Adventure Works',\r\n    providerType: 'SSAS',\r\n    url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\r\n    enableSorting: true,\r\n    columns: [{ name: '[Product].[Product Categories]', caption: 'Product Categories' }, { name: '[Measures]', caption: 'Measures' }],\r\n    valueSortSettings: { headerDelimiter: ' - ' },\r\n    values: [{ name: '[Measures].[Customer Count]', caption: 'Customer Count' }, { name: '[Measures].[Internet Sales Amount]', caption: 'Internet Sales Amount' }],\r\n    rows: [{ name: '[Customer].[Customer Geography]', caption: 'Customer Geography' }],\r\n    filters: [{ name: '[Date].[Fiscal]', caption: 'Date Fiscal' }],\r\n    filterSettings: [{\r\n            name: '[Date].[Fiscal]', items: ['[Date].[Fiscal].[Fiscal Quarter].&[2002]&[4]', '[Date].[Fiscal].[Fiscal Year].&[2005]'],\r\n            levelCount: 3\r\n        }\r\n    ]\r\n};\r\nexport class OlapSample extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toolbarOptions = ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\r\n            'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'];\r\n    }\r\n    fetchReport(args) {\r\n        let reportsCollection = [];\r\n        let reeportsList = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        reportsCollection.map(function (item) { reeportsList.push(item.reportName); });\r\n        args.reportName = reeportsList;\r\n    }\r\n    saveReport(args) {\r\n        let report = [];\r\n        let isSave = false;\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            report = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        if (args.report && args.reportName && args.reportName !== '') {\r\n            report.map(function (item) {\r\n                if (args.reportName === item.reportName) {\r\n                    item.report = args.report;\r\n                    isSave = true;\r\n                }\r\n            });\r\n            if (!isSave) {\r\n                report.push(args);\r\n            }\r\n            localStorage.pivotviewReports = JSON.stringify(report);\r\n        }\r\n    }\r\n    removeReport(args) {\r\n        let reportsCollection = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        for (let i = 0; i < reportsCollection.length; i++) {\r\n            if (reportsCollection[i].reportName === args.reportName) {\r\n                reportsCollection.splice(i, 1);\r\n            }\r\n        }\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\r\n        }\r\n    }\r\n    loadReport(args) {\r\n        let reportsCollection = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        reportsCollection.map(function (item) {\r\n            if (args.reportName === item.reportName) {\r\n                args.report = item.report;\r\n            }\r\n        });\r\n        if (args.report) {\r\n            this.pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\r\n        }\r\n    }\r\n    renameReport(args) {\r\n        let reportsCollection = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        if (args.isReportExists) {\r\n            for (let i = 0; i < reportsCollection.length; i++) {\r\n                if (reportsCollection[i].reportName === args.rename) {\r\n                    reportsCollection.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        reportsCollection.map(function (item) { if (args.reportName === item.reportName) {\r\n            item.reportName = args.rename;\r\n        } });\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\r\n        }\r\n    }\r\n    beforeToolbarRender(args) {\r\n        args.customToolbar.splice(6, 0, {\r\n            type: 'Separator'\r\n        });\r\n        args.customToolbar.splice(9, 0, {\r\n            type: 'Separator'\r\n        });\r\n    }\r\n    newReport() {\r\n        this.pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\r\n    }\r\n    chartOnLoad(args) {\r\n        let selectedTheme = location.hash.split(\"/\")[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : \"Material\";\r\n        args.chart.theme =\r\n            selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1);\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section' id='pivot-table-section' style={{ overflow: 'initial' }}>\r\n                    <PivotViewComponent id='PivotView' ref={(scope) => { this.pivotObj = scope; }} dataSourceSettings={dataSourceSettings} width={'100%'} height={'500'} showFieldList={true} showGroupingBar={true} gridSettings={{ columnWidth: 140 }} allowExcelExport={true} allowConditionalFormatting={true} allowPdfExport={true} showToolbar={true} allowCalculatedField={true} displayOption={{ view: 'Both' }} toolbar={this.toolbarOptions} newReport={this.newReport.bind(this)} renameReport={this.renameReport.bind(this)} removeReport={this.removeReport.bind(this)} loadReport={this.loadReport.bind(this)} fetchReport={this.fetchReport.bind(this)} saveReport={this.saveReport.bind(this)} toolbarRender={this.beforeToolbarRender.bind(this)} chartSettings={{ title: 'Sales Analysis', load: this.chartOnLoad.bind(this) }}>\r\n                        <Inject services={[FieldList, GroupingBar, CalculatedField, Toolbar, PDFExport, ExcelExport, ConditionalFormatting]}/>\r\n                    </PivotViewComponent>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\nrender(<OlapSample />, document.getElementById('sample'));"]},"metadata":{},"sourceType":"module"}