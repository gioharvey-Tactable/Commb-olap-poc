{"ast":null,"code":"import { Workbook } from '@syncfusion/ej2-excel-export';\nimport * as events from '../../common/base/constant';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { PivotUtil } from '../../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\n\nvar ExcelExport = function () {\n  /**\n   * Constructor for the PivotGrid Excel Export module.\n   * @param {PivotView} parent - Instance of pivot table.\n   * @hidden\n   */\n  function ExcelExport(parent) {\n    this.actualrCnt = 0;\n    this.parent = parent;\n  }\n  /**\n   * For internal use only - Get the module name.\n   * @returns {string} - string.\n   * @private\n   */\n\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'excelExport';\n  };\n\n  ExcelExport.prototype.addHeaderAndFooter = function (excelExportProperties, stringValue, type, rowCount) {\n    var cells = [];\n\n    if (!isNullOrUndefined(excelExportProperties.rows)) {\n      this.actualrCnt = type === 'footer' ? this.actualrCnt + rowCount - excelExportProperties.rows[0].cells.length : this.actualrCnt;\n      var row = excelExportProperties.rows;\n\n      for (var i = 0; i < row.length; i++) {\n        for (var j = 0; j < row[i].cells.length; j++) {\n          cells = [];\n          cells.push({\n            index: i + 1,\n            value: row[i].cells[j].value,\n            colSpan: row[i].cells[j].colSpan,\n            rowSpan: row[i].cells[j].rowSpan,\n            style: row[i].cells[j].style\n          });\n          this.actualrCnt++;\n          this.rows.push({\n            index: this.actualrCnt,\n            cells: cells\n          });\n        }\n      }\n\n      this.actualrCnt = type === 'header' ? rowCount : this.actualrCnt;\n    } else {\n      if (stringValue !== '') {\n        if (type === 'footer') {\n          this.actualrCnt++;\n        }\n\n        cells.push({\n          index: 1,\n          value: stringValue\n        });\n        this.rows.push({\n          index: this.actualrCnt + 1,\n          cells: cells\n        });\n        this.actualrCnt = type === 'header' ? this.actualrCnt + 2 : this.actualrCnt;\n      }\n    }\n  };\n  /* eslint-disable */\n\n  /**\n   * Method to perform excel export.\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.exportToExcel = function (type, exportProperties) {\n    this.rows = [];\n    this.actualrCnt = 0;\n    var isHeaderSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.header);\n    var isFooterSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.footer);\n    var isFileNameSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.fileName);\n    this.engine = this.parent.dataType === 'olap' ? this.parent.olapEngineModule : this.parent.engineModule;\n    /** Event trigerring */\n\n    var clonedValues;\n    var currentPivotValues = PivotUtil.getClonedPivotValues(this.engine.pivotValues);\n    var customFileName = isFileNameSet ? exportProperties.fileName : 'default.xlsx';\n\n    if (isHeaderSet) {\n      this.addHeaderAndFooter(exportProperties.header, '', 'header', exportProperties.header.headerRows);\n    }\n\n    if (this.parent.exportAllPages && this.parent.enableVirtualization && this.parent.dataType !== 'olap') {\n      var pageSettings = this.engine.pageSettings;\n      this.engine.pageSettings = null;\n      this.engine.generateGridData(this.parent.dataSourceSettings);\n      this.parent.applyFormatting(this.engine.pivotValues);\n      clonedValues = PivotUtil.getClonedPivotValues(this.engine.pivotValues);\n      this.engine.pivotValues = currentPivotValues;\n      this.engine.pageSettings = pageSettings;\n    } else {\n      clonedValues = currentPivotValues;\n    }\n\n    var args = {\n      fileName: customFileName,\n      header: '',\n      footer: '',\n      dataCollections: [clonedValues]\n    };\n    var fileName;\n    var header;\n    var footer;\n    var dataCollections;\n    this.parent.trigger(events.beforeExport, args, function (observedArgs) {\n      fileName = observedArgs.fileName;\n      header = observedArgs.header;\n      footer = observedArgs.footer;\n      dataCollections = observedArgs.dataCollections;\n    });\n\n    if (!isHeaderSet && isNullOrUndefined(args.excelExportProperties) && header !== '') {\n      this.addHeaderAndFooter({}, header, 'header', undefined);\n    } else if (!isNullOrUndefined(args.excelExportProperties) && !isNullOrUndefined(args.excelExportProperties.header)) {\n      this.addHeaderAndFooter(args.excelExportProperties.header, '', 'header', args.excelExportProperties.header.headerRows);\n    }\n    /** Fill data and export */\n\n\n    var workSheets = [];\n\n    for (var dataColl = 0; dataColl < dataCollections.length; dataColl++) {\n      var pivotValues = dataCollections[dataColl];\n      var colLen = 0;\n      var rowLen = pivotValues.length;\n      var formatList = this.parent.renderModule.getFormatList();\n      var maxLevel = 0;\n\n      for (var rCnt = 0; rCnt < rowLen; rCnt++) {\n        if (pivotValues[rCnt]) {\n          this.actualrCnt++;\n          colLen = pivotValues[rCnt].length;\n          var cells = [];\n\n          for (var cCnt = 0; cCnt < colLen; cCnt++) {\n            if (pivotValues[rCnt][cCnt]) {\n              var pivotCell = pivotValues[rCnt][cCnt];\n\n              if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {\n                var cellValue = pivotCell.axis === 'value' ? pivotCell.value : pivotCell.formattedText;\n\n                if (pivotCell.type === 'grand sum') {\n                  cellValue = this.parent.localeObj.getConstant('grandTotal');\n                } else if (pivotCell.type === 'sum') {\n                  cellValue = cellValue.toString().replace('Total', this.parent.localeObj.getConstant('total'));\n                } else {\n                  cellValue = cellValue;\n                }\n\n                if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {\n                  cells.push({\n                    index: cCnt + 1,\n                    value: cellValue,\n                    colSpan: pivotCell.colSpan,\n                    rowSpan: pivotCell.rowSpan === -1 ? 1 : pivotCell.rowSpan\n                  });\n\n                  if (pivotCell.axis === 'value') {\n                    if (isNaN(pivotCell.value) || pivotCell.formattedText === '' || pivotCell.formattedText === undefined || isNullOrUndefined(pivotCell.value)) {\n                      cells[cells.length - 1].value = type === 'Excel' ? null : '';\n                    }\n\n                    var field = this.parent.dataSourceSettings.valueAxis === 'row' && this.parent.dataType === 'olap' && pivotCell.rowOrdinal && this.engine.tupRowInfo[pivotCell.rowOrdinal] ? this.engine.tupRowInfo[pivotCell.rowOrdinal].measureName : pivotCell.actualText;\n                    cells[cells.length - 1].style = !isNullOrUndefined(cells[cells.length - 1].value) ? {\n                      numberFormat: formatList[field],\n                      bold: false,\n                      wrapText: true\n                    } : {\n                      bold: false,\n                      wrapText: true\n                    };\n\n                    if (pivotCell.style) {\n                      cells[cells.length - 1].style.backColor = pivotCell.style.backgroundColor;\n                      cells[cells.length - 1].style.fontColor = pivotCell.style.color;\n                      cells[cells.length - 1].style.fontName = pivotCell.style.fontFamily;\n                      cells[cells.length - 1].style.fontSize = Number(pivotCell.style.fontSize.split('px')[0]);\n                    }\n                  } else {\n                    cells[cells.length - 1].style = {\n                      bold: true,\n                      vAlign: 'Center',\n                      wrapText: true,\n                      indent: cCnt === 0 ? pivotCell.level * 10 : 0\n                    };\n\n                    if (pivotCell.axis === 'row' && cCnt === 0) {\n                      cells[cells.length - 1].style.hAlign = 'Left';\n\n                      if (this.parent.dataType === 'olap') {\n                        var indent = this.parent.renderModule.indentCollection[rCnt];\n                        cells[cells.length - 1].style.indent = indent * 2;\n                        maxLevel = maxLevel > indent ? maxLevel : indent;\n                      } else {\n                        cells[cells.length - 1].style.indent = pivotCell.level * 2;\n                        maxLevel = pivotCell.level > maxLevel ? pivotCell.level : maxLevel;\n                      }\n                    }\n                  }\n\n                  cells[cells.length - 1].style.borders = {\n                    color: '#000000',\n                    lineStyle: 'Thin'\n                  };\n                }\n              }\n\n              cCnt = cCnt + (pivotCell.colSpan ? pivotCell.colSpan - 1 : 0);\n            } else {\n              cells.push({\n                index: cCnt + 1,\n                value: '',\n                colSpan: 1,\n                rowSpan: 1\n              });\n            }\n          }\n\n          this.rows.push({\n            index: this.actualrCnt,\n            cells: cells\n          });\n        }\n      }\n\n      if (isFooterSet) {\n        this.addHeaderAndFooter(exportProperties.footer, '', 'footer', exportProperties.footer.footerRows);\n      } else if (!isFooterSet && footer !== '' && isNullOrUndefined(args.excelExportProperties)) {\n        this.addHeaderAndFooter({}, footer, 'footer', undefined);\n      } else if (!isNullOrUndefined(args.excelExportProperties) && !isNullOrUndefined(args.excelExportProperties.footer)) {\n        this.addHeaderAndFooter(args.excelExportProperties.footer, '', 'footer', args.excelExportProperties.footer.footerRows);\n      }\n\n      var columns = [];\n\n      for (var cCnt = 0; cCnt < colLen; cCnt++) {\n        columns.push({\n          index: cCnt + 1,\n          width: 100\n        });\n      }\n\n      if (maxLevel > 0) {\n        columns[0].width = 100 + maxLevel * 20;\n      }\n\n      workSheets.push({\n        columns: columns,\n        rows: this.rows\n      });\n    }\n\n    var book = new Workbook({\n      worksheets: workSheets\n    }, type === 'Excel' ? 'xlsx' : 'csv', undefined, this.parent.currencyCode);\n\n    if ('.xlsx' === fileName.substring(fileName.length - 5, fileName.length) || '.csv' === fileName.substring(fileName.length - 4, fileName.length)) {\n      book.save(fileName);\n    } else {\n      book.save(fileName + (type === 'Excel' ? '.xlsx' : '.csv'));\n    }\n  };\n  /**\n   * To destroy the excel export module\n   * @returns {void}\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.destroy = function () {};\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/pivotview/actions/excel-export.js"],"names":["Workbook","events","isNullOrUndefined","PivotUtil","ExcelExport","parent","actualrCnt","prototype","getModuleName","addHeaderAndFooter","excelExportProperties","stringValue","type","rowCount","cells","rows","length","row","i","j","push","index","value","colSpan","rowSpan","style","exportToExcel","exportProperties","isHeaderSet","header","isFooterSet","footer","isFileNameSet","fileName","engine","dataType","olapEngineModule","engineModule","clonedValues","currentPivotValues","getClonedPivotValues","pivotValues","customFileName","headerRows","exportAllPages","enableVirtualization","pageSettings","generateGridData","dataSourceSettings","applyFormatting","args","dataCollections","trigger","beforeExport","observedArgs","undefined","workSheets","dataColl","colLen","rowLen","formatList","renderModule","getFormatList","maxLevel","rCnt","cCnt","pivotCell","level","cellValue","axis","formattedText","localeObj","getConstant","toString","replace","isNaN","field","valueAxis","rowOrdinal","tupRowInfo","measureName","actualText","numberFormat","bold","wrapText","backColor","backgroundColor","fontColor","color","fontName","fontFamily","fontSize","Number","split","vAlign","indent","hAlign","indentCollection","borders","lineStyle","footerRows","columns","width","book","worksheets","currencyCode","substring","save","destroy"],"mappings":"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","sourcesContent":["import { Workbook } from '@syncfusion/ej2-excel-export';\nimport * as events from '../../common/base/constant';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { PivotUtil } from '../../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the PivotGrid Excel Export module.\n     * @param {PivotView} parent - Instance of pivot table.\n     * @hidden\n     */\n    function ExcelExport(parent) {\n        this.actualrCnt = 0;\n        this.parent = parent;\n    }\n    /**\n     * For internal use only - Get the module name.\n     * @returns {string} - string.\n     * @private\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'excelExport';\n    };\n    ExcelExport.prototype.addHeaderAndFooter = function (excelExportProperties, stringValue, type, rowCount) {\n        var cells = [];\n        if (!isNullOrUndefined(excelExportProperties.rows)) {\n            this.actualrCnt = (type === 'footer') ? this.actualrCnt + rowCount - (excelExportProperties.rows[0].cells.length) : this.actualrCnt;\n            var row = excelExportProperties.rows;\n            for (var i = 0; i < row.length; i++) {\n                for (var j = 0; j < row[i].cells.length; j++) {\n                    cells = [];\n                    cells.push({\n                        index: i + 1, value: row[i].cells[j].value,\n                        colSpan: row[i].cells[j].colSpan, rowSpan: row[i].cells[j].rowSpan, style: row[i].cells[j].style\n                    });\n                    this.actualrCnt++;\n                    this.rows.push({ index: this.actualrCnt, cells: cells });\n                }\n            }\n            this.actualrCnt = (type === 'header') ? rowCount : this.actualrCnt;\n        }\n        else {\n            if (stringValue !== '') {\n                if (type === 'footer') {\n                    this.actualrCnt++;\n                }\n                cells.push({\n                    index: 1, value: stringValue,\n                });\n                this.rows.push({ index: this.actualrCnt + 1, cells: cells });\n                this.actualrCnt = (type === 'header') ? this.actualrCnt + 2 : this.actualrCnt;\n            }\n        }\n    };\n    /* eslint-disable */\n    /**\n     * Method to perform excel export.\n     * @hidden\n     */\n    ExcelExport.prototype.exportToExcel = function (type, exportProperties) {\n        this.rows = [];\n        this.actualrCnt = 0;\n        var isHeaderSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.header);\n        var isFooterSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.footer);\n        var isFileNameSet = !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.fileName);\n        this.engine = this.parent.dataType === 'olap' ? this.parent.olapEngineModule : this.parent.engineModule;\n        /** Event trigerring */\n        var clonedValues;\n        var currentPivotValues = PivotUtil.getClonedPivotValues(this.engine.pivotValues);\n        var customFileName = isFileNameSet ? exportProperties.fileName : 'default.xlsx';\n        if (isHeaderSet) {\n            this.addHeaderAndFooter(exportProperties.header, '', 'header', exportProperties.header.headerRows);\n        }\n        if (this.parent.exportAllPages && this.parent.enableVirtualization && this.parent.dataType !== 'olap') {\n            var pageSettings = this.engine.pageSettings;\n            this.engine.pageSettings = null;\n            this.engine.generateGridData(this.parent.dataSourceSettings);\n            this.parent.applyFormatting(this.engine.pivotValues);\n            clonedValues = PivotUtil.getClonedPivotValues(this.engine.pivotValues);\n            this.engine.pivotValues = currentPivotValues;\n            this.engine.pageSettings = pageSettings;\n        }\n        else {\n            clonedValues = currentPivotValues;\n        }\n        var args = {\n            fileName: customFileName, header: '', footer: '', dataCollections: [clonedValues]\n        };\n        var fileName;\n        var header;\n        var footer;\n        var dataCollections;\n        this.parent.trigger(events.beforeExport, args, function (observedArgs) {\n            fileName = observedArgs.fileName;\n            header = observedArgs.header;\n            footer = observedArgs.footer;\n            dataCollections = observedArgs.dataCollections;\n        });\n        if (!isHeaderSet && isNullOrUndefined(args.excelExportProperties) && header !== '') {\n            this.addHeaderAndFooter({}, header, 'header', undefined);\n        }\n        else if (!isNullOrUndefined(args.excelExportProperties) && !isNullOrUndefined(args.excelExportProperties.header)) {\n            this.addHeaderAndFooter(args.excelExportProperties.header, '', 'header', args.excelExportProperties.header.headerRows);\n        }\n        /** Fill data and export */\n        var workSheets = [];\n        for (var dataColl = 0; dataColl < dataCollections.length; dataColl++) {\n            var pivotValues = dataCollections[dataColl];\n            var colLen = 0;\n            var rowLen = pivotValues.length;\n            var formatList = this.parent.renderModule.getFormatList();\n            var maxLevel = 0;\n            for (var rCnt = 0; rCnt < rowLen; rCnt++) {\n                if (pivotValues[rCnt]) {\n                    this.actualrCnt++;\n                    colLen = pivotValues[rCnt].length;\n                    var cells = [];\n                    for (var cCnt = 0; cCnt < colLen; cCnt++) {\n                        if (pivotValues[rCnt][cCnt]) {\n                            var pivotCell = pivotValues[rCnt][cCnt];\n                            if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {\n                                var cellValue = pivotCell.axis === 'value' ? pivotCell.value : pivotCell.formattedText;\n                                if (pivotCell.type === 'grand sum') {\n                                    cellValue = this.parent.localeObj.getConstant('grandTotal');\n                                }\n                                else if (pivotCell.type === 'sum') {\n                                    cellValue = cellValue.toString().replace('Total', this.parent.localeObj.getConstant('total'));\n                                }\n                                else {\n                                    cellValue = cellValue;\n                                }\n                                if (!(pivotCell.level === -1 && !pivotCell.rowSpan)) {\n                                    cells.push({\n                                        index: cCnt + 1, value: cellValue,\n                                        colSpan: pivotCell.colSpan, rowSpan: (pivotCell.rowSpan === -1 ? 1 : pivotCell.rowSpan),\n                                    });\n                                    if (pivotCell.axis === 'value') {\n                                        if (isNaN(pivotCell.value) || pivotCell.formattedText === '' ||\n                                            pivotCell.formattedText === undefined || isNullOrUndefined(pivotCell.value)) {\n                                            cells[cells.length - 1].value = type === 'Excel' ? null : '';\n                                        }\n                                        var field = (this.parent.dataSourceSettings.valueAxis === 'row' &&\n                                            this.parent.dataType === 'olap' && pivotCell.rowOrdinal &&\n                                            this.engine.tupRowInfo[pivotCell.rowOrdinal]) ?\n                                            this.engine.tupRowInfo[pivotCell.rowOrdinal].measureName :\n                                            pivotCell.actualText;\n                                        cells[cells.length - 1].style = !isNullOrUndefined(cells[cells.length - 1].value) ? { numberFormat: formatList[field], bold: false, wrapText: true } : { bold: false, wrapText: true };\n                                        if (pivotCell.style) {\n                                            cells[cells.length - 1].style.backColor = pivotCell.style.backgroundColor;\n                                            cells[cells.length - 1].style.fontColor = pivotCell.style.color;\n                                            cells[cells.length - 1].style.fontName = pivotCell.style.fontFamily;\n                                            cells[cells.length - 1].style.fontSize = Number(pivotCell.style.fontSize.split('px')[0]);\n                                        }\n                                    }\n                                    else {\n                                        cells[cells.length - 1].style = {\n                                            bold: true, vAlign: 'Center', wrapText: true, indent: cCnt === 0 ? pivotCell.level * 10 : 0\n                                        };\n                                        if (pivotCell.axis === 'row' && cCnt === 0) {\n                                            cells[cells.length - 1].style.hAlign = 'Left';\n                                            if (this.parent.dataType === 'olap') {\n                                                var indent = this.parent.renderModule.indentCollection[rCnt];\n                                                cells[cells.length - 1].style.indent = indent * 2;\n                                                maxLevel = maxLevel > indent ? maxLevel : indent;\n                                            }\n                                            else {\n                                                cells[cells.length - 1].style.indent = pivotCell.level * 2;\n                                                maxLevel = pivotCell.level > maxLevel ? pivotCell.level : maxLevel;\n                                            }\n                                        }\n                                    }\n                                    cells[cells.length - 1].style.borders = { color: '#000000', lineStyle: 'Thin' };\n                                }\n                            }\n                            cCnt = cCnt + (pivotCell.colSpan ? (pivotCell.colSpan - 1) : 0);\n                        }\n                        else {\n                            cells.push({\n                                index: cCnt + 1, value: '', colSpan: 1, rowSpan: 1,\n                            });\n                        }\n                    }\n                    this.rows.push({ index: this.actualrCnt, cells: cells });\n                }\n            }\n            if (isFooterSet) {\n                this.addHeaderAndFooter(exportProperties.footer, '', 'footer', exportProperties.footer.footerRows);\n            }\n            else if (!isFooterSet && footer !== '' && isNullOrUndefined(args.excelExportProperties)) {\n                this.addHeaderAndFooter({}, footer, 'footer', undefined);\n            }\n            else if (!isNullOrUndefined(args.excelExportProperties) && !isNullOrUndefined(args.excelExportProperties.footer)) {\n                this.addHeaderAndFooter(args.excelExportProperties.footer, '', 'footer', args.excelExportProperties.footer.footerRows);\n            }\n            var columns = [];\n            for (var cCnt = 0; cCnt < colLen; cCnt++) {\n                columns.push({ index: cCnt + 1, width: 100 });\n            }\n            if (maxLevel > 0) {\n                columns[0].width = 100 + (maxLevel * 20);\n            }\n            workSheets.push({ columns: columns, rows: this.rows });\n        }\n        var book = new Workbook({ worksheets: workSheets }, type === 'Excel' ? 'xlsx' : 'csv', undefined, this.parent.currencyCode);\n        if ('.xlsx' === fileName.substring(fileName.length - 5, fileName.length) || '.csv' === fileName.substring(fileName.length - 4, fileName.length)) {\n            book.save(fileName);\n        }\n        else {\n            book.save(fileName + (type === 'Excel' ? '.xlsx' : '.csv'));\n        }\n    };\n    /**\n     * To destroy the excel export module\n     * @returns {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"]},"metadata":{},"sourceType":"module"}