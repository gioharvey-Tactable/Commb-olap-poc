{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Property, Complex, Collection, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Allows specific fields associated with field information that needs to be displayed in the field axes of pivot table. The following configurations which are applicable are as follows:\n * * `name`: Allows you to set the field name that needs to be displayed in row/column/value/filter axis of pivot table.\n * * `caption`: Allows you to set caption to the specific field. It will be used to display instead of its name in pivot table component's UI.\n * * `type`: Allows to display the values in the pivot table with appropriate aggregations such as sum, product, count, average, etc… **Note: It is applicable only for relational data source.**\n * * `axis`: Allows you to set the axis name to the specific field. This will help to display the field in specified axis such as row/column/value/filter axis of pivot table.\n * * `showNoDataItems`: Allows you to display all members items of a specific field to the pivot table,\n * even doesn't have any data in its row/column intersection in data source. **Note: It is applicable only for relational data source.**\n * * `baseField`: Allows you to set the selective field, which used to display the values with either\n *  DifferenceFrom or PercentageOfDifferenceFrom or PercentageOfParentTotal aggregate types. **Note: It is applicable only for relational data source.**\n * * `baseItem`: Allows you to set the selective item of a specific field, which used to display the values with either DifferenceFrom or PercentageOfDifferenceFrom aggregate types.\n * The selective item should be set the from field specified in the baseField property. **Note: It is applicable only for relational data source.**\n * * `showSubTotals`: Allows to show or hide sub-totals to a specific field in row/column axis of the pivot table.\n * * `isNamedSet`: Allows you to set whether the specified field is a named set or not. In general,\n * the named set is a set of dimension members or a set expression (MDX query) to be created as a dimension in the SSAS OLAP cube itself. **Note: It is applicable only for OLAP data source.**\n * * `isCalculatedField`: Allows to set whether the specified field is a calculated field or not.\n * In general, the calculated field is created from the bound data source or using simple formula with basic arithmetic operators in the pivot table. **Note: It is applicable only for OLAP data source.**\n * * `showFilterIcon`: Allows you to show or hide the filter icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This filter icon is used to filter the members of a specified field at runtime in the pivot table.\n * * `showSortIcon`: Allows you to show or hide the sort icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This sort icon is used to order members of a specified field either in ascending or descending at runtime.\n * * `showRemoveIcon`: Allows you to show or hide the remove icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This remove icon is used to remove the specified field during runtime.\n * * `showValueTypeIcon`: Allows you to show or hide the value type icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This value type icon helps to select the appropriate aggregation type to specified value field at runtime.\n * * `showEditIcon`: Allows you to show or hide the edit icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This edit icon is used to modify caption, formula, and format of a specified calculated field at runtime that to be displayed in the pivot table.\n * * `allowDragAndDrop`: Allows you to restrict the specific field's pivot button that is used to drag on runtime in the grouping bar and field list UI.\n * This will prevent you from modifying the current report.\n */\n\nvar FieldOptions = function (_super) {\n  __extends(FieldOptions, _super);\n\n  function FieldOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], FieldOptions.prototype, \"name\", void 0);\n\n  __decorate([Property()], FieldOptions.prototype, \"caption\", void 0);\n\n  __decorate([Property('Sum')], FieldOptions.prototype, \"type\", void 0);\n\n  __decorate([Property()], FieldOptions.prototype, \"axis\", void 0);\n\n  __decorate([Property(false)], FieldOptions.prototype, \"showNoDataItems\", void 0);\n\n  __decorate([Property()], FieldOptions.prototype, \"baseField\", void 0);\n\n  __decorate([Property()], FieldOptions.prototype, \"baseItem\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"showSubTotals\", void 0);\n\n  __decorate([Property(false)], FieldOptions.prototype, \"isNamedSet\", void 0);\n\n  __decorate([Property(false)], FieldOptions.prototype, \"isCalculatedField\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"showFilterIcon\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"showSortIcon\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"showRemoveIcon\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"showValueTypeIcon\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"showEditIcon\", void 0);\n\n  __decorate([Property(true)], FieldOptions.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property()], FieldOptions.prototype, \"dataType\", void 0);\n\n  return FieldOptions;\n}(ChildProperty);\n\nexport { FieldOptions };\n/**\n * Allows specific fields associated with field information that needs to be displayed in the field axes of pivot table. The following configurations which are applicable are as follows:\n * * `name`: Allows you to set the field name that needs to be displayed in row/column/value/filter axis of pivot table.\n * * `caption`: Allows you to set caption to the specific field. It will be used to display instead of its name in pivot table component's UI.\n * * `type`: Allows to display the values in the pivot table with appropriate aggregations such as sum, product, count, average, etc… **Note: It is applicable only for relational data source.**\n * * `axis`: Allows you to set the axis name to the specific field. This will help to display the field in specified axis such as row/column/value/filter axis of pivot table.\n * * `showNoDataItems`: Allows you to display all members items of a specific field to the pivot table,\n * even doesn't have any data in its row/column intersection in data source. **Note: It is applicable only for relational data source.**\n * * `baseField`: Allows you to set the selective field, which used to display the values with either\n *  DifferenceFrom or PercentageOfDifferenceFrom or PercentageOfParentTotal aggregate types. **Note: It is applicable only for relational data source.**\n * * `baseItem`: Allows you to set the selective item of a specific field, which used to display the values with either DifferenceFrom or PercentageOfDifferenceFrom aggregate types.\n * The selective item should be set the from field specified in the baseField property. **Note: It is applicable only for relational data source.**\n * * `showSubTotals`: Allows to show or hide sub-totals to a specific field in row/column axis of the pivot table.\n * * `isNamedSet`: Allows you to set whether the specified field is a named set or not. In general,\n * the named set is a set of dimension members or a set expression (MDX query) to be created as a dimension in the SSAS OLAP cube itself. **Note: It is applicable only for OLAP data source.**\n * * `isCalculatedField`: Allows to set whether the specified field is a calculated field or not.\n * In general, the calculated field is created from the bound data source or using simple formula with basic arithmetic operators in the pivot table. **Note: It is applicable only for OLAP data source.**\n * * `showFilterIcon`: Allows you to show or hide the filter icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This filter icon is used to filter the members of a specified field at runtime in the pivot table.\n * * `showSortIcon`: Allows you to show or hide the sort icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This sort icon is used to order members of a specified field either in ascending or descending at runtime.\n * * `showRemoveIcon`: Allows you to show or hide the remove icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This remove icon is used to remove the specified field during runtime.\n * * `showValueTypeIcon`: Allows you to show or hide the value type icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This value type icon helps to select the appropriate aggregation type to specified value field at runtime.\n * * `showEditIcon`: Allows you to show or hide the edit icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This edit icon is used to modify caption, formula, and format of a specified calculated field at runtime that to be displayed in the pivot table.\n * * `allowDragAndDrop`: Allows you to restrict the specific field's pivot button that is used to drag on runtime in the grouping bar and field list UI.\n * This will prevent you from modifying the current report.\n */\n\nvar FieldListFieldOptions = function (_super) {\n  __extends(FieldListFieldOptions, _super);\n\n  function FieldListFieldOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return FieldListFieldOptions;\n}(FieldOptions);\n\nexport { FieldListFieldOptions };\n/**\n * Allows the style information to cusotmize the pivot table cell apprearance.\n */\n\nvar Style = function (_super) {\n  __extends(Style, _super);\n\n  function Style() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], Style.prototype, \"backgroundColor\", void 0);\n\n  __decorate([Property()], Style.prototype, \"color\", void 0);\n\n  __decorate([Property()], Style.prototype, \"fontFamily\", void 0);\n\n  __decorate([Property()], Style.prototype, \"fontSize\", void 0);\n\n  return Style;\n}(ChildProperty);\n\nexport { Style };\n/**\n * Allows specific fields associated with either selective or conditional-based filter members that used to be displayed in the pivot table.\n */\n\nvar Filter = function (_super) {\n  __extends(Filter, _super);\n\n  function Filter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], Filter.prototype, \"name\", void 0);\n\n  __decorate([Property('Include')], Filter.prototype, \"type\", void 0);\n\n  __decorate([Property()], Filter.prototype, \"items\", void 0);\n\n  __decorate([Property('DoesNotEquals')], Filter.prototype, \"condition\", void 0);\n\n  __decorate([Property()], Filter.prototype, \"value1\", void 0);\n\n  __decorate([Property()], Filter.prototype, \"value2\", void 0);\n\n  __decorate([Property()], Filter.prototype, \"measure\", void 0);\n\n  __decorate([Property(1)], Filter.prototype, \"levelCount\", void 0);\n\n  __decorate([Property()], Filter.prototype, \"selectedField\", void 0);\n\n  return Filter;\n}(ChildProperty);\n\nexport { Filter };\n/**\n * Allows a collection of values fields to change the appearance of the pivot table value cells with different style properties such as background color, font color, font family, and font size based on specific conditions.\n */\n\nvar ConditionalFormatSettings = function (_super) {\n  __extends(ConditionalFormatSettings, _super);\n\n  function ConditionalFormatSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], ConditionalFormatSettings.prototype, \"measure\", void 0);\n\n  __decorate([Property()], ConditionalFormatSettings.prototype, \"label\", void 0);\n\n  __decorate([Property()], ConditionalFormatSettings.prototype, \"conditions\", void 0);\n\n  __decorate([Property()], ConditionalFormatSettings.prototype, \"value1\", void 0);\n\n  __decorate([Property()], ConditionalFormatSettings.prototype, \"value2\", void 0);\n\n  __decorate([Property()], ConditionalFormatSettings.prototype, \"style\", void 0);\n\n  __decorate([Property(true)], ConditionalFormatSettings.prototype, \"applyGrandTotals\", void 0);\n\n  return ConditionalFormatSettings;\n}(ChildProperty);\n\nexport { ConditionalFormatSettings };\n/**\n * Allows specific fields associated with sort settings to order their members either in ascending or descending that used to be displayed in the pivot table.\n */\n\nvar Sort = function (_super) {\n  __extends(Sort, _super);\n\n  function Sort() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], Sort.prototype, \"name\", void 0);\n\n  __decorate([Property('Ascending')], Sort.prototype, \"order\", void 0);\n\n  return Sort;\n}(ChildProperty);\n\nexport { Sort };\n/**\n * Allows specific fields used to display the values with specific format that used to be displayed in the pivot table.\n * For example, to display a specific field with currency formatted values in the pivot table, the set the `format` property to be **C**.\n */\n\nvar FormatSettings = function (_super) {\n  __extends(FormatSettings, _super);\n\n  function FormatSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], FormatSettings.prototype, \"name\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"minimumFractionDigits\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"maximumFractionDigits\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"minimumSignificantDigits\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"maximumSignificantDigits\", void 0);\n\n  __decorate([Property(true)], FormatSettings.prototype, \"useGrouping\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"skeleton\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"type\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"currency\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"minimumIntegerDigits\", void 0);\n\n  __decorate([Property()], FormatSettings.prototype, \"format\", void 0);\n\n  return FormatSettings;\n}(ChildProperty);\n\nexport { FormatSettings };\n/**\n * Allows specific fields to group their data on the basis of their type.\n * For example, the date type fields can be formatted and displayed based on year, quarter, month, and more. Likewise, the number type fields can be grouped range-wise, such as 1-5, 6-10, etc.\n * You can perform custom group to the string type fields that used to displayed in the pivot table.\n */\n\nvar GroupSettings = function (_super) {\n  __extends(GroupSettings, _super);\n\n  function GroupSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], GroupSettings.prototype, \"name\", void 0);\n\n  __decorate([Property()], GroupSettings.prototype, \"groupInterval\", void 0);\n\n  __decorate([Property()], GroupSettings.prototype, \"startingAt\", void 0);\n\n  __decorate([Property()], GroupSettings.prototype, \"endingAt\", void 0);\n\n  __decorate([Property('Date')], GroupSettings.prototype, \"type\", void 0);\n\n  __decorate([Property()], GroupSettings.prototype, \"rangeInterval\", void 0);\n\n  __decorate([Property()], GroupSettings.prototype, \"caption\", void 0);\n\n  __decorate([Property()], GroupSettings.prototype, \"customGroups\", void 0);\n\n  return GroupSettings;\n}(ChildProperty);\n\nexport { GroupSettings };\n/**\n * Allows to specify the custom group information of specific field to create custom groups.\n */\n\nvar CustomGroups = function (_super) {\n  __extends(CustomGroups, _super);\n\n  function CustomGroups() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], CustomGroups.prototype, \"groupName\", void 0);\n\n  __decorate([Property([])], CustomGroups.prototype, \"items\", void 0);\n\n  return CustomGroups;\n}(ChildProperty);\n\nexport { CustomGroups };\n/**\n * Allows options to create new calculated fields from the bound data source or using simple formula with basic arithmetic operators in the pivot table.\n */\n\nvar CalculatedFieldSettings = function (_super) {\n  __extends(CalculatedFieldSettings, _super);\n\n  function CalculatedFieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], CalculatedFieldSettings.prototype, \"name\", void 0);\n\n  __decorate([Property()], CalculatedFieldSettings.prototype, \"formula\", void 0);\n\n  __decorate([Property()], CalculatedFieldSettings.prototype, \"hierarchyUniqueName\", void 0);\n\n  __decorate([Property()], CalculatedFieldSettings.prototype, \"formatString\", void 0);\n\n  return CalculatedFieldSettings;\n}(ChildProperty);\n\nexport { CalculatedFieldSettings };\n/**\n * Allows specific fields used to display their the headers to be either expanded or collapsed in the pivot table.\n */\n\nvar DrillOptions = function (_super) {\n  __extends(DrillOptions, _super);\n\n  function DrillOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], DrillOptions.prototype, \"name\", void 0);\n\n  __decorate([Property()], DrillOptions.prototype, \"items\", void 0);\n\n  __decorate([Property()], DrillOptions.prototype, \"delimiter\", void 0);\n\n  return DrillOptions;\n}(ChildProperty);\n\nexport { DrillOptions };\n/**\n * Allows to sort individual value field and its aggregated values either in row or column axis to ascending or descending order.\n */\n\nvar ValueSortSettings = function (_super) {\n  __extends(ValueSortSettings, _super);\n\n  function ValueSortSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], ValueSortSettings.prototype, \"headerText\", void 0);\n\n  __decorate([Property('.')], ValueSortSettings.prototype, \"headerDelimiter\", void 0);\n\n  __decorate([Property('None')], ValueSortSettings.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property()], ValueSortSettings.prototype, \"measure\", void 0);\n\n  return ValueSortSettings;\n}(ChildProperty);\n\nexport { ValueSortSettings };\n/**\n * Allows you to set the credential information to access the specified SSAS cube.\n * > It is applicable only for OLAP data source.\n */\n\nvar Authentication = function (_super) {\n  __extends(Authentication, _super);\n\n  function Authentication() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], Authentication.prototype, \"userName\", void 0);\n\n  __decorate([Property()], Authentication.prototype, \"password\", void 0);\n\n  return Authentication;\n}(ChildProperty);\n\nexport { Authentication };\n/**\n * Allows the following pivot report information such as rows, columns, values, filters, etc., that are used to render the pivot table and field list.\n * * `catalog`: Allows to set the database name of SSAS cube as string type that used to retrieve the data from the specified connection string. **Note: It is applicable only for OLAP data source.**\n * * `cube`: Allows you to set the SSAS cube name as string type that used to retrieve data for pivot table rendering. **Note: It is applicable only for OLAP data source.**\n * * `providerType`: Allows to set the provider type to identify the given connection is either Relational or SSAS to render the pivot table and field list.\n * * `url`: Allows to set the URL as string type, which helps to identify the service endpoint where the data are processed and retrieved to render the pivot table and field list. **Note: It is applicable only for OLAP data source.**\n * * `localeIdentifier`: Allows you to set the specific culture code as number type to render pivot table with desired localization.\n * By default, the pivot table displays with culture code **1033**, which indicates \"en-US\" locale. **Note: It is applicale only for OLAP data source.**\n * * `dataSource`: Allows you to set the data source as JSON collection to the pivot report either from local or from remote server to the render the pivot that and field list.\n * You can fetch JSON data from remote server by using DataManager. **Note: It is applicable only for relational data source.**\n * * `rows`: Allows specific fields associated with field information that needs to be displayed in row axis of pivot table.\n * * `columns`: Allows specific fields associated with field information that needs to be displayed in column axis of pivot table.\n * * `values`: Allows specific fields associated with field information that needs to be displayed as aggregated numeric values in pivot table.\n * * `filters`: Allows to filter the values in other axis based on the collection of filter fields in pivot table.\n * * `excludeFields`: Allows you to restrict the specific field(s) from displaying it in the field list UI.\n * You may also be unable to render the pivot table with this field(s) by doing so. **Note: It is applicable only for relational data source.**\n * * `expandAll`: Allows you to either expand or collapse all the headers that are displayed in the pivot table.\n * By default, all the headers are collapsed in the pivot table. **Note: It is applicable only for Relational data.**\n * * `valueAxis`: Allows you to set the value fields that to be plotted either in row or column axis in the pivot table.\n * * `filterSettings`: Allows specific fields associated with either selective or conditional-based filter members that used to be displayed in the pivot table.\n * * `sortSettings`: Allows specific fields associated with sort settings to order their members either in ascending or descending that used to be displayed in the pivot table.\n * By default, the data source containing fields are display with Ascending order alone. To use this option, it requires the `enableSorting` property to be **true**.\n * * `enableSorting`: Allows to perform sort operation to order members of a specific fields either in ascending or descending that used to be displayed in the pivot table.\n * * `formatSettings`: Allows specific fields used to display the values with specific format that used to be displayed in the pivot table.\n * For example, to display a specific field with currency formatted values in the pivot table, the set the `format` property to be **C**.\n * * `drilledMembers`: Allows specific fields used to display their the headers to be either expanded or collapsed in the pivot table.\n * * `valueSortSettings`: Allows to sort individual value field and its aggregated values either in row or column axis to ascending or descending order.\n * * `calculatedFieldSettings`: Allows to create new calculated fields from the bound data source or using simple formula with basic arithmetic operators in the pivot table.\n * * `allowMemberFilter`: Allows to perform filter operation based on the selective filter members of the specific fields used to be displayed in the pivot table.\n * * `allowLabelFilter`: Allows to perform filter operation based on the selective headers used to be displayed in the pivot table.\n * * `allowValueFilter`: Allows to perform filter operation based only on value fields and its resultant aggregated values over other fields defined in row and column axes that used to be displayed in the pivot table.\n * * `showSubTotals`: Allows to show or hide sub-totals in both rows and columns axis of the pivot table.\n * * `showRowSubTotals`: Allows to show or hide sub-totals in row axis of the pivot table.\n * * `showColumnSubTotals`: Allows to show or hide sub-totals in column axis of the pivot table.\n * * `showGrandTotals`: Allows to show or hide grand totals in both rows and columns axis of the pivot table.\n * * `showRowGrandTotals`: Allows to show or hide grand totals in row axis of the pivot table.\n * * `showColumnGrandTotals`: Allows to show or hide grand totals in column axis of the pivot table.\n * * `showHeaderWhenEmpty`: Allows the undefined headers to be displayed in the pivot table, when the specific field(s) are not defined in the raw data.\n * For example, if the raw data for the field ‘Country’ is defined as “United Kingdom” and “State” is not defined means, it will be shown as “United Kingdom >> Undefined” in the header section.\n * * `alwaysShowValueHeader`: Allows to show the value field header always in pivot table, even if it holds a single field in the value field axis.\n * * `conditionalFormatSettings`: Allows a collection of values fields to change the appearance of the pivot table value cells with different style properties such as background color, font color, font family, and font size based on specific conditions.\n * * `emptyCellsTextContent`: Allows to show custom string to the empty value cells that used to display in the pivot table. You can fill empty value cells with any value like “0”, ”-”, ”*”, “(blank)”, etc.\n * * `groupSettings`: Allows specific fields to group their data on the basis of their type.\n * For example, the date type fields can be formatted and displayed based on year, quarter, month, and more. Likewise, the number type fields can be grouped range-wise, such as 1-5, 6-10, etc.\n * You can perform custom group to the string type fields that used to displayed in the pivot table.\n * * `showAggregationOnValueField`: Allows the pivot button with specific value field caption along with the aggregation type, to be displayed in the grouping bar and field list UI.\n * For example, if the value field \"Sold Amount\" is aggregated with Sum, it will be displayed with caption \"Sum of Sold Amount\" in its pivot button.\n * * `authentication`: Allows you to set the credential information to access the specified SSAS cube. **Note: It is applicable only for OLAP data source**.\n */\n\nvar DataSourceSettings = function (_super) {\n  __extends(DataSourceSettings, _super);\n\n  function DataSourceSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('Local')], DataSourceSettings.prototype, \"mode\", void 0);\n\n  __decorate([Property()], DataSourceSettings.prototype, \"catalog\", void 0);\n\n  __decorate([Property()], DataSourceSettings.prototype, \"cube\", void 0);\n\n  __decorate([Property('Relational')], DataSourceSettings.prototype, \"providerType\", void 0);\n\n  __decorate([Property()], DataSourceSettings.prototype, \"url\", void 0);\n\n  __decorate([Property(1033)], DataSourceSettings.prototype, \"localeIdentifier\", void 0);\n\n  __decorate([Property()], DataSourceSettings.prototype, \"dataSource\", void 0);\n\n  __decorate([Collection([], FieldOptions)], DataSourceSettings.prototype, \"rows\", void 0);\n\n  __decorate([Collection([], FieldOptions)], DataSourceSettings.prototype, \"columns\", void 0);\n\n  __decorate([Collection([], FieldOptions)], DataSourceSettings.prototype, \"values\", void 0);\n\n  __decorate([Collection([], FieldOptions)], DataSourceSettings.prototype, \"filters\", void 0);\n\n  __decorate([Collection([], FieldOptions)], DataSourceSettings.prototype, \"fieldMapping\", void 0);\n\n  __decorate([Property([])], DataSourceSettings.prototype, \"excludeFields\", void 0);\n\n  __decorate([Property(false)], DataSourceSettings.prototype, \"expandAll\", void 0);\n\n  __decorate([Property('column')], DataSourceSettings.prototype, \"valueAxis\", void 0);\n\n  __decorate([Collection([], Filter)], DataSourceSettings.prototype, \"filterSettings\", void 0);\n\n  __decorate([Collection([], Sort)], DataSourceSettings.prototype, \"sortSettings\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"enableSorting\", void 0);\n\n  __decorate([Property('JSON')], DataSourceSettings.prototype, \"type\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"allowMemberFilter\", void 0);\n\n  __decorate([Property(false)], DataSourceSettings.prototype, \"allowLabelFilter\", void 0);\n\n  __decorate([Property(false)], DataSourceSettings.prototype, \"allowValueFilter\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showSubTotals\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showRowSubTotals\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showColumnSubTotals\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showGrandTotals\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showRowGrandTotals\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showColumnGrandTotals\", void 0);\n\n  __decorate([Property(false)], DataSourceSettings.prototype, \"alwaysShowValueHeader\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showHeaderWhenEmpty\", void 0);\n\n  __decorate([Property(true)], DataSourceSettings.prototype, \"showAggregationOnValueField\", void 0);\n\n  __decorate([Collection([], FormatSettings)], DataSourceSettings.prototype, \"formatSettings\", void 0);\n\n  __decorate([Collection([], DrillOptions)], DataSourceSettings.prototype, \"drilledMembers\", void 0);\n\n  __decorate([Complex({}, ValueSortSettings)], DataSourceSettings.prototype, \"valueSortSettings\", void 0);\n\n  __decorate([Collection([], CalculatedFieldSettings)], DataSourceSettings.prototype, \"calculatedFieldSettings\", void 0);\n\n  __decorate([Collection([], ConditionalFormatSettings)], DataSourceSettings.prototype, \"conditionalFormatSettings\", void 0);\n\n  __decorate([Property()], DataSourceSettings.prototype, \"emptyCellsTextContent\", void 0);\n\n  __decorate([Collection([], GroupSettings)], DataSourceSettings.prototype, \"groupSettings\", void 0);\n\n  __decorate([Complex({}, Authentication)], DataSourceSettings.prototype, \"authentication\", void 0);\n\n  return DataSourceSettings;\n}(ChildProperty);\n\nexport { DataSourceSettings };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/pivotview/model/datasourcesettings.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","Complex","Collection","ChildProperty","FieldOptions","_super","apply","FieldListFieldOptions","Style","Filter","ConditionalFormatSettings","Sort","FormatSettings","GroupSettings","CustomGroups","CalculatedFieldSettings","DrillOptions","ValueSortSettings","Authentication","DataSourceSettings"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, Complex, Collection, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Allows specific fields associated with field information that needs to be displayed in the field axes of pivot table. The following configurations which are applicable are as follows:\n * * `name`: Allows you to set the field name that needs to be displayed in row/column/value/filter axis of pivot table.\n * * `caption`: Allows you to set caption to the specific field. It will be used to display instead of its name in pivot table component's UI.\n * * `type`: Allows to display the values in the pivot table with appropriate aggregations such as sum, product, count, average, etc… **Note: It is applicable only for relational data source.**\n * * `axis`: Allows you to set the axis name to the specific field. This will help to display the field in specified axis such as row/column/value/filter axis of pivot table.\n * * `showNoDataItems`: Allows you to display all members items of a specific field to the pivot table,\n * even doesn't have any data in its row/column intersection in data source. **Note: It is applicable only for relational data source.**\n * * `baseField`: Allows you to set the selective field, which used to display the values with either\n *  DifferenceFrom or PercentageOfDifferenceFrom or PercentageOfParentTotal aggregate types. **Note: It is applicable only for relational data source.**\n * * `baseItem`: Allows you to set the selective item of a specific field, which used to display the values with either DifferenceFrom or PercentageOfDifferenceFrom aggregate types.\n * The selective item should be set the from field specified in the baseField property. **Note: It is applicable only for relational data source.**\n * * `showSubTotals`: Allows to show or hide sub-totals to a specific field in row/column axis of the pivot table.\n * * `isNamedSet`: Allows you to set whether the specified field is a named set or not. In general,\n * the named set is a set of dimension members or a set expression (MDX query) to be created as a dimension in the SSAS OLAP cube itself. **Note: It is applicable only for OLAP data source.**\n * * `isCalculatedField`: Allows to set whether the specified field is a calculated field or not.\n * In general, the calculated field is created from the bound data source or using simple formula with basic arithmetic operators in the pivot table. **Note: It is applicable only for OLAP data source.**\n * * `showFilterIcon`: Allows you to show or hide the filter icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This filter icon is used to filter the members of a specified field at runtime in the pivot table.\n * * `showSortIcon`: Allows you to show or hide the sort icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This sort icon is used to order members of a specified field either in ascending or descending at runtime.\n * * `showRemoveIcon`: Allows you to show or hide the remove icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This remove icon is used to remove the specified field during runtime.\n * * `showValueTypeIcon`: Allows you to show or hide the value type icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This value type icon helps to select the appropriate aggregation type to specified value field at runtime.\n * * `showEditIcon`: Allows you to show or hide the edit icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This edit icon is used to modify caption, formula, and format of a specified calculated field at runtime that to be displayed in the pivot table.\n * * `allowDragAndDrop`: Allows you to restrict the specific field's pivot button that is used to drag on runtime in the grouping bar and field list UI.\n * This will prevent you from modifying the current report.\n */\nvar FieldOptions = /** @class */ (function (_super) {\n    __extends(FieldOptions, _super);\n    function FieldOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], FieldOptions.prototype, \"name\", void 0);\n    __decorate([\n        Property()\n    ], FieldOptions.prototype, \"caption\", void 0);\n    __decorate([\n        Property('Sum')\n    ], FieldOptions.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], FieldOptions.prototype, \"axis\", void 0);\n    __decorate([\n        Property(false)\n    ], FieldOptions.prototype, \"showNoDataItems\", void 0);\n    __decorate([\n        Property()\n    ], FieldOptions.prototype, \"baseField\", void 0);\n    __decorate([\n        Property()\n    ], FieldOptions.prototype, \"baseItem\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"showSubTotals\", void 0);\n    __decorate([\n        Property(false)\n    ], FieldOptions.prototype, \"isNamedSet\", void 0);\n    __decorate([\n        Property(false)\n    ], FieldOptions.prototype, \"isCalculatedField\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"showFilterIcon\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"showSortIcon\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"showRemoveIcon\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"showValueTypeIcon\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"showEditIcon\", void 0);\n    __decorate([\n        Property(true)\n    ], FieldOptions.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        Property()\n    ], FieldOptions.prototype, \"dataType\", void 0);\n    return FieldOptions;\n}(ChildProperty));\nexport { FieldOptions };\n/**\n * Allows specific fields associated with field information that needs to be displayed in the field axes of pivot table. The following configurations which are applicable are as follows:\n * * `name`: Allows you to set the field name that needs to be displayed in row/column/value/filter axis of pivot table.\n * * `caption`: Allows you to set caption to the specific field. It will be used to display instead of its name in pivot table component's UI.\n * * `type`: Allows to display the values in the pivot table with appropriate aggregations such as sum, product, count, average, etc… **Note: It is applicable only for relational data source.**\n * * `axis`: Allows you to set the axis name to the specific field. This will help to display the field in specified axis such as row/column/value/filter axis of pivot table.\n * * `showNoDataItems`: Allows you to display all members items of a specific field to the pivot table,\n * even doesn't have any data in its row/column intersection in data source. **Note: It is applicable only for relational data source.**\n * * `baseField`: Allows you to set the selective field, which used to display the values with either\n *  DifferenceFrom or PercentageOfDifferenceFrom or PercentageOfParentTotal aggregate types. **Note: It is applicable only for relational data source.**\n * * `baseItem`: Allows you to set the selective item of a specific field, which used to display the values with either DifferenceFrom or PercentageOfDifferenceFrom aggregate types.\n * The selective item should be set the from field specified in the baseField property. **Note: It is applicable only for relational data source.**\n * * `showSubTotals`: Allows to show or hide sub-totals to a specific field in row/column axis of the pivot table.\n * * `isNamedSet`: Allows you to set whether the specified field is a named set or not. In general,\n * the named set is a set of dimension members or a set expression (MDX query) to be created as a dimension in the SSAS OLAP cube itself. **Note: It is applicable only for OLAP data source.**\n * * `isCalculatedField`: Allows to set whether the specified field is a calculated field or not.\n * In general, the calculated field is created from the bound data source or using simple formula with basic arithmetic operators in the pivot table. **Note: It is applicable only for OLAP data source.**\n * * `showFilterIcon`: Allows you to show or hide the filter icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This filter icon is used to filter the members of a specified field at runtime in the pivot table.\n * * `showSortIcon`: Allows you to show or hide the sort icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This sort icon is used to order members of a specified field either in ascending or descending at runtime.\n * * `showRemoveIcon`: Allows you to show or hide the remove icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This remove icon is used to remove the specified field during runtime.\n * * `showValueTypeIcon`: Allows you to show or hide the value type icon of a specific field that used to be displayed in the pivot button of the grouping bar and field list UI.\n * This value type icon helps to select the appropriate aggregation type to specified value field at runtime.\n * * `showEditIcon`: Allows you to show or hide the edit icon of a specific field that used to be displayed on the pivot button of the grouping bar and field list UI.\n * This edit icon is used to modify caption, formula, and format of a specified calculated field at runtime that to be displayed in the pivot table.\n * * `allowDragAndDrop`: Allows you to restrict the specific field's pivot button that is used to drag on runtime in the grouping bar and field list UI.\n * This will prevent you from modifying the current report.\n */\nvar FieldListFieldOptions = /** @class */ (function (_super) {\n    __extends(FieldListFieldOptions, _super);\n    function FieldListFieldOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return FieldListFieldOptions;\n}(FieldOptions));\nexport { FieldListFieldOptions };\n/**\n * Allows the style information to cusotmize the pivot table cell apprearance.\n */\nvar Style = /** @class */ (function (_super) {\n    __extends(Style, _super);\n    function Style() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], Style.prototype, \"backgroundColor\", void 0);\n    __decorate([\n        Property()\n    ], Style.prototype, \"color\", void 0);\n    __decorate([\n        Property()\n    ], Style.prototype, \"fontFamily\", void 0);\n    __decorate([\n        Property()\n    ], Style.prototype, \"fontSize\", void 0);\n    return Style;\n}(ChildProperty));\nexport { Style };\n/**\n * Allows specific fields associated with either selective or conditional-based filter members that used to be displayed in the pivot table.\n */\nvar Filter = /** @class */ (function (_super) {\n    __extends(Filter, _super);\n    function Filter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], Filter.prototype, \"name\", void 0);\n    __decorate([\n        Property('Include')\n    ], Filter.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], Filter.prototype, \"items\", void 0);\n    __decorate([\n        Property('DoesNotEquals')\n    ], Filter.prototype, \"condition\", void 0);\n    __decorate([\n        Property()\n    ], Filter.prototype, \"value1\", void 0);\n    __decorate([\n        Property()\n    ], Filter.prototype, \"value2\", void 0);\n    __decorate([\n        Property()\n    ], Filter.prototype, \"measure\", void 0);\n    __decorate([\n        Property(1)\n    ], Filter.prototype, \"levelCount\", void 0);\n    __decorate([\n        Property()\n    ], Filter.prototype, \"selectedField\", void 0);\n    return Filter;\n}(ChildProperty));\nexport { Filter };\n/**\n * Allows a collection of values fields to change the appearance of the pivot table value cells with different style properties such as background color, font color, font family, and font size based on specific conditions.\n */\nvar ConditionalFormatSettings = /** @class */ (function (_super) {\n    __extends(ConditionalFormatSettings, _super);\n    function ConditionalFormatSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], ConditionalFormatSettings.prototype, \"measure\", void 0);\n    __decorate([\n        Property()\n    ], ConditionalFormatSettings.prototype, \"label\", void 0);\n    __decorate([\n        Property()\n    ], ConditionalFormatSettings.prototype, \"conditions\", void 0);\n    __decorate([\n        Property()\n    ], ConditionalFormatSettings.prototype, \"value1\", void 0);\n    __decorate([\n        Property()\n    ], ConditionalFormatSettings.prototype, \"value2\", void 0);\n    __decorate([\n        Property()\n    ], ConditionalFormatSettings.prototype, \"style\", void 0);\n    __decorate([\n        Property(true)\n    ], ConditionalFormatSettings.prototype, \"applyGrandTotals\", void 0);\n    return ConditionalFormatSettings;\n}(ChildProperty));\nexport { ConditionalFormatSettings };\n/**\n * Allows specific fields associated with sort settings to order their members either in ascending or descending that used to be displayed in the pivot table.\n */\nvar Sort = /** @class */ (function (_super) {\n    __extends(Sort, _super);\n    function Sort() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], Sort.prototype, \"name\", void 0);\n    __decorate([\n        Property('Ascending')\n    ], Sort.prototype, \"order\", void 0);\n    return Sort;\n}(ChildProperty));\nexport { Sort };\n/**\n * Allows specific fields used to display the values with specific format that used to be displayed in the pivot table.\n * For example, to display a specific field with currency formatted values in the pivot table, the set the `format` property to be **C**.\n */\nvar FormatSettings = /** @class */ (function (_super) {\n    __extends(FormatSettings, _super);\n    function FormatSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"minimumFractionDigits\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"maximumFractionDigits\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"minimumSignificantDigits\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"maximumSignificantDigits\", void 0);\n    __decorate([\n        Property(true)\n    ], FormatSettings.prototype, \"useGrouping\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"skeleton\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"currency\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"minimumIntegerDigits\", void 0);\n    __decorate([\n        Property()\n    ], FormatSettings.prototype, \"format\", void 0);\n    return FormatSettings;\n}(ChildProperty));\nexport { FormatSettings };\n/**\n * Allows specific fields to group their data on the basis of their type.\n * For example, the date type fields can be formatted and displayed based on year, quarter, month, and more. Likewise, the number type fields can be grouped range-wise, such as 1-5, 6-10, etc.\n * You can perform custom group to the string type fields that used to displayed in the pivot table.\n */\nvar GroupSettings = /** @class */ (function (_super) {\n    __extends(GroupSettings, _super);\n    function GroupSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"groupInterval\", void 0);\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"startingAt\", void 0);\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"endingAt\", void 0);\n    __decorate([\n        Property('Date')\n    ], GroupSettings.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"rangeInterval\", void 0);\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"caption\", void 0);\n    __decorate([\n        Property()\n    ], GroupSettings.prototype, \"customGroups\", void 0);\n    return GroupSettings;\n}(ChildProperty));\nexport { GroupSettings };\n/**\n * Allows to specify the custom group information of specific field to create custom groups.\n */\nvar CustomGroups = /** @class */ (function (_super) {\n    __extends(CustomGroups, _super);\n    function CustomGroups() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], CustomGroups.prototype, \"groupName\", void 0);\n    __decorate([\n        Property([])\n    ], CustomGroups.prototype, \"items\", void 0);\n    return CustomGroups;\n}(ChildProperty));\nexport { CustomGroups };\n/**\n * Allows options to create new calculated fields from the bound data source or using simple formula with basic arithmetic operators in the pivot table.\n */\nvar CalculatedFieldSettings = /** @class */ (function (_super) {\n    __extends(CalculatedFieldSettings, _super);\n    function CalculatedFieldSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], CalculatedFieldSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property()\n    ], CalculatedFieldSettings.prototype, \"formula\", void 0);\n    __decorate([\n        Property()\n    ], CalculatedFieldSettings.prototype, \"hierarchyUniqueName\", void 0);\n    __decorate([\n        Property()\n    ], CalculatedFieldSettings.prototype, \"formatString\", void 0);\n    return CalculatedFieldSettings;\n}(ChildProperty));\nexport { CalculatedFieldSettings };\n/**\n * Allows specific fields used to display their the headers to be either expanded or collapsed in the pivot table.\n */\nvar DrillOptions = /** @class */ (function (_super) {\n    __extends(DrillOptions, _super);\n    function DrillOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], DrillOptions.prototype, \"name\", void 0);\n    __decorate([\n        Property()\n    ], DrillOptions.prototype, \"items\", void 0);\n    __decorate([\n        Property()\n    ], DrillOptions.prototype, \"delimiter\", void 0);\n    return DrillOptions;\n}(ChildProperty));\nexport { DrillOptions };\n/**\n * Allows to sort individual value field and its aggregated values either in row or column axis to ascending or descending order.\n */\nvar ValueSortSettings = /** @class */ (function (_super) {\n    __extends(ValueSortSettings, _super);\n    function ValueSortSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], ValueSortSettings.prototype, \"headerText\", void 0);\n    __decorate([\n        Property('.')\n    ], ValueSortSettings.prototype, \"headerDelimiter\", void 0);\n    __decorate([\n        Property('None')\n    ], ValueSortSettings.prototype, \"sortOrder\", void 0);\n    __decorate([\n        Property()\n    ], ValueSortSettings.prototype, \"measure\", void 0);\n    return ValueSortSettings;\n}(ChildProperty));\nexport { ValueSortSettings };\n/**\n * Allows you to set the credential information to access the specified SSAS cube.\n * > It is applicable only for OLAP data source.\n */\nvar Authentication = /** @class */ (function (_super) {\n    __extends(Authentication, _super);\n    function Authentication() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], Authentication.prototype, \"userName\", void 0);\n    __decorate([\n        Property()\n    ], Authentication.prototype, \"password\", void 0);\n    return Authentication;\n}(ChildProperty));\nexport { Authentication };\n/**\n * Allows the following pivot report information such as rows, columns, values, filters, etc., that are used to render the pivot table and field list.\n * * `catalog`: Allows to set the database name of SSAS cube as string type that used to retrieve the data from the specified connection string. **Note: It is applicable only for OLAP data source.**\n * * `cube`: Allows you to set the SSAS cube name as string type that used to retrieve data for pivot table rendering. **Note: It is applicable only for OLAP data source.**\n * * `providerType`: Allows to set the provider type to identify the given connection is either Relational or SSAS to render the pivot table and field list.\n * * `url`: Allows to set the URL as string type, which helps to identify the service endpoint where the data are processed and retrieved to render the pivot table and field list. **Note: It is applicable only for OLAP data source.**\n * * `localeIdentifier`: Allows you to set the specific culture code as number type to render pivot table with desired localization.\n * By default, the pivot table displays with culture code **1033**, which indicates \"en-US\" locale. **Note: It is applicale only for OLAP data source.**\n * * `dataSource`: Allows you to set the data source as JSON collection to the pivot report either from local or from remote server to the render the pivot that and field list.\n * You can fetch JSON data from remote server by using DataManager. **Note: It is applicable only for relational data source.**\n * * `rows`: Allows specific fields associated with field information that needs to be displayed in row axis of pivot table.\n * * `columns`: Allows specific fields associated with field information that needs to be displayed in column axis of pivot table.\n * * `values`: Allows specific fields associated with field information that needs to be displayed as aggregated numeric values in pivot table.\n * * `filters`: Allows to filter the values in other axis based on the collection of filter fields in pivot table.\n * * `excludeFields`: Allows you to restrict the specific field(s) from displaying it in the field list UI.\n * You may also be unable to render the pivot table with this field(s) by doing so. **Note: It is applicable only for relational data source.**\n * * `expandAll`: Allows you to either expand or collapse all the headers that are displayed in the pivot table.\n * By default, all the headers are collapsed in the pivot table. **Note: It is applicable only for Relational data.**\n * * `valueAxis`: Allows you to set the value fields that to be plotted either in row or column axis in the pivot table.\n * * `filterSettings`: Allows specific fields associated with either selective or conditional-based filter members that used to be displayed in the pivot table.\n * * `sortSettings`: Allows specific fields associated with sort settings to order their members either in ascending or descending that used to be displayed in the pivot table.\n * By default, the data source containing fields are display with Ascending order alone. To use this option, it requires the `enableSorting` property to be **true**.\n * * `enableSorting`: Allows to perform sort operation to order members of a specific fields either in ascending or descending that used to be displayed in the pivot table.\n * * `formatSettings`: Allows specific fields used to display the values with specific format that used to be displayed in the pivot table.\n * For example, to display a specific field with currency formatted values in the pivot table, the set the `format` property to be **C**.\n * * `drilledMembers`: Allows specific fields used to display their the headers to be either expanded or collapsed in the pivot table.\n * * `valueSortSettings`: Allows to sort individual value field and its aggregated values either in row or column axis to ascending or descending order.\n * * `calculatedFieldSettings`: Allows to create new calculated fields from the bound data source or using simple formula with basic arithmetic operators in the pivot table.\n * * `allowMemberFilter`: Allows to perform filter operation based on the selective filter members of the specific fields used to be displayed in the pivot table.\n * * `allowLabelFilter`: Allows to perform filter operation based on the selective headers used to be displayed in the pivot table.\n * * `allowValueFilter`: Allows to perform filter operation based only on value fields and its resultant aggregated values over other fields defined in row and column axes that used to be displayed in the pivot table.\n * * `showSubTotals`: Allows to show or hide sub-totals in both rows and columns axis of the pivot table.\n * * `showRowSubTotals`: Allows to show or hide sub-totals in row axis of the pivot table.\n * * `showColumnSubTotals`: Allows to show or hide sub-totals in column axis of the pivot table.\n * * `showGrandTotals`: Allows to show or hide grand totals in both rows and columns axis of the pivot table.\n * * `showRowGrandTotals`: Allows to show or hide grand totals in row axis of the pivot table.\n * * `showColumnGrandTotals`: Allows to show or hide grand totals in column axis of the pivot table.\n * * `showHeaderWhenEmpty`: Allows the undefined headers to be displayed in the pivot table, when the specific field(s) are not defined in the raw data.\n * For example, if the raw data for the field ‘Country’ is defined as “United Kingdom” and “State” is not defined means, it will be shown as “United Kingdom >> Undefined” in the header section.\n * * `alwaysShowValueHeader`: Allows to show the value field header always in pivot table, even if it holds a single field in the value field axis.\n * * `conditionalFormatSettings`: Allows a collection of values fields to change the appearance of the pivot table value cells with different style properties such as background color, font color, font family, and font size based on specific conditions.\n * * `emptyCellsTextContent`: Allows to show custom string to the empty value cells that used to display in the pivot table. You can fill empty value cells with any value like “0”, ”-”, ”*”, “(blank)”, etc.\n * * `groupSettings`: Allows specific fields to group their data on the basis of their type.\n * For example, the date type fields can be formatted and displayed based on year, quarter, month, and more. Likewise, the number type fields can be grouped range-wise, such as 1-5, 6-10, etc.\n * You can perform custom group to the string type fields that used to displayed in the pivot table.\n * * `showAggregationOnValueField`: Allows the pivot button with specific value field caption along with the aggregation type, to be displayed in the grouping bar and field list UI.\n * For example, if the value field \"Sold Amount\" is aggregated with Sum, it will be displayed with caption \"Sum of Sold Amount\" in its pivot button.\n * * `authentication`: Allows you to set the credential information to access the specified SSAS cube. **Note: It is applicable only for OLAP data source**.\n */\nvar DataSourceSettings = /** @class */ (function (_super) {\n    __extends(DataSourceSettings, _super);\n    function DataSourceSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('Local')\n    ], DataSourceSettings.prototype, \"mode\", void 0);\n    __decorate([\n        Property()\n    ], DataSourceSettings.prototype, \"catalog\", void 0);\n    __decorate([\n        Property()\n    ], DataSourceSettings.prototype, \"cube\", void 0);\n    __decorate([\n        Property('Relational')\n    ], DataSourceSettings.prototype, \"providerType\", void 0);\n    __decorate([\n        Property()\n    ], DataSourceSettings.prototype, \"url\", void 0);\n    __decorate([\n        Property(1033)\n    ], DataSourceSettings.prototype, \"localeIdentifier\", void 0);\n    __decorate([\n        Property()\n    ], DataSourceSettings.prototype, \"dataSource\", void 0);\n    __decorate([\n        Collection([], FieldOptions)\n    ], DataSourceSettings.prototype, \"rows\", void 0);\n    __decorate([\n        Collection([], FieldOptions)\n    ], DataSourceSettings.prototype, \"columns\", void 0);\n    __decorate([\n        Collection([], FieldOptions)\n    ], DataSourceSettings.prototype, \"values\", void 0);\n    __decorate([\n        Collection([], FieldOptions)\n    ], DataSourceSettings.prototype, \"filters\", void 0);\n    __decorate([\n        Collection([], FieldOptions)\n    ], DataSourceSettings.prototype, \"fieldMapping\", void 0);\n    __decorate([\n        Property([])\n    ], DataSourceSettings.prototype, \"excludeFields\", void 0);\n    __decorate([\n        Property(false)\n    ], DataSourceSettings.prototype, \"expandAll\", void 0);\n    __decorate([\n        Property('column')\n    ], DataSourceSettings.prototype, \"valueAxis\", void 0);\n    __decorate([\n        Collection([], Filter)\n    ], DataSourceSettings.prototype, \"filterSettings\", void 0);\n    __decorate([\n        Collection([], Sort)\n    ], DataSourceSettings.prototype, \"sortSettings\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"enableSorting\", void 0);\n    __decorate([\n        Property('JSON')\n    ], DataSourceSettings.prototype, \"type\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"allowMemberFilter\", void 0);\n    __decorate([\n        Property(false)\n    ], DataSourceSettings.prototype, \"allowLabelFilter\", void 0);\n    __decorate([\n        Property(false)\n    ], DataSourceSettings.prototype, \"allowValueFilter\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showSubTotals\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showRowSubTotals\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showColumnSubTotals\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showGrandTotals\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showRowGrandTotals\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showColumnGrandTotals\", void 0);\n    __decorate([\n        Property(false)\n    ], DataSourceSettings.prototype, \"alwaysShowValueHeader\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showHeaderWhenEmpty\", void 0);\n    __decorate([\n        Property(true)\n    ], DataSourceSettings.prototype, \"showAggregationOnValueField\", void 0);\n    __decorate([\n        Collection([], FormatSettings)\n    ], DataSourceSettings.prototype, \"formatSettings\", void 0);\n    __decorate([\n        Collection([], DrillOptions)\n    ], DataSourceSettings.prototype, \"drilledMembers\", void 0);\n    __decorate([\n        Complex({}, ValueSortSettings)\n    ], DataSourceSettings.prototype, \"valueSortSettings\", void 0);\n    __decorate([\n        Collection([], CalculatedFieldSettings)\n    ], DataSourceSettings.prototype, \"calculatedFieldSettings\", void 0);\n    __decorate([\n        Collection([], ConditionalFormatSettings)\n    ], DataSourceSettings.prototype, \"conditionalFormatSettings\", void 0);\n    __decorate([\n        Property()\n    ], DataSourceSettings.prototype, \"emptyCellsTextContent\", void 0);\n    __decorate([\n        Collection([], GroupSettings)\n    ], DataSourceSettings.prototype, \"groupSettings\", void 0);\n    __decorate([\n        Complex({}, Authentication)\n    ], DataSourceSettings.prototype, \"authentication\", void 0);\n    return DataSourceSettings;\n}(ChildProperty));\nexport { DataSourceSettings };\n"]},"metadata":{},"sourceType":"module"}