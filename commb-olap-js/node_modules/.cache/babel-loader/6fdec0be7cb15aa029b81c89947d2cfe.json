{"ast":null,"code":"import { measureText } from '../../smithchart/utils/helper';\n\nvar AreaBounds = function () {\n  function AreaBounds() {}\n\n  AreaBounds.prototype.calculateAreaBounds = function (smithchart, title, bounds) {\n    var margin = smithchart.margin;\n    var border = smithchart.border;\n    var spaceValue = this.getLegendSpace(smithchart, bounds);\n    var x = spaceValue['leftLegendWidth'] + margin.left + border.width;\n    var rightSpace = spaceValue['rightLegendWidth'] + margin.left + margin.right + 2 * border.width;\n    var width = smithchart.availableSize['width'] - (x + rightSpace);\n    var y = margin['top'] + 2 * smithchart.elementSpacing + spaceValue['modelTitleHeight'] + spaceValue['modelsubTitleHeight'] + spaceValue['topLegendHeight'] + border.width;\n    var height = smithchart.availableSize['height'] - (spaceValue['modelTitleHeight'] + 2 * smithchart.elementSpacing + spaceValue['modelsubTitleHeight'] + margin['top'] + spaceValue['topLegendHeight'] + spaceValue['bottomLegendHeight']);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  };\n\n  AreaBounds.prototype.getLegendSpace = function (smithchart, bounds) {\n    var title = smithchart.title;\n    var legend = smithchart.legendSettings;\n    var position = legend.position.toLowerCase();\n    var subtitleHeight = 0;\n    var modelsubTitleHeight = 0;\n    var titleHeight = 0;\n    var font = smithchart.font;\n    var modelTitleHeight = 0;\n    var itemPadding = 10;\n    var legendBorder = legend.border.width;\n    var leftLegendWidth = 0;\n    var rightLegendWidth = 0;\n    var topLegendHeight = 0;\n    var bottomLegendHeight = 0;\n    var ltheight = 0;\n    var space;\n\n    if (legend['visible']) {\n      space = bounds.width + itemPadding / 2 + smithchart.elementSpacing + 2 * legendBorder;\n      leftLegendWidth = position === 'left' ? space : 0;\n      rightLegendWidth = position === 'right' ? space : 0;\n      ltheight = legend['title'].visible ? measureText(legend['title'].text, font)['height'] : 0;\n      topLegendHeight = position === 'top' ? smithchart.elementSpacing + bounds.height + ltheight : 0;\n      bottomLegendHeight = position === 'bottom' ? smithchart.elementSpacing + bounds.height + ltheight : 0;\n    }\n\n    subtitleHeight = measureText(title.subtitle.text, font)['height'];\n    modelTitleHeight = title.text === '' || !title['visible'] ? 0 : titleHeight;\n    modelsubTitleHeight = title['subtitle'].text === '' || !title['subtitle'].visible ? 0 : subtitleHeight;\n    return {\n      leftLegendWidth: leftLegendWidth,\n      rightLegendWidth: rightLegendWidth,\n      topLegendHeight: topLegendHeight,\n      bottomLegendHeight: bottomLegendHeight,\n      modelTitleHeight: modelTitleHeight,\n      modelsubTitleHeight: modelsubTitleHeight\n    };\n  };\n\n  return AreaBounds;\n}();\n\nexport { AreaBounds };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-charts/src/smithchart/utils/area.js"],"names":["measureText","AreaBounds","prototype","calculateAreaBounds","smithchart","title","bounds","margin","border","spaceValue","getLegendSpace","x","left","width","rightSpace","right","availableSize","y","elementSpacing","height","legend","legendSettings","position","toLowerCase","subtitleHeight","modelsubTitleHeight","titleHeight","font","modelTitleHeight","itemPadding","legendBorder","leftLegendWidth","rightLegendWidth","topLegendHeight","bottomLegendHeight","ltheight","space","visible","text","subtitle"],"mappings":"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","sourcesContent":["import { measureText } from '../../smithchart/utils/helper';\nvar AreaBounds = /** @class */ (function () {\n    function AreaBounds() {\n    }\n    AreaBounds.prototype.calculateAreaBounds = function (smithchart, title, bounds) {\n        var margin = smithchart.margin;\n        var border = smithchart.border;\n        var spaceValue = this.getLegendSpace(smithchart, bounds);\n        var x = spaceValue['leftLegendWidth'] + margin.left + border.width;\n        var rightSpace = spaceValue['rightLegendWidth'] + margin.left + margin.right + (2 * border.width);\n        var width = smithchart.availableSize['width'] - (x + rightSpace);\n        var y = margin['top'] + (2 * smithchart.elementSpacing) + spaceValue['modelTitleHeight'] +\n            spaceValue['modelsubTitleHeight'] + spaceValue['topLegendHeight'] + border.width;\n        var height = smithchart.availableSize['height'] - (spaceValue['modelTitleHeight'] +\n            (2 * smithchart.elementSpacing) + spaceValue['modelsubTitleHeight'] + margin['top'] +\n            spaceValue['topLegendHeight'] + spaceValue['bottomLegendHeight']);\n        return { x: x, y: y, width: width, height: height };\n    };\n    AreaBounds.prototype.getLegendSpace = function (smithchart, bounds) {\n        var title = smithchart.title;\n        var legend = smithchart.legendSettings;\n        var position = legend.position.toLowerCase();\n        var subtitleHeight = 0;\n        var modelsubTitleHeight = 0;\n        var titleHeight = 0;\n        var font = smithchart.font;\n        var modelTitleHeight = 0;\n        var itemPadding = 10;\n        var legendBorder = legend.border.width;\n        var leftLegendWidth = 0;\n        var rightLegendWidth = 0;\n        var topLegendHeight = 0;\n        var bottomLegendHeight = 0;\n        var ltheight = 0;\n        var space;\n        if (legend['visible']) {\n            space = (bounds.width + (itemPadding / 2) + smithchart.elementSpacing + (2 * legendBorder));\n            leftLegendWidth = position === 'left' ? space : 0;\n            rightLegendWidth = position === 'right' ? space : 0;\n            ltheight = legend['title'].visible ? measureText(legend['title'].text, font)['height'] : 0;\n            topLegendHeight = position === 'top' ? smithchart.elementSpacing + bounds.height + ltheight : 0;\n            bottomLegendHeight = position === 'bottom' ? smithchart.elementSpacing + bounds.height + ltheight : 0;\n        }\n        subtitleHeight = measureText(title.subtitle.text, font)['height'];\n        modelTitleHeight = (title.text === '' || !title['visible']) ? 0 : (titleHeight);\n        modelsubTitleHeight = (title['subtitle'].text === '' || !title['subtitle'].visible) ? 0 : (subtitleHeight);\n        return {\n            leftLegendWidth: leftLegendWidth, rightLegendWidth: rightLegendWidth,\n            topLegendHeight: topLegendHeight, bottomLegendHeight: bottomLegendHeight,\n            modelTitleHeight: modelTitleHeight, modelsubTitleHeight: modelsubTitleHeight\n        };\n    };\n    return AreaBounds;\n}());\nexport { AreaBounds };\n"]},"metadata":{},"sourceType":"module"}