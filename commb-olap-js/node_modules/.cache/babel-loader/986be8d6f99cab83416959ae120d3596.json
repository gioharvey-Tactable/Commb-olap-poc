{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { valueToCoefficient, textElement, firstToLowerCase } from '../../common/utils/helper';\nimport { PathOption, Rect, measureText, TextOption } from '@syncfusion/ej2-svg-base';\nimport { DateTime } from '../../chart/axis/date-time-axis';\nimport { VisibleLabels } from '../../chart/axis/axis';\n/**\n * class for axis\n */\n\nvar RangeNavigatorAxis = function (_super) {\n  __extends(RangeNavigatorAxis, _super);\n\n  function RangeNavigatorAxis(range) {\n    var _this = _super.call(this) || this;\n\n    _this.firstLevelLabels = [];\n    _this.secondLevelLabels = [];\n    _this.rangeNavigator = range;\n    return _this;\n  }\n  /**\n   * To render grid lines of axis\n   */\n\n\n  RangeNavigatorAxis.prototype.renderGridLines = function () {\n    var pointX = 0;\n    var control = this.rangeNavigator;\n    var majorGridLines = control.majorGridLines;\n    var majorTickLines = control.majorTickLines;\n    var majorGrid = '';\n    var majorTick = '';\n    var rect = control.bounds;\n    var chartAxis = control.chartSeries.xAxis;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    this.gridLines = control.renderer.createGroup({\n      id: control.element.id + '_GridLines'\n    });\n    var tick = control.tickPosition === 'Outside' || control.series.length === 0 ? rect.y + rect.height + majorTickLines.height : rect.y + rect.height - majorTickLines.height; //Gridlines\n\n    this.firstLevelLabels = [];\n    chartAxis.labelStyle = control.labelStyle;\n    chartAxis.skeleton = control.skeleton;\n    chartAxis.skeletonType = control.skeletonType;\n    chartAxis.isChart = false;\n\n    if (control.valueType === 'DateTime') {\n      this.calculateDateTimeNiceInterval(chartAxis, rect, chartAxis.doubleRange.start, chartAxis.doubleRange.end, chartAxis.isChart);\n      this.actualIntervalType = chartAxis.actualIntervalType;\n      this.findAxisLabels(chartAxis);\n    }\n\n    this.firstLevelLabels = chartAxis.visibleLabels;\n    this.lowerValues = [];\n    var labelLength = chartAxis.visibleLabels.length;\n\n    for (var i = 0; i < labelLength; i++) {\n      this.lowerValues.push(this.firstLevelLabels[i].value);\n      pointX = valueToCoefficient(this.firstLevelLabels[i].value, chartAxis) * rect.width + rect.x;\n\n      if (pointX >= rect.x && rect.x + rect.width >= pointX) {\n        majorGrid = majorGrid.concat('M ' + pointX + ' ' + (control.bounds.y + control.bounds.height) + ' L ' + pointX + ' ' + control.bounds.y + ' ');\n        majorTick = majorTick.concat('M ' + pointX + ' ' + (rect.y + rect.height) + ' L ' + pointX + ' ' + tick + ' ');\n      }\n    }\n\n    var options = new PathOption(control.element.id + '_MajorGridLine', 'transparent', majorGridLines.width, control.series.length ? disabledColor || majorGridLines.color || control.themeStyle.gridLineColor : 'transparent', 1, majorGridLines.dashArray, majorGrid);\n    this.gridLines.appendChild(control.renderer.drawPath(options));\n    options = new PathOption(control.element.id + '_MajorTickLine', 'transparent', majorTickLines.width, disabledColor || majorTickLines.color || control.themeStyle.gridLineColor, 1, majorGridLines.dashArray, majorTick);\n    this.gridLines.appendChild(control.renderer.drawPath(options));\n  };\n  /**\n   * To render of axis labels\n   */\n\n\n  RangeNavigatorAxis.prototype.renderAxisLabels = function () {\n    var axis = this.rangeNavigator.chartSeries.xAxis;\n    var control = this.rangeNavigator;\n    var pointY;\n    var labelElement = control.renderer.createGroup({\n      id: control.element.id + '_AxisLabels'\n    });\n    var firstLevelElement = control.renderer.createGroup({\n      id: control.element.id + '_FirstLevelAxisLabels'\n    });\n    var secondLevelElement = control.renderer.createGroup({\n      id: control.element.id + '_SecondLevelAxisLabels'\n    });\n    var secondaryAxis = axis;\n    pointY = this.findLabelY(control, false);\n    this.placeAxisLabels(axis, pointY, '_AxisLabel_', control, firstLevelElement);\n    secondaryAxis.intervalType = secondaryAxis.actualIntervalType = control.groupBy || this.getSecondaryLabelType(axis.actualIntervalType);\n    secondaryAxis.labelFormat = '';\n\n    if (control.enableGrouping && control.valueType === 'DateTime' && this.actualIntervalType !== 'Years') {\n      secondaryAxis.visibleRange.interval = 1;\n      secondaryAxis.visibleLabels = [];\n      this.findAxisLabels(secondaryAxis);\n      this.secondLevelLabels = secondaryAxis.visibleLabels;\n      pointY = this.findLabelY(control, true);\n      var border = this.placeAxisLabels(secondaryAxis, pointY, '_SecondaryLabel_', control, secondLevelElement);\n      var path = new PathOption(control.element.id + '_SecondaryMajorLines', 'transparent', control.majorTickLines.width, control.majorTickLines.color || control.themeStyle.gridLineColor, 1, control.majorGridLines.dashArray, border);\n      this.gridLines.appendChild(control.renderer.drawPath(path));\n    }\n\n    control.chartSeries.xAxis.visibleLabels = control.chartSeries.xAxis.visibleLabels.concat(secondaryAxis.visibleLabels);\n    labelElement.appendChild(firstLevelElement);\n    labelElement.appendChild(secondLevelElement); //gridlines and axis label append to element\n\n    control.svgObject.appendChild(this.gridLines);\n    control.svgObject.appendChild(labelElement);\n  };\n  /**\n   * To find secondary level label type\n   *\n   * @param {RangeIntervalType} type type of range interval\n   */\n\n\n  RangeNavigatorAxis.prototype.getSecondaryLabelType = function (type) {\n    var types = ['Years', 'Quarter', 'Months', 'Weeks', 'Days', 'Hours', 'Minutes', 'Seconds'];\n    return type === 'Years' ? 'Years' : types[types.indexOf(type) - 1];\n  };\n  /**\n   * To find labels for date time axis\n   *\n   * @param {Axis} axis range axis\n   */\n\n\n  RangeNavigatorAxis.prototype.findAxisLabels = function (axis) {\n    axis.visibleLabels = [];\n    var start = new Date(axis.visibleRange.min);\n    var nextInterval;\n    var text;\n    var interval = this.rangeNavigator.interval ? this.rangeNavigator.interval : 1;\n\n    switch (axis.actualIntervalType) {\n      case 'Years':\n        start = new Date(start.getFullYear(), 0, 1);\n        break;\n\n      case 'Quarter':\n        if (start.getMonth() <= 2) {\n          start = new Date(start.getFullYear(), 0, 1);\n        } else if (start.getMonth() <= 5) {\n          start = new Date(start.getFullYear(), 3, 1);\n        } else if (start.getMonth() <= 8) {\n          start = new Date(start.getFullYear(), 6, 1);\n        } else {\n          start = new Date(start.getFullYear(), 9, 1);\n        }\n\n        break;\n\n      case 'Months':\n        start = new Date(start.getFullYear(), start.getMonth());\n        break;\n\n      case 'Weeks':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate() - start.getDay());\n        break;\n\n      case 'Days':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate());\n        break;\n\n      case 'Hours':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours());\n        break;\n\n      case 'Minutes':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes());\n        break;\n\n      case 'Seconds':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());\n        break;\n    }\n\n    nextInterval = start.getTime();\n    this.rangeNavigator.format = this.rangeNavigator.intl.getDateFormat({\n      format: axis.labelFormat || this.blazorFormat(axis),\n      type: firstToLowerCase(axis.skeletonType),\n      skeleton: this.getSkeleton(axis, null, null, this.rangeNavigator.isBlazor)\n    });\n\n    while (nextInterval <= axis.visibleRange.max) {\n      text = this.dateFormats(this.rangeNavigator.format(new Date(nextInterval)), axis, axis.visibleLabels.length);\n      axis.visibleLabels.push(new VisibleLabels(text, nextInterval, this.rangeNavigator.labelStyle, text));\n      nextInterval = this.increaseDateTimeInterval(axis, nextInterval, interval).getTime();\n    }\n  };\n\n  RangeNavigatorAxis.prototype.blazorFormat = function (axis) {\n    if (this.rangeNavigator.isBlazor && axis.actualIntervalType === 'Years') {\n      return 'yyyy';\n    } else {\n      return '';\n    }\n  };\n  /**\n   * To find date time formats for Quarter and week interval type\n   *\n   * @param {string} text text\n   * @param {Axis} axis axis\n   * @param {number} index index\n   */\n\n\n  RangeNavigatorAxis.prototype.dateFormats = function (text, axis, index) {\n    var changedText = text;\n    var isBlazor = this.rangeNavigator.isBlazor;\n    var isFirstLevel = this.rangeNavigator.enableGrouping && this.firstLevelLabels.length === 0;\n\n    switch (axis.actualIntervalType) {\n      case 'Quarter':\n        if (text.indexOf('Jan') > -1) {\n          changedText = !isFirstLevel ? text.replace(isBlazor ? 'January' : 'Jan', 'Quarter1') : 'Quarter1';\n        } else if (text.indexOf('Apr') > -1) {\n          changedText = !isFirstLevel ? text.replace(isBlazor ? 'April' : 'Apr', 'Quarter2') : 'Quarter2';\n        } else if (text.indexOf('Jul') > -1) {\n          changedText = !isFirstLevel ? text.replace(isBlazor ? 'July' : 'Jul', 'Quarter3') : 'Quarter3';\n        } else if (text.indexOf('Oct') > -1) {\n          changedText = !isFirstLevel ? text.replace(isBlazor ? 'October' : 'Oct', 'Quarter4') : 'Quarter4';\n        }\n\n        break;\n\n      case 'Weeks':\n        changedText = 'Week' + ++index;\n        break;\n\n      default:\n        changedText = text;\n        break;\n    }\n\n    return changedText;\n  };\n  /**\n   * To find the y co-ordinate for axis labels\n   *\n   * @param {RangeNavigator} control - rangeNavigator\n   * @param {boolean} isSecondary sets true if the axis is secondary axis\n   */\n\n\n  RangeNavigatorAxis.prototype.findLabelY = function (control, isSecondary) {\n    var pointY;\n    var reference = control.bounds.y + control.bounds.height;\n    var tickHeight = control.majorTickLines.height;\n    var textHeight = measureText('Quarter1 2011', control.labelStyle).height;\n    var padding = 8;\n\n    if (control.labelPosition === 'Outside' && control.tickPosition === 'Outside' || control.series.length === 0) {\n      pointY = reference + tickHeight + padding + textHeight * 0.75;\n    } else if (control.labelPosition === 'Inside' && control.tickPosition === 'Inside') {\n      pointY = reference - tickHeight - padding;\n    } else if (control.labelPosition === 'Inside' && control.tickPosition === 'Outside') {\n      pointY = reference - padding;\n    } else {\n      pointY = reference + padding + textHeight * 0.75;\n    }\n\n    if (isSecondary) {\n      padding = 15;\n\n      if (control.labelPosition === 'Outside' || control.series.length === 0) {\n        pointY += padding + textHeight * 0.75;\n      } else {\n        pointY = control.tickPosition === 'Outside' || control.series.length === 0 ? reference + tickHeight + padding + textHeight * 0.75 : reference + padding + textHeight * 0.75;\n      }\n    }\n\n    return pointY;\n  };\n  /**\n   * It places the axis labels and returns border for secondary axis labels\n   *\n   * @param {Axis} axis axis for the lables placed\n   * @param {number} pointY y co-ordinate for axis labels\n   * @param {string} id id for the axis elements\n   * @param {RangeNavigator} control range navigator\n   * @param {Element} labelElement parent element in which axis labels appended\n   */\n\n\n  RangeNavigatorAxis.prototype.placeAxisLabels = function (axis, pointY, id, control, labelElement) {\n    var maxLabels = axis.visibleLabels.length;\n    var label;\n    var prevLabel;\n    var pointX;\n    var rect = control.bounds;\n    var border = '';\n    var pointXGrid;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    var prevX = control.enableRtl ? rect.x + rect.width : rect.x;\n    var intervalType = axis.actualIntervalType;\n    var intervalInTime = control.valueType === 'DateTime' ? maxLabels > 1 ? axis.visibleLabels[1].value - axis.visibleLabels[0].value : (axis.visibleRange.max - axis.visibleLabels[0].value) / 2 : 0;\n\n    if (control.valueType === 'DateTime' && (intervalType === 'Quarter' || intervalType === 'Weeks')) {\n      this.findSuitableFormat(axis, control);\n    }\n\n    for (var i = 0, len = maxLabels; i < len; i++) {\n      label = axis.visibleLabels[i];\n      label.size = measureText(label.text, axis.labelStyle);\n\n      if (control.secondaryLabelAlignment === 'Middle') {\n        pointX = valueToCoefficient(label.value + intervalInTime / 2, axis) * rect.width + rect.x;\n      } else if (id.indexOf('Secondary') > -1) {\n        pointX = this.findAlignment(axis, i);\n      }\n\n      pointXGrid = valueToCoefficient(label.value, axis) * rect.width + rect.x; //edgelabelPlacements\n\n      if ((i === 0 || i === axis.visibleLabels.length - 1 && control.enableRtl) && pointX < rect.x) {\n        pointX = rect.x + label.size.width / 2;\n      }\n\n      if ((i === axis.visibleLabels.length - 1 || i === 0 && control.enableRtl) && pointX + label.size.width > rect.x + rect.width) {\n        pointX = rect.x + rect.width - label.size.width / 2;\n      } //secondary axis grid lines\n\n\n      if (id.indexOf('_SecondaryLabel_') > -1) {\n        if (pointX >= rect.x && rect.x + rect.width >= pointX) {\n          border = border.concat('M ' + pointXGrid + ' ' + pointY + ' L ' + pointXGrid + ' ' + (pointY - label.size.height));\n        }\n      } //smart axis label position,\n\n\n      if (control.labelIntersectAction === 'Hide' && i !== 0 && this.isIntersect(axis, pointX, label.size.width, prevX, prevLabel.size.width)) {\n        continue;\n      } //label alignment for single visible label\n\n\n      if (control.secondaryLabelAlignment === 'Middle' && axis.visibleLabels.length === 1) {\n        pointX = valueToCoefficient(label.value, axis) + (rect.x + rect.width / 2);\n      } //labelrender event\n\n\n      var labelStyle = control.labelStyle;\n      var style = {\n        size: labelStyle.size,\n        color: disabledColor || labelStyle.color || control.themeStyle.labelFontColor,\n        fontFamily: labelStyle.fontFamily,\n        fontStyle: labelStyle.fontStyle || control.labelStyle.fontStyle,\n        fontWeight: labelStyle.fontWeight || control.labelStyle.fontWeight,\n        opacity: labelStyle.opacity || control.labelStyle.opacity,\n        textAlignment: labelStyle.textAlignment || control.labelStyle.textAlignment,\n        textOverflow: labelStyle.textOverflow || control.labelStyle.textOverflow\n      };\n      var argsData = {\n        cancel: false,\n        name: 'labelRender',\n        text: label.text,\n        value: label.value,\n        labelStyle: style,\n        region: new Rect(pointX, pointY, label.size.width, label.size.height)\n      };\n      control.trigger('labelRender', argsData);\n\n      if (!argsData.cancel) {\n        control.labels.push(argsData);\n      } else {\n        continue;\n      }\n\n      textElement(this.rangeNavigator.renderer, new TextOption(this.rangeNavigator.element.id + id + i, pointX, pointY, 'middle', argsData.text), argsData.labelStyle, argsData.labelStyle.color || control.themeStyle.labelFontColor, labelElement).style.cursor = axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default';\n      prevX = pointX;\n      prevLabel = label;\n    }\n\n    return border;\n  };\n  /**\n   * To check label is intersected with successive label or not\n   */\n\n\n  RangeNavigatorAxis.prototype.isIntersect = function (axis, currentX, currentWidth, prevX, prevWidth) {\n    return axis.isInversed ? currentX + currentWidth / 2 > prevX - prevWidth / 2 : currentX - currentWidth / 2 < prevX + prevWidth / 2;\n  };\n  /**\n   * To find suitable label format for Quarter and week Interval types\n   *\n   * @param {Axis} axis RangeNavigator axis\n   * @param {RangeNavigator} control RangeNavigator instance\n   */\n\n\n  RangeNavigatorAxis.prototype.findSuitableFormat = function (axis, control) {\n    var labels = axis.visibleLabels;\n    var labelLength = labels.length;\n    var bounds = control.bounds;\n    var prevX;\n    var currentX;\n    var interval = control.valueType === 'DateTime' ? labelLength > 1 ? labels[1].value - labels[0].value : axis.visibleRange.interval : 0;\n\n    for (var i = 0; i < labelLength; i++) {\n      currentX = valueToCoefficient(labels[i].value + interval / 2, axis) * bounds.width + bounds.x;\n      labels[i].size = measureText(labels[i].text, axis.labelStyle); //edgelabelPlacements\n\n      if (i === 0 && currentX < bounds.x) {\n        currentX = bounds.x + labels[i].size.width / 2;\n      }\n\n      if (axis.actualIntervalType === 'Quarter') {\n        if (i !== 0) {\n          if (labels[i].text.indexOf('Quarter') > -1 && this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n            labels.every(function (label) {\n              label.text = label.text.toString().replace('Quarter', 'QTR');\n              return true;\n            });\n            axis.visibleLabels = labels;\n            this.findSuitableFormat(axis, control);\n          } else {\n            if (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n              labels.every(function (label) {\n                label.text = label.text.toString().replace('QTR', 'Q');\n                return true;\n              });\n              axis.visibleLabels = labels;\n            }\n          }\n        }\n      } else if (axis.actualIntervalType === 'Weeks') {\n        if (i !== 0 && labels[i].text.indexOf('Week') > -1 && this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n          labels.every(function (label) {\n            label.text = label.text.toString().replace('Week', 'W');\n            return true;\n          });\n          axis.visibleLabels = labels;\n        }\n      }\n\n      prevX = currentX;\n    }\n  };\n  /**\n   * Alignment position for secondary level labels in date time axis\n   *\n   * @param {Axis} axis axis\n   * @param {number} index label index\n   */\n\n\n  RangeNavigatorAxis.prototype.findAlignment = function (axis, index) {\n    var label = axis.visibleLabels[index];\n    var nextLabel = axis.visibleLabels[index + 1];\n    var bounds = this.rangeNavigator.bounds;\n    return this.rangeNavigator.secondaryLabelAlignment === 'Near' ? valueToCoefficient(label.value, axis) * bounds.width + bounds.x + label.size.width / 2 : valueToCoefficient(nextLabel ? nextLabel.value : axis.visibleRange.max, axis) * bounds.width + bounds.x - label.size.width;\n  };\n\n  return RangeNavigatorAxis;\n}(DateTime);\n\nexport { RangeNavigatorAxis };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-charts/src/range-navigator/renderer/range-axis.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","valueToCoefficient","textElement","firstToLowerCase","PathOption","Rect","measureText","TextOption","DateTime","VisibleLabels","RangeNavigatorAxis","_super","range","_this","call","firstLevelLabels","secondLevelLabels","rangeNavigator","renderGridLines","pointX","control","majorGridLines","majorTickLines","majorGrid","majorTick","rect","bounds","chartAxis","chartSeries","xAxis","disabledColor","disableRangeSelector","gridLines","renderer","createGroup","id","element","tick","tickPosition","series","length","y","height","labelStyle","skeleton","skeletonType","isChart","valueType","calculateDateTimeNiceInterval","doubleRange","start","end","actualIntervalType","findAxisLabels","visibleLabels","lowerValues","labelLength","i","push","value","width","x","concat","options","color","themeStyle","gridLineColor","dashArray","appendChild","drawPath","renderAxisLabels","axis","pointY","labelElement","firstLevelElement","secondLevelElement","secondaryAxis","findLabelY","placeAxisLabels","intervalType","groupBy","getSecondaryLabelType","labelFormat","enableGrouping","visibleRange","interval","border","path","svgObject","type","types","indexOf","Date","min","nextInterval","text","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","getTime","format","intl","getDateFormat","blazorFormat","getSkeleton","isBlazor","max","dateFormats","increaseDateTimeInterval","index","changedText","isFirstLevel","replace","isSecondary","reference","tickHeight","textHeight","padding","labelPosition","maxLabels","label","prevLabel","pointXGrid","prevX","enableRtl","intervalInTime","findSuitableFormat","len","size","secondaryLabelAlignment","findAlignment","labelIntersectAction","isIntersect","style","labelFontColor","fontFamily","fontStyle","fontWeight","opacity","textAlignment","textOverflow","argsData","cancel","name","region","trigger","labels","cursor","currentX","currentWidth","prevWidth","isInversed","every","toString","nextLabel"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { valueToCoefficient, textElement, firstToLowerCase } from '../../common/utils/helper';\nimport { PathOption, Rect, measureText, TextOption } from '@syncfusion/ej2-svg-base';\nimport { DateTime } from '../../chart/axis/date-time-axis';\nimport { VisibleLabels } from '../../chart/axis/axis';\n/**\n * class for axis\n */\nvar RangeNavigatorAxis = /** @class */ (function (_super) {\n    __extends(RangeNavigatorAxis, _super);\n    function RangeNavigatorAxis(range) {\n        var _this = _super.call(this) || this;\n        _this.firstLevelLabels = [];\n        _this.secondLevelLabels = [];\n        _this.rangeNavigator = range;\n        return _this;\n    }\n    /**\n     * To render grid lines of axis\n     */\n    RangeNavigatorAxis.prototype.renderGridLines = function () {\n        var pointX = 0;\n        var control = this.rangeNavigator;\n        var majorGridLines = control.majorGridLines;\n        var majorTickLines = control.majorTickLines;\n        var majorGrid = '';\n        var majorTick = '';\n        var rect = control.bounds;\n        var chartAxis = control.chartSeries.xAxis;\n        var disabledColor = (control.disableRangeSelector) ? 'transparent' : null;\n        this.gridLines = control.renderer.createGroup({ id: control.element.id + '_GridLines' });\n        var tick = (control.tickPosition === 'Outside' || control.series.length === 0) ?\n            rect.y + rect.height + majorTickLines.height : rect.y + rect.height - majorTickLines.height;\n        //Gridlines\n        this.firstLevelLabels = [];\n        chartAxis.labelStyle = control.labelStyle;\n        chartAxis.skeleton = control.skeleton;\n        chartAxis.skeletonType = control.skeletonType;\n        chartAxis.isChart = false;\n        if (control.valueType === 'DateTime') {\n            this.calculateDateTimeNiceInterval(chartAxis, rect, chartAxis.doubleRange.start, chartAxis.doubleRange.end, chartAxis.isChart);\n            this.actualIntervalType = chartAxis.actualIntervalType;\n            this.findAxisLabels(chartAxis);\n        }\n        this.firstLevelLabels = chartAxis.visibleLabels;\n        this.lowerValues = [];\n        var labelLength = chartAxis.visibleLabels.length;\n        for (var i = 0; i < labelLength; i++) {\n            this.lowerValues.push(this.firstLevelLabels[i].value);\n            pointX = (valueToCoefficient(this.firstLevelLabels[i].value, chartAxis) * rect.width) + rect.x;\n            if (pointX >= rect.x && (rect.x + rect.width) >= pointX) {\n                majorGrid = majorGrid.concat('M ' + pointX + ' ' + (control.bounds.y + control.bounds.height) +\n                    ' L ' + pointX + ' ' + control.bounds.y + ' ');\n                majorTick = majorTick.concat('M ' + (pointX) + ' ' + (rect.y + rect.height) +\n                    ' L ' + (pointX) + ' ' + tick + ' ');\n            }\n        }\n        var options = new PathOption(control.element.id + '_MajorGridLine', 'transparent', majorGridLines.width, control.series.length ? disabledColor || majorGridLines.color || control.themeStyle.gridLineColor : 'transparent', 1, majorGridLines.dashArray, majorGrid);\n        this.gridLines.appendChild(control.renderer.drawPath(options));\n        options = new PathOption(control.element.id + '_MajorTickLine', 'transparent', majorTickLines.width, disabledColor || majorTickLines.color || control.themeStyle.gridLineColor, 1, majorGridLines.dashArray, majorTick);\n        this.gridLines.appendChild(control.renderer.drawPath(options));\n    };\n    /**\n     * To render of axis labels\n     */\n    RangeNavigatorAxis.prototype.renderAxisLabels = function () {\n        var axis = this.rangeNavigator.chartSeries.xAxis;\n        var control = this.rangeNavigator;\n        var pointY;\n        var labelElement = control.renderer.createGroup({ id: control.element.id + '_AxisLabels' });\n        var firstLevelElement = control.renderer.createGroup({ id: control.element.id + '_FirstLevelAxisLabels' });\n        var secondLevelElement = control.renderer.createGroup({ id: control.element.id + '_SecondLevelAxisLabels' });\n        var secondaryAxis = axis;\n        pointY = this.findLabelY(control, false);\n        this.placeAxisLabels(axis, pointY, '_AxisLabel_', control, firstLevelElement);\n        secondaryAxis.intervalType = secondaryAxis.actualIntervalType = (control.groupBy ||\n            this.getSecondaryLabelType(axis.actualIntervalType));\n        secondaryAxis.labelFormat = '';\n        if (control.enableGrouping && control.valueType === 'DateTime' && this.actualIntervalType !== 'Years') {\n            secondaryAxis.visibleRange.interval = 1;\n            secondaryAxis.visibleLabels = [];\n            this.findAxisLabels(secondaryAxis);\n            this.secondLevelLabels = secondaryAxis.visibleLabels;\n            pointY = this.findLabelY(control, true);\n            var border = this.placeAxisLabels(secondaryAxis, pointY, '_SecondaryLabel_', control, secondLevelElement);\n            var path = new PathOption(control.element.id + '_SecondaryMajorLines', 'transparent', control.majorTickLines.width, control.majorTickLines.color || control.themeStyle.gridLineColor, 1, control.majorGridLines.dashArray, border);\n            this.gridLines.appendChild(control.renderer.drawPath(path));\n        }\n        control.chartSeries.xAxis.visibleLabels = control.chartSeries.xAxis.visibleLabels.concat(secondaryAxis.visibleLabels);\n        labelElement.appendChild(firstLevelElement);\n        labelElement.appendChild(secondLevelElement);\n        //gridlines and axis label append to element\n        control.svgObject.appendChild(this.gridLines);\n        control.svgObject.appendChild(labelElement);\n    };\n    /**\n     * To find secondary level label type\n     *\n     * @param {RangeIntervalType} type type of range interval\n     */\n    RangeNavigatorAxis.prototype.getSecondaryLabelType = function (type) {\n        var types = ['Years', 'Quarter', 'Months', 'Weeks', 'Days', 'Hours', 'Minutes', 'Seconds'];\n        return (type === 'Years' ? 'Years' : types[types.indexOf(type) - 1]);\n    };\n    /**\n     * To find labels for date time axis\n     *\n     * @param {Axis} axis range axis\n     */\n    RangeNavigatorAxis.prototype.findAxisLabels = function (axis) {\n        axis.visibleLabels = [];\n        var start = new Date(axis.visibleRange.min);\n        var nextInterval;\n        var text;\n        var interval = this.rangeNavigator.interval ? this.rangeNavigator.interval : 1;\n        switch (axis.actualIntervalType) {\n            case 'Years':\n                start = new Date(start.getFullYear(), 0, 1);\n                break;\n            case 'Quarter':\n                if (start.getMonth() <= 2) {\n                    start = new Date(start.getFullYear(), 0, 1);\n                }\n                else if (start.getMonth() <= 5) {\n                    start = new Date(start.getFullYear(), 3, 1);\n                }\n                else if (start.getMonth() <= 8) {\n                    start = new Date(start.getFullYear(), 6, 1);\n                }\n                else {\n                    start = new Date(start.getFullYear(), 9, 1);\n                }\n                break;\n            case 'Months':\n                start = new Date(start.getFullYear(), start.getMonth());\n                break;\n            case 'Weeks':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate() - start.getDay());\n                break;\n            case 'Days':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate());\n                break;\n            case 'Hours':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours());\n                break;\n            case 'Minutes':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes());\n                break;\n            case 'Seconds':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());\n                break;\n        }\n        nextInterval = start.getTime();\n        this.rangeNavigator.format = this.rangeNavigator.intl.getDateFormat({\n            format: axis.labelFormat || this.blazorFormat(axis),\n            type: firstToLowerCase(axis.skeletonType), skeleton: this.getSkeleton(axis, null, null, this.rangeNavigator.isBlazor)\n        });\n        while (nextInterval <= axis.visibleRange.max) {\n            text = this.dateFormats(this.rangeNavigator.format(new Date(nextInterval)), axis, axis.visibleLabels.length);\n            axis.visibleLabels.push(new VisibleLabels(text, nextInterval, this.rangeNavigator.labelStyle, text));\n            nextInterval = this.increaseDateTimeInterval(axis, nextInterval, interval).getTime();\n        }\n    };\n    RangeNavigatorAxis.prototype.blazorFormat = function (axis) {\n        if (this.rangeNavigator.isBlazor && axis.actualIntervalType === 'Years') {\n            return 'yyyy';\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n     * To find date time formats for Quarter and week interval type\n     *\n     * @param {string} text text\n     * @param {Axis} axis axis\n     * @param {number} index index\n     */\n    RangeNavigatorAxis.prototype.dateFormats = function (text, axis, index) {\n        var changedText = text;\n        var isBlazor = this.rangeNavigator.isBlazor;\n        var isFirstLevel = this.rangeNavigator.enableGrouping && this.firstLevelLabels.length === 0;\n        switch (axis.actualIntervalType) {\n            case 'Quarter':\n                if (text.indexOf('Jan') > -1) {\n                    changedText = !isFirstLevel ? text.replace(isBlazor ? 'January' : 'Jan', 'Quarter1') : 'Quarter1';\n                }\n                else if (text.indexOf('Apr') > -1) {\n                    changedText = !isFirstLevel ? text.replace(isBlazor ? 'April' : 'Apr', 'Quarter2') : 'Quarter2';\n                }\n                else if (text.indexOf('Jul') > -1) {\n                    changedText = !isFirstLevel ? text.replace(isBlazor ? 'July' : 'Jul', 'Quarter3') : 'Quarter3';\n                }\n                else if (text.indexOf('Oct') > -1) {\n                    changedText = !isFirstLevel ? text.replace(isBlazor ? 'October' : 'Oct', 'Quarter4') : 'Quarter4';\n                }\n                break;\n            case 'Weeks':\n                changedText = 'Week' + ++index;\n                break;\n            default:\n                changedText = text;\n                break;\n        }\n        return changedText;\n    };\n    /**\n     * To find the y co-ordinate for axis labels\n     *\n     * @param {RangeNavigator} control - rangeNavigator\n     * @param {boolean} isSecondary sets true if the axis is secondary axis\n     */\n    RangeNavigatorAxis.prototype.findLabelY = function (control, isSecondary) {\n        var pointY;\n        var reference = control.bounds.y + control.bounds.height;\n        var tickHeight = control.majorTickLines.height;\n        var textHeight = measureText('Quarter1 2011', control.labelStyle).height;\n        var padding = 8;\n        if ((control.labelPosition === 'Outside' && control.tickPosition === 'Outside') || control.series.length === 0) {\n            pointY = reference + tickHeight + padding + textHeight * 0.75;\n        }\n        else if (control.labelPosition === 'Inside' && control.tickPosition === 'Inside') {\n            pointY = reference - tickHeight - padding;\n        }\n        else if (control.labelPosition === 'Inside' && control.tickPosition === 'Outside') {\n            pointY = reference - padding;\n        }\n        else {\n            pointY = reference + padding + (textHeight * 0.75);\n        }\n        if (isSecondary) {\n            padding = 15;\n            if (control.labelPosition === 'Outside' || control.series.length === 0) {\n                pointY += padding + textHeight * 0.75;\n            }\n            else {\n                pointY = (control.tickPosition === 'Outside' || control.series.length === 0) ?\n                    reference + tickHeight + padding + textHeight * 0.75 : reference + padding + textHeight * 0.75;\n            }\n        }\n        return pointY;\n    };\n    /**\n     * It places the axis labels and returns border for secondary axis labels\n     *\n     * @param {Axis} axis axis for the lables placed\n     * @param {number} pointY y co-ordinate for axis labels\n     * @param {string} id id for the axis elements\n     * @param {RangeNavigator} control range navigator\n     * @param {Element} labelElement parent element in which axis labels appended\n     */\n    RangeNavigatorAxis.prototype.placeAxisLabels = function (axis, pointY, id, control, labelElement) {\n        var maxLabels = axis.visibleLabels.length;\n        var label;\n        var prevLabel;\n        var pointX;\n        var rect = control.bounds;\n        var border = '';\n        var pointXGrid;\n        var disabledColor = (control.disableRangeSelector) ? 'transparent' : null;\n        var prevX = control.enableRtl ? (rect.x + rect.width) : rect.x;\n        var intervalType = axis.actualIntervalType;\n        var intervalInTime = control.valueType === 'DateTime' ?\n            maxLabels > 1 ? (axis.visibleLabels[1].value - axis.visibleLabels[0].value) :\n                (axis.visibleRange.max - axis.visibleLabels[0].value) / 2 : 0;\n        if (control.valueType === 'DateTime' && (intervalType === 'Quarter' || intervalType === 'Weeks')) {\n            this.findSuitableFormat(axis, control);\n        }\n        for (var i = 0, len = maxLabels; i < len; i++) {\n            label = axis.visibleLabels[i];\n            label.size = measureText(label.text, axis.labelStyle);\n            if (control.secondaryLabelAlignment === 'Middle') {\n                pointX = (valueToCoefficient((label.value + intervalInTime / 2), axis) * rect.width) + rect.x;\n            }\n            else if ((id.indexOf('Secondary') > -1)) {\n                pointX = this.findAlignment(axis, i);\n            }\n            pointXGrid = (valueToCoefficient((label.value), axis) * rect.width) + rect.x;\n            //edgelabelPlacements\n            if ((i === 0 || (i === axis.visibleLabels.length - 1 && control.enableRtl)) && pointX < rect.x) {\n                pointX = rect.x + label.size.width / 2;\n            }\n            if ((i === axis.visibleLabels.length - 1 || (i === 0 && control.enableRtl)) &&\n                ((pointX + label.size.width) > (rect.x + rect.width))) {\n                pointX = rect.x + rect.width - label.size.width / 2;\n            }\n            //secondary axis grid lines\n            if (id.indexOf('_SecondaryLabel_') > -1) {\n                if (pointX >= rect.x && (rect.x + rect.width) >= pointX) {\n                    border = border.concat('M ' + pointXGrid + ' ' + pointY +\n                        ' L ' + pointXGrid + ' ' + (pointY - label.size.height));\n                }\n            }\n            //smart axis label position,\n            if (control.labelIntersectAction === 'Hide' &&\n                i !== 0 && this.isIntersect(axis, pointX, label.size.width, prevX, prevLabel.size.width)) {\n                continue;\n            }\n            //label alignment for single visible label\n            if (control.secondaryLabelAlignment === 'Middle' && axis.visibleLabels.length === 1) {\n                pointX = valueToCoefficient(label.value, axis) + (rect.x + (rect.width / 2));\n            }\n            //labelrender event\n            var labelStyle = control.labelStyle;\n            var style = {\n                size: labelStyle.size, color: disabledColor || labelStyle.color || control.themeStyle.labelFontColor,\n                fontFamily: labelStyle.fontFamily,\n                fontStyle: labelStyle.fontStyle || control.labelStyle.fontStyle,\n                fontWeight: labelStyle.fontWeight || control.labelStyle.fontWeight,\n                opacity: labelStyle.opacity || control.labelStyle.opacity,\n                textAlignment: labelStyle.textAlignment || control.labelStyle.textAlignment,\n                textOverflow: labelStyle.textOverflow || control.labelStyle.textOverflow\n            };\n            var argsData = {\n                cancel: false, name: 'labelRender',\n                text: label.text, value: label.value, labelStyle: style,\n                region: new Rect(pointX, pointY, label.size.width, label.size.height)\n            };\n            control.trigger('labelRender', argsData);\n            if (!argsData.cancel) {\n                control.labels.push(argsData);\n            }\n            else {\n                continue;\n            }\n            textElement(this.rangeNavigator.renderer, new TextOption(this.rangeNavigator.element.id + id + i, pointX, pointY, 'middle', argsData.text), argsData.labelStyle, argsData.labelStyle.color || control.themeStyle.labelFontColor, labelElement).style.cursor = axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default';\n            prevX = pointX;\n            prevLabel = label;\n        }\n        return border;\n    };\n    /**\n     * To check label is intersected with successive label or not\n     */\n    RangeNavigatorAxis.prototype.isIntersect = function (axis, currentX, currentWidth, prevX, prevWidth) {\n        return (axis.isInversed) ? (currentX + currentWidth / 2 > prevX - prevWidth / 2) :\n            (currentX - currentWidth / 2 < prevX + prevWidth / 2);\n    };\n    /**\n     * To find suitable label format for Quarter and week Interval types\n     *\n     * @param {Axis} axis RangeNavigator axis\n     * @param {RangeNavigator} control RangeNavigator instance\n     */\n    RangeNavigatorAxis.prototype.findSuitableFormat = function (axis, control) {\n        var labels = axis.visibleLabels;\n        var labelLength = labels.length;\n        var bounds = control.bounds;\n        var prevX;\n        var currentX;\n        var interval = control.valueType === 'DateTime' ?\n            labelLength > 1 ? (labels[1].value - labels[0].value) : axis.visibleRange.interval\n            : 0;\n        for (var i = 0; i < labelLength; i++) {\n            currentX = (valueToCoefficient((labels[i].value + interval / 2), axis) * bounds.width) + bounds.x;\n            labels[i].size = measureText(labels[i].text, axis.labelStyle);\n            //edgelabelPlacements\n            if (i === 0 && currentX < bounds.x) {\n                currentX = bounds.x + labels[i].size.width / 2;\n            }\n            if (axis.actualIntervalType === 'Quarter') {\n                if (i !== 0) {\n                    if ((labels[i].text.indexOf('Quarter') > -1) &&\n                        (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width))) {\n                        labels.every(function (label) {\n                            label.text = label.text.toString().replace('Quarter', 'QTR');\n                            return true;\n                        });\n                        axis.visibleLabels = labels;\n                        this.findSuitableFormat(axis, control);\n                    }\n                    else {\n                        if (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n                            labels.every(function (label) {\n                                label.text = label.text.toString().replace('QTR', 'Q');\n                                return true;\n                            });\n                            axis.visibleLabels = labels;\n                        }\n                    }\n                }\n            }\n            else if (axis.actualIntervalType === 'Weeks') {\n                if ((i !== 0) && ((labels[i].text.indexOf('Week') > -1) &&\n                    (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)))) {\n                    labels.every(function (label) {\n                        label.text = label.text.toString().replace('Week', 'W');\n                        return true;\n                    });\n                    axis.visibleLabels = labels;\n                }\n            }\n            prevX = currentX;\n        }\n    };\n    /**\n     * Alignment position for secondary level labels in date time axis\n     *\n     * @param {Axis} axis axis\n     * @param {number} index label index\n     */\n    RangeNavigatorAxis.prototype.findAlignment = function (axis, index) {\n        var label = axis.visibleLabels[index];\n        var nextLabel = axis.visibleLabels[index + 1];\n        var bounds = this.rangeNavigator.bounds;\n        return (this.rangeNavigator.secondaryLabelAlignment === 'Near' ?\n            (valueToCoefficient((label.value), axis) * bounds.width) + bounds.x + label.size.width / 2 :\n            (valueToCoefficient((nextLabel ? nextLabel.value : axis.visibleRange.max), axis) * bounds.width) + bounds.x - label.size.width);\n    };\n    return RangeNavigatorAxis;\n}(DateTime));\nexport { RangeNavigatorAxis };\n"]},"metadata":{},"sourceType":"module"}