{"ast":null,"code":"import { createElement, remove, extend, getInstance, addClass, removeClass, isBlazor, select } from '@syncfusion/ej2-base';\nimport * as cls from '../base/css-constant';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { MaskedTextBox, NumericTextBox } from '@syncfusion/ej2-inputs';\nimport { MultiSelect, CheckBoxSelection } from '@syncfusion/ej2-dropdowns';\nimport { PivotUtil } from '../../base/util';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { DateTimePicker } from '@syncfusion/ej2-calendars';\nimport * as events from '../../common/base/constant';\n/**\n * `Grouping` module to create grouping option for date, number and custom in popup.\n */\n\n/** @hidden */\n\nvar Grouping = function () {\n  /* eslint-disable-next-line */\n\n  /**\n   * Constructor for the group UI rendering.\n   * @hidden\n   */\n  function Grouping(parent) {\n    this.dateGroup = /_date_group_years|_date_group_quarters|_date_group_quarterYear|_date_group_months|_date_group_days|_date_group_hours|_date_group_minutes|_date_group_seconds/g;\n    this.parent = parent;\n    this.parent.groupingModule = this;\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   * @returns {string} - string\n   * @private\n   */\n\n\n  Grouping.prototype.getModuleName = function () {\n    return 'grouping';\n  };\n\n  Grouping.prototype.render = function (args) {\n    var target = args.target;\n    var option = args.option;\n    var parentElement = args.parentElement;\n    this.parentElement = parentElement;\n    this.selectedCellsInfo = [];\n    this.isUpdate = false;\n    var colIndex = Number(target.getAttribute('aria-colindex'));\n    var rowIndex = Number(target.getAttribute('index'));\n    var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];\n    var fieldName = cell.valueSort.axis.toString();\n    this.selectedCellsInfo = this.getSelectedCells(cell.axis, fieldName, cell.actualText.toString());\n    this.selectedCellsInfo.push({\n      axis: cell.axis,\n      fieldName: fieldName,\n      name: cell.actualText.toString(),\n      cellInfo: cell\n    });\n\n    if (option.replace(parentElement.id, '').indexOf('_custom_group') !== -1) {\n      this.createGroupSettings(fieldName);\n    } else {\n      this.updateUnGroupSettings(fieldName);\n    }\n  };\n  /**\n   * Returns the selected members/headers by checing the valid members from the pivot table.\n   * @function getSelectedOptions\n   * @param  {SelectedCellsInfo[]} selectedCellsInfo - Get the members name from the given selected cells information\n   * @returns {string[]} - string\n   * @hidden\n   */\n\n\n  Grouping.prototype.getSelectedOptions = function (selectedCellsInfo) {\n    var selectedOptions = [];\n\n    for (var _i = 0, selectedCellsInfo_1 = selectedCellsInfo; _i < selectedCellsInfo_1.length; _i++) {\n      var option = selectedCellsInfo_1[_i];\n\n      if (PivotUtil.inArray(option.name, selectedOptions) === -1) {\n        selectedOptions.push(option.name);\n      }\n    }\n\n    return selectedOptions;\n  };\n\n  Grouping.prototype.createGroupSettings = function (fieldName) {\n    var fieldList = this.parent.engineModule.fieldList[fieldName];\n    var group = this.getGroupSettings(fieldName);\n\n    if (this.selectedCellsInfo.length > 0) {\n      var type = void 0;\n      var isInvalid = false;\n\n      if (fieldList.isCustomField) {\n        if (!group) {\n          var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ''));\n          var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ''));\n\n          if (dateGroup) {\n            isInvalid = false;\n            type = 'date';\n            fieldName = fieldName.replace(this.dateGroup, '');\n          } else if (customGroup) {\n            isInvalid = this.selectedCellsInfo.length === 1;\n            type = 'custom';\n          }\n        } else if (group && group.type === 'Custom') {\n          if (this.selectedCellsInfo.length === 1) {\n            isInvalid = true;\n          } else {\n            isInvalid = false;\n            type = 'custom';\n          }\n        } else if (group && group.type === 'Number') {\n          isInvalid = false;\n          type = 'number';\n        }\n      } else {\n        if (group) {\n          if (group.type === 'Number' || group.type === 'Date') {\n            isInvalid = false;\n            type = group.type === 'Date' ? 'date' : 'number';\n          } else if (group.type === 'Custom') {\n            isInvalid = this.selectedCellsInfo.length === 1;\n            type = 'custom';\n          }\n        } else {\n          if (fieldList.type === 'number' || ['datetime', 'date'].indexOf(fieldList.type) !== -1 || this.isDateType(fieldName)) {\n            isInvalid = false;\n            type = this.selectedCellsInfo.length === 1 ? ['datetime', 'date'].indexOf(fieldList.type) !== -1 || this.isDateType(fieldName) ? 'date' : 'number' : 'custom';\n          } else if (fieldList.type === 'string') {\n            isInvalid = this.selectedCellsInfo.length === 1;\n            type = 'custom';\n          }\n        }\n      }\n\n      if (isInvalid) {\n        this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('warning'), this.parent.localeObj.getConstant('invalidSelection'));\n        this.parent.grid.clearSelection();\n      } else if (type && type !== '') {\n        this.createGroupDialog(fieldName, type);\n      }\n    }\n  };\n\n  Grouping.prototype.updateUnGroupSettings = function (fieldName) {\n    var fieldList = this.parent.engineModule.fieldList[fieldName];\n    var groupFields = PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);\n    var group = this.getGroupSettings(fieldName);\n\n    if (this.selectedCellsInfo.length > 0) {\n      var type = void 0;\n\n      if (fieldList.isCustomField) {\n        if (!group) {\n          var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ''));\n          var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ''));\n\n          if (dateGroup) {\n            type = 'date';\n            fieldName = fieldName.replace(this.dateGroup, '');\n          } else if (customGroup) {\n            type = 'custom';\n          }\n        } else if (group.type === 'Custom') {\n          type = 'custom';\n        }\n      } else {\n        if (group) {\n          if (group.type === 'Number' || group.type === 'Date') {\n            type = group.type === 'Date' ? 'date' : 'number';\n          }\n        }\n      }\n\n      if (type === 'date' || type === 'number') {\n        groupFields = this.validateSettings(fieldName, groupFields, type, []);\n      } else if (type === 'custom') {\n        var selectedOptions = this.getSelectedOptions(this.selectedCellsInfo);\n        groupFields = this.validateSettings(fieldName, groupFields, type, selectedOptions);\n      }\n\n      this.updateDateSource(groupFields, type);\n    }\n  };\n\n  Grouping.prototype.updateDateSource = function (groupFields, type) {\n    if (this.isUpdate) {\n      if (isBlazor()) {\n        PivotUtil.setPivotProperties(this.parent, {\n          dataSourceSettings: {\n            groupSettings: groupFields\n          }\n        });\n      } else {\n        this.parent.setProperties({\n          dataSourceSettings: {\n            groupSettings: groupFields\n          }\n        }, true);\n      }\n\n      this.parent.updateGroupingReport(groupFields, type === 'date' ? 'Date' : type === 'custom' ? 'Custom' : 'Number');\n      this.parent.notify(events.initialLoad, {});\n    }\n  };\n\n  Grouping.prototype.removeGroupSettings = function (fieldName, selectedOptions, groupFields, groupNames, type) {\n    var index = groupNames.indexOf(fieldName);\n\n    if (index !== -1) {\n      var field = groupFields[index];\n\n      for (var j = 0, len = field.customGroups.length; j < len; j++) {\n        if (field.customGroups[j]) {\n          var group = field.customGroups[j];\n\n          if (PivotUtil.inArray(group.groupName, selectedOptions) !== -1) {\n            groupFields = this.modifyParentGroupItems(fieldName, groupFields, [group.groupName], group.items, groupNames);\n            field.customGroups.splice(j, 1);\n            this.isUpdate = true;\n            j--;\n            len--;\n          }\n        }\n      }\n    }\n\n    return groupFields;\n  };\n\n  Grouping.prototype.getGroupSettings = function (fieldName) {\n    for (var _i = 0, _a = this.parent.dataSourceSettings.groupSettings; _i < _a.length; _i++) {\n      var group = _a[_i];\n\n      if (group.name === fieldName) {\n        return group;\n      }\n    }\n\n    return undefined;\n  };\n\n  Grouping.prototype.isDateType = function (fieldName) {\n    for (var _i = 0, _a = this.parent.dataSourceSettings.formatSettings; _i < _a.length; _i++) {\n      var format = _a[_i];\n\n      if (format.name === fieldName && format.type) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Returns the selected members/headers by checing the valid members from the pivot table.\n   * @function getSelectedCells\n   * @param  {string} axis - Spicifies the axis name for the given field.\n   * @param  {string} fieldName - Gets selected members for the given field name.\n   * @param  {string} name - specifies the selected member name for the given field.\n   * @returns {SelectedCellsInfo[]} - return type\n   * @hidden\n   */\n\n\n  Grouping.prototype.getSelectedCells = function (axis, fieldName, name) {\n    var selectedCellsInfo = [];\n    /* eslint-disable */\n\n    var selectedElements = this.parent.element.querySelectorAll('.' + cls.CELL_SELECTED_BGCOLOR + ',.' + cls.SELECTED_BGCOLOR);\n    /* eslint-enable */\n\n    for (var _i = 0, selectedElements_1 = selectedElements; _i < selectedElements_1.length; _i++) {\n      var element = selectedElements_1[_i];\n      var colIndex = Number(element.getAttribute('aria-colindex'));\n      var rowIndex = Number(element.getAttribute('index'));\n      var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];\n\n      if (cell && cell.axis === axis && !(cell.type === 'grand sum' || cell.type === 'sum') && cell.valueSort.axis === fieldName && name !== cell.actualText.toString()) {\n        selectedCellsInfo.push({\n          axis: cell.axis,\n          fieldName: cell.valueSort.axis.toString(),\n          name: cell.actualText.toString(),\n          cellInfo: cell\n        });\n      }\n    }\n\n    return selectedCellsInfo;\n  };\n\n  Grouping.prototype.createGroupDialog = function (fieldName, type) {\n    var _this = this;\n\n    var groupDialog = createElement('div', {\n      id: this.parentElement.id + '_GroupDialog',\n      className: 'e-group-field-settings',\n      attrs: {\n        'data-field': fieldName,\n        'data-type': type\n      }\n    });\n    this.parentElement.appendChild(groupDialog);\n    this.groupDialog = new Dialog({\n      animationSettings: {\n        effect: 'Fade'\n      },\n      allowDragging: true,\n      header: this.parent.localeObj.getConstant('grouping'),\n      content: this.createGroupOptions(fieldName, type),\n      isModal: true,\n      visible: true,\n      showCloseIcon: true,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      width: 300,\n      height: 'auto',\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      buttons: [{\n        click: this.updateGroupSettings.bind(this),\n        buttonModel: {\n          cssClass: cls.OK_BUTTON_CLASS,\n          content: this.parent.localeObj.getConstant('ok'),\n          isPrimary: true\n        }\n      }, {\n        click: function () {\n          _this.groupDialog.hide();\n        },\n        buttonModel: {\n          cssClass: cls.CANCEL_BUTTON_CLASS,\n          content: this.parent.localeObj.getConstant('cancel')\n        }\n      }],\n      overlayClick: function () {\n        _this.removeDialog();\n      },\n      closeOnEscape: true,\n      close: this.removeDialog.bind(this),\n      target: this.parentElement\n    });\n    this.groupDialog.isStringTemplate = true;\n    this.groupDialog.appendTo(groupDialog);\n  };\n\n  Grouping.prototype.createGroupOptions = function (fieldName, type) {\n    var _this = this;\n\n    var groupInstance = this;\n    /* eslint-disable-line */\n\n    var mainDiv = createElement('div', {\n      className: 'e-group-field-div-content',\n      id: this.parentElement.id + '_group_field_div_content',\n      attrs: {\n        'data-fieldName': fieldName,\n        'data-type': type\n      }\n    });\n    var groupWrapperDiv1 = createElement('div', {\n      className: 'e-group-option-wrapper'\n    });\n    mainDiv.appendChild(groupWrapperDiv1); // this.parentElement.appendChild(mainDiv);\n\n    var dataSource = this.parent.dataSourceSettings;\n    var groupField = PivotUtil.getFieldByName(fieldName, dataSource.groupSettings);\n\n    switch (type) {\n      case 'custom':\n        {\n          var caption = void 0;\n          var dataFields = dataSource.rows;\n          dataFields = dataFields.concat(dataSource.columns, dataSource.values, dataSource.filters);\n          var actualField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ''), dataFields);\n          var currentField = PivotUtil.getFieldByName(fieldName, dataFields);\n          var nextField = PivotUtil.getFieldByName(fieldName + '_custom_group', dataFields);\n\n          if (currentField) {\n            var newFieldName = fieldName + '_custom_group';\n            caption = nextField ? nextField.caption : this.parent.engineModule.fieldList[actualField.name].caption + (newFieldName.match(/_custom_group/g).length + 1);\n          }\n\n          var captionInputTextDiv1 = createElement('div', {\n            className: 'e-caption-option-text',\n            innerHTML: this.parent.localeObj.getConstant('groupFieldCaption')\n          });\n          /* eslint-enable max-len */\n\n          var captionInputDiv1 = createElement('div', {\n            className: 'e-group-caption-wrapper'\n          });\n          var captionInputField1 = createElement('input', {\n            id: this.parentElement.id + 'group_caption_option',\n            className: 'e-group-caption-text',\n            attrs: {\n              'type': 'text'\n            }\n          });\n          captionInputDiv1.appendChild(captionInputTextDiv1);\n          captionInputDiv1.appendChild(captionInputField1);\n          groupWrapperDiv1.appendChild(captionInputDiv1);\n          var inputTextDiv1 = createElement('div', {\n            className: 'e-input-option-text',\n            innerHTML: this.parent.localeObj.getConstant('groupTitle')\n          });\n          var inputDiv1 = createElement('div', {\n            className: 'e-group-input-wrapper'\n          });\n          var inputField1 = createElement('input', {\n            id: this.parentElement.id + 'group_input_option',\n            className: 'e-group-input-text',\n            attrs: {\n              'type': 'text'\n            }\n          });\n          inputDiv1.appendChild(inputTextDiv1);\n          inputDiv1.appendChild(inputField1);\n          groupWrapperDiv1.appendChild(inputDiv1);\n          var captionInputObj1 = new MaskedTextBox({\n            placeholder: this.parent.localeObj.getConstant('captionName'),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            value: caption,\n            width: '100%'\n          });\n          captionInputObj1.isStringTemplate = true;\n          captionInputObj1.appendTo(captionInputField1);\n          var inputObj1 = new MaskedTextBox({\n            placeholder: this.parent.localeObj.getConstant('groupName'),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            width: '100%'\n          });\n          inputObj1.isStringTemplate = true;\n          inputObj1.appendTo(inputField1);\n        }\n        break;\n\n      case 'date':\n      case 'number':\n        {\n          var startAtWrapper = createElement('div', {\n            className: 'e-group-start-option-wrapper'\n          });\n          var startAtOptionDiv1 = createElement('input', {\n            id: this.parentElement.id + 'group_start_option',\n            className: 'e-group_start_option',\n            attrs: {\n              'type': 'checkbox'\n            }\n          });\n          var startAtInputField1 = createElement('input', {\n            id: this.parentElement.id + 'group_start_input',\n            className: 'e-group_start_input',\n            attrs: {\n              'type': 'text'\n            }\n          });\n          startAtWrapper.appendChild(startAtOptionDiv1);\n          startAtWrapper.appendChild(startAtInputField1);\n          groupWrapperDiv1.appendChild(startAtWrapper);\n          var endAtWrapper = createElement('div', {\n            className: 'e-group-end-option-wrapper'\n          });\n          var endAtOptionDiv1 = createElement('input', {\n            id: this.parentElement.id + 'group_end_option',\n            className: 'e-group_end_option',\n            attrs: {\n              'type': 'checkbox'\n            }\n          });\n          var endAtInputField1 = createElement('input', {\n            id: this.parentElement.id + 'group_end_input',\n            className: 'e-group_end_input',\n            attrs: {\n              'type': 'text'\n            }\n          });\n          endAtWrapper.appendChild(endAtOptionDiv1);\n          endAtWrapper.appendChild(endAtInputField1);\n          groupWrapperDiv1.appendChild(endAtWrapper);\n          var intervalWrapper = createElement('div', {\n            className: 'e-group-interval-option-wrapper'\n          });\n          var intervalTextDiv1 = createElement('div', {\n            className: 'e-group-inerval-option-text',\n            innerHTML: this.parent.localeObj.getConstant('groupBy')\n          });\n          var intervalInputField1 = createElement('input', {\n            id: this.parentElement.id + 'group_interval_input',\n            className: 'e-group_interval_input',\n            attrs: {\n              'type': 'text'\n            }\n          });\n          intervalWrapper.appendChild(intervalTextDiv1);\n          intervalWrapper.appendChild(intervalInputField1);\n          groupWrapperDiv1.appendChild(intervalWrapper);\n          var startAt = undefined;\n          var endAt = undefined;\n\n          if (type === 'date') {\n            var selectedGroups = [];\n            var groupData = [{\n              value: 'Seconds',\n              text: this.parent.localeObj.getConstant('Seconds')\n            }, {\n              value: 'Minutes',\n              text: this.parent.localeObj.getConstant('Minutes')\n            }, {\n              value: 'Hours',\n              text: this.parent.localeObj.getConstant('Hours')\n            }, {\n              value: 'Days',\n              text: this.parent.localeObj.getConstant('Days')\n            }, {\n              value: 'Months',\n              text: this.parent.localeObj.getConstant('Months')\n            }, {\n              value: 'QuarterYear',\n              text: this.parent.localeObj.getConstant('QuarterYear')\n            }, {\n              value: 'Quarters',\n              text: this.parent.localeObj.getConstant('Quarters')\n            }, {\n              value: 'Years',\n              text: this.parent.localeObj.getConstant('Years')\n            }];\n\n            if (groupField && groupField.type === 'Date') {\n              selectedGroups = groupField.groupInterval;\n              startAt = groupField.startingAt ? groupField.startingAt.toString() : undefined;\n              endAt = groupField.endingAt ? groupField.endingAt.toString() : undefined;\n            } else {\n              selectedGroups = ['Months'];\n            }\n\n            var startAtInputObj = new DateTimePicker({\n              placeholder: this.parent.localeObj.getConstant('chooseDate'),\n              enableRtl: this.parent.enableRtl,\n              locale: this.parent.locale,\n              format: 'dd/MM/yyyy hh:mm:ss a',\n              enabled: !(startAt === undefined),\n              width: '100%'\n            });\n            startAtInputObj.isStringTemplate = true;\n            startAtInputObj.appendTo(startAtInputField1);\n            var endAtInputObj = new DateTimePicker({\n              placeholder: this.parent.localeObj.getConstant('chooseDate'),\n              enableRtl: this.parent.enableRtl,\n              locale: this.parent.locale,\n              format: 'dd/MM/yyyy hh:mm:ss a',\n              enabled: !(endAt === undefined),\n              width: '100%'\n            });\n            endAtInputObj.isStringTemplate = true;\n            endAtInputObj.appendTo(endAtInputField1);\n            MultiSelect.Inject(CheckBoxSelection);\n            /* eslint-disable */\n\n            var intervalObj_1 = new MultiSelect({\n              dataSource: groupData,\n              value: selectedGroups,\n              fields: {\n                text: 'text',\n                value: 'value'\n              },\n              mode: 'CheckBox',\n              showDropDownIcon: true,\n              enableSelectionOrder: false,\n              placeholder: this.parent.localeObj.getConstant('selectGroup'),\n              filterBarPlaceholder: this.parent.localeObj.getConstant('example') + ' ' + this.parent.localeObj.getConstant('Months'),\n              enableRtl: this.parent.enableRtl,\n              locale: this.parent.locale,\n              select: function () {\n                groupInstance.groupDialog.element.querySelector('.' + cls.OK_BUTTON_CLASS).removeAttribute('disabled');\n              },\n              removed: function () {\n                if (intervalObj_1.checkBoxSelectionModule.activeLi.length === 0) {\n                  groupInstance.groupDialog.element.querySelector('.' + cls.OK_BUTTON_CLASS).setAttribute('disabled', 'disabled');\n                }\n              }\n            });\n            /* eslint-enable */\n\n            intervalObj_1.isStringTemplate = true;\n            intervalObj_1.appendTo(intervalInputField1);\n            startAtInputObj.value = startAt === undefined ? null : new Date(startAt);\n            startAtInputObj.dataBind();\n            endAtInputObj.value = endAt === undefined ? null : new Date(endAt);\n            endAtInputObj.dataBind();\n          } else {\n            var selectedInterval = undefined;\n\n            if (groupField && groupField.type === 'Number') {\n              selectedInterval = groupField.rangeInterval;\n              startAt = groupField.startingAt ? groupField.startingAt.toString() : undefined;\n              endAt = groupField.endingAt ? groupField.endingAt.toString() : undefined;\n            } else {\n              selectedInterval = 2;\n            }\n\n            var startAtInputObj = new NumericTextBox({\n              placeholder: this.parent.localeObj.getConstant('enterValue'),\n              enableRtl: this.parent.enableRtl,\n              locale: this.parent.locale,\n              showClearButton: true,\n              format: '###',\n              value: startAt === undefined ? undefined : parseInt(startAt, 10),\n              enabled: !(startAt === undefined),\n              width: '100%'\n            });\n            startAtInputObj.isStringTemplate = true;\n            startAtInputObj.appendTo(startAtInputField1);\n            var endAtInputObj = new NumericTextBox({\n              placeholder: this.parent.localeObj.getConstant('enterValue'),\n              enableRtl: this.parent.enableRtl,\n              locale: this.parent.locale,\n              showClearButton: true,\n              format: '###',\n              value: endAt === undefined ? undefined : parseInt(endAt, 10),\n              enabled: !(endAt === undefined),\n              width: '100%'\n            });\n            endAtInputObj.isStringTemplate = true;\n            endAtInputObj.appendTo(endAtInputField1);\n            var intervalObj = new NumericTextBox({\n              placeholder: this.parent.localeObj.getConstant('enterValue'),\n              enableRtl: this.parent.enableRtl,\n              locale: this.parent.locale,\n              showClearButton: true,\n              format: '###',\n              min: 1,\n              value: selectedInterval,\n              width: '100%'\n            });\n            intervalObj.isStringTemplate = true;\n            intervalObj.appendTo(intervalInputField1);\n          }\n\n          var startAtObj = new CheckBox({\n            label: this.parent.localeObj.getConstant('startAt'),\n            checked: !(startAt === undefined),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            change: function (args) {\n              var startAtObj = type === 'date' ? getInstance(select('#' + _this.parentElement.id + 'group_start_input'), DateTimePicker) : getInstance(select('#' + _this.parentElement.id + 'group_start_input'), NumericTextBox);\n              startAtObj.enabled = args.checked;\n              startAtObj.dataBind();\n            }\n          });\n          startAtObj.isStringTemplate = true;\n          startAtObj.appendTo(startAtOptionDiv1);\n          var endAtObj = new CheckBox({\n            label: this.parent.localeObj.getConstant('endAt'),\n            checked: !(endAt === undefined),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            change: function (args) {\n              var endAtObj = type === 'date' ? getInstance(select('#' + _this.parentElement.id + 'group_end_input'), DateTimePicker) : getInstance(select('#' + _this.parentElement.id + 'group_end_input'), NumericTextBox);\n              endAtObj.enabled = args.checked;\n              endAtObj.dataBind();\n            }\n          });\n          endAtObj.isStringTemplate = true;\n          endAtObj.appendTo(endAtOptionDiv1);\n        }\n        break;\n    }\n\n    return mainDiv;\n  };\n  /* eslint-disable  */\n\n\n  Grouping.prototype.updateGroupSettings = function () {\n    var dialogElement = this.groupDialog.element;\n    var groupType = dialogElement.getAttribute('data-type');\n    var fieldName = dialogElement.getAttribute('data-field');\n    var groupFields = PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);\n\n    if (groupFields.length === 0 && !this.parent.clonedDataSet && !this.parent.clonedReport) {\n      var dataSet = this.parent.engineModule.data;\n      this.parent.clonedDataSet = PivotUtil.getClonedData(dataSet);\n      this.parent.setProperties({\n        dataSourceSettings: {\n          dataSource: []\n        }\n      }, true);\n      this.parent.clonedReport = extend({}, this.parent.dataSourceSettings, null, true);\n      this.parent.setProperties({\n        dataSourceSettings: {\n          dataSource: dataSet\n        }\n      }, true);\n    }\n\n    if (groupType === 'custom') {\n      var inputInstance = getInstance(select('#' + this.parentElement.id + 'group_input_option'), MaskedTextBox);\n      var captionInputInstance = getInstance(select('#' + this.parentElement.id + 'group_caption_option'), MaskedTextBox);\n      removeClass([inputInstance.element], cls.EMPTY_FIELD);\n\n      if (inputInstance.value === null || inputInstance.value === '') {\n        addClass([inputInstance.element], cls.EMPTY_FIELD);\n        inputInstance.element.focus();\n        return;\n      }\n\n      var selectedOptions = this.getSelectedOptions(this.selectedCellsInfo);\n      var customGroup = {\n        groupName: inputInstance.value,\n        items: selectedOptions\n      };\n      var splicedItems = [];\n      var newItems = [];\n      var field = {\n        name: fieldName,\n        caption: captionInputInstance.value,\n        type: 'Custom',\n        customGroups: []\n      };\n      var isUpdated = false;\n\n      for (var i = 0, len = groupFields.length; i < len; i++) {\n        if (groupFields[i].name === fieldName) {\n          field = groupFields[i];\n          field.caption = captionInputInstance.value;\n\n          for (var j = 0, len_1 = field.customGroups.length; j < len_1; j++) {\n            if (field.customGroups[j]) {\n              var group = field.customGroups[j];\n\n              if (group.items && PivotUtil.isContainCommonElements(group.items, selectedOptions)) {\n                splicedItems = this.mergeArray(splicedItems, [group.groupName]);\n                newItems = this.mergeArray(newItems, group.items);\n                field.customGroups.splice(j, 1);\n                j--;\n                len_1--;\n              }\n            }\n          }\n\n          for (var _i = 0, selectedOptions_1 = selectedOptions; _i < selectedOptions_1.length; _i++) {\n            var item = selectedOptions_1[_i];\n            var index = newItems.indexOf(item);\n\n            if (index !== -1) {\n              newItems.splice(index, 1);\n            }\n          }\n\n          newItems = this.mergeArray(newItems, [customGroup.groupName]);\n          field.customGroups.push(customGroup);\n          this.isUpdate = true;\n          isUpdated = true;\n          break;\n        }\n      }\n\n      if (!isUpdated) {\n        field.customGroups.push(customGroup);\n        this.isUpdate = true;\n        groupFields.push(field);\n      }\n\n      groupFields = this.validateSettings(fieldName, groupFields, groupType, splicedItems.length === 0 ? customGroup.items : splicedItems, newItems);\n    } else if (groupType === 'date' || groupType === 'number') {\n      var startCheckBoxInstance = getInstance(select('#' + this.parentElement.id + 'group_start_option'), CheckBox);\n      var endCheckBoxInstance = getInstance(select('#' + this.parentElement.id + 'group_end_option'), CheckBox);\n      var startInputInstance = groupType === 'date' ? getInstance(select('#' + this.parentElement.id + 'group_start_input'), DateTimePicker) : getInstance(select('#' + this.parentElement.id + 'group_start_input'), NumericTextBox);\n      var endInputInstance = groupType === 'date' ? getInstance(select('#' + this.parentElement.id + 'group_end_input'), DateTimePicker) : getInstance(select('#' + this.parentElement.id + 'group_end_input'), NumericTextBox);\n      var intervalInstance = groupType === 'date' ? getInstance(select('#' + this.parentElement.id + 'group_interval_input'), MultiSelect) : getInstance(select('#' + this.parentElement.id + 'group_interval_input'), NumericTextBox);\n      var startAt = startCheckBoxInstance.checked ? startInputInstance.value.toString() : undefined;\n      var endAt = endCheckBoxInstance.checked ? endInputInstance.value.toString() : undefined;\n      var field = {\n        name: fieldName,\n        startingAt: startAt,\n        endingAt: endAt\n      };\n\n      if (groupType === 'date') {\n        var selectedItems = [];\n\n        for (var _a = 0, _b = intervalInstance.value; _a < _b.length; _a++) {\n          var list = _b[_a];\n          selectedItems.push(list);\n        }\n\n        field.type = 'Date';\n        field.groupInterval = selectedItems;\n      } else {\n        field.type = 'Number';\n        field.rangeInterval = intervalInstance.value;\n      }\n\n      var isUpdated = false;\n\n      for (var i = 0, len = groupFields.length; i < len; i++) {\n        if (groupFields[i].name === fieldName) {\n          groupFields.splice(i, 1, field);\n          this.isUpdate = true;\n          isUpdated = true;\n          break;\n        }\n      }\n\n      if (!isUpdated) {\n        this.isUpdate = true;\n        groupFields.push(field);\n      }\n\n      groupFields = this.validateSettings(fieldName, groupFields, groupType, [], []);\n    }\n\n    this.groupDialog.close();\n    this.updateDateSource(groupFields, groupType);\n  };\n\n  Grouping.prototype.getGroupBasedSettings = function (groupFields) {\n    var groups = {};\n\n    for (var _i = 0, groupFields_1 = groupFields; _i < groupFields_1.length; _i++) {\n      var group = groupFields_1[_i];\n\n      if (groups[group.type]) {\n        groups[group.type].push(group);\n      } else {\n        groups[group.type] = [group];\n      }\n    }\n\n    return groups;\n  };\n\n  Grouping.prototype.getGroupByName = function (groupFields) {\n    var customFields = {};\n\n    for (var _i = 0, groupFields_2 = groupFields; _i < groupFields_2.length; _i++) {\n      var field = groupFields_2[_i];\n      var name_1 = field.name.replace(/_custom_group/g, '');\n\n      if (customFields[name_1]) {\n        customFields[name_1].push(field);\n      } else {\n        customFields[name_1] = [field];\n      }\n    }\n\n    return customFields;\n  };\n\n  Grouping.prototype.validateSettings = function (fieldName, groupFields, groupType, splicedItems, newItems) {\n    var validatedSettings = [];\n    var groups = this.getGroupBasedSettings(groupFields);\n    var groupOrders = ['Date', 'Number', 'Custom'];\n\n    if (groups[groupOrders[2]] && groupType === 'custom') {\n      var customFields = this.getGroupByName(groups[groupOrders[2]]);\n\n      if (customFields[fieldName.replace(/_custom_group/g, '')]) {\n        var customGroups = customFields[fieldName.replace(/_custom_group/g, '')];\n        var fields = customGroups.map(function (item, pos) {\n          return item.name;\n        });\n\n        if (newItems) {\n          customGroups = this.modifyParentGroupItems(fieldName, customGroups, splicedItems, newItems, fields);\n        } else {\n          customGroups = this.removeGroupSettings(fieldName.replace('_custom_group', ''), splicedItems, customGroups, fields);\n        }\n      }\n\n      var orderedGroups = [];\n\n      for (var _i = 0, _a = Object.keys(customFields); _i < _a.length; _i++) {\n        var field = _a[_i];\n        var fields = customFields[field].map(function (item, pos) {\n          return item.name;\n        });\n        orderedGroups = this.reOrderSettings(customFields[field], fields, orderedGroups, field);\n      }\n\n      groups[groupOrders[2]] = orderedGroups;\n    } else if ((groupType === 'date' || groupType === 'number') && !newItems) {\n      var groupFields_3 = groupType === 'date' ? groups[groupOrders[0]] : groups[groupOrders[1]];\n\n      if (groupType === 'date') {\n        groups[groupOrders[0]] = groupFields_3.filter(function (field) {\n          return field.name !== fieldName;\n        });\n      } else {\n        groups[groupOrders[1]] = groupFields_3.filter(function (field) {\n          return field.name !== fieldName;\n        });\n      }\n\n      this.isUpdate = true;\n    }\n\n    for (var _b = 0, groupOrders_1 = groupOrders; _b < groupOrders_1.length; _b++) {\n      var order = groupOrders_1[_b];\n\n      if (groups[order]) {\n        validatedSettings = validatedSettings.concat(groups[order]);\n      }\n    }\n\n    return validatedSettings;\n  };\n\n  Grouping.prototype.reOrderSettings = function (customGroups, fields, orderedSettings, fieldName) {\n    var index = fields.indexOf(fieldName);\n\n    if (index > -1 && customGroups[index].customGroups && customGroups[index].customGroups.length > 0) {\n      orderedSettings.push(customGroups[index]);\n      this.reOrderSettings(customGroups, fields, orderedSettings, fieldName + '_custom_group');\n    }\n\n    return orderedSettings;\n  };\n\n  Grouping.prototype.modifyParentGroupItems = function (fieldName, groupFields, splicedItems, newItems, fields) {\n    var index = fields.indexOf(fieldName + '_custom_group');\n\n    if (index !== -1) {\n      var field = groupFields[index];\n      var selectedOptions = [];\n\n      if (field.customGroups && field.customGroups.length > 0) {\n        for (var i = 0, len = field.customGroups.length; i < len; i++) {\n          if (field.customGroups[i]) {\n            var isItemsUpdated = false;\n            var group = field.customGroups[i];\n\n            if (group.items) {\n              for (var _i = 0, splicedItems_1 = splicedItems; _i < splicedItems_1.length; _i++) {\n                var item = splicedItems_1[_i];\n                var pos = group.items.indexOf(item);\n\n                if (pos !== -1) {\n                  group.items.splice(pos, 1);\n                  this.isUpdate = true;\n                  isItemsUpdated = true;\n                }\n              }\n\n              if (isItemsUpdated) {\n                group.items = this.mergeArray(group.items, newItems);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return groupFields;\n  };\n\n  Grouping.prototype.mergeArray = function (collection1, collection2) {\n    var resultArray = [];\n    var array = collection1.concat(collection2);\n    var len = array.length;\n    var assoc = {};\n\n    while (len--) {\n      var item = String(array[len]);\n\n      if (!assoc[item]) {\n        resultArray.unshift(item);\n        assoc[item] = true;\n      }\n    }\n\n    return resultArray;\n  };\n\n  Grouping.prototype.removeDialog = function () {\n    if (this.parent.grid && this.parent.grid.isDestroyed) {\n      return;\n    }\n\n    this.parent.grid.clearSelection();\n\n    if (this.groupDialog && !this.groupDialog.isDestroyed) {\n      this.groupDialog.destroy();\n    }\n\n    if (this.parentElement && document.getElementById(this.parentElement.id + '_GroupDialog')) {\n      remove(document.getElementById(this.parentElement.id + '_GroupDialog'));\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Grouping.prototype.addEventListener = function () {\n    this.handlers = {\n      load: this.render\n    };\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.initGrouping, this.handlers.load, this); //For initial rendering\n  };\n  /**\n   * @hidden\n   */\n\n\n  Grouping.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeDialog();\n    this.parent.off(events.initGrouping, this.handlers.load);\n  };\n  /**\n   * To destroy the pivot button event listener\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Grouping.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return Grouping;\n}();\n\nexport { Grouping };","map":{"version":3,"sources":["/workspace/Commb-olap-poc/commb-olap-js/node_modules/@syncfusion/ej2-pivotview/src/common/popups/grouping.js"],"names":["createElement","remove","extend","getInstance","addClass","removeClass","isBlazor","select","cls","Dialog","MaskedTextBox","NumericTextBox","MultiSelect","CheckBoxSelection","PivotUtil","CheckBox","DateTimePicker","events","Grouping","parent","dateGroup","groupingModule","addEventListener","prototype","getModuleName","render","args","target","option","parentElement","selectedCellsInfo","isUpdate","colIndex","Number","getAttribute","rowIndex","cell","engineModule","pivotValues","fieldName","valueSort","axis","toString","getSelectedCells","actualText","push","name","cellInfo","replace","id","indexOf","createGroupSettings","updateUnGroupSettings","getSelectedOptions","selectedOptions","_i","selectedCellsInfo_1","length","inArray","fieldList","group","getGroupSettings","type","isInvalid","isCustomField","customGroup","isDateType","pivotCommon","errorDialog","createErrorDialog","localeObj","getConstant","grid","clearSelection","createGroupDialog","groupFields","cloneGroupSettings","dataSourceSettings","groupSettings","validateSettings","updateDateSource","setPivotProperties","setProperties","updateGroupingReport","notify","initialLoad","removeGroupSettings","groupNames","index","field","j","len","customGroups","groupName","modifyParentGroupItems","items","splice","_a","undefined","formatSettings","format","selectedElements","element","querySelectorAll","CELL_SELECTED_BGCOLOR","SELECTED_BGCOLOR","selectedElements_1","_this","groupDialog","className","attrs","appendChild","animationSettings","effect","allowDragging","header","content","createGroupOptions","isModal","visible","showCloseIcon","enableRtl","locale","width","height","position","X","Y","buttons","click","updateGroupSettings","bind","buttonModel","cssClass","OK_BUTTON_CLASS","isPrimary","hide","CANCEL_BUTTON_CLASS","overlayClick","removeDialog","closeOnEscape","close","isStringTemplate","appendTo","groupInstance","mainDiv","groupWrapperDiv1","dataSource","groupField","getFieldByName","caption","dataFields","rows","concat","columns","values","filters","actualField","currentField","nextField","newFieldName","match","captionInputTextDiv1","innerHTML","captionInputDiv1","captionInputField1","inputTextDiv1","inputDiv1","inputField1","captionInputObj1","placeholder","value","inputObj1","startAtWrapper","startAtOptionDiv1","startAtInputField1","endAtWrapper","endAtOptionDiv1","endAtInputField1","intervalWrapper","intervalTextDiv1","intervalInputField1","startAt","endAt","selectedGroups","groupData","text","groupInterval","startingAt","endingAt","startAtInputObj","enabled","endAtInputObj","Inject","intervalObj_1","fields","mode","showDropDownIcon","enableSelectionOrder","filterBarPlaceholder","querySelector","removeAttribute","removed","checkBoxSelectionModule","activeLi","setAttribute","Date","dataBind","selectedInterval","rangeInterval","showClearButton","parseInt","intervalObj","min","startAtObj","label","checked","change","endAtObj","dialogElement","groupType","clonedDataSet","clonedReport","dataSet","data","getClonedData","inputInstance","captionInputInstance","EMPTY_FIELD","focus","splicedItems","newItems","isUpdated","i","len_1","isContainCommonElements","mergeArray","selectedOptions_1","item","startCheckBoxInstance","endCheckBoxInstance","startInputInstance","endInputInstance","intervalInstance","selectedItems","_b","list","getGroupBasedSettings","groups","groupFields_1","getGroupByName","customFields","groupFields_2","name_1","validatedSettings","groupOrders","map","pos","orderedGroups","Object","keys","reOrderSettings","groupFields_3","filter","groupOrders_1","order","orderedSettings","isItemsUpdated","splicedItems_1","collection1","collection2","resultArray","array","assoc","String","unshift","isDestroyed","destroy","document","getElementById","handlers","load","on","initGrouping","removeEventListener","off"],"mappings":"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","sourcesContent":["import { createElement, remove, extend, getInstance, addClass, removeClass, isBlazor, select } from '@syncfusion/ej2-base';\nimport * as cls from '../base/css-constant';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { MaskedTextBox, NumericTextBox } from '@syncfusion/ej2-inputs';\nimport { MultiSelect, CheckBoxSelection } from '@syncfusion/ej2-dropdowns';\nimport { PivotUtil } from '../../base/util';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { DateTimePicker } from '@syncfusion/ej2-calendars';\nimport * as events from '../../common/base/constant';\n/**\n * `Grouping` module to create grouping option for date, number and custom in popup.\n */\n/** @hidden */\nvar Grouping = /** @class */ (function () {\n    /* eslint-disable-next-line */\n    /**\n     * Constructor for the group UI rendering.\n     * @hidden\n     */\n    function Grouping(parent) {\n        this.dateGroup = /_date_group_years|_date_group_quarters|_date_group_quarterYear|_date_group_months|_date_group_days|_date_group_hours|_date_group_minutes|_date_group_seconds/g;\n        this.parent = parent;\n        this.parent.groupingModule = this;\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     * @returns {string} - string\n     * @private\n     */\n    Grouping.prototype.getModuleName = function () {\n        return 'grouping';\n    };\n    Grouping.prototype.render = function (args) {\n        var target = args.target;\n        var option = args.option;\n        var parentElement = args.parentElement;\n        this.parentElement = parentElement;\n        this.selectedCellsInfo = [];\n        this.isUpdate = false;\n        var colIndex = Number(target.getAttribute('aria-colindex'));\n        var rowIndex = Number(target.getAttribute('index'));\n        var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];\n        var fieldName = cell.valueSort.axis.toString();\n        this.selectedCellsInfo = this.getSelectedCells(cell.axis, fieldName, cell.actualText.toString());\n        this.selectedCellsInfo.push({ axis: cell.axis, fieldName: fieldName, name: cell.actualText.toString(), cellInfo: cell });\n        if (option.replace(parentElement.id, '').indexOf('_custom_group') !== -1) {\n            this.createGroupSettings(fieldName);\n        }\n        else {\n            this.updateUnGroupSettings(fieldName);\n        }\n    };\n    /**\n     * Returns the selected members/headers by checing the valid members from the pivot table.\n     * @function getSelectedOptions\n     * @param  {SelectedCellsInfo[]} selectedCellsInfo - Get the members name from the given selected cells information\n     * @returns {string[]} - string\n     * @hidden\n     */\n    Grouping.prototype.getSelectedOptions = function (selectedCellsInfo) {\n        var selectedOptions = [];\n        for (var _i = 0, selectedCellsInfo_1 = selectedCellsInfo; _i < selectedCellsInfo_1.length; _i++) {\n            var option = selectedCellsInfo_1[_i];\n            if (PivotUtil.inArray(option.name, selectedOptions) === -1) {\n                selectedOptions.push(option.name);\n            }\n        }\n        return selectedOptions;\n    };\n    Grouping.prototype.createGroupSettings = function (fieldName) {\n        var fieldList = this.parent.engineModule.fieldList[fieldName];\n        var group = this.getGroupSettings(fieldName);\n        if (this.selectedCellsInfo.length > 0) {\n            var type = void 0;\n            var isInvalid = false;\n            if (fieldList.isCustomField) {\n                if (!group) {\n                    var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ''));\n                    var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ''));\n                    if (dateGroup) {\n                        isInvalid = false;\n                        type = 'date';\n                        fieldName = fieldName.replace(this.dateGroup, '');\n                    }\n                    else if (customGroup) {\n                        isInvalid = this.selectedCellsInfo.length === 1;\n                        type = 'custom';\n                    }\n                }\n                else if (group && group.type === 'Custom') {\n                    if (this.selectedCellsInfo.length === 1) {\n                        isInvalid = true;\n                    }\n                    else {\n                        isInvalid = false;\n                        type = 'custom';\n                    }\n                }\n                else if (group && group.type === 'Number') {\n                    isInvalid = false;\n                    type = 'number';\n                }\n            }\n            else {\n                if (group) {\n                    if (group.type === 'Number' || group.type === 'Date') {\n                        isInvalid = false;\n                        type = group.type === 'Date' ? 'date' : 'number';\n                    }\n                    else if (group.type === 'Custom') {\n                        isInvalid = this.selectedCellsInfo.length === 1;\n                        type = 'custom';\n                    }\n                }\n                else {\n                    if (fieldList.type === 'number' ||\n                        (['datetime', 'date']).indexOf(fieldList.type) !== -1 || this.isDateType(fieldName)) {\n                        isInvalid = false;\n                        type = (this.selectedCellsInfo.length === 1 ? ((['datetime', 'date']).indexOf(fieldList.type) !== -1 ||\n                            this.isDateType(fieldName)) ? 'date' : 'number' : 'custom');\n                    }\n                    else if (fieldList.type === 'string') {\n                        isInvalid = this.selectedCellsInfo.length === 1;\n                        type = 'custom';\n                    }\n                }\n            }\n            if (isInvalid) {\n                this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('warning'), this.parent.localeObj.getConstant('invalidSelection'));\n                this.parent.grid.clearSelection();\n            }\n            else if (type && type !== '') {\n                this.createGroupDialog(fieldName, type);\n            }\n        }\n    };\n    Grouping.prototype.updateUnGroupSettings = function (fieldName) {\n        var fieldList = this.parent.engineModule.fieldList[fieldName];\n        var groupFields = PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);\n        var group = this.getGroupSettings(fieldName);\n        if (this.selectedCellsInfo.length > 0) {\n            var type = void 0;\n            if (fieldList.isCustomField) {\n                if (!group) {\n                    var dateGroup = this.getGroupSettings(fieldName.replace(this.dateGroup, ''));\n                    var customGroup = this.getGroupSettings(fieldName.replace(/_custom_group/g, ''));\n                    if (dateGroup) {\n                        type = 'date';\n                        fieldName = fieldName.replace(this.dateGroup, '');\n                    }\n                    else if (customGroup) {\n                        type = 'custom';\n                    }\n                }\n                else if (group.type === 'Custom') {\n                    type = 'custom';\n                }\n            }\n            else {\n                if (group) {\n                    if (group.type === 'Number' || group.type === 'Date') {\n                        type = group.type === 'Date' ? 'date' : 'number';\n                    }\n                }\n            }\n            if (type === 'date' || type === 'number') {\n                groupFields = this.validateSettings(fieldName, groupFields, type, []);\n            }\n            else if (type === 'custom') {\n                var selectedOptions = this.getSelectedOptions(this.selectedCellsInfo);\n                groupFields = this.validateSettings(fieldName, groupFields, type, selectedOptions);\n            }\n            this.updateDateSource(groupFields, type);\n        }\n    };\n    Grouping.prototype.updateDateSource = function (groupFields, type) {\n        if (this.isUpdate) {\n            if (isBlazor()) {\n                PivotUtil.setPivotProperties(this.parent, { dataSourceSettings: { groupSettings: groupFields } });\n            }\n            else {\n                this.parent.setProperties({ dataSourceSettings: { groupSettings: groupFields } }, true);\n            }\n            this.parent.updateGroupingReport(groupFields, (type === 'date' ? 'Date' : type === 'custom' ? 'Custom' : 'Number'));\n            this.parent.notify(events.initialLoad, {});\n        }\n    };\n    Grouping.prototype.removeGroupSettings = function (fieldName, selectedOptions, groupFields, groupNames, type) {\n        var index = groupNames.indexOf(fieldName);\n        if (index !== -1) {\n            var field = groupFields[index];\n            for (var j = 0, len = field.customGroups.length; j < len; j++) {\n                if (field.customGroups[j]) {\n                    var group = field.customGroups[j];\n                    if (PivotUtil.inArray(group.groupName, selectedOptions) !== -1) {\n                        groupFields = this.modifyParentGroupItems(fieldName, groupFields, [group.groupName], group.items, groupNames);\n                        field.customGroups.splice(j, 1);\n                        this.isUpdate = true;\n                        j--;\n                        len--;\n                    }\n                }\n            }\n        }\n        return groupFields;\n    };\n    Grouping.prototype.getGroupSettings = function (fieldName) {\n        for (var _i = 0, _a = this.parent.dataSourceSettings.groupSettings; _i < _a.length; _i++) {\n            var group = _a[_i];\n            if (group.name === fieldName) {\n                return group;\n            }\n        }\n        return undefined;\n    };\n    Grouping.prototype.isDateType = function (fieldName) {\n        for (var _i = 0, _a = this.parent.dataSourceSettings.formatSettings; _i < _a.length; _i++) {\n            var format = _a[_i];\n            if (format.name === fieldName && format.type) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Returns the selected members/headers by checing the valid members from the pivot table.\n     * @function getSelectedCells\n     * @param  {string} axis - Spicifies the axis name for the given field.\n     * @param  {string} fieldName - Gets selected members for the given field name.\n     * @param  {string} name - specifies the selected member name for the given field.\n     * @returns {SelectedCellsInfo[]} - return type\n     * @hidden\n     */\n    Grouping.prototype.getSelectedCells = function (axis, fieldName, name) {\n        var selectedCellsInfo = [];\n        /* eslint-disable */\n        var selectedElements = this.parent.element.querySelectorAll('.' + cls.CELL_SELECTED_BGCOLOR + ',.' + cls.SELECTED_BGCOLOR);\n        /* eslint-enable */\n        for (var _i = 0, selectedElements_1 = selectedElements; _i < selectedElements_1.length; _i++) {\n            var element = selectedElements_1[_i];\n            var colIndex = Number(element.getAttribute('aria-colindex'));\n            var rowIndex = Number(element.getAttribute('index'));\n            var cell = this.parent.engineModule.pivotValues[rowIndex][colIndex];\n            if (cell && (cell.axis === axis) && !(cell.type === 'grand sum' || cell.type === 'sum') &&\n                cell.valueSort.axis === fieldName && name !== cell.actualText.toString()) {\n                selectedCellsInfo.push({\n                    axis: cell.axis,\n                    fieldName: cell.valueSort.axis.toString(),\n                    name: cell.actualText.toString(),\n                    cellInfo: cell\n                });\n            }\n        }\n        return selectedCellsInfo;\n    };\n    Grouping.prototype.createGroupDialog = function (fieldName, type) {\n        var _this = this;\n        var groupDialog = createElement('div', {\n            id: this.parentElement.id + '_GroupDialog',\n            className: 'e-group-field-settings',\n            attrs: { 'data-field': fieldName, 'data-type': type }\n        });\n        this.parentElement.appendChild(groupDialog);\n        this.groupDialog = new Dialog({\n            animationSettings: { effect: 'Fade' },\n            allowDragging: true,\n            header: this.parent.localeObj.getConstant('grouping'),\n            content: this.createGroupOptions(fieldName, type),\n            isModal: true,\n            visible: true,\n            showCloseIcon: true,\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            width: 300,\n            height: 'auto',\n            position: { X: 'center', Y: 'center' },\n            buttons: [\n                {\n                    click: this.updateGroupSettings.bind(this),\n                    buttonModel: { cssClass: cls.OK_BUTTON_CLASS, content: this.parent.localeObj.getConstant('ok'), isPrimary: true }\n                },\n                {\n                    click: function () {\n                        _this.groupDialog.hide();\n                    },\n                    buttonModel: { cssClass: cls.CANCEL_BUTTON_CLASS, content: this.parent.localeObj.getConstant('cancel') }\n                }\n            ],\n            overlayClick: function () {\n                _this.removeDialog();\n            },\n            closeOnEscape: true,\n            close: this.removeDialog.bind(this),\n            target: this.parentElement\n        });\n        this.groupDialog.isStringTemplate = true;\n        this.groupDialog.appendTo(groupDialog);\n    };\n    Grouping.prototype.createGroupOptions = function (fieldName, type) {\n        var _this = this;\n        var groupInstance = this; /* eslint-disable-line */\n        var mainDiv = createElement('div', {\n            className: 'e-group-field-div-content', id: this.parentElement.id + '_group_field_div_content',\n            attrs: { 'data-fieldName': fieldName, 'data-type': type }\n        });\n        var groupWrapperDiv1 = createElement('div', { className: 'e-group-option-wrapper' });\n        mainDiv.appendChild(groupWrapperDiv1);\n        // this.parentElement.appendChild(mainDiv);\n        var dataSource = this.parent.dataSourceSettings;\n        var groupField = PivotUtil.getFieldByName(fieldName, dataSource.groupSettings);\n        switch (type) {\n            case 'custom':\n                {\n                    var caption = void 0;\n                    var dataFields = dataSource.rows;\n                    dataFields = dataFields.concat(dataSource.columns, dataSource.values, dataSource.filters);\n                    var actualField = PivotUtil.getFieldByName(fieldName.replace(/_custom_group/g, ''), dataFields);\n                    var currentField = PivotUtil.getFieldByName(fieldName, dataFields);\n                    var nextField = PivotUtil.getFieldByName(fieldName + '_custom_group', dataFields);\n                    if (currentField) {\n                        var newFieldName = fieldName + '_custom_group';\n                        caption = nextField ? nextField.caption :\n                            this.parent.engineModule.fieldList[actualField.name].caption + (newFieldName.match(/_custom_group/g).length + 1);\n                    }\n                    var captionInputTextDiv1 = createElement('div', {\n                        className: 'e-caption-option-text', innerHTML: this.parent.localeObj.getConstant('groupFieldCaption')\n                    });\n                    /* eslint-enable max-len */\n                    var captionInputDiv1 = createElement('div', { className: 'e-group-caption-wrapper' });\n                    var captionInputField1 = createElement('input', {\n                        id: this.parentElement.id + 'group_caption_option',\n                        className: 'e-group-caption-text',\n                        attrs: { 'type': 'text' }\n                    });\n                    captionInputDiv1.appendChild(captionInputTextDiv1);\n                    captionInputDiv1.appendChild(captionInputField1);\n                    groupWrapperDiv1.appendChild(captionInputDiv1);\n                    var inputTextDiv1 = createElement('div', {\n                        className: 'e-input-option-text', innerHTML: this.parent.localeObj.getConstant('groupTitle')\n                    });\n                    var inputDiv1 = createElement('div', { className: 'e-group-input-wrapper' });\n                    var inputField1 = createElement('input', {\n                        id: this.parentElement.id + 'group_input_option',\n                        className: 'e-group-input-text',\n                        attrs: { 'type': 'text' }\n                    });\n                    inputDiv1.appendChild(inputTextDiv1);\n                    inputDiv1.appendChild(inputField1);\n                    groupWrapperDiv1.appendChild(inputDiv1);\n                    var captionInputObj1 = new MaskedTextBox({\n                        placeholder: this.parent.localeObj.getConstant('captionName'),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        value: caption, width: '100%'\n                    });\n                    captionInputObj1.isStringTemplate = true;\n                    captionInputObj1.appendTo(captionInputField1);\n                    var inputObj1 = new MaskedTextBox({\n                        placeholder: this.parent.localeObj.getConstant('groupName'),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        width: '100%'\n                    });\n                    inputObj1.isStringTemplate = true;\n                    inputObj1.appendTo(inputField1);\n                }\n                break;\n            case 'date':\n            case 'number':\n                {\n                    var startAtWrapper = createElement('div', {\n                        className: 'e-group-start-option-wrapper'\n                    });\n                    var startAtOptionDiv1 = createElement('input', {\n                        id: this.parentElement.id + 'group_start_option',\n                        className: 'e-group_start_option',\n                        attrs: { 'type': 'checkbox' }\n                    });\n                    var startAtInputField1 = createElement('input', {\n                        id: this.parentElement.id + 'group_start_input',\n                        className: 'e-group_start_input',\n                        attrs: { 'type': 'text' }\n                    });\n                    startAtWrapper.appendChild(startAtOptionDiv1);\n                    startAtWrapper.appendChild(startAtInputField1);\n                    groupWrapperDiv1.appendChild(startAtWrapper);\n                    var endAtWrapper = createElement('div', {\n                        className: 'e-group-end-option-wrapper'\n                    });\n                    var endAtOptionDiv1 = createElement('input', {\n                        id: this.parentElement.id + 'group_end_option',\n                        className: 'e-group_end_option',\n                        attrs: { 'type': 'checkbox' }\n                    });\n                    var endAtInputField1 = createElement('input', {\n                        id: this.parentElement.id + 'group_end_input',\n                        className: 'e-group_end_input',\n                        attrs: { 'type': 'text' }\n                    });\n                    endAtWrapper.appendChild(endAtOptionDiv1);\n                    endAtWrapper.appendChild(endAtInputField1);\n                    groupWrapperDiv1.appendChild(endAtWrapper);\n                    var intervalWrapper = createElement('div', {\n                        className: 'e-group-interval-option-wrapper'\n                    });\n                    var intervalTextDiv1 = createElement('div', {\n                        className: 'e-group-inerval-option-text', innerHTML: this.parent.localeObj.getConstant('groupBy')\n                    });\n                    var intervalInputField1 = createElement('input', {\n                        id: this.parentElement.id + 'group_interval_input',\n                        className: 'e-group_interval_input',\n                        attrs: { 'type': 'text' }\n                    });\n                    intervalWrapper.appendChild(intervalTextDiv1);\n                    intervalWrapper.appendChild(intervalInputField1);\n                    groupWrapperDiv1.appendChild(intervalWrapper);\n                    var startAt = undefined;\n                    var endAt = undefined;\n                    if (type === 'date') {\n                        var selectedGroups = [];\n                        var groupData = [\n                            { value: 'Seconds', text: this.parent.localeObj.getConstant('Seconds') },\n                            { value: 'Minutes', text: this.parent.localeObj.getConstant('Minutes') },\n                            { value: 'Hours', text: this.parent.localeObj.getConstant('Hours') },\n                            { value: 'Days', text: this.parent.localeObj.getConstant('Days') },\n                            { value: 'Months', text: this.parent.localeObj.getConstant('Months') },\n                            { value: 'QuarterYear', text: this.parent.localeObj.getConstant('QuarterYear') },\n                            { value: 'Quarters', text: this.parent.localeObj.getConstant('Quarters') },\n                            { value: 'Years', text: this.parent.localeObj.getConstant('Years') }\n                        ];\n                        if (groupField && groupField.type === 'Date') {\n                            selectedGroups = groupField.groupInterval;\n                            startAt = groupField.startingAt ? groupField.startingAt.toString() : undefined;\n                            endAt = groupField.endingAt ? groupField.endingAt.toString() : undefined;\n                        }\n                        else {\n                            selectedGroups = ['Months'];\n                        }\n                        var startAtInputObj = new DateTimePicker({\n                            placeholder: this.parent.localeObj.getConstant('chooseDate'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            format: 'dd/MM/yyyy hh:mm:ss a',\n                            enabled: !(startAt === undefined),\n                            width: '100%'\n                        });\n                        startAtInputObj.isStringTemplate = true;\n                        startAtInputObj.appendTo(startAtInputField1);\n                        var endAtInputObj = new DateTimePicker({\n                            placeholder: this.parent.localeObj.getConstant('chooseDate'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            format: 'dd/MM/yyyy hh:mm:ss a',\n                            enabled: !(endAt === undefined),\n                            width: '100%'\n                        });\n                        endAtInputObj.isStringTemplate = true;\n                        endAtInputObj.appendTo(endAtInputField1);\n                        MultiSelect.Inject(CheckBoxSelection);\n                        /* eslint-disable */\n                        var intervalObj_1 = new MultiSelect({\n                            dataSource: groupData,\n                            value: selectedGroups,\n                            fields: { text: 'text', value: 'value' },\n                            mode: 'CheckBox',\n                            showDropDownIcon: true,\n                            enableSelectionOrder: false,\n                            placeholder: this.parent.localeObj.getConstant('selectGroup'),\n                            filterBarPlaceholder: this.parent.localeObj.getConstant('example') + ' ' + this.parent.localeObj.getConstant('Months'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            select: function () {\n                                groupInstance.groupDialog.element.querySelector('.' + cls.OK_BUTTON_CLASS).removeAttribute('disabled');\n                            },\n                            removed: function () {\n                                if (intervalObj_1.checkBoxSelectionModule.activeLi.length === 0) {\n                                    groupInstance.groupDialog.element.querySelector('.' + cls.OK_BUTTON_CLASS).setAttribute('disabled', 'disabled');\n                                }\n                            }\n                        });\n                        /* eslint-enable */\n                        intervalObj_1.isStringTemplate = true;\n                        intervalObj_1.appendTo(intervalInputField1);\n                        startAtInputObj.value = startAt === undefined ? null : new Date(startAt);\n                        startAtInputObj.dataBind();\n                        endAtInputObj.value = endAt === undefined ? null : new Date(endAt);\n                        endAtInputObj.dataBind();\n                    }\n                    else {\n                        var selectedInterval = undefined;\n                        if (groupField && groupField.type === 'Number') {\n                            selectedInterval = groupField.rangeInterval;\n                            startAt = groupField.startingAt ? groupField.startingAt.toString() : undefined;\n                            endAt = groupField.endingAt ? groupField.endingAt.toString() : undefined;\n                        }\n                        else {\n                            selectedInterval = 2;\n                        }\n                        var startAtInputObj = new NumericTextBox({\n                            placeholder: this.parent.localeObj.getConstant('enterValue'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            showClearButton: true,\n                            format: '###',\n                            value: startAt === undefined ? undefined : parseInt(startAt, 10),\n                            enabled: !(startAt === undefined),\n                            width: '100%'\n                        });\n                        startAtInputObj.isStringTemplate = true;\n                        startAtInputObj.appendTo(startAtInputField1);\n                        var endAtInputObj = new NumericTextBox({\n                            placeholder: this.parent.localeObj.getConstant('enterValue'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            showClearButton: true,\n                            format: '###',\n                            value: endAt === undefined ? undefined : parseInt(endAt, 10),\n                            enabled: !(endAt === undefined),\n                            width: '100%'\n                        });\n                        endAtInputObj.isStringTemplate = true;\n                        endAtInputObj.appendTo(endAtInputField1);\n                        var intervalObj = new NumericTextBox({\n                            placeholder: this.parent.localeObj.getConstant('enterValue'),\n                            enableRtl: this.parent.enableRtl,\n                            locale: this.parent.locale,\n                            showClearButton: true,\n                            format: '###',\n                            min: 1,\n                            value: selectedInterval,\n                            width: '100%'\n                        });\n                        intervalObj.isStringTemplate = true;\n                        intervalObj.appendTo(intervalInputField1);\n                    }\n                    var startAtObj = new CheckBox({\n                        label: this.parent.localeObj.getConstant('startAt'),\n                        checked: !(startAt === undefined),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        change: function (args) {\n                            var startAtObj = (type === 'date' ?\n                                getInstance(select('#' + _this.parentElement.id + 'group_start_input'), DateTimePicker) :\n                                getInstance(select('#' + _this.parentElement.id + 'group_start_input'), NumericTextBox));\n                            startAtObj.enabled = args.checked;\n                            startAtObj.dataBind();\n                        }\n                    });\n                    startAtObj.isStringTemplate = true;\n                    startAtObj.appendTo(startAtOptionDiv1);\n                    var endAtObj = new CheckBox({\n                        label: this.parent.localeObj.getConstant('endAt'),\n                        checked: !(endAt === undefined),\n                        enableRtl: this.parent.enableRtl,\n                        locale: this.parent.locale,\n                        change: function (args) {\n                            var endAtObj = (type === 'date' ?\n                                getInstance(select('#' + _this.parentElement.id + 'group_end_input'), DateTimePicker) :\n                                getInstance(select('#' + _this.parentElement.id + 'group_end_input'), NumericTextBox));\n                            endAtObj.enabled = args.checked;\n                            endAtObj.dataBind();\n                        }\n                    });\n                    endAtObj.isStringTemplate = true;\n                    endAtObj.appendTo(endAtOptionDiv1);\n                }\n                break;\n        }\n        return mainDiv;\n    };\n    /* eslint-disable  */\n    Grouping.prototype.updateGroupSettings = function () {\n        var dialogElement = this.groupDialog.element;\n        var groupType = dialogElement.getAttribute('data-type');\n        var fieldName = dialogElement.getAttribute('data-field');\n        var groupFields = PivotUtil.cloneGroupSettings(this.parent.dataSourceSettings.groupSettings);\n        if (groupFields.length === 0 && !this.parent.clonedDataSet && !this.parent.clonedReport) {\n            var dataSet = this.parent.engineModule.data;\n            this.parent.clonedDataSet = PivotUtil.getClonedData(dataSet);\n            this.parent.setProperties({ dataSourceSettings: { dataSource: [] } }, true);\n            this.parent.clonedReport = extend({}, this.parent.dataSourceSettings, null, true);\n            this.parent.setProperties({ dataSourceSettings: { dataSource: dataSet } }, true);\n        }\n        if (groupType === 'custom') {\n            var inputInstance = getInstance(select('#' + this.parentElement.id + 'group_input_option'), MaskedTextBox);\n            var captionInputInstance = getInstance(select('#' + this.parentElement.id + 'group_caption_option'), MaskedTextBox);\n            removeClass([inputInstance.element], cls.EMPTY_FIELD);\n            if (inputInstance.value === null || inputInstance.value === '') {\n                addClass([inputInstance.element], cls.EMPTY_FIELD);\n                inputInstance.element.focus();\n                return;\n            }\n            var selectedOptions = this.getSelectedOptions(this.selectedCellsInfo);\n            var customGroup = { groupName: inputInstance.value, items: selectedOptions };\n            var splicedItems = [];\n            var newItems = [];\n            var field = { name: fieldName, caption: captionInputInstance.value, type: 'Custom', customGroups: [] };\n            var isUpdated = false;\n            for (var i = 0, len = groupFields.length; i < len; i++) {\n                if (groupFields[i].name === fieldName) {\n                    field = groupFields[i];\n                    field.caption = captionInputInstance.value;\n                    for (var j = 0, len_1 = field.customGroups.length; j < len_1; j++) {\n                        if (field.customGroups[j]) {\n                            var group = field.customGroups[j];\n                            if (group.items && PivotUtil.isContainCommonElements(group.items, selectedOptions)) {\n                                splicedItems = this.mergeArray(splicedItems, [group.groupName]);\n                                newItems = this.mergeArray(newItems, group.items);\n                                field.customGroups.splice(j, 1);\n                                j--;\n                                len_1--;\n                            }\n                        }\n                    }\n                    for (var _i = 0, selectedOptions_1 = selectedOptions; _i < selectedOptions_1.length; _i++) {\n                        var item = selectedOptions_1[_i];\n                        var index = newItems.indexOf(item);\n                        if (index !== -1) {\n                            newItems.splice(index, 1);\n                        }\n                    }\n                    newItems = this.mergeArray(newItems, [customGroup.groupName]);\n                    field.customGroups.push(customGroup);\n                    this.isUpdate = true;\n                    isUpdated = true;\n                    break;\n                }\n            }\n            if (!isUpdated) {\n                field.customGroups.push(customGroup);\n                this.isUpdate = true;\n                groupFields.push(field);\n            }\n            groupFields = this.validateSettings(fieldName, groupFields, groupType, (splicedItems.length === 0 ? customGroup.items : splicedItems), newItems);\n        }\n        else if (groupType === 'date' || groupType === 'number') {\n            var startCheckBoxInstance = getInstance(select('#' + this.parentElement.id + 'group_start_option'), CheckBox);\n            var endCheckBoxInstance = getInstance(select('#' + this.parentElement.id + 'group_end_option'), CheckBox);\n            var startInputInstance = (groupType === 'date' ?\n                getInstance(select('#' + this.parentElement.id + 'group_start_input'), DateTimePicker) :\n                getInstance(select('#' + this.parentElement.id + 'group_start_input'), NumericTextBox));\n            var endInputInstance = (groupType === 'date' ?\n                getInstance(select('#' + this.parentElement.id + 'group_end_input'), DateTimePicker) :\n                getInstance(select('#' + this.parentElement.id + 'group_end_input'), NumericTextBox));\n            var intervalInstance = (groupType === 'date' ?\n                getInstance(select('#' + this.parentElement.id + 'group_interval_input'), MultiSelect) :\n                getInstance(select('#' + this.parentElement.id + 'group_interval_input'), NumericTextBox));\n            var startAt = startCheckBoxInstance.checked ? startInputInstance.value.toString() : undefined;\n            var endAt = endCheckBoxInstance.checked ? endInputInstance.value.toString() : undefined;\n            var field = { name: fieldName, startingAt: startAt, endingAt: endAt };\n            if (groupType === 'date') {\n                var selectedItems = [];\n                for (var _a = 0, _b = intervalInstance.value; _a < _b.length; _a++) {\n                    var list = _b[_a];\n                    selectedItems.push(list);\n                }\n                field.type = 'Date';\n                field.groupInterval = selectedItems;\n            }\n            else {\n                field.type = 'Number';\n                field.rangeInterval = intervalInstance.value;\n            }\n            var isUpdated = false;\n            for (var i = 0, len = groupFields.length; i < len; i++) {\n                if (groupFields[i].name === fieldName) {\n                    groupFields.splice(i, 1, field);\n                    this.isUpdate = true;\n                    isUpdated = true;\n                    break;\n                }\n            }\n            if (!isUpdated) {\n                this.isUpdate = true;\n                groupFields.push(field);\n            }\n            groupFields = this.validateSettings(fieldName, groupFields, groupType, [], []);\n        }\n        this.groupDialog.close();\n        this.updateDateSource(groupFields, groupType);\n    };\n    Grouping.prototype.getGroupBasedSettings = function (groupFields) {\n        var groups = {};\n        for (var _i = 0, groupFields_1 = groupFields; _i < groupFields_1.length; _i++) {\n            var group = groupFields_1[_i];\n            if (groups[group.type]) {\n                groups[group.type].push(group);\n            }\n            else {\n                groups[group.type] = [group];\n            }\n        }\n        return groups;\n    };\n    Grouping.prototype.getGroupByName = function (groupFields) {\n        var customFields = {};\n        for (var _i = 0, groupFields_2 = groupFields; _i < groupFields_2.length; _i++) {\n            var field = groupFields_2[_i];\n            var name_1 = field.name.replace(/_custom_group/g, '');\n            if (customFields[name_1]) {\n                customFields[name_1].push(field);\n            }\n            else {\n                customFields[name_1] = [field];\n            }\n        }\n        return customFields;\n    };\n    Grouping.prototype.validateSettings = function (fieldName, groupFields, groupType, splicedItems, newItems) {\n        var validatedSettings = [];\n        var groups = this.getGroupBasedSettings(groupFields);\n        var groupOrders = ['Date', 'Number', 'Custom'];\n        if (groups[groupOrders[2]] && groupType === 'custom') {\n            var customFields = this.getGroupByName(groups[groupOrders[2]]);\n            if (customFields[fieldName.replace(/_custom_group/g, '')]) {\n                var customGroups = customFields[fieldName.replace(/_custom_group/g, '')];\n                var fields = customGroups.map(function (item, pos) { return item.name; });\n                if (newItems) {\n                    customGroups = this.modifyParentGroupItems(fieldName, customGroups, splicedItems, newItems, fields);\n                }\n                else {\n                    customGroups = this.removeGroupSettings(fieldName.replace('_custom_group', ''), splicedItems, customGroups, fields);\n                }\n            }\n            var orderedGroups = [];\n            for (var _i = 0, _a = Object.keys(customFields); _i < _a.length; _i++) {\n                var field = _a[_i];\n                var fields = customFields[field].map(function (item, pos) { return item.name; });\n                orderedGroups = this.reOrderSettings(customFields[field], fields, orderedGroups, field);\n            }\n            groups[groupOrders[2]] = orderedGroups;\n        }\n        else if ((groupType === 'date' || groupType === 'number') && !newItems) {\n            var groupFields_3 = groupType === 'date' ? groups[groupOrders[0]] : groups[groupOrders[1]];\n            if (groupType === 'date') {\n                groups[groupOrders[0]] = groupFields_3.filter(function (field) { return field.name !== fieldName; });\n            }\n            else {\n                groups[groupOrders[1]] = groupFields_3.filter(function (field) { return field.name !== fieldName; });\n            }\n            this.isUpdate = true;\n        }\n        for (var _b = 0, groupOrders_1 = groupOrders; _b < groupOrders_1.length; _b++) {\n            var order = groupOrders_1[_b];\n            if (groups[order]) {\n                validatedSettings = validatedSettings.concat(groups[order]);\n            }\n        }\n        return validatedSettings;\n    };\n    Grouping.prototype.reOrderSettings = function (customGroups, fields, orderedSettings, fieldName) {\n        var index = fields.indexOf(fieldName);\n        if (index > -1 && customGroups[index].customGroups && customGroups[index].customGroups.length > 0) {\n            orderedSettings.push(customGroups[index]);\n            this.reOrderSettings(customGroups, fields, orderedSettings, fieldName + '_custom_group');\n        }\n        return orderedSettings;\n    };\n    Grouping.prototype.modifyParentGroupItems = function (fieldName, groupFields, splicedItems, newItems, fields) {\n        var index = fields.indexOf(fieldName + '_custom_group');\n        if (index !== -1) {\n            var field = groupFields[index];\n            var selectedOptions = [];\n            if (field.customGroups && field.customGroups.length > 0) {\n                for (var i = 0, len = field.customGroups.length; i < len; i++) {\n                    if (field.customGroups[i]) {\n                        var isItemsUpdated = false;\n                        var group = field.customGroups[i];\n                        if (group.items) {\n                            for (var _i = 0, splicedItems_1 = splicedItems; _i < splicedItems_1.length; _i++) {\n                                var item = splicedItems_1[_i];\n                                var pos = group.items.indexOf(item);\n                                if (pos !== -1) {\n                                    group.items.splice(pos, 1);\n                                    this.isUpdate = true;\n                                    isItemsUpdated = true;\n                                }\n                            }\n                            if (isItemsUpdated) {\n                                group.items = this.mergeArray(group.items, newItems);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return groupFields;\n    };\n    Grouping.prototype.mergeArray = function (collection1, collection2) {\n        var resultArray = [];\n        var array = collection1.concat(collection2);\n        var len = array.length;\n        var assoc = {};\n        while (len--) {\n            var item = String(array[len]);\n            if (!assoc[item]) {\n                resultArray.unshift(item);\n                assoc[item] = true;\n            }\n        }\n        return resultArray;\n    };\n    Grouping.prototype.removeDialog = function () {\n        if (this.parent.grid && this.parent.grid.isDestroyed) {\n            return;\n        }\n        this.parent.grid.clearSelection();\n        if (this.groupDialog && !this.groupDialog.isDestroyed) {\n            this.groupDialog.destroy();\n        }\n        if (this.parentElement && document.getElementById(this.parentElement.id + '_GroupDialog')) {\n            remove(document.getElementById(this.parentElement.id + '_GroupDialog'));\n        }\n    };\n    /**\n     * @hidden\n     */\n    Grouping.prototype.addEventListener = function () {\n        this.handlers = {\n            load: this.render\n        };\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.initGrouping, this.handlers.load, this); //For initial rendering\n    };\n    /**\n     * @hidden\n     */\n    Grouping.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.removeDialog();\n        this.parent.off(events.initGrouping, this.handlers.load);\n    };\n    /**\n     * To destroy the pivot button event listener\n     * @returns {void}\n     * @hidden\n     */\n    Grouping.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Grouping;\n}());\nexport { Grouping };\n"]},"metadata":{},"sourceType":"module"}